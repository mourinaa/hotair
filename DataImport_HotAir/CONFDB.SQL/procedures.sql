
USE [CONFDB]
GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AccessType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccessType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [RetailLDApplicable]'
				SET @SQL = @SQL + ', [WholesaleLDApplicable]'
				SET @SQL = @SQL + ', [Billable]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ' FROM [dbo].[AccessType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [RetailLDApplicable],'
				SET @SQL = @SQL + ' [WholesaleLDApplicable],'
				SET @SQL = @SQL + ' [Billable],'
				SET @SQL = @SQL + ' [Enabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AccessType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AccessType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (100)  ,

	@DisplayName varchar (100)  ,

	@Description varchar (300)  ,

	@Value int   ,

	@RetailLdApplicable bit   ,

	@WholesaleLdApplicable bit   ,

	@Billable bit   ,

	@Enabled bit   
)
AS


					
				INSERT INTO [dbo].[AccessType]
					(
					[Name]
					,[DisplayName]
					,[Description]
					,[Value]
					,[RetailLDApplicable]
					,[WholesaleLDApplicable]
					,[Billable]
					,[Enabled]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@Description
					,@Value
					,@RetailLdApplicable
					,@WholesaleLdApplicable
					,@Billable
					,@Enabled
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AccessType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_Update
(

	@Id int   ,

	@Name varchar (100)  ,

	@DisplayName varchar (100)  ,

	@Description varchar (300)  ,

	@Value int   ,

	@RetailLdApplicable bit   ,

	@WholesaleLdApplicable bit   ,

	@Billable bit   ,

	@Enabled bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AccessType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[Value] = @Value
					,[RetailLDApplicable] = @RetailLdApplicable
					,[WholesaleLDApplicable] = @WholesaleLdApplicable
					,[Billable] = @Billable
					,[Enabled] = @Enabled
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AccessType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[AccessType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_GetByIdNameValue procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_GetByIdNameValue') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_GetByIdNameValue
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_GetByIdNameValue
(

	@Id int   ,

	@Name varchar (100)  ,

	@Value int   
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
				WHERE
					[ID] = @Id
					AND [Name] = @Name
					AND [Value] = @Value
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_GetByValueName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_GetByValueName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_GetByValueName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_GetByValueName
(

	@Value int   ,

	@Name varchar (100)  
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
				WHERE
					[Value] = @Value
					AND [Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_GetByName
(

	@Name varchar (100)  
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[RetailLDApplicable],
					[WholesaleLDApplicable],
					[Billable],
					[Enabled]
				FROM
					[dbo].[AccessType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AccessType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (100)  = null ,

	@DisplayName varchar (100)  = null ,

	@Description varchar (300)  = null ,

	@Value int   = null ,

	@RetailLdApplicable bit   = null ,

	@WholesaleLdApplicable bit   = null ,

	@Billable bit   = null ,

	@Enabled bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
	, [RetailLDApplicable]
	, [WholesaleLDApplicable]
	, [Billable]
	, [Enabled]
    FROM
	[dbo].[AccessType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([RetailLDApplicable] = @RetailLdApplicable OR @RetailLdApplicable IS NULL)
	AND ([WholesaleLDApplicable] = @WholesaleLdApplicable OR @WholesaleLdApplicable IS NULL)
	AND ([Billable] = @Billable OR @Billable IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
	, [RetailLDApplicable]
	, [WholesaleLDApplicable]
	, [Billable]
	, [Enabled]
    FROM
	[dbo].[AccessType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([RetailLDApplicable] = @RetailLdApplicable AND @RetailLdApplicable is not null)
	OR ([WholesaleLDApplicable] = @WholesaleLdApplicable AND @WholesaleLdApplicable is not null)
	OR ([Billable] = @Billable AND @Billable is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Recording table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Recording table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [RecordingStartTime]'
				SET @SQL = @SQL + ', [RecordingEndTime]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [RecordingDirectory]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [ReplayCode]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ProcessFlag]'
				SET @SQL = @SQL + ', [EmailSent]'
				SET @SQL = @SQL + ', [RPFileNumber]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [Mp3Flag]'
				SET @SQL = @SQL + ', [Mp3SizeInKB]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [StorageDuration]'
				SET @SQL = @SQL + ', [BillingDuration]'
				SET @SQL = @SQL + ', [BillingID]'
				SET @SQL = @SQL + ', [DurationSec]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [MediaType]'
				SET @SQL = @SQL + ', [HostedLinkExpiryDate]'
				SET @SQL = @SQL + ', [HostedLinkType]'
				SET @SQL = @SQL + ', [HostedLinkURL]'
				SET @SQL = @SQL + ', [ExtendRecordingDate]'
				SET @SQL = @SQL + ', [RecordingGuid]'
				SET @SQL = @SQL + ' FROM [dbo].[Recording]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [RecordingStartTime],'
				SET @SQL = @SQL + ' [RecordingEndTime],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [RecordingDirectory],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [ReplayCode],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ProcessFlag],'
				SET @SQL = @SQL + ' [EmailSent],'
				SET @SQL = @SQL + ' [RPFileNumber],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [Mp3Flag],'
				SET @SQL = @SQL + ' [Mp3SizeInKB],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [StorageDuration],'
				SET @SQL = @SQL + ' [BillingDuration],'
				SET @SQL = @SQL + ' [BillingID],'
				SET @SQL = @SQL + ' [DurationSec],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [MediaType],'
				SET @SQL = @SQL + ' [HostedLinkExpiryDate],'
				SET @SQL = @SQL + ' [HostedLinkType],'
				SET @SQL = @SQL + ' [HostedLinkURL],'
				SET @SQL = @SQL + ' [ExtendRecordingDate],'
				SET @SQL = @SQL + ' [RecordingGuid]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Recording]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Recording table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@BridgeId int   ,

	@RecordingStartTime datetime   ,

	@RecordingEndTime datetime   ,

	@ModeratorCode varchar (16)  ,

	@PassCode varchar (16)  ,

	@PriCustomerNumber varchar (20)  ,

	@SecCustomerNumber varchar (6)  ,

	@RecordingDirectory varchar (100)  ,

	@UniqueConferenceId varchar (40)  ,

	@ReplayCode varchar (20)  ,

	@CreatedDate datetime   ,

	@ProcessFlag char (1)  ,

	@EmailSent bit   ,

	@RpFileNumber varchar (50)  ,

	@ModeratorId int   ,

	@Notes varchar (100)  ,

	@Mp3Flag char (1)  ,

	@Mp3SizeInKb int   ,

	@Enabled bit   ,

	@StorageDuration smallint   ,

	@BillingDuration smallint   ,

	@BillingId varchar (50)  ,

	@DurationSec int   ,

	@AuxiliaryConferenceId varchar (40)  ,

	@MediaType varchar (20)  ,

	@HostedLinkExpiryDate datetime   ,

	@HostedLinkType char (1)  ,

	@HostedLinkUrl varchar (500)  ,

	@ExtendRecordingDate datetime   ,

	@RecordingGuid varchar (40)  
)
AS


					
				INSERT INTO [dbo].[Recording]
					(
					[WholesalerID]
					,[BridgeID]
					,[RecordingStartTime]
					,[RecordingEndTime]
					,[ModeratorCode]
					,[PassCode]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[RecordingDirectory]
					,[UniqueConferenceID]
					,[ReplayCode]
					,[CreatedDate]
					,[ProcessFlag]
					,[EmailSent]
					,[RPFileNumber]
					,[ModeratorID]
					,[Notes]
					,[Mp3Flag]
					,[Mp3SizeInKB]
					,[Enabled]
					,[StorageDuration]
					,[BillingDuration]
					,[BillingID]
					,[DurationSec]
					,[AuxiliaryConferenceID]
					,[MediaType]
					,[HostedLinkExpiryDate]
					,[HostedLinkType]
					,[HostedLinkURL]
					,[ExtendRecordingDate]
					,[RecordingGuid]
					)
				VALUES
					(
					@WholesalerId
					,@BridgeId
					,@RecordingStartTime
					,@RecordingEndTime
					,@ModeratorCode
					,@PassCode
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@RecordingDirectory
					,@UniqueConferenceId
					,@ReplayCode
					,@CreatedDate
					,@ProcessFlag
					,@EmailSent
					,@RpFileNumber
					,@ModeratorId
					,@Notes
					,@Mp3Flag
					,@Mp3SizeInKb
					,@Enabled
					,@StorageDuration
					,@BillingDuration
					,@BillingId
					,@DurationSec
					,@AuxiliaryConferenceId
					,@MediaType
					,@HostedLinkExpiryDate
					,@HostedLinkType
					,@HostedLinkUrl
					,@ExtendRecordingDate
					,@RecordingGuid
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Recording table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@BridgeId int   ,

	@RecordingStartTime datetime   ,

	@RecordingEndTime datetime   ,

	@ModeratorCode varchar (16)  ,

	@PassCode varchar (16)  ,

	@PriCustomerNumber varchar (20)  ,

	@SecCustomerNumber varchar (6)  ,

	@RecordingDirectory varchar (100)  ,

	@UniqueConferenceId varchar (40)  ,

	@ReplayCode varchar (20)  ,

	@CreatedDate datetime   ,

	@ProcessFlag char (1)  ,

	@EmailSent bit   ,

	@RpFileNumber varchar (50)  ,

	@ModeratorId int   ,

	@Notes varchar (100)  ,

	@Mp3Flag char (1)  ,

	@Mp3SizeInKb int   ,

	@Enabled bit   ,

	@StorageDuration smallint   ,

	@BillingDuration smallint   ,

	@BillingId varchar (50)  ,

	@DurationSec int   ,

	@AuxiliaryConferenceId varchar (40)  ,

	@MediaType varchar (20)  ,

	@HostedLinkExpiryDate datetime   ,

	@HostedLinkType char (1)  ,

	@HostedLinkUrl varchar (500)  ,

	@ExtendRecordingDate datetime   ,

	@RecordingGuid varchar (40)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Recording]
				SET
					[WholesalerID] = @WholesalerId
					,[BridgeID] = @BridgeId
					,[RecordingStartTime] = @RecordingStartTime
					,[RecordingEndTime] = @RecordingEndTime
					,[ModeratorCode] = @ModeratorCode
					,[PassCode] = @PassCode
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[RecordingDirectory] = @RecordingDirectory
					,[UniqueConferenceID] = @UniqueConferenceId
					,[ReplayCode] = @ReplayCode
					,[CreatedDate] = @CreatedDate
					,[ProcessFlag] = @ProcessFlag
					,[EmailSent] = @EmailSent
					,[RPFileNumber] = @RpFileNumber
					,[ModeratorID] = @ModeratorId
					,[Notes] = @Notes
					,[Mp3Flag] = @Mp3Flag
					,[Mp3SizeInKB] = @Mp3SizeInKb
					,[Enabled] = @Enabled
					,[StorageDuration] = @StorageDuration
					,[BillingDuration] = @BillingDuration
					,[BillingID] = @BillingId
					,[DurationSec] = @DurationSec
					,[AuxiliaryConferenceID] = @AuxiliaryConferenceId
					,[MediaType] = @MediaType
					,[HostedLinkExpiryDate] = @HostedLinkExpiryDate
					,[HostedLinkType] = @HostedLinkType
					,[HostedLinkURL] = @HostedLinkUrl
					,[ExtendRecordingDate] = @ExtendRecordingDate
					,[RecordingGuid] = @RecordingGuid
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Recording table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Recording] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Recording table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Recording table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_GetByReplayCode procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_GetByReplayCode') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_GetByReplayCode
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Recording table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_GetByReplayCode
(

	@ReplayCode varchar (20)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
				WHERE
					[ReplayCode] = @ReplayCode
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_GetByRecordingGuid procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_GetByRecordingGuid') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_GetByRecordingGuid
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Recording table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_GetByRecordingGuid
(

	@RecordingGuid varchar (40)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[HostedLinkType],
					[HostedLinkURL],
					[ExtendRecordingDate],
					[RecordingGuid]
				FROM
					[dbo].[Recording]
				WHERE
					[RecordingGuid] = @RecordingGuid
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecording_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecording_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecording_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Recording table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecording_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@BridgeId int   = null ,

	@RecordingStartTime datetime   = null ,

	@RecordingEndTime datetime   = null ,

	@ModeratorCode varchar (16)  = null ,

	@PassCode varchar (16)  = null ,

	@PriCustomerNumber varchar (20)  = null ,

	@SecCustomerNumber varchar (6)  = null ,

	@RecordingDirectory varchar (100)  = null ,

	@UniqueConferenceId varchar (40)  = null ,

	@ReplayCode varchar (20)  = null ,

	@CreatedDate datetime   = null ,

	@ProcessFlag char (1)  = null ,

	@EmailSent bit   = null ,

	@RpFileNumber varchar (50)  = null ,

	@ModeratorId int   = null ,

	@Notes varchar (100)  = null ,

	@Mp3Flag char (1)  = null ,

	@Mp3SizeInKb int   = null ,

	@Enabled bit   = null ,

	@StorageDuration smallint   = null ,

	@BillingDuration smallint   = null ,

	@BillingId varchar (50)  = null ,

	@DurationSec int   = null ,

	@AuxiliaryConferenceId varchar (40)  = null ,

	@MediaType varchar (20)  = null ,

	@HostedLinkExpiryDate datetime   = null ,

	@HostedLinkType char (1)  = null ,

	@HostedLinkUrl varchar (500)  = null ,

	@ExtendRecordingDate datetime   = null ,

	@RecordingGuid varchar (40)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [BridgeID]
	, [RecordingStartTime]
	, [RecordingEndTime]
	, [ModeratorCode]
	, [PassCode]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [RecordingDirectory]
	, [UniqueConferenceID]
	, [ReplayCode]
	, [CreatedDate]
	, [ProcessFlag]
	, [EmailSent]
	, [RPFileNumber]
	, [ModeratorID]
	, [Notes]
	, [Mp3Flag]
	, [Mp3SizeInKB]
	, [Enabled]
	, [StorageDuration]
	, [BillingDuration]
	, [BillingID]
	, [DurationSec]
	, [AuxiliaryConferenceID]
	, [MediaType]
	, [HostedLinkExpiryDate]
	, [HostedLinkType]
	, [HostedLinkURL]
	, [ExtendRecordingDate]
	, [RecordingGuid]
    FROM
	[dbo].[Recording]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([BridgeID] = @BridgeId OR @BridgeId IS NULL)
	AND ([RecordingStartTime] = @RecordingStartTime OR @RecordingStartTime IS NULL)
	AND ([RecordingEndTime] = @RecordingEndTime OR @RecordingEndTime IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([PassCode] = @PassCode OR @PassCode IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([RecordingDirectory] = @RecordingDirectory OR @RecordingDirectory IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([ReplayCode] = @ReplayCode OR @ReplayCode IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([ProcessFlag] = @ProcessFlag OR @ProcessFlag IS NULL)
	AND ([EmailSent] = @EmailSent OR @EmailSent IS NULL)
	AND ([RPFileNumber] = @RpFileNumber OR @RpFileNumber IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([Mp3Flag] = @Mp3Flag OR @Mp3Flag IS NULL)
	AND ([Mp3SizeInKB] = @Mp3SizeInKb OR @Mp3SizeInKb IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([StorageDuration] = @StorageDuration OR @StorageDuration IS NULL)
	AND ([BillingDuration] = @BillingDuration OR @BillingDuration IS NULL)
	AND ([BillingID] = @BillingId OR @BillingId IS NULL)
	AND ([DurationSec] = @DurationSec OR @DurationSec IS NULL)
	AND ([AuxiliaryConferenceID] = @AuxiliaryConferenceId OR @AuxiliaryConferenceId IS NULL)
	AND ([MediaType] = @MediaType OR @MediaType IS NULL)
	AND ([HostedLinkExpiryDate] = @HostedLinkExpiryDate OR @HostedLinkExpiryDate IS NULL)
	AND ([HostedLinkType] = @HostedLinkType OR @HostedLinkType IS NULL)
	AND ([HostedLinkURL] = @HostedLinkUrl OR @HostedLinkUrl IS NULL)
	AND ([ExtendRecordingDate] = @ExtendRecordingDate OR @ExtendRecordingDate IS NULL)
	AND ([RecordingGuid] = @RecordingGuid OR @RecordingGuid IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [BridgeID]
	, [RecordingStartTime]
	, [RecordingEndTime]
	, [ModeratorCode]
	, [PassCode]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [RecordingDirectory]
	, [UniqueConferenceID]
	, [ReplayCode]
	, [CreatedDate]
	, [ProcessFlag]
	, [EmailSent]
	, [RPFileNumber]
	, [ModeratorID]
	, [Notes]
	, [Mp3Flag]
	, [Mp3SizeInKB]
	, [Enabled]
	, [StorageDuration]
	, [BillingDuration]
	, [BillingID]
	, [DurationSec]
	, [AuxiliaryConferenceID]
	, [MediaType]
	, [HostedLinkExpiryDate]
	, [HostedLinkType]
	, [HostedLinkURL]
	, [ExtendRecordingDate]
	, [RecordingGuid]
    FROM
	[dbo].[Recording]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([BridgeID] = @BridgeId AND @BridgeId is not null)
	OR ([RecordingStartTime] = @RecordingStartTime AND @RecordingStartTime is not null)
	OR ([RecordingEndTime] = @RecordingEndTime AND @RecordingEndTime is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([PassCode] = @PassCode AND @PassCode is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([RecordingDirectory] = @RecordingDirectory AND @RecordingDirectory is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([ReplayCode] = @ReplayCode AND @ReplayCode is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([ProcessFlag] = @ProcessFlag AND @ProcessFlag is not null)
	OR ([EmailSent] = @EmailSent AND @EmailSent is not null)
	OR ([RPFileNumber] = @RpFileNumber AND @RpFileNumber is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([Mp3Flag] = @Mp3Flag AND @Mp3Flag is not null)
	OR ([Mp3SizeInKB] = @Mp3SizeInKb AND @Mp3SizeInKb is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([StorageDuration] = @StorageDuration AND @StorageDuration is not null)
	OR ([BillingDuration] = @BillingDuration AND @BillingDuration is not null)
	OR ([BillingID] = @BillingId AND @BillingId is not null)
	OR ([DurationSec] = @DurationSec AND @DurationSec is not null)
	OR ([AuxiliaryConferenceID] = @AuxiliaryConferenceId AND @AuxiliaryConferenceId is not null)
	OR ([MediaType] = @MediaType AND @MediaType is not null)
	OR ([HostedLinkExpiryDate] = @HostedLinkExpiryDate AND @HostedLinkExpiryDate is not null)
	OR ([HostedLinkType] = @HostedLinkType AND @HostedLinkType is not null)
	OR ([HostedLinkURL] = @HostedLinkUrl AND @HostedLinkUrl is not null)
	OR ([ExtendRecordingDate] = @ExtendRecordingDate AND @ExtendRecordingDate is not null)
	OR ([RecordingGuid] = @RecordingGuid AND @RecordingGuid is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecordingParticipantUsage_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecordingParticipantUsage_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecordingParticipantUsage_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the RecordingParticipantUsage table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecordingParticipantUsage_Get_List

AS


				
				SELECT
					[ID],
					[RecordingID],
					[ParticipantName],
					[ParticipantCompanyName],
					[ParticipantEmail],
					[DownloadDate]
				FROM
					[dbo].[RecordingParticipantUsage]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecordingParticipantUsage_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecordingParticipantUsage_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecordingParticipantUsage_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RecordingParticipantUsage table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecordingParticipantUsage_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [RecordingID]'
				SET @SQL = @SQL + ', [ParticipantName]'
				SET @SQL = @SQL + ', [ParticipantCompanyName]'
				SET @SQL = @SQL + ', [ParticipantEmail]'
				SET @SQL = @SQL + ', [DownloadDate]'
				SET @SQL = @SQL + ' FROM [dbo].[RecordingParticipantUsage]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [RecordingID],'
				SET @SQL = @SQL + ' [ParticipantName],'
				SET @SQL = @SQL + ' [ParticipantCompanyName],'
				SET @SQL = @SQL + ' [ParticipantEmail],'
				SET @SQL = @SQL + ' [DownloadDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[RecordingParticipantUsage]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecordingParticipantUsage_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecordingParticipantUsage_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecordingParticipantUsage_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the RecordingParticipantUsage table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecordingParticipantUsage_Insert
(

	@Id int    OUTPUT,

	@RecordingId int   ,

	@ParticipantName nvarchar (100)  ,

	@ParticipantCompanyName nvarchar (100)  ,

	@ParticipantEmail nvarchar (50)  ,

	@DownloadDate datetime   
)
AS


					
				INSERT INTO [dbo].[RecordingParticipantUsage]
					(
					[RecordingID]
					,[ParticipantName]
					,[ParticipantCompanyName]
					,[ParticipantEmail]
					,[DownloadDate]
					)
				VALUES
					(
					@RecordingId
					,@ParticipantName
					,@ParticipantCompanyName
					,@ParticipantEmail
					,@DownloadDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecordingParticipantUsage_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecordingParticipantUsage_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecordingParticipantUsage_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the RecordingParticipantUsage table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecordingParticipantUsage_Update
(

	@Id int   ,

	@RecordingId int   ,

	@ParticipantName nvarchar (100)  ,

	@ParticipantCompanyName nvarchar (100)  ,

	@ParticipantEmail nvarchar (50)  ,

	@DownloadDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[RecordingParticipantUsage]
				SET
					[RecordingID] = @RecordingId
					,[ParticipantName] = @ParticipantName
					,[ParticipantCompanyName] = @ParticipantCompanyName
					,[ParticipantEmail] = @ParticipantEmail
					,[DownloadDate] = @DownloadDate
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecordingParticipantUsage_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecordingParticipantUsage_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecordingParticipantUsage_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the RecordingParticipantUsage table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecordingParticipantUsage_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[RecordingParticipantUsage] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecordingParticipantUsage_GetByRecordingId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecordingParticipantUsage_GetByRecordingId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecordingParticipantUsage_GetByRecordingId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RecordingParticipantUsage table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecordingParticipantUsage_GetByRecordingId
(

	@RecordingId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[RecordingID],
					[ParticipantName],
					[ParticipantCompanyName],
					[ParticipantEmail],
					[DownloadDate]
				FROM
					[dbo].[RecordingParticipantUsage]
				WHERE
					[RecordingID] = @RecordingId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecordingParticipantUsage_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecordingParticipantUsage_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecordingParticipantUsage_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RecordingParticipantUsage table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecordingParticipantUsage_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[RecordingID],
					[ParticipantName],
					[ParticipantCompanyName],
					[ParticipantEmail],
					[DownloadDate]
				FROM
					[dbo].[RecordingParticipantUsage]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRecordingParticipantUsage_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRecordingParticipantUsage_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRecordingParticipantUsage_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the RecordingParticipantUsage table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRecordingParticipantUsage_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@RecordingId int   = null ,

	@ParticipantName nvarchar (100)  = null ,

	@ParticipantCompanyName nvarchar (100)  = null ,

	@ParticipantEmail nvarchar (50)  = null ,

	@DownloadDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [RecordingID]
	, [ParticipantName]
	, [ParticipantCompanyName]
	, [ParticipantEmail]
	, [DownloadDate]
    FROM
	[dbo].[RecordingParticipantUsage]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([RecordingID] = @RecordingId OR @RecordingId IS NULL)
	AND ([ParticipantName] = @ParticipantName OR @ParticipantName IS NULL)
	AND ([ParticipantCompanyName] = @ParticipantCompanyName OR @ParticipantCompanyName IS NULL)
	AND ([ParticipantEmail] = @ParticipantEmail OR @ParticipantEmail IS NULL)
	AND ([DownloadDate] = @DownloadDate OR @DownloadDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [RecordingID]
	, [ParticipantName]
	, [ParticipantCompanyName]
	, [ParticipantEmail]
	, [DownloadDate]
    FROM
	[dbo].[RecordingParticipantUsage]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([RecordingID] = @RecordingId AND @RecordingId is not null)
	OR ([ParticipantName] = @ParticipantName AND @ParticipantName is not null)
	OR ([ParticipantCompanyName] = @ParticipantCompanyName AND @ParticipantCompanyName is not null)
	OR ([ParticipantEmail] = @ParticipantEmail AND @ParticipantEmail is not null)
	OR ([DownloadDate] = @DownloadDate AND @DownloadDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatingType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatingType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatingType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the RatingType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatingType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[DisplayName]
				FROM
					[dbo].[RatingType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatingType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatingType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatingType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RatingType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatingType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ' FROM [dbo].[RatingType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[RatingType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatingType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatingType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatingType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the RatingType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatingType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  
)
AS


					
				INSERT INTO [dbo].[RatingType]
					(
					[Name]
					,[DisplayName]
					)
				VALUES
					(
					@Name
					,@DisplayName
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatingType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatingType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatingType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the RatingType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatingType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[RatingType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatingType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatingType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatingType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the RatingType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatingType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[RatingType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatingType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatingType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatingType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatingType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatingType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName]
				FROM
					[dbo].[RatingType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatingType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatingType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatingType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the RatingType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatingType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
    FROM
	[dbo].[RatingType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
    FROM
	[dbo].[RatingType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPromptSet_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPromptSet_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPromptSet_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the PromptSet table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPromptSet_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[PromptSet]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPromptSet_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPromptSet_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPromptSet_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the PromptSet table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPromptSet_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[PromptSet]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[PromptSet]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPromptSet_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPromptSet_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPromptSet_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the PromptSet table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPromptSet_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (100)  
)
AS


					
				INSERT INTO [dbo].[PromptSet]
					(
					[Name]
					,[Description]
					)
				VALUES
					(
					@Name
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPromptSet_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPromptSet_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPromptSet_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the PromptSet table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPromptSet_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[PromptSet]
				SET
					[Name] = @Name
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPromptSet_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPromptSet_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPromptSet_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the PromptSet table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPromptSet_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[PromptSet] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPromptSet_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPromptSet_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPromptSet_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the PromptSet table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPromptSet_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[PromptSet]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPromptSet_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPromptSet_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPromptSet_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the PromptSet table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPromptSet_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[PromptSet]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[PromptSet]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRole_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRole_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRole_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Role table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRole_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[UserLevel]
				FROM
					[dbo].[Role]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRole_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRole_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRole_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Role table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRole_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [UserLevel]'
				SET @SQL = @SQL + ' FROM [dbo].[Role]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [UserLevel]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Role]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRole_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRole_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRole_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Role table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRole_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@UserLevel int   
)
AS


					
				INSERT INTO [dbo].[Role]
					(
					[Name]
					,[UserLevel]
					)
				VALUES
					(
					@Name
					,@UserLevel
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRole_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRole_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRole_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Role table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRole_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@UserLevel int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Role]
				SET
					[Name] = @Name
					,[UserLevel] = @UserLevel
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRole_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRole_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRole_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Role table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRole_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Role] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRole_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRole_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRole_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Role table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRole_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[UserLevel]
				FROM
					[dbo].[Role]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRole_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRole_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRole_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Role table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRole_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@UserLevel int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [UserLevel]
    FROM
	[dbo].[Role]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([UserLevel] = @UserLevel OR @UserLevel IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [UserLevel]
    FROM
	[dbo].[Role]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([UserLevel] = @UserLevel AND @UserLevel is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSeeVoghMeetingTracker_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSeeVoghMeetingTracker_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSeeVoghMeetingTracker_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SeeVoghMeetingTracker table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSeeVoghMeetingTracker_Get_List

AS


				
				SELECT
					[ID],
					[MeetingID],
					[Status],
					[ModeratorID],
					[ModeratorCode],
					[ModeratorJoined],
					[MeetingURL],
					[MobileMeetingURL],
					[CreatedDate],
					[LastModified],
					[Notes],
					[CreatedDateUTC]
				FROM
					[dbo].[SeeVoghMeetingTracker]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSeeVoghMeetingTracker_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSeeVoghMeetingTracker_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSeeVoghMeetingTracker_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SeeVoghMeetingTracker table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSeeVoghMeetingTracker_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [MeetingID]'
				SET @SQL = @SQL + ', [Status]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [ModeratorJoined]'
				SET @SQL = @SQL + ', [MeetingURL]'
				SET @SQL = @SQL + ', [MobileMeetingURL]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [CreatedDateUTC]'
				SET @SQL = @SQL + ' FROM [dbo].[SeeVoghMeetingTracker]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [MeetingID],'
				SET @SQL = @SQL + ' [Status],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [ModeratorJoined],'
				SET @SQL = @SQL + ' [MeetingURL],'
				SET @SQL = @SQL + ' [MobileMeetingURL],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [CreatedDateUTC]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SeeVoghMeetingTracker]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSeeVoghMeetingTracker_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSeeVoghMeetingTracker_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSeeVoghMeetingTracker_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SeeVoghMeetingTracker table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSeeVoghMeetingTracker_Insert
(

	@Id int    OUTPUT,

	@MeetingId varchar (50)  ,

	@Status varchar (50)  ,

	@ModeratorId int   ,

	@ModeratorCode varchar (20)  ,

	@ModeratorJoined bit   ,

	@MeetingUrl nvarchar (250)  ,

	@MobileMeetingUrl nvarchar (250)  ,

	@CreatedDate datetime   ,

	@LastModified datetime   ,

	@Notes varchar (2000)  ,

	@CreatedDateUtc datetime   
)
AS


					
				INSERT INTO [dbo].[SeeVoghMeetingTracker]
					(
					[MeetingID]
					,[Status]
					,[ModeratorID]
					,[ModeratorCode]
					,[ModeratorJoined]
					,[MeetingURL]
					,[MobileMeetingURL]
					,[CreatedDate]
					,[LastModified]
					,[Notes]
					,[CreatedDateUTC]
					)
				VALUES
					(
					@MeetingId
					,@Status
					,@ModeratorId
					,@ModeratorCode
					,@ModeratorJoined
					,@MeetingUrl
					,@MobileMeetingUrl
					,@CreatedDate
					,@LastModified
					,@Notes
					,@CreatedDateUtc
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSeeVoghMeetingTracker_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSeeVoghMeetingTracker_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSeeVoghMeetingTracker_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SeeVoghMeetingTracker table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSeeVoghMeetingTracker_Update
(

	@Id int   ,

	@MeetingId varchar (50)  ,

	@Status varchar (50)  ,

	@ModeratorId int   ,

	@ModeratorCode varchar (20)  ,

	@ModeratorJoined bit   ,

	@MeetingUrl nvarchar (250)  ,

	@MobileMeetingUrl nvarchar (250)  ,

	@CreatedDate datetime   ,

	@LastModified datetime   ,

	@Notes varchar (2000)  ,

	@CreatedDateUtc datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SeeVoghMeetingTracker]
				SET
					[MeetingID] = @MeetingId
					,[Status] = @Status
					,[ModeratorID] = @ModeratorId
					,[ModeratorCode] = @ModeratorCode
					,[ModeratorJoined] = @ModeratorJoined
					,[MeetingURL] = @MeetingUrl
					,[MobileMeetingURL] = @MobileMeetingUrl
					,[CreatedDate] = @CreatedDate
					,[LastModified] = @LastModified
					,[Notes] = @Notes
					,[CreatedDateUTC] = @CreatedDateUtc
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSeeVoghMeetingTracker_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSeeVoghMeetingTracker_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSeeVoghMeetingTracker_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SeeVoghMeetingTracker table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSeeVoghMeetingTracker_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[SeeVoghMeetingTracker] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSeeVoghMeetingTracker_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSeeVoghMeetingTracker_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSeeVoghMeetingTracker_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SeeVoghMeetingTracker table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSeeVoghMeetingTracker_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[MeetingID],
					[Status],
					[ModeratorID],
					[ModeratorCode],
					[ModeratorJoined],
					[MeetingURL],
					[MobileMeetingURL],
					[CreatedDate],
					[LastModified],
					[Notes],
					[CreatedDateUTC]
				FROM
					[dbo].[SeeVoghMeetingTracker]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSeeVoghMeetingTracker_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSeeVoghMeetingTracker_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSeeVoghMeetingTracker_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SeeVoghMeetingTracker table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSeeVoghMeetingTracker_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@MeetingId varchar (50)  = null ,

	@Status varchar (50)  = null ,

	@ModeratorId int   = null ,

	@ModeratorCode varchar (20)  = null ,

	@ModeratorJoined bit   = null ,

	@MeetingUrl nvarchar (250)  = null ,

	@MobileMeetingUrl nvarchar (250)  = null ,

	@CreatedDate datetime   = null ,

	@LastModified datetime   = null ,

	@Notes varchar (2000)  = null ,

	@CreatedDateUtc datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [MeetingID]
	, [Status]
	, [ModeratorID]
	, [ModeratorCode]
	, [ModeratorJoined]
	, [MeetingURL]
	, [MobileMeetingURL]
	, [CreatedDate]
	, [LastModified]
	, [Notes]
	, [CreatedDateUTC]
    FROM
	[dbo].[SeeVoghMeetingTracker]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([MeetingID] = @MeetingId OR @MeetingId IS NULL)
	AND ([Status] = @Status OR @Status IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([ModeratorJoined] = @ModeratorJoined OR @ModeratorJoined IS NULL)
	AND ([MeetingURL] = @MeetingUrl OR @MeetingUrl IS NULL)
	AND ([MobileMeetingURL] = @MobileMeetingUrl OR @MobileMeetingUrl IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([CreatedDateUTC] = @CreatedDateUtc OR @CreatedDateUtc IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [MeetingID]
	, [Status]
	, [ModeratorID]
	, [ModeratorCode]
	, [ModeratorJoined]
	, [MeetingURL]
	, [MobileMeetingURL]
	, [CreatedDate]
	, [LastModified]
	, [Notes]
	, [CreatedDateUTC]
    FROM
	[dbo].[SeeVoghMeetingTracker]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([MeetingID] = @MeetingId AND @MeetingId is not null)
	OR ([Status] = @Status AND @Status is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([ModeratorJoined] = @ModeratorJoined AND @ModeratorJoined is not null)
	OR ([MeetingURL] = @MeetingUrl AND @MeetingUrl is not null)
	OR ([MobileMeetingURL] = @MobileMeetingUrl AND @MobileMeetingUrl is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([CreatedDateUTC] = @CreatedDateUtc AND @CreatedDateUtc is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCountry_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCountry_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCountry_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Country table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCountry_Get_List

AS


				
				SELECT
					[ID],
					[Description],
					[CountryDialingCode],
					[CountryAreaCode],
					[DisplayOrder]
				FROM
					[dbo].[Country]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCountry_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCountry_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCountry_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Country table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCountry_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [CountryDialingCode]'
				SET @SQL = @SQL + ', [CountryAreaCode]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Country]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [CountryDialingCode],'
				SET @SQL = @SQL + ' [CountryAreaCode],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Country]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCountry_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCountry_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCountry_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Country table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCountry_Insert
(

	@Id varchar (3)  ,

	@Description nvarchar (100)  ,

	@CountryDialingCode varchar (3)  ,

	@CountryAreaCode varchar (3)  ,

	@DisplayOrder int   
)
AS


					
				INSERT INTO [dbo].[Country]
					(
					[ID]
					,[Description]
					,[CountryDialingCode]
					,[CountryAreaCode]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Description
					,@CountryDialingCode
					,@CountryAreaCode
					,@DisplayOrder
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCountry_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCountry_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCountry_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Country table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCountry_Update
(

	@Id varchar (3)  ,

	@OriginalId varchar (3)  ,

	@Description nvarchar (100)  ,

	@CountryDialingCode varchar (3)  ,

	@CountryAreaCode varchar (3)  ,

	@DisplayOrder int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Country]
				SET
					[ID] = @Id
					,[Description] = @Description
					,[CountryDialingCode] = @CountryDialingCode
					,[CountryAreaCode] = @CountryAreaCode
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCountry_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCountry_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCountry_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Country table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCountry_Delete
(

	@Id varchar (3)  
)
AS


				DELETE FROM [dbo].[Country] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCountry_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCountry_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCountry_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Country table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCountry_GetById
(

	@Id varchar (3)  
)
AS


				SELECT
					[ID],
					[Description],
					[CountryDialingCode],
					[CountryAreaCode],
					[DisplayOrder]
				FROM
					[dbo].[Country]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCountry_GetByCountryAreaCode procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCountry_GetByCountryAreaCode') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCountry_GetByCountryAreaCode
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Country table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCountry_GetByCountryAreaCode
(

	@CountryAreaCode varchar (3)  
)
AS


				SELECT
					[ID],
					[Description],
					[CountryDialingCode],
					[CountryAreaCode],
					[DisplayOrder]
				FROM
					[dbo].[Country]
				WHERE
					[CountryAreaCode] = @CountryAreaCode
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCountry_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCountry_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCountry_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Country table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCountry_Find
(

	@SearchUsingOR bit   = null ,

	@Id varchar (3)  = null ,

	@Description nvarchar (100)  = null ,

	@CountryDialingCode varchar (3)  = null ,

	@CountryAreaCode varchar (3)  = null ,

	@DisplayOrder int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Description]
	, [CountryDialingCode]
	, [CountryAreaCode]
	, [DisplayOrder]
    FROM
	[dbo].[Country]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([CountryDialingCode] = @CountryDialingCode OR @CountryDialingCode IS NULL)
	AND ([CountryAreaCode] = @CountryAreaCode OR @CountryAreaCode IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Description]
	, [CountryDialingCode]
	, [CountryAreaCode]
	, [DisplayOrder]
    FROM
	[dbo].[Country]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([CountryDialingCode] = @CountryDialingCode AND @CountryDialingCode is not null)
	OR ([CountryAreaCode] = @CountryAreaCode AND @CountryAreaCode is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurrency_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurrency_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurrency_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Currency table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurrency_Get_List

AS


				
				SELECT
					[ID],
					[LongName],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[Currency]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurrency_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurrency_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurrency_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Currency table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurrency_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [LongName]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Currency]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [LongName],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Currency]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurrency_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurrency_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurrency_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Currency table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurrency_Insert
(

	@Id char (3)  ,

	@LongName varchar (30)  ,

	@Enabled bit   ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[Currency]
					(
					[ID]
					,[LongName]
					,[Enabled]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@LongName
					,@Enabled
					,@DisplayOrder
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurrency_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurrency_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurrency_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Currency table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurrency_Update
(

	@Id char (3)  ,

	@OriginalId char (3)  ,

	@LongName varchar (30)  ,

	@Enabled bit   ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Currency]
				SET
					[ID] = @Id
					,[LongName] = @LongName
					,[Enabled] = @Enabled
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurrency_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurrency_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurrency_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Currency table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurrency_Delete
(

	@Id char (3)  
)
AS


				DELETE FROM [dbo].[Currency] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurrency_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurrency_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurrency_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Currency table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurrency_GetById
(

	@Id char (3)  
)
AS


				SELECT
					[ID],
					[LongName],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[Currency]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurrency_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurrency_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurrency_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Currency table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurrency_Find
(

	@SearchUsingOR bit   = null ,

	@Id char (3)  = null ,

	@LongName varchar (30)  = null ,

	@Enabled bit   = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [LongName]
	, [Enabled]
	, [DisplayOrder]
    FROM
	[dbo].[Currency]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([LongName] = @LongName OR @LongName IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [LongName]
	, [Enabled]
	, [DisplayOrder]
    FROM
	[dbo].[Currency]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([LongName] = @LongName AND @LongName is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SystemExtension table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_Get_List

AS


				
				SELECT
					[id],
					[TableID],
					[ReferenceValue],
					[SystemExtensionLabelID]
				FROM
					[dbo].[SystemExtension]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemExtension table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [TableID]'
				SET @SQL = @SQL + ', [ReferenceValue]'
				SET @SQL = @SQL + ', [SystemExtensionLabelID]'
				SET @SQL = @SQL + ' FROM [dbo].[SystemExtension]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [TableID],'
				SET @SQL = @SQL + ' [ReferenceValue],'
				SET @SQL = @SQL + ' [SystemExtensionLabelID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SystemExtension]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SystemExtension table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_Insert
(

	@Id int    OUTPUT,

	@TableId int   ,

	@ReferenceValue varchar (50)  ,

	@SystemExtensionLabelId int   
)
AS


					
				INSERT INTO [dbo].[SystemExtension]
					(
					[TableID]
					,[ReferenceValue]
					,[SystemExtensionLabelID]
					)
				VALUES
					(
					@TableId
					,@ReferenceValue
					,@SystemExtensionLabelId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SystemExtension table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_Update
(

	@Id int   ,

	@TableId int   ,

	@ReferenceValue varchar (50)  ,

	@SystemExtensionLabelId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SystemExtension]
				SET
					[TableID] = @TableId
					,[ReferenceValue] = @ReferenceValue
					,[SystemExtensionLabelID] = @SystemExtensionLabelId
				WHERE
[id] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SystemExtension table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[SystemExtension] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_GetBySystemExtensionLabelId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_GetBySystemExtensionLabelId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_GetBySystemExtensionLabelId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtension table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_GetBySystemExtensionLabelId
(

	@SystemExtensionLabelId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[id],
					[TableID],
					[ReferenceValue],
					[SystemExtensionLabelID]
				FROM
					[dbo].[SystemExtension]
				WHERE
					[SystemExtensionLabelID] = @SystemExtensionLabelId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtension table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_GetById
(

	@Id int   
)
AS


				SELECT
					[id],
					[TableID],
					[ReferenceValue],
					[SystemExtensionLabelID]
				FROM
					[dbo].[SystemExtension]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_GetBySystemExtensionLabelIdTableId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_GetBySystemExtensionLabelIdTableId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_GetBySystemExtensionLabelIdTableId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtension table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_GetBySystemExtensionLabelIdTableId
(

	@SystemExtensionLabelId int   ,

	@TableId int   
)
AS


				SELECT
					[id],
					[TableID],
					[ReferenceValue],
					[SystemExtensionLabelID]
				FROM
					[dbo].[SystemExtension]
				WHERE
					[SystemExtensionLabelID] = @SystemExtensionLabelId
					AND [TableID] = @TableId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtension_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtension_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtension_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SystemExtension table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtension_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@TableId int   = null ,

	@ReferenceValue varchar (50)  = null ,

	@SystemExtensionLabelId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [TableID]
	, [ReferenceValue]
	, [SystemExtensionLabelID]
    FROM
	[dbo].[SystemExtension]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([TableID] = @TableId OR @TableId IS NULL)
	AND ([ReferenceValue] = @ReferenceValue OR @ReferenceValue IS NULL)
	AND ([SystemExtensionLabelID] = @SystemExtensionLabelId OR @SystemExtensionLabelId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [TableID]
	, [ReferenceValue]
	, [SystemExtensionLabelID]
    FROM
	[dbo].[SystemExtension]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([TableID] = @TableId AND @TableId is not null)
	OR ([ReferenceValue] = @ReferenceValue AND @ReferenceValue is not null)
	OR ([SystemExtensionLabelID] = @SystemExtensionLabelId AND @SystemExtensionLabelId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the State table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_Get_List

AS


				
				SELECT
					[ID],
					[CountryID],
					[LongName],
					[FederalTax],
					[LocalTax],
					[DisplayOrder],
					[LocalOnFederalTax]
				FROM
					[dbo].[State]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the State table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CountryID]'
				SET @SQL = @SQL + ', [LongName]'
				SET @SQL = @SQL + ', [FederalTax]'
				SET @SQL = @SQL + ', [LocalTax]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [LocalOnFederalTax]'
				SET @SQL = @SQL + ' FROM [dbo].[State]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CountryID],'
				SET @SQL = @SQL + ' [LongName],'
				SET @SQL = @SQL + ' [FederalTax],'
				SET @SQL = @SQL + ' [LocalTax],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [LocalOnFederalTax]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[State]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the State table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_Insert
(

	@Id varchar (3)  ,

	@CountryId varchar (3)  ,

	@LongName varchar (50)  ,

	@FederalTax decimal (9, 4)  ,

	@LocalTax decimal (9, 4)  ,

	@DisplayOrder smallint   ,

	@LocalOnFederalTax bit   
)
AS


					
				INSERT INTO [dbo].[State]
					(
					[ID]
					,[CountryID]
					,[LongName]
					,[FederalTax]
					,[LocalTax]
					,[DisplayOrder]
					,[LocalOnFederalTax]
					)
				VALUES
					(
					@Id
					,@CountryId
					,@LongName
					,@FederalTax
					,@LocalTax
					,@DisplayOrder
					,@LocalOnFederalTax
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the State table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_Update
(

	@Id varchar (3)  ,

	@OriginalId varchar (3)  ,

	@CountryId varchar (3)  ,

	@LongName varchar (50)  ,

	@FederalTax decimal (9, 4)  ,

	@LocalTax decimal (9, 4)  ,

	@DisplayOrder smallint   ,

	@LocalOnFederalTax bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[State]
				SET
					[ID] = @Id
					,[CountryID] = @CountryId
					,[LongName] = @LongName
					,[FederalTax] = @FederalTax
					,[LocalTax] = @LocalTax
					,[DisplayOrder] = @DisplayOrder
					,[LocalOnFederalTax] = @LocalOnFederalTax
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the State table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_Delete
(

	@Id varchar (3)  
)
AS


				DELETE FROM [dbo].[State] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_GetByCountryId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_GetByCountryId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_GetByCountryId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the State table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_GetByCountryId
(

	@CountryId varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CountryID],
					[LongName],
					[FederalTax],
					[LocalTax],
					[DisplayOrder],
					[LocalOnFederalTax]
				FROM
					[dbo].[State]
				WHERE
					[CountryID] = @CountryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the State table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_GetById
(

	@Id varchar (3)  
)
AS


				SELECT
					[ID],
					[CountryID],
					[LongName],
					[FederalTax],
					[LocalTax],
					[DisplayOrder],
					[LocalOnFederalTax]
				FROM
					[dbo].[State]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_GetByIdCountryId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_GetByIdCountryId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_GetByIdCountryId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the State table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_GetByIdCountryId
(

	@Id varchar (3)  ,

	@CountryId varchar (3)  
)
AS


				SELECT
					[ID],
					[CountryID],
					[LongName],
					[FederalTax],
					[LocalTax],
					[DisplayOrder],
					[LocalOnFederalTax]
				FROM
					[dbo].[State]
				WHERE
					[ID] = @Id
					AND [CountryID] = @CountryId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pState_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pState_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pState_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the State table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pState_Find
(

	@SearchUsingOR bit   = null ,

	@Id varchar (3)  = null ,

	@CountryId varchar (3)  = null ,

	@LongName varchar (50)  = null ,

	@FederalTax decimal (9, 4)  = null ,

	@LocalTax decimal (9, 4)  = null ,

	@DisplayOrder smallint   = null ,

	@LocalOnFederalTax bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CountryID]
	, [LongName]
	, [FederalTax]
	, [LocalTax]
	, [DisplayOrder]
	, [LocalOnFederalTax]
    FROM
	[dbo].[State]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CountryID] = @CountryId OR @CountryId IS NULL)
	AND ([LongName] = @LongName OR @LongName IS NULL)
	AND ([FederalTax] = @FederalTax OR @FederalTax IS NULL)
	AND ([LocalTax] = @LocalTax OR @LocalTax IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([LocalOnFederalTax] = @LocalOnFederalTax OR @LocalOnFederalTax IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CountryID]
	, [LongName]
	, [FederalTax]
	, [LocalTax]
	, [DisplayOrder]
	, [LocalOnFederalTax]
    FROM
	[dbo].[State]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CountryID] = @CountryId AND @CountryId is not null)
	OR ([LongName] = @LongName AND @LongName is not null)
	OR ([FederalTax] = @FederalTax AND @FederalTax is not null)
	OR ([LocalTax] = @LocalTax AND @LocalTax is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([LocalOnFederalTax] = @LocalOnFederalTax AND @LocalOnFederalTax is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder]
				FROM
					[dbo].[ProductType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayNameAlt nvarchar (50)  ,

	@DescriptionAlt nvarchar (100)  ,

	@DisplayOrder int   
)
AS


					
				INSERT INTO [dbo].[ProductType]
					(
					[Name]
					,[DisplayName]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayNameAlt nvarchar (50)  ,

	@DescriptionAlt nvarchar (100)  ,

	@DisplayOrder int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ProductType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder]
				FROM
					[dbo].[ProductType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductType_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductType_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductType_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductType_GetByName
(

	@Name varchar (50)  
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder]
				FROM
					[dbo].[ProductType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@DisplayNameAlt nvarchar (50)  = null ,

	@DescriptionAlt nvarchar (100)  = null ,

	@DisplayOrder int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DisplayOrder]
    FROM
	[dbo].[ProductType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DisplayOrder]
    FROM
	[dbo].[ProductType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductRateType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[DisplayOrder]
				FROM
					[dbo].[ProductRateType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductRateType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayName varchar (50)  ,

	@DisplayOrder int   
)
AS


					
				INSERT INTO [dbo].[ProductRateType]
					(
					[Name]
					,[Description]
					,[DisplayName]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayName
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductRateType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayName varchar (50)  ,

	@DisplayOrder int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductRateType]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayName] = @DisplayName
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductRateType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ProductRateType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[DisplayOrder]
				FROM
					[dbo].[ProductRateType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductRateType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@DisplayName varchar (50)  = null ,

	@DisplayOrder int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayName]
	, [DisplayOrder]
    FROM
	[dbo].[ProductRateType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayName]
	, [DisplayOrder]
    FROM
	[dbo].[ProductRateType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateInterval_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateInterval_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateInterval_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductRateInterval table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateInterval_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value]
				FROM
					[dbo].[ProductRateInterval]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateInterval_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateInterval_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateInterval_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateInterval table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateInterval_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateInterval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Value]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateInterval]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateInterval_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateInterval_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateInterval_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductRateInterval table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateInterval_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (100)  ,

	@Value varchar (10)  
)
AS


					
				INSERT INTO [dbo].[ProductRateInterval]
					(
					[Name]
					,[DisplayName]
					,[Description]
					,[Value]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@Description
					,@Value
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateInterval_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateInterval_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateInterval_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductRateInterval table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateInterval_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (100)  ,

	@Value varchar (10)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductRateInterval]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[Value] = @Value
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateInterval_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateInterval_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateInterval_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductRateInterval table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateInterval_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ProductRateInterval] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateInterval_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateInterval_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateInterval_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateInterval table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateInterval_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value]
				FROM
					[dbo].[ProductRateInterval]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateInterval_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateInterval_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateInterval_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductRateInterval table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateInterval_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@Value varchar (10)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
    FROM
	[dbo].[ProductRateInterval]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
    FROM
	[dbo].[ProductRateInterval]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Value] = @Value AND @Value is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ModeratorXTimeUser table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_Get_List

AS


				
				SELECT
					[ModeratorID],
					[FirstCallDate],
					[FirstCallProductID],
					[FirstCallNotes],
					[ThirdCallDate],
					[ThirdCallProductID],
					[ThirdCallNotes],
					[SecondCallDate],
					[UserID]
				FROM
					[dbo].[ModeratorXTimeUser]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ModeratorXTimeUser table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ModeratorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [FirstCallDate]'
				SET @SQL = @SQL + ', [FirstCallProductID]'
				SET @SQL = @SQL + ', [FirstCallNotes]'
				SET @SQL = @SQL + ', [ThirdCallDate]'
				SET @SQL = @SQL + ', [ThirdCallProductID]'
				SET @SQL = @SQL + ', [ThirdCallNotes]'
				SET @SQL = @SQL + ', [SecondCallDate]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ' FROM [dbo].[ModeratorXTimeUser]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [FirstCallDate],'
				SET @SQL = @SQL + ' [FirstCallProductID],'
				SET @SQL = @SQL + ' [FirstCallNotes],'
				SET @SQL = @SQL + ' [ThirdCallDate],'
				SET @SQL = @SQL + ' [ThirdCallProductID],'
				SET @SQL = @SQL + ' [ThirdCallNotes],'
				SET @SQL = @SQL + ' [SecondCallDate],'
				SET @SQL = @SQL + ' [UserID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ModeratorXTimeUser]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ModeratorXTimeUser table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_Insert
(

	@ModeratorId int   ,

	@FirstCallDate datetime   ,

	@FirstCallProductId int   ,

	@FirstCallNotes varchar (128)  ,

	@ThirdCallDate datetime   ,

	@ThirdCallProductId int   ,

	@ThirdCallNotes varchar (128)  ,

	@SecondCallDate datetime   ,

	@UserId int   
)
AS


					
				INSERT INTO [dbo].[ModeratorXTimeUser]
					(
					[ModeratorID]
					,[FirstCallDate]
					,[FirstCallProductID]
					,[FirstCallNotes]
					,[ThirdCallDate]
					,[ThirdCallProductID]
					,[ThirdCallNotes]
					,[SecondCallDate]
					,[UserID]
					)
				VALUES
					(
					@ModeratorId
					,@FirstCallDate
					,@FirstCallProductId
					,@FirstCallNotes
					,@ThirdCallDate
					,@ThirdCallProductId
					,@ThirdCallNotes
					,@SecondCallDate
					,@UserId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ModeratorXTimeUser table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_Update
(

	@ModeratorId int   ,

	@OriginalModeratorId int   ,

	@FirstCallDate datetime   ,

	@FirstCallProductId int   ,

	@FirstCallNotes varchar (128)  ,

	@ThirdCallDate datetime   ,

	@ThirdCallProductId int   ,

	@ThirdCallNotes varchar (128)  ,

	@SecondCallDate datetime   ,

	@UserId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ModeratorXTimeUser]
				SET
					[ModeratorID] = @ModeratorId
					,[FirstCallDate] = @FirstCallDate
					,[FirstCallProductID] = @FirstCallProductId
					,[FirstCallNotes] = @FirstCallNotes
					,[ThirdCallDate] = @ThirdCallDate
					,[ThirdCallProductID] = @ThirdCallProductId
					,[ThirdCallNotes] = @ThirdCallNotes
					,[SecondCallDate] = @SecondCallDate
					,[UserID] = @UserId
				WHERE
[ModeratorID] = @OriginalModeratorId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ModeratorXTimeUser table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_Delete
(

	@ModeratorId int   
)
AS


				DELETE FROM [dbo].[ModeratorXTimeUser] WITH (ROWLOCK) 
				WHERE
					[ModeratorID] = @ModeratorId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ModeratorXTimeUser table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SELECT
					[ModeratorID],
					[FirstCallDate],
					[FirstCallProductID],
					[FirstCallNotes],
					[ThirdCallDate],
					[ThirdCallProductID],
					[ThirdCallNotes],
					[SecondCallDate],
					[UserID]
				FROM
					[dbo].[ModeratorXTimeUser]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_GetByFirstCallDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_GetByFirstCallDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_GetByFirstCallDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ModeratorXTimeUser table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_GetByFirstCallDate
(

	@FirstCallDate datetime   
)
AS


				SELECT
					[ModeratorID],
					[FirstCallDate],
					[FirstCallProductID],
					[FirstCallNotes],
					[ThirdCallDate],
					[ThirdCallProductID],
					[ThirdCallNotes],
					[SecondCallDate],
					[UserID]
				FROM
					[dbo].[ModeratorXTimeUser]
				WHERE
					[FirstCallDate] = @FirstCallDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_GetByThirdCallDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_GetByThirdCallDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_GetByThirdCallDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ModeratorXTimeUser table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_GetByThirdCallDate
(

	@ThirdCallDate datetime   
)
AS


				SELECT
					[ModeratorID],
					[FirstCallDate],
					[FirstCallProductID],
					[FirstCallNotes],
					[ThirdCallDate],
					[ThirdCallProductID],
					[ThirdCallNotes],
					[SecondCallDate],
					[UserID]
				FROM
					[dbo].[ModeratorXTimeUser]
				WHERE
					[ThirdCallDate] = @ThirdCallDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModeratorXTimeUser_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModeratorXTimeUser_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModeratorXTimeUser_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ModeratorXTimeUser table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModeratorXTimeUser_Find
(

	@SearchUsingOR bit   = null ,

	@ModeratorId int   = null ,

	@FirstCallDate datetime   = null ,

	@FirstCallProductId int   = null ,

	@FirstCallNotes varchar (128)  = null ,

	@ThirdCallDate datetime   = null ,

	@ThirdCallProductId int   = null ,

	@ThirdCallNotes varchar (128)  = null ,

	@SecondCallDate datetime   = null ,

	@UserId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ModeratorID]
	, [FirstCallDate]
	, [FirstCallProductID]
	, [FirstCallNotes]
	, [ThirdCallDate]
	, [ThirdCallProductID]
	, [ThirdCallNotes]
	, [SecondCallDate]
	, [UserID]
    FROM
	[dbo].[ModeratorXTimeUser]
    WHERE 
	 ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([FirstCallDate] = @FirstCallDate OR @FirstCallDate IS NULL)
	AND ([FirstCallProductID] = @FirstCallProductId OR @FirstCallProductId IS NULL)
	AND ([FirstCallNotes] = @FirstCallNotes OR @FirstCallNotes IS NULL)
	AND ([ThirdCallDate] = @ThirdCallDate OR @ThirdCallDate IS NULL)
	AND ([ThirdCallProductID] = @ThirdCallProductId OR @ThirdCallProductId IS NULL)
	AND ([ThirdCallNotes] = @ThirdCallNotes OR @ThirdCallNotes IS NULL)
	AND ([SecondCallDate] = @SecondCallDate OR @SecondCallDate IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ModeratorID]
	, [FirstCallDate]
	, [FirstCallProductID]
	, [FirstCallNotes]
	, [ThirdCallDate]
	, [ThirdCallProductID]
	, [ThirdCallNotes]
	, [SecondCallDate]
	, [UserID]
    FROM
	[dbo].[ModeratorXTimeUser]
    WHERE 
	 ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([FirstCallDate] = @FirstCallDate AND @FirstCallDate is not null)
	OR ([FirstCallProductID] = @FirstCallProductId AND @FirstCallProductId is not null)
	OR ([FirstCallNotes] = @FirstCallNotes AND @FirstCallNotes is not null)
	OR ([ThirdCallDate] = @ThirdCallDate AND @ThirdCallDate is not null)
	OR ([ThirdCallProductID] = @ThirdCallProductId AND @ThirdCallProductId is not null)
	OR ([ThirdCallNotes] = @ThirdCallNotes AND @ThirdCallNotes is not null)
	OR ([SecondCallDate] = @SecondCallDate AND @SecondCallDate is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadStage_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadStage_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadStage_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadStage table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadStage_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadStage]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadStage_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadStage_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadStage_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadStage table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadStage_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadStage]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadStage]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadStage_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadStage_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadStage_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadStage table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadStage_Insert
(

	@Id int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[LeadStage]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadStage_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadStage_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadStage_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadStage table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadStage_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadStage]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadStage_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadStage_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadStage_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadStage table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadStage_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[LeadStage] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadStage_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadStage_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadStage_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadStage table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadStage_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadStage]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadStage_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadStage_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadStage_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadStage table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadStage_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Value int   = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadStage]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadStage]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadSource_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadSource_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadSource_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadSource table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadSource_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadSource]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadSource_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadSource_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadSource_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadSource table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadSource_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadSource]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadSource]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadSource_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadSource_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadSource_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadSource table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadSource_Insert
(

	@Id int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[LeadSource]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadSource_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadSource_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadSource_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadSource table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadSource_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadSource]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadSource_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadSource_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadSource_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadSource table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadSource_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[LeadSource] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadSource_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadSource_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadSource_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadSource table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadSource_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadSource]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadSource_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadSource_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadSource_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadSource table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadSource_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Value int   = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadSource]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadSource]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadProduct_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadProduct_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadProduct_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadProduct_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadProduct]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadProduct_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadProduct_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadProduct_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadProduct table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadProduct_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadProduct_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadProduct_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadProduct_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadProduct_Insert
(

	@Id int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[LeadProduct]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadProduct_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadProduct_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadProduct_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadProduct_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadProduct]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadProduct_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadProduct_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadProduct_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadProduct_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[LeadProduct] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadProduct_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadProduct_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadProduct_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadProduct table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadProduct_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadProduct]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadProduct_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadProduct_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadProduct_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadProduct table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadProduct_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Value int   = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadProduct]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadProduct]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchive_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchive_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchive_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the OmnoviaHostedArchive table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchive_Get_List

AS


				
				SELECT
					[id],
					[OmnoviaCustomerID],
					[ModeratorID],
					[MovieID],
					[RoomName],
					[MovieTitle],
					[MovieDateAdded],
					[MovieLength],
					[MovieRoomID],
					[MovieDate],
					[CompanyShortLink],
					[created],
					[HostedLinkExpiryDate],
					[HostedLinkShortened],
					[HostedLinkAlias],
					[RecordingDirectory],
					[UniqueConferenceID],
					[HostingPeriod],
					[HostingAutoRenew],
					[Event_ID]
				FROM
					[dbo].[OmnoviaHostedArchive]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchive_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchive_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchive_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaHostedArchive table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchive_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [OmnoviaCustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [MovieID]'
				SET @SQL = @SQL + ', [RoomName]'
				SET @SQL = @SQL + ', [MovieTitle]'
				SET @SQL = @SQL + ', [MovieDateAdded]'
				SET @SQL = @SQL + ', [MovieLength]'
				SET @SQL = @SQL + ', [MovieRoomID]'
				SET @SQL = @SQL + ', [MovieDate]'
				SET @SQL = @SQL + ', [CompanyShortLink]'
				SET @SQL = @SQL + ', [created]'
				SET @SQL = @SQL + ', [HostedLinkExpiryDate]'
				SET @SQL = @SQL + ', [HostedLinkShortened]'
				SET @SQL = @SQL + ', [HostedLinkAlias]'
				SET @SQL = @SQL + ', [RecordingDirectory]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [HostingPeriod]'
				SET @SQL = @SQL + ', [HostingAutoRenew]'
				SET @SQL = @SQL + ', [Event_ID]'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaHostedArchive]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [OmnoviaCustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [MovieID],'
				SET @SQL = @SQL + ' [RoomName],'
				SET @SQL = @SQL + ' [MovieTitle],'
				SET @SQL = @SQL + ' [MovieDateAdded],'
				SET @SQL = @SQL + ' [MovieLength],'
				SET @SQL = @SQL + ' [MovieRoomID],'
				SET @SQL = @SQL + ' [MovieDate],'
				SET @SQL = @SQL + ' [CompanyShortLink],'
				SET @SQL = @SQL + ' [created],'
				SET @SQL = @SQL + ' [HostedLinkExpiryDate],'
				SET @SQL = @SQL + ' [HostedLinkShortened],'
				SET @SQL = @SQL + ' [HostedLinkAlias],'
				SET @SQL = @SQL + ' [RecordingDirectory],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [HostingPeriod],'
				SET @SQL = @SQL + ' [HostingAutoRenew],'
				SET @SQL = @SQL + ' [Event_ID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaHostedArchive]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchive_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchive_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchive_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the OmnoviaHostedArchive table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchive_Insert
(

	@Id int    OUTPUT,

	@OmnoviaCustomerId int   ,

	@ModeratorId int   ,

	@MovieId int   ,

	@RoomName varchar (50)  ,

	@MovieTitle varchar (50)  ,

	@MovieDateAdded datetime   ,

	@MovieLength int   ,

	@MovieRoomId int   ,

	@MovieDate datetime   ,

	@CompanyShortLink varchar (100)  ,

	@Created datetime   ,

	@HostedLinkExpiryDate datetime   ,

	@HostedLinkShortened varchar (10)  ,

	@HostedLinkAlias varchar (50)  ,

	@RecordingDirectory varchar (100)  ,

	@UniqueConferenceId varchar (40)  ,

	@HostingPeriod int   ,

	@HostingAutoRenew int   ,

	@Event_Id int   
)
AS


					
				INSERT INTO [dbo].[OmnoviaHostedArchive]
					(
					[OmnoviaCustomerID]
					,[ModeratorID]
					,[MovieID]
					,[RoomName]
					,[MovieTitle]
					,[MovieDateAdded]
					,[MovieLength]
					,[MovieRoomID]
					,[MovieDate]
					,[CompanyShortLink]
					,[created]
					,[HostedLinkExpiryDate]
					,[HostedLinkShortened]
					,[HostedLinkAlias]
					,[RecordingDirectory]
					,[UniqueConferenceID]
					,[HostingPeriod]
					,[HostingAutoRenew]
					,[Event_ID]
					)
				VALUES
					(
					@OmnoviaCustomerId
					,@ModeratorId
					,@MovieId
					,@RoomName
					,@MovieTitle
					,@MovieDateAdded
					,@MovieLength
					,@MovieRoomId
					,@MovieDate
					,@CompanyShortLink
					,@Created
					,@HostedLinkExpiryDate
					,@HostedLinkShortened
					,@HostedLinkAlias
					,@RecordingDirectory
					,@UniqueConferenceId
					,@HostingPeriod
					,@HostingAutoRenew
					,@Event_Id
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchive_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchive_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchive_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the OmnoviaHostedArchive table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchive_Update
(

	@Id int   ,

	@OmnoviaCustomerId int   ,

	@ModeratorId int   ,

	@MovieId int   ,

	@RoomName varchar (50)  ,

	@MovieTitle varchar (50)  ,

	@MovieDateAdded datetime   ,

	@MovieLength int   ,

	@MovieRoomId int   ,

	@MovieDate datetime   ,

	@CompanyShortLink varchar (100)  ,

	@Created datetime   ,

	@HostedLinkExpiryDate datetime   ,

	@HostedLinkShortened varchar (10)  ,

	@HostedLinkAlias varchar (50)  ,

	@RecordingDirectory varchar (100)  ,

	@UniqueConferenceId varchar (40)  ,

	@HostingPeriod int   ,

	@HostingAutoRenew int   ,

	@Event_Id int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[OmnoviaHostedArchive]
				SET
					[OmnoviaCustomerID] = @OmnoviaCustomerId
					,[ModeratorID] = @ModeratorId
					,[MovieID] = @MovieId
					,[RoomName] = @RoomName
					,[MovieTitle] = @MovieTitle
					,[MovieDateAdded] = @MovieDateAdded
					,[MovieLength] = @MovieLength
					,[MovieRoomID] = @MovieRoomId
					,[MovieDate] = @MovieDate
					,[CompanyShortLink] = @CompanyShortLink
					,[created] = @Created
					,[HostedLinkExpiryDate] = @HostedLinkExpiryDate
					,[HostedLinkShortened] = @HostedLinkShortened
					,[HostedLinkAlias] = @HostedLinkAlias
					,[RecordingDirectory] = @RecordingDirectory
					,[UniqueConferenceID] = @UniqueConferenceId
					,[HostingPeriod] = @HostingPeriod
					,[HostingAutoRenew] = @HostingAutoRenew
					,[Event_ID] = @Event_Id
				WHERE
[id] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchive_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchive_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchive_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the OmnoviaHostedArchive table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchive_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[OmnoviaHostedArchive] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchive_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchive_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchive_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the OmnoviaHostedArchive table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchive_GetById
(

	@Id int   
)
AS


				SELECT
					[id],
					[OmnoviaCustomerID],
					[ModeratorID],
					[MovieID],
					[RoomName],
					[MovieTitle],
					[MovieDateAdded],
					[MovieLength],
					[MovieRoomID],
					[MovieDate],
					[CompanyShortLink],
					[created],
					[HostedLinkExpiryDate],
					[HostedLinkShortened],
					[HostedLinkAlias],
					[RecordingDirectory],
					[UniqueConferenceID],
					[HostingPeriod],
					[HostingAutoRenew],
					[Event_ID]
				FROM
					[dbo].[OmnoviaHostedArchive]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchive_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchive_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchive_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the OmnoviaHostedArchive table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchive_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@OmnoviaCustomerId int   = null ,

	@ModeratorId int   = null ,

	@MovieId int   = null ,

	@RoomName varchar (50)  = null ,

	@MovieTitle varchar (50)  = null ,

	@MovieDateAdded datetime   = null ,

	@MovieLength int   = null ,

	@MovieRoomId int   = null ,

	@MovieDate datetime   = null ,

	@CompanyShortLink varchar (100)  = null ,

	@Created datetime   = null ,

	@HostedLinkExpiryDate datetime   = null ,

	@HostedLinkShortened varchar (10)  = null ,

	@HostedLinkAlias varchar (50)  = null ,

	@RecordingDirectory varchar (100)  = null ,

	@UniqueConferenceId varchar (40)  = null ,

	@HostingPeriod int   = null ,

	@HostingAutoRenew int   = null ,

	@Event_Id int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [OmnoviaCustomerID]
	, [ModeratorID]
	, [MovieID]
	, [RoomName]
	, [MovieTitle]
	, [MovieDateAdded]
	, [MovieLength]
	, [MovieRoomID]
	, [MovieDate]
	, [CompanyShortLink]
	, [created]
	, [HostedLinkExpiryDate]
	, [HostedLinkShortened]
	, [HostedLinkAlias]
	, [RecordingDirectory]
	, [UniqueConferenceID]
	, [HostingPeriod]
	, [HostingAutoRenew]
	, [Event_ID]
    FROM
	[dbo].[OmnoviaHostedArchive]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([OmnoviaCustomerID] = @OmnoviaCustomerId OR @OmnoviaCustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([MovieID] = @MovieId OR @MovieId IS NULL)
	AND ([RoomName] = @RoomName OR @RoomName IS NULL)
	AND ([MovieTitle] = @MovieTitle OR @MovieTitle IS NULL)
	AND ([MovieDateAdded] = @MovieDateAdded OR @MovieDateAdded IS NULL)
	AND ([MovieLength] = @MovieLength OR @MovieLength IS NULL)
	AND ([MovieRoomID] = @MovieRoomId OR @MovieRoomId IS NULL)
	AND ([MovieDate] = @MovieDate OR @MovieDate IS NULL)
	AND ([CompanyShortLink] = @CompanyShortLink OR @CompanyShortLink IS NULL)
	AND ([created] = @Created OR @Created IS NULL)
	AND ([HostedLinkExpiryDate] = @HostedLinkExpiryDate OR @HostedLinkExpiryDate IS NULL)
	AND ([HostedLinkShortened] = @HostedLinkShortened OR @HostedLinkShortened IS NULL)
	AND ([HostedLinkAlias] = @HostedLinkAlias OR @HostedLinkAlias IS NULL)
	AND ([RecordingDirectory] = @RecordingDirectory OR @RecordingDirectory IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([HostingPeriod] = @HostingPeriod OR @HostingPeriod IS NULL)
	AND ([HostingAutoRenew] = @HostingAutoRenew OR @HostingAutoRenew IS NULL)
	AND ([Event_ID] = @Event_Id OR @Event_Id IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [OmnoviaCustomerID]
	, [ModeratorID]
	, [MovieID]
	, [RoomName]
	, [MovieTitle]
	, [MovieDateAdded]
	, [MovieLength]
	, [MovieRoomID]
	, [MovieDate]
	, [CompanyShortLink]
	, [created]
	, [HostedLinkExpiryDate]
	, [HostedLinkShortened]
	, [HostedLinkAlias]
	, [RecordingDirectory]
	, [UniqueConferenceID]
	, [HostingPeriod]
	, [HostingAutoRenew]
	, [Event_ID]
    FROM
	[dbo].[OmnoviaHostedArchive]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([OmnoviaCustomerID] = @OmnoviaCustomerId AND @OmnoviaCustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([MovieID] = @MovieId AND @MovieId is not null)
	OR ([RoomName] = @RoomName AND @RoomName is not null)
	OR ([MovieTitle] = @MovieTitle AND @MovieTitle is not null)
	OR ([MovieDateAdded] = @MovieDateAdded AND @MovieDateAdded is not null)
	OR ([MovieLength] = @MovieLength AND @MovieLength is not null)
	OR ([MovieRoomID] = @MovieRoomId AND @MovieRoomId is not null)
	OR ([MovieDate] = @MovieDate AND @MovieDate is not null)
	OR ([CompanyShortLink] = @CompanyShortLink AND @CompanyShortLink is not null)
	OR ([created] = @Created AND @Created is not null)
	OR ([HostedLinkExpiryDate] = @HostedLinkExpiryDate AND @HostedLinkExpiryDate is not null)
	OR ([HostedLinkShortened] = @HostedLinkShortened AND @HostedLinkShortened is not null)
	OR ([HostedLinkAlias] = @HostedLinkAlias AND @HostedLinkAlias is not null)
	OR ([RecordingDirectory] = @RecordingDirectory AND @RecordingDirectory is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([HostingPeriod] = @HostingPeriod AND @HostingPeriod is not null)
	OR ([HostingAutoRenew] = @HostingAutoRenew AND @HostingAutoRenew is not null)
	OR ([Event_ID] = @Event_Id AND @Event_Id is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchiveParticipant_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchiveParticipant_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the OmnoviaHostedArchiveParticipant table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Get_List

AS


				
				SELECT
					[id],
					[HostedArchiveID],
					[Firstname],
					[Lastname],
					[Company],
					[Email],
					[created]
				FROM
					[dbo].[OmnoviaHostedArchiveParticipant]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchiveParticipant_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchiveParticipant_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaHostedArchiveParticipant table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [HostedArchiveID]'
				SET @SQL = @SQL + ', [Firstname]'
				SET @SQL = @SQL + ', [Lastname]'
				SET @SQL = @SQL + ', [Company]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [created]'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaHostedArchiveParticipant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [HostedArchiveID],'
				SET @SQL = @SQL + ' [Firstname],'
				SET @SQL = @SQL + ' [Lastname],'
				SET @SQL = @SQL + ' [Company],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [created]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaHostedArchiveParticipant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchiveParticipant_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchiveParticipant_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the OmnoviaHostedArchiveParticipant table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Insert
(

	@Id int    OUTPUT,

	@HostedArchiveId int   ,

	@Firstname varchar (50)  ,

	@Lastname varchar (50)  ,

	@Company varchar (50)  ,

	@Email varchar (50)  ,

	@Created datetime   
)
AS


					
				INSERT INTO [dbo].[OmnoviaHostedArchiveParticipant]
					(
					[HostedArchiveID]
					,[Firstname]
					,[Lastname]
					,[Company]
					,[Email]
					,[created]
					)
				VALUES
					(
					@HostedArchiveId
					,@Firstname
					,@Lastname
					,@Company
					,@Email
					,@Created
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchiveParticipant_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchiveParticipant_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the OmnoviaHostedArchiveParticipant table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Update
(

	@Id int   ,

	@HostedArchiveId int   ,

	@Firstname varchar (50)  ,

	@Lastname varchar (50)  ,

	@Company varchar (50)  ,

	@Email varchar (50)  ,

	@Created datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[OmnoviaHostedArchiveParticipant]
				SET
					[HostedArchiveID] = @HostedArchiveId
					,[Firstname] = @Firstname
					,[Lastname] = @Lastname
					,[Company] = @Company
					,[Email] = @Email
					,[created] = @Created
				WHERE
[id] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchiveParticipant_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchiveParticipant_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the OmnoviaHostedArchiveParticipant table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[OmnoviaHostedArchiveParticipant] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchiveParticipant_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchiveParticipant_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the OmnoviaHostedArchiveParticipant table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_GetById
(

	@Id int   
)
AS


				SELECT
					[id],
					[HostedArchiveID],
					[Firstname],
					[Lastname],
					[Company],
					[Email],
					[created]
				FROM
					[dbo].[OmnoviaHostedArchiveParticipant]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaHostedArchiveParticipant_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaHostedArchiveParticipant_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the OmnoviaHostedArchiveParticipant table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaHostedArchiveParticipant_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@HostedArchiveId int   = null ,

	@Firstname varchar (50)  = null ,

	@Lastname varchar (50)  = null ,

	@Company varchar (50)  = null ,

	@Email varchar (50)  = null ,

	@Created datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [HostedArchiveID]
	, [Firstname]
	, [Lastname]
	, [Company]
	, [Email]
	, [created]
    FROM
	[dbo].[OmnoviaHostedArchiveParticipant]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([HostedArchiveID] = @HostedArchiveId OR @HostedArchiveId IS NULL)
	AND ([Firstname] = @Firstname OR @Firstname IS NULL)
	AND ([Lastname] = @Lastname OR @Lastname IS NULL)
	AND ([Company] = @Company OR @Company IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([created] = @Created OR @Created IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [HostedArchiveID]
	, [Firstname]
	, [Lastname]
	, [Company]
	, [Email]
	, [created]
    FROM
	[dbo].[OmnoviaHostedArchiveParticipant]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([HostedArchiveID] = @HostedArchiveId AND @HostedArchiveId is not null)
	OR ([Firstname] = @Firstname AND @Firstname is not null)
	OR ([Lastname] = @Lastname AND @Lastname is not null)
	OR ([Company] = @Company AND @Company is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([created] = @Created AND @Created is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Product table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_Get_List

AS


				
				SELECT
					[ID],
					[ProductTypeID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[DisplayOrder],
					[SupportsExternalProvisioning]
				FROM
					[dbo].[Product]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Product table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductTypeID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [SupportsExternalProvisioning]'
				SET @SQL = @SQL + ' FROM [dbo].[Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductTypeID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [SupportsExternalProvisioning]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Product table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_Insert
(

	@Id int    OUTPUT,

	@ProductTypeId int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayNameAlt nvarchar (50)  ,

	@DescriptionAlt nvarchar (100)  ,

	@DefaultOption bit   ,

	@DisplayOrder int   ,

	@SupportsExternalProvisioning bit   
)
AS


					
				INSERT INTO [dbo].[Product]
					(
					[ProductTypeID]
					,[Name]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[DefaultOption]
					,[DisplayOrder]
					,[SupportsExternalProvisioning]
					)
				VALUES
					(
					@ProductTypeId
					,@Name
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@DefaultOption
					,@DisplayOrder
					,@SupportsExternalProvisioning
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Product table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_Update
(

	@Id int   ,

	@ProductTypeId int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayNameAlt nvarchar (50)  ,

	@DescriptionAlt nvarchar (100)  ,

	@DefaultOption bit   ,

	@DisplayOrder int   ,

	@SupportsExternalProvisioning bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Product]
				SET
					[ProductTypeID] = @ProductTypeId
					,[Name] = @Name
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[DefaultOption] = @DefaultOption
					,[DisplayOrder] = @DisplayOrder
					,[SupportsExternalProvisioning] = @SupportsExternalProvisioning
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Product table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Product] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_GetByProductTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_GetByProductTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_GetByProductTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_GetByProductTypeId
(

	@ProductTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductTypeID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[DisplayOrder],
					[SupportsExternalProvisioning]
				FROM
					[dbo].[Product]
				WHERE
					[ProductTypeID] = @ProductTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Product table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[ProductTypeID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[DisplayOrder],
					[SupportsExternalProvisioning]
				FROM
					[dbo].[Product]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Product table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_GetByName
(

	@Name varchar (50)  
)
AS


				SELECT
					[ID],
					[ProductTypeID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[DisplayOrder],
					[SupportsExternalProvisioning]
				FROM
					[dbo].[Product]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProduct_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProduct_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProduct_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Product table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProduct_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@ProductTypeId int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@DisplayNameAlt nvarchar (50)  = null ,

	@DescriptionAlt nvarchar (100)  = null ,

	@DefaultOption bit   = null ,

	@DisplayOrder int   = null ,

	@SupportsExternalProvisioning bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductTypeID]
	, [Name]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DefaultOption]
	, [DisplayOrder]
	, [SupportsExternalProvisioning]
    FROM
	[dbo].[Product]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductTypeID] = @ProductTypeId OR @ProductTypeId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([SupportsExternalProvisioning] = @SupportsExternalProvisioning OR @SupportsExternalProvisioning IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductTypeID]
	, [Name]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DefaultOption]
	, [DisplayOrder]
	, [SupportsExternalProvisioning]
    FROM
	[dbo].[Product]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductTypeID] = @ProductTypeId AND @ProductTypeId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([SupportsExternalProvisioning] = @SupportsExternalProvisioning AND @SupportsExternalProvisioning is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductRate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_Get_List

AS


				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRate table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ProductRateTypeID]'
				SET @SQL = @SQL + ', [ProductRateIntervalID]'
				SET @SQL = @SQL + ', [TaxableID]'
				SET @SQL = @SQL + ', [CountryID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [MinimumTimeBeforeChargedSec]'
				SET @SQL = @SQL + ', [RatingTypeID]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ProductRateTypeID],'
				SET @SQL = @SQL + ' [ProductRateIntervalID],'
				SET @SQL = @SQL + ' [TaxableID],'
				SET @SQL = @SQL + ' [CountryID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [MinimumTimeBeforeChargedSec],'
				SET @SQL = @SQL + ' [RatingTypeID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductRate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_Insert
(

	@Id int    OUTPUT,

	@ProductId int   ,

	@ProductRateTypeId int   ,

	@ProductRateIntervalId int   ,

	@TaxableId int   ,

	@CountryId varchar (3)  ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayOrder int   ,

	@MinimumTimeBeforeChargedSec int   ,

	@RatingTypeId int   
)
AS


					
				INSERT INTO [dbo].[ProductRate]
					(
					[ProductID]
					,[ProductRateTypeID]
					,[ProductRateIntervalID]
					,[TaxableID]
					,[CountryID]
					,[Name]
					,[DisplayName]
					,[Description]
					,[DisplayOrder]
					,[MinimumTimeBeforeChargedSec]
					,[RatingTypeID]
					)
				VALUES
					(
					@ProductId
					,@ProductRateTypeId
					,@ProductRateIntervalId
					,@TaxableId
					,@CountryId
					,@Name
					,@DisplayName
					,@Description
					,@DisplayOrder
					,@MinimumTimeBeforeChargedSec
					,@RatingTypeId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductRate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_Update
(

	@Id int   ,

	@ProductId int   ,

	@ProductRateTypeId int   ,

	@ProductRateIntervalId int   ,

	@TaxableId int   ,

	@CountryId varchar (3)  ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayOrder int   ,

	@MinimumTimeBeforeChargedSec int   ,

	@RatingTypeId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductRate]
				SET
					[ProductID] = @ProductId
					,[ProductRateTypeID] = @ProductRateTypeId
					,[ProductRateIntervalID] = @ProductRateIntervalId
					,[TaxableID] = @TaxableId
					,[CountryID] = @CountryId
					,[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[MinimumTimeBeforeChargedSec] = @MinimumTimeBeforeChargedSec
					,[RatingTypeID] = @RatingTypeId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductRate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ProductRate] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetByCountryId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetByCountryId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetByCountryId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetByCountryId
(

	@CountryId varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[CountryID] = @CountryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetByRatingTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetByRatingTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetByRatingTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetByRatingTypeId
(

	@RatingTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[RatingTypeID] = @RatingTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetByProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetByProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetByProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetByProductId
(

	@ProductId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetByProductRateIntervalId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetByProductRateIntervalId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetByProductRateIntervalId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetByProductRateIntervalId
(

	@ProductRateIntervalId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ProductRateIntervalID] = @ProductRateIntervalId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetByProductRateTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetByProductRateTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetByProductRateTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetByProductRateTypeId
(

	@ProductRateTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ProductRateTypeID] = @ProductRateTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetByTaxableId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetByTaxableId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetByTaxableId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetByTaxableId
(

	@TaxableId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[TaxableID] = @TaxableId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetByProductIdProductRateTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetByProductIdProductRateTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetByProductIdProductRateTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetByProductIdProductRateTypeId
(

	@ProductId int   ,

	@ProductRateTypeId int   
)
AS


				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[ProductID] = @ProductId
					AND [ProductRateTypeID] = @ProductRateTypeId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_GetByNameProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_GetByNameProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_GetByNameProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_GetByNameProductId
(

	@Name varchar (50)  ,

	@ProductId int   
)
AS


				SELECT
					[ID],
					[ProductID],
					[ProductRateTypeID],
					[ProductRateIntervalID],
					[TaxableID],
					[CountryID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayOrder],
					[MinimumTimeBeforeChargedSec],
					[RatingTypeID]
				FROM
					[dbo].[ProductRate]
				WHERE
					[Name] = @Name
					AND [ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRate_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRate_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRate_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductRate table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRate_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@ProductId int   = null ,

	@ProductRateTypeId int   = null ,

	@ProductRateIntervalId int   = null ,

	@TaxableId int   = null ,

	@CountryId varchar (3)  = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@DisplayOrder int   = null ,

	@MinimumTimeBeforeChargedSec int   = null ,

	@RatingTypeId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [ProductRateTypeID]
	, [ProductRateIntervalID]
	, [TaxableID]
	, [CountryID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayOrder]
	, [MinimumTimeBeforeChargedSec]
	, [RatingTypeID]
    FROM
	[dbo].[ProductRate]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([ProductRateTypeID] = @ProductRateTypeId OR @ProductRateTypeId IS NULL)
	AND ([ProductRateIntervalID] = @ProductRateIntervalId OR @ProductRateIntervalId IS NULL)
	AND ([TaxableID] = @TaxableId OR @TaxableId IS NULL)
	AND ([CountryID] = @CountryId OR @CountryId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([MinimumTimeBeforeChargedSec] = @MinimumTimeBeforeChargedSec OR @MinimumTimeBeforeChargedSec IS NULL)
	AND ([RatingTypeID] = @RatingTypeId OR @RatingTypeId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [ProductRateTypeID]
	, [ProductRateIntervalID]
	, [TaxableID]
	, [CountryID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayOrder]
	, [MinimumTimeBeforeChargedSec]
	, [RatingTypeID]
    FROM
	[dbo].[ProductRate]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([ProductRateTypeID] = @ProductRateTypeId AND @ProductRateTypeId is not null)
	OR ([ProductRateIntervalID] = @ProductRateIntervalId AND @ProductRateIntervalId is not null)
	OR ([TaxableID] = @TaxableId AND @TaxableId is not null)
	OR ([CountryID] = @CountryId AND @CountryId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([MinimumTimeBeforeChargedSec] = @MinimumTimeBeforeChargedSec AND @MinimumTimeBeforeChargedSec is not null)
	OR ([RatingTypeID] = @RatingTypeId AND @RatingTypeId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPrevInvoices_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPrevInvoices_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPrevInvoices_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the PrevInvoices table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPrevInvoices_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PrevBal],
					[PrevPerStart],
					[PrevPerEnd]
				FROM
					[dbo].[PrevInvoices]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPrevInvoices_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPrevInvoices_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPrevInvoices_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the PrevInvoices table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPrevInvoices_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PrevBal]'
				SET @SQL = @SQL + ', [PrevPerStart]'
				SET @SQL = @SQL + ', [PrevPerEnd]'
				SET @SQL = @SQL + ' FROM [dbo].[PrevInvoices]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PrevBal],'
				SET @SQL = @SQL + ' [PrevPerStart],'
				SET @SQL = @SQL + ' [PrevPerEnd]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[PrevInvoices]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPrevInvoices_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPrevInvoices_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPrevInvoices_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the PrevInvoices table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPrevInvoices_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@PrevBal decimal (10, 2)  ,

	@PrevPerStart datetime   ,

	@PrevPerEnd datetime   
)
AS


					
				INSERT INTO [dbo].[PrevInvoices]
					(
					[WholesalerID]
					,[CustomerID]
					,[PrevBal]
					,[PrevPerStart]
					,[PrevPerEnd]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@PrevBal
					,@PrevPerStart
					,@PrevPerEnd
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPrevInvoices_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPrevInvoices_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPrevInvoices_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the PrevInvoices table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPrevInvoices_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@PrevBal decimal (10, 2)  ,

	@PrevPerStart datetime   ,

	@PrevPerEnd datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[PrevInvoices]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[PrevBal] = @PrevBal
					,[PrevPerStart] = @PrevPerStart
					,[PrevPerEnd] = @PrevPerEnd
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPrevInvoices_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPrevInvoices_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPrevInvoices_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the PrevInvoices table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPrevInvoices_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[PrevInvoices] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPrevInvoices_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPrevInvoices_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPrevInvoices_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the PrevInvoices table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPrevInvoices_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PrevBal],
					[PrevPerStart],
					[PrevPerEnd]
				FROM
					[dbo].[PrevInvoices]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pPrevInvoices_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pPrevInvoices_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pPrevInvoices_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the PrevInvoices table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pPrevInvoices_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@PrevBal decimal (10, 2)  = null ,

	@PrevPerStart datetime   = null ,

	@PrevPerEnd datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PrevBal]
	, [PrevPerStart]
	, [PrevPerEnd]
    FROM
	[dbo].[PrevInvoices]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([PrevBal] = @PrevBal OR @PrevBal IS NULL)
	AND ([PrevPerStart] = @PrevPerStart OR @PrevPerStart IS NULL)
	AND ([PrevPerEnd] = @PrevPerEnd OR @PrevPerEnd IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PrevBal]
	, [PrevPerStart]
	, [PrevPerEnd]
    FROM
	[dbo].[PrevInvoices]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([PrevBal] = @PrevBal AND @PrevBal is not null)
	OR ([PrevPerStart] = @PrevPerStart AND @PrevPerStart is not null)
	OR ([PrevPerEnd] = @PrevPerEnd AND @PrevPerEnd is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaMP4Request_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaMP4Request_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaMP4Request_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the OmnoviaMP4Request table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaMP4Request_Get_List

AS


				
				SELECT
					[id],
					[HostedID],
					[RequestedBy],
					[EstimatedTime],
					[ExtraInfo],
					[OmnoviaHostedURL],
					[RedbackHostedURL],
					[OmnoviaHostedURLExpiryDate],
					[created]
				FROM
					[dbo].[OmnoviaMP4Request]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaMP4Request_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaMP4Request_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaMP4Request_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the OmnoviaMP4Request table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaMP4Request_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [HostedID]'
				SET @SQL = @SQL + ', [RequestedBy]'
				SET @SQL = @SQL + ', [EstimatedTime]'
				SET @SQL = @SQL + ', [ExtraInfo]'
				SET @SQL = @SQL + ', [OmnoviaHostedURL]'
				SET @SQL = @SQL + ', [RedbackHostedURL]'
				SET @SQL = @SQL + ', [OmnoviaHostedURLExpiryDate]'
				SET @SQL = @SQL + ', [created]'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaMP4Request]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [HostedID],'
				SET @SQL = @SQL + ' [RequestedBy],'
				SET @SQL = @SQL + ' [EstimatedTime],'
				SET @SQL = @SQL + ' [ExtraInfo],'
				SET @SQL = @SQL + ' [OmnoviaHostedURL],'
				SET @SQL = @SQL + ' [RedbackHostedURL],'
				SET @SQL = @SQL + ' [OmnoviaHostedURLExpiryDate],'
				SET @SQL = @SQL + ' [created]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[OmnoviaMP4Request]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaMP4Request_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaMP4Request_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaMP4Request_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the OmnoviaMP4Request table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaMP4Request_Insert
(

	@Id int    OUTPUT,

	@HostedId int   ,

	@RequestedBy varchar (255)  ,

	@EstimatedTime varchar (255)  ,

	@ExtraInfo varchar (255)  ,

	@OmnoviaHostedUrl varchar (255)  ,

	@RedbackHostedUrl varchar (255)  ,

	@OmnoviaHostedUrlExpiryDate datetime   ,

	@Created datetime   
)
AS


					
				INSERT INTO [dbo].[OmnoviaMP4Request]
					(
					[HostedID]
					,[RequestedBy]
					,[EstimatedTime]
					,[ExtraInfo]
					,[OmnoviaHostedURL]
					,[RedbackHostedURL]
					,[OmnoviaHostedURLExpiryDate]
					,[created]
					)
				VALUES
					(
					@HostedId
					,@RequestedBy
					,@EstimatedTime
					,@ExtraInfo
					,@OmnoviaHostedUrl
					,@RedbackHostedUrl
					,@OmnoviaHostedUrlExpiryDate
					,@Created
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaMP4Request_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaMP4Request_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaMP4Request_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the OmnoviaMP4Request table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaMP4Request_Update
(

	@Id int   ,

	@HostedId int   ,

	@RequestedBy varchar (255)  ,

	@EstimatedTime varchar (255)  ,

	@ExtraInfo varchar (255)  ,

	@OmnoviaHostedUrl varchar (255)  ,

	@RedbackHostedUrl varchar (255)  ,

	@OmnoviaHostedUrlExpiryDate datetime   ,

	@Created datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[OmnoviaMP4Request]
				SET
					[HostedID] = @HostedId
					,[RequestedBy] = @RequestedBy
					,[EstimatedTime] = @EstimatedTime
					,[ExtraInfo] = @ExtraInfo
					,[OmnoviaHostedURL] = @OmnoviaHostedUrl
					,[RedbackHostedURL] = @RedbackHostedUrl
					,[OmnoviaHostedURLExpiryDate] = @OmnoviaHostedUrlExpiryDate
					,[created] = @Created
				WHERE
[id] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaMP4Request_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaMP4Request_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaMP4Request_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the OmnoviaMP4Request table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaMP4Request_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[OmnoviaMP4Request] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaMP4Request_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaMP4Request_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaMP4Request_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the OmnoviaMP4Request table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaMP4Request_GetById
(

	@Id int   
)
AS


				SELECT
					[id],
					[HostedID],
					[RequestedBy],
					[EstimatedTime],
					[ExtraInfo],
					[OmnoviaHostedURL],
					[RedbackHostedURL],
					[OmnoviaHostedURLExpiryDate],
					[created]
				FROM
					[dbo].[OmnoviaMP4Request]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pOmnoviaMP4Request_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pOmnoviaMP4Request_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pOmnoviaMP4Request_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the OmnoviaMP4Request table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pOmnoviaMP4Request_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@HostedId int   = null ,

	@RequestedBy varchar (255)  = null ,

	@EstimatedTime varchar (255)  = null ,

	@ExtraInfo varchar (255)  = null ,

	@OmnoviaHostedUrl varchar (255)  = null ,

	@RedbackHostedUrl varchar (255)  = null ,

	@OmnoviaHostedUrlExpiryDate datetime   = null ,

	@Created datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [HostedID]
	, [RequestedBy]
	, [EstimatedTime]
	, [ExtraInfo]
	, [OmnoviaHostedURL]
	, [RedbackHostedURL]
	, [OmnoviaHostedURLExpiryDate]
	, [created]
    FROM
	[dbo].[OmnoviaMP4Request]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([HostedID] = @HostedId OR @HostedId IS NULL)
	AND ([RequestedBy] = @RequestedBy OR @RequestedBy IS NULL)
	AND ([EstimatedTime] = @EstimatedTime OR @EstimatedTime IS NULL)
	AND ([ExtraInfo] = @ExtraInfo OR @ExtraInfo IS NULL)
	AND ([OmnoviaHostedURL] = @OmnoviaHostedUrl OR @OmnoviaHostedUrl IS NULL)
	AND ([RedbackHostedURL] = @RedbackHostedUrl OR @RedbackHostedUrl IS NULL)
	AND ([OmnoviaHostedURLExpiryDate] = @OmnoviaHostedUrlExpiryDate OR @OmnoviaHostedUrlExpiryDate IS NULL)
	AND ([created] = @Created OR @Created IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [HostedID]
	, [RequestedBy]
	, [EstimatedTime]
	, [ExtraInfo]
	, [OmnoviaHostedURL]
	, [RedbackHostedURL]
	, [OmnoviaHostedURLExpiryDate]
	, [created]
    FROM
	[dbo].[OmnoviaMP4Request]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([HostedID] = @HostedId AND @HostedId is not null)
	OR ([RequestedBy] = @RequestedBy AND @RequestedBy is not null)
	OR ([EstimatedTime] = @EstimatedTime AND @EstimatedTime is not null)
	OR ([ExtraInfo] = @ExtraInfo AND @ExtraInfo is not null)
	OR ([OmnoviaHostedURL] = @OmnoviaHostedUrl AND @OmnoviaHostedUrl is not null)
	OR ([RedbackHostedURL] = @RedbackHostedUrl AND @RedbackHostedUrl is not null)
	OR ([OmnoviaHostedURLExpiryDate] = @OmnoviaHostedUrlExpiryDate AND @OmnoviaHostedUrlExpiryDate is not null)
	OR ([created] = @Created AND @Created is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SystemExtensionLabel table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_Get_List

AS


				
				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemExtensionLabel table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ExtensionTypeID]'
				SET @SQL = @SQL + ', [ExtensionTypeLabel]'
				SET @SQL = @SQL + ', [CustomerCanView]'
				SET @SQL = @SQL + ', [ModeratorCanView]'
				SET @SQL = @SQL + ', [CustomerCanEdit]'
				SET @SQL = @SQL + ', [ModeratorCanEdit]'
				SET @SQL = @SQL + ' FROM [dbo].[SystemExtensionLabel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ExtensionTypeID],'
				SET @SQL = @SQL + ' [ExtensionTypeLabel],'
				SET @SQL = @SQL + ' [CustomerCanView],'
				SET @SQL = @SQL + ' [ModeratorCanView],'
				SET @SQL = @SQL + ' [CustomerCanEdit],'
				SET @SQL = @SQL + ' [ModeratorCanEdit]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SystemExtensionLabel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SystemExtensionLabel table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_Insert
(

	@Id int    OUTPUT,

	@CustomerId int   ,

	@ExtensionTypeId int   ,

	@ExtensionTypeLabel varchar (50)  ,

	@CustomerCanView bit   ,

	@ModeratorCanView bit   ,

	@CustomerCanEdit bit   ,

	@ModeratorCanEdit bit   
)
AS


					
				INSERT INTO [dbo].[SystemExtensionLabel]
					(
					[CustomerID]
					,[ExtensionTypeID]
					,[ExtensionTypeLabel]
					,[CustomerCanView]
					,[ModeratorCanView]
					,[CustomerCanEdit]
					,[ModeratorCanEdit]
					)
				VALUES
					(
					@CustomerId
					,@ExtensionTypeId
					,@ExtensionTypeLabel
					,@CustomerCanView
					,@ModeratorCanView
					,@CustomerCanEdit
					,@ModeratorCanEdit
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SystemExtensionLabel table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_Update
(

	@Id int   ,

	@CustomerId int   ,

	@ExtensionTypeId int   ,

	@ExtensionTypeLabel varchar (50)  ,

	@CustomerCanView bit   ,

	@ModeratorCanView bit   ,

	@CustomerCanEdit bit   ,

	@ModeratorCanEdit bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SystemExtensionLabel]
				SET
					[CustomerID] = @CustomerId
					,[ExtensionTypeID] = @ExtensionTypeId
					,[ExtensionTypeLabel] = @ExtensionTypeLabel
					,[CustomerCanView] = @CustomerCanView
					,[ModeratorCanView] = @ModeratorCanView
					,[CustomerCanEdit] = @CustomerCanEdit
					,[ModeratorCanEdit] = @ModeratorCanEdit
				WHERE
[id] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SystemExtensionLabel table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[SystemExtensionLabel] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_GetByExtensionTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_GetByExtensionTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_GetByExtensionTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_GetByExtensionTypeId
(

	@ExtensionTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[ExtensionTypeID] = @ExtensionTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_GetById
(

	@Id int   
)
AS


				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_GetByCustomerId
(

	@CustomerId int   
)
AS


				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_GetByCustomerIdCustomerCanView procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_GetByCustomerIdCustomerCanView') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_GetByCustomerIdCustomerCanView
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_GetByCustomerIdCustomerCanView
(

	@CustomerId int   ,

	@CustomerCanView bit   
)
AS


				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[CustomerID] = @CustomerId
					AND [CustomerCanView] = @CustomerCanView
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_GetByCustomerIdModeratorCanView procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_GetByCustomerIdModeratorCanView') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_GetByCustomerIdModeratorCanView
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemExtensionLabel table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_GetByCustomerIdModeratorCanView
(

	@CustomerId int   ,

	@ModeratorCanView bit   
)
AS


				SELECT
					[id],
					[CustomerID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit]
				FROM
					[dbo].[SystemExtensionLabel]
				WHERE
					[CustomerID] = @CustomerId
					AND [ModeratorCanView] = @ModeratorCanView
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemExtensionLabel_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemExtensionLabel_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemExtensionLabel_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SystemExtensionLabel table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemExtensionLabel_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CustomerId int   = null ,

	@ExtensionTypeId int   = null ,

	@ExtensionTypeLabel varchar (50)  = null ,

	@CustomerCanView bit   = null ,

	@ModeratorCanView bit   = null ,

	@CustomerCanEdit bit   = null ,

	@ModeratorCanEdit bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [CustomerID]
	, [ExtensionTypeID]
	, [ExtensionTypeLabel]
	, [CustomerCanView]
	, [ModeratorCanView]
	, [CustomerCanEdit]
	, [ModeratorCanEdit]
    FROM
	[dbo].[SystemExtensionLabel]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ExtensionTypeID] = @ExtensionTypeId OR @ExtensionTypeId IS NULL)
	AND ([ExtensionTypeLabel] = @ExtensionTypeLabel OR @ExtensionTypeLabel IS NULL)
	AND ([CustomerCanView] = @CustomerCanView OR @CustomerCanView IS NULL)
	AND ([ModeratorCanView] = @ModeratorCanView OR @ModeratorCanView IS NULL)
	AND ([CustomerCanEdit] = @CustomerCanEdit OR @CustomerCanEdit IS NULL)
	AND ([ModeratorCanEdit] = @ModeratorCanEdit OR @ModeratorCanEdit IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [CustomerID]
	, [ExtensionTypeID]
	, [ExtensionTypeLabel]
	, [CustomerCanView]
	, [ModeratorCanView]
	, [CustomerCanEdit]
	, [ModeratorCanEdit]
    FROM
	[dbo].[SystemExtensionLabel]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ExtensionTypeID] = @ExtensionTypeId AND @ExtensionTypeId is not null)
	OR ([ExtensionTypeLabel] = @ExtensionTypeLabel AND @ExtensionTypeLabel is not null)
	OR ([CustomerCanView] = @CustomerCanView AND @CustomerCanView is not null)
	OR ([ModeratorCanView] = @ModeratorCanView AND @ModeratorCanView is not null)
	OR ([CustomerCanEdit] = @CustomerCanEdit AND @CustomerCanEdit is not null)
	OR ([ModeratorCanEdit] = @ModeratorCanEdit AND @ModeratorCanEdit is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Vertical table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Vertical table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[Vertical]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Vertical]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Vertical table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@Description varchar (50)  
)
AS


					
				INSERT INTO [dbo].[Vertical]
					(
					[WholesalerID]
					,[Description]
					)
				VALUES
					(
					@WholesalerId
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Vertical table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@Description varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Vertical]
				SET
					[WholesalerID] = @WholesalerId
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Vertical table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Vertical] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Vertical table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Vertical table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_GetByDescription procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_GetByDescription') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_GetByDescription
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Vertical table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_GetByDescription
(

	@Description varchar (50)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
				WHERE
					[Description] = @Description
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_GetByWholesalerIdDescription procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_GetByWholesalerIdDescription') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_GetByWholesalerIdDescription
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Vertical table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_GetByWholesalerIdDescription
(

	@WholesalerId varchar (10)  ,

	@Description varchar (50)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Vertical]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [Description] = @Description
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pVertical_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pVertical_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pVertical_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Vertical table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pVertical_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@Description varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Description]
    FROM
	[dbo].[Vertical]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Description]
    FROM
	[dbo].[Vertical]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemSettings_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemSettings_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemSettings_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SystemSettings table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemSettings_Get_List

AS


				
				SELECT
					[Name],
					[Value]
				FROM
					[dbo].[SystemSettings]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemSettings_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemSettings_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemSettings_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SystemSettings table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemSettings_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[Name]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ' FROM [dbo].[SystemSettings]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SystemSettings]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemSettings_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemSettings_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemSettings_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SystemSettings table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemSettings_Insert
(

	@Name varchar (50)  ,

	@Value varchar (50)  
)
AS


					
				INSERT INTO [dbo].[SystemSettings]
					(
					[Name]
					,[Value]
					)
				VALUES
					(
					@Name
					,@Value
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemSettings_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemSettings_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemSettings_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SystemSettings table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemSettings_Update
(

	@Name varchar (50)  ,

	@OriginalName varchar (50)  ,

	@Value varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SystemSettings]
				SET
					[Name] = @Name
					,[Value] = @Value
				WHERE
[Name] = @OriginalName 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemSettings_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemSettings_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemSettings_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SystemSettings table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemSettings_Delete
(

	@Name varchar (50)  
)
AS


				DELETE FROM [dbo].[SystemSettings] WITH (ROWLOCK) 
				WHERE
					[Name] = @Name
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemSettings_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemSettings_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemSettings_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SystemSettings table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemSettings_GetByName
(

	@Name varchar (50)  
)
AS


				SELECT
					[Name],
					[Value]
				FROM
					[dbo].[SystemSettings]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSystemSettings_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSystemSettings_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSystemSettings_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SystemSettings table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSystemSettings_Find
(

	@SearchUsingOR bit   = null ,

	@Name varchar (50)  = null ,

	@Value varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Name]
	, [Value]
    FROM
	[dbo].[SystemSettings]
    WHERE 
	 ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Name]
	, [Value]
    FROM
	[dbo].[SystemSettings]
    WHERE 
	 ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketProduct_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketProduct_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketProduct_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketProduct_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketProduct]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketProduct_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketProduct_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketProduct_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketProduct table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketProduct_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketProduct_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketProduct_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketProduct_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketProduct_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayOrder int   ,

	@Deleted bit   
)
AS


					
				INSERT INTO [dbo].[TicketProduct]
					(
					[Name]
					,[Description]
					,[DisplayOrder]
					,[Deleted]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayOrder
					,@Deleted
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketProduct_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketProduct_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketProduct_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketProduct_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayOrder int   ,

	@Deleted bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketProduct]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[Deleted] = @Deleted
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketProduct_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketProduct_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketProduct_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketProduct_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[TicketProduct] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketProduct_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketProduct_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketProduct_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketProduct table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketProduct_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketProduct]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketProduct_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketProduct_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketProduct_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketProduct table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketProduct_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@DisplayOrder int   = null ,

	@Deleted bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketProduct]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketProduct]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketStatus table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_Get_List

AS


				
				SELECT
					[ID],
					[Abbreviation],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketStatus]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketStatus table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Abbreviation]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketStatus]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Abbreviation],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketStatus]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketStatus table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_Insert
(

	@Id int   ,

	@Abbreviation varchar (2)  ,

	@Name varchar (30)  ,

	@Description varchar (100)  ,

	@DisplayOrder int   ,

	@Deleted bit   
)
AS


					
				INSERT INTO [dbo].[TicketStatus]
					(
					[ID]
					,[Abbreviation]
					,[Name]
					,[Description]
					,[DisplayOrder]
					,[Deleted]
					)
				VALUES
					(
					@Id
					,@Abbreviation
					,@Name
					,@Description
					,@DisplayOrder
					,@Deleted
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketStatus table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Abbreviation varchar (2)  ,

	@Name varchar (30)  ,

	@Description varchar (100)  ,

	@DisplayOrder int   ,

	@Deleted bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketStatus]
				SET
					[ID] = @Id
					,[Abbreviation] = @Abbreviation
					,[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[Deleted] = @Deleted
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketStatus table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[TicketStatus] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketStatus table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Abbreviation],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketStatus]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_GetByToStatusIdFromValidTicketStateChanges procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_GetByToStatusIdFromValidTicketStateChanges') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_GetByToStatusIdFromValidTicketStateChanges
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_GetByToStatusIdFromValidTicketStateChanges
(

	@ToStatusId int   
)
AS


SELECT dbo.[TicketStatus].[ID]
       ,dbo.[TicketStatus].[Abbreviation]
       ,dbo.[TicketStatus].[Name]
       ,dbo.[TicketStatus].[Description]
       ,dbo.[TicketStatus].[DisplayOrder]
       ,dbo.[TicketStatus].[Deleted]
  FROM dbo.[TicketStatus]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ValidTicketStateChanges] 
                WHERE dbo.[ValidTicketStateChanges].[ToStatusID] = @ToStatusId
                  AND dbo.[ValidTicketStateChanges].[FromStatusID] = dbo.[TicketStatus].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_GetByFromStatusIdFromValidTicketStateChanges procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_GetByFromStatusIdFromValidTicketStateChanges') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_GetByFromStatusIdFromValidTicketStateChanges
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_GetByFromStatusIdFromValidTicketStateChanges
(

	@FromStatusId int   
)
AS


SELECT dbo.[TicketStatus].[ID]
       ,dbo.[TicketStatus].[Abbreviation]
       ,dbo.[TicketStatus].[Name]
       ,dbo.[TicketStatus].[Description]
       ,dbo.[TicketStatus].[DisplayOrder]
       ,dbo.[TicketStatus].[Deleted]
  FROM dbo.[TicketStatus]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[ValidTicketStateChanges] 
                WHERE dbo.[ValidTicketStateChanges].[FromStatusID] = @FromStatusId
                  AND dbo.[ValidTicketStateChanges].[ToStatusID] = dbo.[TicketStatus].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatus_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatus_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatus_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketStatus table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatus_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Abbreviation varchar (2)  = null ,

	@Name varchar (30)  = null ,

	@Description varchar (100)  = null ,

	@DisplayOrder int   = null ,

	@Deleted bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Abbreviation]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketStatus]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Abbreviation] = @Abbreviation OR @Abbreviation IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Abbreviation]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketStatus]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Abbreviation] = @Abbreviation AND @Abbreviation is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketPriority_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketPriority_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketPriority_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketPriority table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketPriority_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketPriority]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketPriority_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketPriority_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketPriority_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketPriority table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketPriority_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketPriority]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketPriority]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketPriority_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketPriority_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketPriority_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketPriority table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketPriority_Insert
(

	@Id int   ,

	@Name varchar (30)  ,

	@Description varchar (200)  ,

	@DisplayOrder int   ,

	@Deleted bit   
)
AS


					
				INSERT INTO [dbo].[TicketPriority]
					(
					[ID]
					,[Name]
					,[Description]
					,[DisplayOrder]
					,[Deleted]
					)
				VALUES
					(
					@Id
					,@Name
					,@Description
					,@DisplayOrder
					,@Deleted
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketPriority_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketPriority_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketPriority_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketPriority table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketPriority_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Name varchar (30)  ,

	@Description varchar (200)  ,

	@DisplayOrder int   ,

	@Deleted bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketPriority]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[Deleted] = @Deleted
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketPriority_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketPriority_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketPriority_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketPriority table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketPriority_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[TicketPriority] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketPriority_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketPriority_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketPriority_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketPriority table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketPriority_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketPriority]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketPriority_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketPriority_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketPriority_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketPriority table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketPriority_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (30)  = null ,

	@Description varchar (200)  = null ,

	@DisplayOrder int   = null ,

	@Deleted bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketPriority]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketPriority]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the User table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_Get_List

AS


				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the User table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [MustChangePassword]'
				SET @SQL = @SQL + ', [Address1]'
				SET @SQL = @SQL + ', [Address2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [WebMemberID]'
				SET @SQL = @SQL + ', [UserUniqueID]'
				SET @SQL = @SQL + ' FROM [dbo].[User]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [MustChangePassword],'
				SET @SQL = @SQL + ' [Address1],'
				SET @SQL = @SQL + ' [Address2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [WebMemberID],'
				SET @SQL = @SQL + ' [UserUniqueID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[User]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the User table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_Insert
(

	@UserId int    OUTPUT,

	@Username varchar (100)  ,

	@Password varchar (50)  ,

	@DisplayName varchar (100)  ,

	@Email varchar (100)  ,

	@Telephone varchar (50)  ,

	@Enabled bit   ,

	@CompanyId int   ,

	@SalesPersonId int   ,

	@RoleId int   ,

	@MustChangePassword bit   ,

	@Address1 varchar (50)  ,

	@Address2 varchar (50)  ,

	@City varchar (50)  ,

	@Country varchar (3)  ,

	@Region varchar (3)  ,

	@PostalCode varchar (20)  ,

	@CharityId int   ,

	@WebMemberId varchar (50)  ,

	@UserUniqueId uniqueidentifier   
)
AS


					
				INSERT INTO [dbo].[User]
					(
					[Username]
					,[Password]
					,[DisplayName]
					,[Email]
					,[Telephone]
					,[Enabled]
					,[CompanyID]
					,[SalesPersonID]
					,[RoleID]
					,[MustChangePassword]
					,[Address1]
					,[Address2]
					,[City]
					,[Country]
					,[Region]
					,[PostalCode]
					,[CharityID]
					,[WebMemberID]
					,[UserUniqueID]
					)
				VALUES
					(
					@Username
					,@Password
					,@DisplayName
					,@Email
					,@Telephone
					,@Enabled
					,@CompanyId
					,@SalesPersonId
					,@RoleId
					,@MustChangePassword
					,@Address1
					,@Address2
					,@City
					,@Country
					,@Region
					,@PostalCode
					,@CharityId
					,@WebMemberId
					,@UserUniqueId
					)
				
				-- Get the identity value
				SET @UserId = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the User table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_Update
(

	@UserId int   ,

	@Username varchar (100)  ,

	@Password varchar (50)  ,

	@DisplayName varchar (100)  ,

	@Email varchar (100)  ,

	@Telephone varchar (50)  ,

	@Enabled bit   ,

	@CompanyId int   ,

	@SalesPersonId int   ,

	@RoleId int   ,

	@MustChangePassword bit   ,

	@Address1 varchar (50)  ,

	@Address2 varchar (50)  ,

	@City varchar (50)  ,

	@Country varchar (3)  ,

	@Region varchar (3)  ,

	@PostalCode varchar (20)  ,

	@CharityId int   ,

	@WebMemberId varchar (50)  ,

	@UserUniqueId uniqueidentifier   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[User]
				SET
					[Username] = @Username
					,[Password] = @Password
					,[DisplayName] = @DisplayName
					,[Email] = @Email
					,[Telephone] = @Telephone
					,[Enabled] = @Enabled
					,[CompanyID] = @CompanyId
					,[SalesPersonID] = @SalesPersonId
					,[RoleID] = @RoleId
					,[MustChangePassword] = @MustChangePassword
					,[Address1] = @Address1
					,[Address2] = @Address2
					,[City] = @City
					,[Country] = @Country
					,[Region] = @Region
					,[PostalCode] = @PostalCode
					,[CharityID] = @CharityId
					,[WebMemberID] = @WebMemberId
					,[UserUniqueID] = @UserUniqueId
				WHERE
[UserID] = @UserId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the User table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_Delete
(

	@UserId int   
)
AS


				DELETE FROM [dbo].[User] WITH (ROWLOCK) 
				WHERE
					[UserID] = @UserId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetByCharityId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetByCharityId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetByCharityId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetByCharityId
(

	@CharityId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[CharityID] = @CharityId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetByCountry procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetByCountry') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetByCountry
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetByCountry
(

	@Country varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[Country] = @Country
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetByRoleId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetByRoleId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetByRoleId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetByRoleId
(

	@RoleId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[RoleID] = @RoleId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetBySalesPersonId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetBySalesPersonId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetBySalesPersonId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetBySalesPersonId
(

	@SalesPersonId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetByRegion procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetByRegion') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetByRegion
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetByRegion
(

	@Region varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[Region] = @Region
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetByCompanyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetByCompanyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetByCompanyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetByCompanyId
(

	@CompanyId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[CompanyID] = @CompanyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetByUserId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetByUserId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetByUserId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetByUserId
(

	@UserId int   
)
AS


				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[UserID] = @UserId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetByUsername procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetByUsername') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetByUsername
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetByUsername
(

	@Username varchar (100)  
)
AS


				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[UserUniqueID]
				FROM
					[dbo].[User]
				WHERE
					[Username] = @Username
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_GetByMarketingServiceIdFromUser_MarketingService procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_GetByMarketingServiceIdFromUser_MarketingService') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_GetByMarketingServiceIdFromUser_MarketingService
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_GetByMarketingServiceIdFromUser_MarketingService
(

	@MarketingServiceId int   
)
AS


SELECT dbo.[User].[UserID]
       ,dbo.[User].[Username]
       ,dbo.[User].[Password]
       ,dbo.[User].[DisplayName]
       ,dbo.[User].[Email]
       ,dbo.[User].[Telephone]
       ,dbo.[User].[Enabled]
       ,dbo.[User].[CompanyID]
       ,dbo.[User].[SalesPersonID]
       ,dbo.[User].[RoleID]
       ,dbo.[User].[MustChangePassword]
       ,dbo.[User].[Address1]
       ,dbo.[User].[Address2]
       ,dbo.[User].[City]
       ,dbo.[User].[Country]
       ,dbo.[User].[Region]
       ,dbo.[User].[PostalCode]
       ,dbo.[User].[CharityID]
       ,dbo.[User].[WebMemberID]
       ,dbo.[User].[UserUniqueID]
  FROM dbo.[User]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[User_MarketingService] 
                WHERE dbo.[User_MarketingService].[MarketingServiceID] = @MarketingServiceId
                  AND dbo.[User_MarketingService].[UserID] = dbo.[User].[UserID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the User table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_Find
(

	@SearchUsingOR bit   = null ,

	@UserId int   = null ,

	@Username varchar (100)  = null ,

	@Password varchar (50)  = null ,

	@DisplayName varchar (100)  = null ,

	@Email varchar (100)  = null ,

	@Telephone varchar (50)  = null ,

	@Enabled bit   = null ,

	@CompanyId int   = null ,

	@SalesPersonId int   = null ,

	@RoleId int   = null ,

	@MustChangePassword bit   = null ,

	@Address1 varchar (50)  = null ,

	@Address2 varchar (50)  = null ,

	@City varchar (50)  = null ,

	@Country varchar (3)  = null ,

	@Region varchar (3)  = null ,

	@PostalCode varchar (20)  = null ,

	@CharityId int   = null ,

	@WebMemberId varchar (50)  = null ,

	@UserUniqueId uniqueidentifier   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserID]
	, [Username]
	, [Password]
	, [DisplayName]
	, [Email]
	, [Telephone]
	, [Enabled]
	, [CompanyID]
	, [SalesPersonID]
	, [RoleID]
	, [MustChangePassword]
	, [Address1]
	, [Address2]
	, [City]
	, [Country]
	, [Region]
	, [PostalCode]
	, [CharityID]
	, [WebMemberID]
	, [UserUniqueID]
    FROM
	[dbo].[User]
    WHERE 
	 ([UserID] = @UserId OR @UserId IS NULL)
	AND ([Username] = @Username OR @Username IS NULL)
	AND ([Password] = @Password OR @Password IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([Telephone] = @Telephone OR @Telephone IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([RoleID] = @RoleId OR @RoleId IS NULL)
	AND ([MustChangePassword] = @MustChangePassword OR @MustChangePassword IS NULL)
	AND ([Address1] = @Address1 OR @Address1 IS NULL)
	AND ([Address2] = @Address2 OR @Address2 IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([Country] = @Country OR @Country IS NULL)
	AND ([Region] = @Region OR @Region IS NULL)
	AND ([PostalCode] = @PostalCode OR @PostalCode IS NULL)
	AND ([CharityID] = @CharityId OR @CharityId IS NULL)
	AND ([WebMemberID] = @WebMemberId OR @WebMemberId IS NULL)
	AND ([UserUniqueID] = @UserUniqueId OR @UserUniqueId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserID]
	, [Username]
	, [Password]
	, [DisplayName]
	, [Email]
	, [Telephone]
	, [Enabled]
	, [CompanyID]
	, [SalesPersonID]
	, [RoleID]
	, [MustChangePassword]
	, [Address1]
	, [Address2]
	, [City]
	, [Country]
	, [Region]
	, [PostalCode]
	, [CharityID]
	, [WebMemberID]
	, [UserUniqueID]
    FROM
	[dbo].[User]
    WHERE 
	 ([UserID] = @UserId AND @UserId is not null)
	OR ([Username] = @Username AND @Username is not null)
	OR ([Password] = @Password AND @Password is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([Telephone] = @Telephone AND @Telephone is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([RoleID] = @RoleId AND @RoleId is not null)
	OR ([MustChangePassword] = @MustChangePassword AND @MustChangePassword is not null)
	OR ([Address1] = @Address1 AND @Address1 is not null)
	OR ([Address2] = @Address2 AND @Address2 is not null)
	OR ([City] = @City AND @City is not null)
	OR ([Country] = @Country AND @Country is not null)
	OR ([Region] = @Region AND @Region is not null)
	OR ([PostalCode] = @PostalCode AND @PostalCode is not null)
	OR ([CharityID] = @CharityId AND @CharityId is not null)
	OR ([WebMemberID] = @WebMemberId AND @WebMemberId is not null)
	OR ([UserUniqueID] = @UserUniqueId AND @UserUniqueId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ValidTicketStateChanges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_Get_List

AS


				
				SELECT
					[FromStatusID],
					[ToStatusID],
					[Reason]
				FROM
					[dbo].[ValidTicketStateChanges]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ValidTicketStateChanges table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[FromStatusID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [FromStatusID]'
				SET @SQL = @SQL + ', [ToStatusID]'
				SET @SQL = @SQL + ', [Reason]'
				SET @SQL = @SQL + ' FROM [dbo].[ValidTicketStateChanges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [FromStatusID],'
				SET @SQL = @SQL + ' [ToStatusID],'
				SET @SQL = @SQL + ' [Reason]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ValidTicketStateChanges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ValidTicketStateChanges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_Insert
(

	@FromStatusId int   ,

	@ToStatusId int   ,

	@Reason varchar (200)  
)
AS


					
				INSERT INTO [dbo].[ValidTicketStateChanges]
					(
					[FromStatusID]
					,[ToStatusID]
					,[Reason]
					)
				VALUES
					(
					@FromStatusId
					,@ToStatusId
					,@Reason
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ValidTicketStateChanges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_Update
(

	@FromStatusId int   ,

	@OriginalFromStatusId int   ,

	@ToStatusId int   ,

	@OriginalToStatusId int   ,

	@Reason varchar (200)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ValidTicketStateChanges]
				SET
					[FromStatusID] = @FromStatusId
					,[ToStatusID] = @ToStatusId
					,[Reason] = @Reason
				WHERE
[FromStatusID] = @OriginalFromStatusId 
AND [ToStatusID] = @OriginalToStatusId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ValidTicketStateChanges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_Delete
(

	@FromStatusId int   ,

	@ToStatusId int   
)
AS


				DELETE FROM [dbo].[ValidTicketStateChanges] WITH (ROWLOCK) 
				WHERE
					[FromStatusID] = @FromStatusId
					AND [ToStatusID] = @ToStatusId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_GetByFromStatusId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_GetByFromStatusId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_GetByFromStatusId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ValidTicketStateChanges table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_GetByFromStatusId
(

	@FromStatusId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[FromStatusID],
					[ToStatusID],
					[Reason]
				FROM
					[dbo].[ValidTicketStateChanges]
				WHERE
					[FromStatusID] = @FromStatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_GetByToStatusId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_GetByToStatusId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_GetByToStatusId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ValidTicketStateChanges table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_GetByToStatusId
(

	@ToStatusId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[FromStatusID],
					[ToStatusID],
					[Reason]
				FROM
					[dbo].[ValidTicketStateChanges]
				WHERE
					[ToStatusID] = @ToStatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_GetByFromStatusIdToStatusId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_GetByFromStatusIdToStatusId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_GetByFromStatusIdToStatusId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ValidTicketStateChanges table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_GetByFromStatusIdToStatusId
(

	@FromStatusId int   ,

	@ToStatusId int   
)
AS


				SELECT
					[FromStatusID],
					[ToStatusID],
					[Reason]
				FROM
					[dbo].[ValidTicketStateChanges]
				WHERE
					[FromStatusID] = @FromStatusId
					AND [ToStatusID] = @ToStatusId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pValidTicketStateChanges_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pValidTicketStateChanges_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pValidTicketStateChanges_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ValidTicketStateChanges table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pValidTicketStateChanges_Find
(

	@SearchUsingOR bit   = null ,

	@FromStatusId int   = null ,

	@ToStatusId int   = null ,

	@Reason varchar (200)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [FromStatusID]
	, [ToStatusID]
	, [Reason]
    FROM
	[dbo].[ValidTicketStateChanges]
    WHERE 
	 ([FromStatusID] = @FromStatusId OR @FromStatusId IS NULL)
	AND ([ToStatusID] = @ToStatusId OR @ToStatusId IS NULL)
	AND ([Reason] = @Reason OR @Reason IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [FromStatusID]
	, [ToStatusID]
	, [Reason]
    FROM
	[dbo].[ValidTicketStateChanges]
    WHERE 
	 ([FromStatusID] = @FromStatusId AND @FromStatusId is not null)
	OR ([ToStatusID] = @ToStatusId AND @ToStatusId is not null)
	OR ([Reason] = @Reason AND @Reason is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the User_MarketingService table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_Get_List

AS


				
				SELECT
					[UserID],
					[MarketingServiceID],
					[CreatedDate],
					[LastModified],
					[LastModifiedBy],
					[LastContactDate],
					[NextContactDate]
				FROM
					[dbo].[User_MarketingService]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the User_MarketingService table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [MarketingServiceID]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [LastModifiedBy]'
				SET @SQL = @SQL + ', [LastContactDate]'
				SET @SQL = @SQL + ', [NextContactDate]'
				SET @SQL = @SQL + ' FROM [dbo].[User_MarketingService]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [MarketingServiceID],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [LastModifiedBy],'
				SET @SQL = @SQL + ' [LastContactDate],'
				SET @SQL = @SQL + ' [NextContactDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[User_MarketingService]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the User_MarketingService table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_Insert
(

	@UserId int   ,

	@MarketingServiceId int   ,

	@CreatedDate datetime   ,

	@LastModified datetime   ,

	@LastModifiedBy varchar (100)  ,

	@LastContactDate datetime   ,

	@NextContactDate datetime   
)
AS


					
				INSERT INTO [dbo].[User_MarketingService]
					(
					[UserID]
					,[MarketingServiceID]
					,[CreatedDate]
					,[LastModified]
					,[LastModifiedBy]
					,[LastContactDate]
					,[NextContactDate]
					)
				VALUES
					(
					@UserId
					,@MarketingServiceId
					,@CreatedDate
					,@LastModified
					,@LastModifiedBy
					,@LastContactDate
					,@NextContactDate
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the User_MarketingService table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_Update
(

	@UserId int   ,

	@OriginalUserId int   ,

	@MarketingServiceId int   ,

	@OriginalMarketingServiceId int   ,

	@CreatedDate datetime   ,

	@LastModified datetime   ,

	@LastModifiedBy varchar (100)  ,

	@LastContactDate datetime   ,

	@NextContactDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[User_MarketingService]
				SET
					[UserID] = @UserId
					,[MarketingServiceID] = @MarketingServiceId
					,[CreatedDate] = @CreatedDate
					,[LastModified] = @LastModified
					,[LastModifiedBy] = @LastModifiedBy
					,[LastContactDate] = @LastContactDate
					,[NextContactDate] = @NextContactDate
				WHERE
[MarketingServiceID] = @OriginalMarketingServiceId 
AND [UserID] = @OriginalUserId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the User_MarketingService table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_Delete
(

	@MarketingServiceId int   ,

	@UserId int   
)
AS


				DELETE FROM [dbo].[User_MarketingService] WITH (ROWLOCK) 
				WHERE
					[MarketingServiceID] = @MarketingServiceId
					AND [UserID] = @UserId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_GetByUserId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_GetByUserId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_GetByUserId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User_MarketingService table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_GetByUserId
(

	@UserId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[MarketingServiceID],
					[CreatedDate],
					[LastModified],
					[LastModifiedBy],
					[LastContactDate],
					[NextContactDate]
				FROM
					[dbo].[User_MarketingService]
				WHERE
					[UserID] = @UserId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_GetByMarketingServiceId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_GetByMarketingServiceId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_GetByMarketingServiceId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User_MarketingService table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_GetByMarketingServiceId
(

	@MarketingServiceId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[UserID],
					[MarketingServiceID],
					[CreatedDate],
					[LastModified],
					[LastModifiedBy],
					[LastContactDate],
					[NextContactDate]
				FROM
					[dbo].[User_MarketingService]
				WHERE
					[MarketingServiceID] = @MarketingServiceId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_GetByMarketingServiceIdUserId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_GetByMarketingServiceIdUserId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_GetByMarketingServiceIdUserId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the User_MarketingService table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_GetByMarketingServiceIdUserId
(

	@MarketingServiceId int   ,

	@UserId int   
)
AS


				SELECT
					[UserID],
					[MarketingServiceID],
					[CreatedDate],
					[LastModified],
					[LastModifiedBy],
					[LastContactDate],
					[NextContactDate]
				FROM
					[dbo].[User_MarketingService]
				WHERE
					[MarketingServiceID] = @MarketingServiceId
					AND [UserID] = @UserId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUser_MarketingService_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUser_MarketingService_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUser_MarketingService_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the User_MarketingService table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUser_MarketingService_Find
(

	@SearchUsingOR bit   = null ,

	@UserId int   = null ,

	@MarketingServiceId int   = null ,

	@CreatedDate datetime   = null ,

	@LastModified datetime   = null ,

	@LastModifiedBy varchar (100)  = null ,

	@LastContactDate datetime   = null ,

	@NextContactDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserID]
	, [MarketingServiceID]
	, [CreatedDate]
	, [LastModified]
	, [LastModifiedBy]
	, [LastContactDate]
	, [NextContactDate]
    FROM
	[dbo].[User_MarketingService]
    WHERE 
	 ([UserID] = @UserId OR @UserId IS NULL)
	AND ([MarketingServiceID] = @MarketingServiceId OR @MarketingServiceId IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([LastModifiedBy] = @LastModifiedBy OR @LastModifiedBy IS NULL)
	AND ([LastContactDate] = @LastContactDate OR @LastContactDate IS NULL)
	AND ([NextContactDate] = @NextContactDate OR @NextContactDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserID]
	, [MarketingServiceID]
	, [CreatedDate]
	, [LastModified]
	, [LastModifiedBy]
	, [LastContactDate]
	, [NextContactDate]
    FROM
	[dbo].[User_MarketingService]
    WHERE 
	 ([UserID] = @UserId AND @UserId is not null)
	OR ([MarketingServiceID] = @MarketingServiceId AND @MarketingServiceId is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([LastModifiedBy] = @LastModifiedBy AND @LastModifiedBy is not null)
	OR ([LastContactDate] = @LastContactDate AND @LastContactDate is not null)
	OR ([NextContactDate] = @NextContactDate AND @NextContactDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Moderator_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_Get_List

AS


				
				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator_Feature table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Moderator_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_Insert
(

	@Id int    OUTPUT,

	@ModeratorId int   ,

	@FeatureId int   ,

	@FeatureOptionId int   ,

	@Enabled bit   ,

	@FeatureOptionValue varchar (100)  
)
AS


					
				INSERT INTO [dbo].[Moderator_Feature]
					(
					[ModeratorID]
					,[FeatureID]
					,[FeatureOptionID]
					,[Enabled]
					,[FeatureOptionValue]
					)
				VALUES
					(
					@ModeratorId
					,@FeatureId
					,@FeatureOptionId
					,@Enabled
					,@FeatureOptionValue
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Moderator_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_Update
(

	@Id int   ,

	@ModeratorId int   ,

	@FeatureId int   ,

	@FeatureOptionId int   ,

	@Enabled bit   ,

	@FeatureOptionValue varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Moderator_Feature]
				SET
					[ModeratorID] = @ModeratorId
					,[FeatureID] = @FeatureId
					,[FeatureOptionID] = @FeatureOptionId
					,[Enabled] = @Enabled
					,[FeatureOptionValue] = @FeatureOptionValue
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Moderator_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Moderator_Feature] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_GetByFeatureIdModeratorIdFeatureOptionId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_GetByFeatureIdModeratorIdFeatureOptionId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_GetByFeatureIdModeratorIdFeatureOptionId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_GetByFeatureIdModeratorIdFeatureOptionId
(

	@FeatureId int   ,

	@ModeratorId int   ,

	@FeatureOptionId int   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[FeatureID] = @FeatureId
					AND [ModeratorID] = @ModeratorId
					AND [FeatureOptionID] = @FeatureOptionId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_GetByFeatureId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_GetByFeatureId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_GetByFeatureId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_GetByFeatureId
(

	@FeatureId int   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[FeatureID] = @FeatureId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_GetByFeatureIdModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_GetByFeatureIdModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_GetByFeatureIdModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_GetByFeatureIdModeratorId
(

	@FeatureId int   ,

	@ModeratorId int   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[FeatureID] = @FeatureId
					AND [ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_GetByFeatureOptionId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_GetByFeatureOptionId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_GetByFeatureOptionId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_GetByFeatureOptionId
(

	@FeatureOptionId int   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Moderator_Feature]
				WHERE
					[FeatureOptionID] = @FeatureOptionId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Feature_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Feature_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Feature_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Moderator_Feature table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Feature_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@ModeratorId int   = null ,

	@FeatureId int   = null ,

	@FeatureOptionId int   = null ,

	@Enabled bit   = null ,

	@FeatureOptionValue varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Moderator_Feature]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([FeatureID] = @FeatureId OR @FeatureId IS NULL)
	AND ([FeatureOptionID] = @FeatureOptionId OR @FeatureOptionId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([FeatureOptionValue] = @FeatureOptionValue OR @FeatureOptionValue IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Moderator_Feature]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([FeatureID] = @FeatureId AND @FeatureId is not null)
	OR ([FeatureOptionID] = @FeatureOptionId AND @FeatureOptionId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([FeatureOptionValue] = @FeatureOptionValue AND @FeatureOptionValue is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUTIL_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUTIL_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUTIL_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the UTIL table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUTIL_Get_List

AS


				
				SELECT
					[ID]
				FROM
					[dbo].[UTIL]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUTIL_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUTIL_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUTIL_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the UTIL table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUTIL_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ' FROM [dbo].[UTIL]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[UTIL]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUTIL_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUTIL_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUTIL_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the UTIL table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUTIL_Insert
(

	@Id int   
)
AS


					
				INSERT INTO [dbo].[UTIL]
					(
					[ID]
					)
				VALUES
					(
					@Id
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUTIL_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUTIL_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUTIL_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the UTIL table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUTIL_Update
(

	@Id int   ,

	@OriginalId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[UTIL]
				SET
					[ID] = @Id
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUTIL_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUTIL_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUTIL_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the UTIL table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUTIL_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[UTIL] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUTIL_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUTIL_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUTIL_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the UTIL table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUTIL_GetById
(

	@Id int   
)
AS


				SELECT
					[ID]
				FROM
					[dbo].[UTIL]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pUTIL_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pUTIL_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pUTIL_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the UTIL table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pUTIL_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
    FROM
	[dbo].[UTIL]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
    FROM
	[dbo].[UTIL]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketCategory_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketCategory_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketCategory_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketCategory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketCategory_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketCategory]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketCategory_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketCategory_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketCategory_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketCategory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketCategory_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketCategory_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketCategory_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketCategory_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketCategory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketCategory_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (200)  ,

	@DisplayOrder int   ,

	@Deleted bit   
)
AS


					
				INSERT INTO [dbo].[TicketCategory]
					(
					[Name]
					,[Description]
					,[DisplayOrder]
					,[Deleted]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayOrder
					,@Deleted
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketCategory_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketCategory_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketCategory_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketCategory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketCategory_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (200)  ,

	@DisplayOrder int   ,

	@Deleted bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketCategory]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
					,[Deleted] = @Deleted
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketCategory_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketCategory_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketCategory_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketCategory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketCategory_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[TicketCategory] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketCategory_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketCategory_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketCategory_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketCategory table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketCategory_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder],
					[Deleted]
				FROM
					[dbo].[TicketCategory]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketCategory_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketCategory_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketCategory_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketCategory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketCategory_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (200)  = null ,

	@DisplayOrder int   = null ,

	@Deleted bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketCategory]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
	, [Deleted]
    FROM
	[dbo].[TicketCategory]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTaxable_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTaxable_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTaxable_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Taxable table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTaxable_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[Taxable]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTaxable_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTaxable_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTaxable_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Taxable table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTaxable_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Taxable]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Taxable]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTaxable_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTaxable_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTaxable_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Taxable table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTaxable_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@DisplayName varchar (30)  ,

	@Description varchar (100)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[Taxable]
					(
					[Name]
					,[DisplayName]
					,[Description]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@Description
					,@Value
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTaxable_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTaxable_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTaxable_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Taxable table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTaxable_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (30)  ,

	@Description varchar (100)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Taxable]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTaxable_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTaxable_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTaxable_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Taxable table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTaxable_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Taxable] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTaxable_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTaxable_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTaxable_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Taxable table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTaxable_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[Description],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[Taxable]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTaxable_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTaxable_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTaxable_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Taxable table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTaxable_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (30)  = null ,

	@Description varchar (100)  = null ,

	@Value int   = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[Taxable]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[Taxable]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Wholesaler table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Get_List

AS


				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [CompanyShortName]'
				SET @SQL = @SQL + ', [RetailPriCustomerNumber]'
				SET @SQL = @SQL + ', [RetailPriCustomerNumberLIKEExp]'
				SET @SQL = @SQL + ', [DefaultModCodeLength]'
				SET @SQL = @SQL + ', [DefaultPassCodeLength]'
				SET @SQL = @SQL + ', [DefaultPasswordLength]'
				SET @SQL = @SQL + ', [DefaultCapsOK]'
				SET @SQL = @SQL + ', [ModeratorTxt]'
				SET @SQL = @SQL + ', [ParticipantTxt]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [CustomerNumberExceptionList]'
				SET @SQL = @SQL + ', [WebProductProviderName]'
				SET @SQL = @SQL + ', [WebProductProviderBranding]'
				SET @SQL = @SQL + ', [WebSecProductProvider]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ', [BillingWholesalerID]'
				SET @SQL = @SQL + ', [BillingCustomerNumber]'
				SET @SQL = @SQL + ', [TaxableID]'
				SET @SQL = @SQL + ', [WebSiteURL]'
				SET @SQL = @SQL + ', [AdminSiteURL]'
				SET @SQL = @SQL + ', [AdminSiteIP]'
				SET @SQL = @SQL + ', [SelfServeURL]'
				SET @SQL = @SQL + ', [SelfServeIP]'
				SET @SQL = @SQL + ', [WebConferencingURL]'
				SET @SQL = @SQL + ', [WebConferencingIP]'
				SET @SQL = @SQL + ', [SupportEmail]'
				SET @SQL = @SQL + ', [SupportPhoneNumber]'
				SET @SQL = @SQL + ', [DoRetailBilling]'
				SET @SQL = @SQL + ', [CommissionLockDate]'
				SET @SQL = @SQL + ', [PortalID]'
				SET @SQL = @SQL + ', [BillingAddress1]'
				SET @SQL = @SQL + ', [BillingAddress2]'
				SET @SQL = @SQL + ', [BillingCity]'
				SET @SQL = @SQL + ', [BillingCountry]'
				SET @SQL = @SQL + ', [BillingRegion]'
				SET @SQL = @SQL + ', [BillingPostalCode]'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [CompanyShortName],'
				SET @SQL = @SQL + ' [RetailPriCustomerNumber],'
				SET @SQL = @SQL + ' [RetailPriCustomerNumberLIKEExp],'
				SET @SQL = @SQL + ' [DefaultModCodeLength],'
				SET @SQL = @SQL + ' [DefaultPassCodeLength],'
				SET @SQL = @SQL + ' [DefaultPasswordLength],'
				SET @SQL = @SQL + ' [DefaultCapsOK],'
				SET @SQL = @SQL + ' [ModeratorTxt],'
				SET @SQL = @SQL + ' [ParticipantTxt],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [CustomerNumberExceptionList],'
				SET @SQL = @SQL + ' [WebProductProviderName],'
				SET @SQL = @SQL + ' [WebProductProviderBranding],'
				SET @SQL = @SQL + ' [WebSecProductProvider],'
				SET @SQL = @SQL + ' [CurrencyID],'
				SET @SQL = @SQL + ' [BillingWholesalerID],'
				SET @SQL = @SQL + ' [BillingCustomerNumber],'
				SET @SQL = @SQL + ' [TaxableID],'
				SET @SQL = @SQL + ' [WebSiteURL],'
				SET @SQL = @SQL + ' [AdminSiteURL],'
				SET @SQL = @SQL + ' [AdminSiteIP],'
				SET @SQL = @SQL + ' [SelfServeURL],'
				SET @SQL = @SQL + ' [SelfServeIP],'
				SET @SQL = @SQL + ' [WebConferencingURL],'
				SET @SQL = @SQL + ' [WebConferencingIP],'
				SET @SQL = @SQL + ' [SupportEmail],'
				SET @SQL = @SQL + ' [SupportPhoneNumber],'
				SET @SQL = @SQL + ' [DoRetailBilling],'
				SET @SQL = @SQL + ' [CommissionLockDate],'
				SET @SQL = @SQL + ' [PortalID],'
				SET @SQL = @SQL + ' [BillingAddress1],'
				SET @SQL = @SQL + ' [BillingAddress2],'
				SET @SQL = @SQL + ' [BillingCity],'
				SET @SQL = @SQL + ' [BillingCountry],'
				SET @SQL = @SQL + ' [BillingRegion],'
				SET @SQL = @SQL + ' [BillingPostalCode]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Wholesaler table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Insert
(

	@Id varchar (10)  ,

	@CompanyName varchar (50)  ,

	@CompanyShortName varchar (30)  ,

	@RetailPriCustomerNumber varchar (10)  ,

	@RetailPriCustomerNumberLikeExp varchar (10)  ,

	@DefaultModCodeLength tinyint   ,

	@DefaultPassCodeLength tinyint   ,

	@DefaultPasswordLength tinyint   ,

	@DefaultCapsOk bit   ,

	@ModeratorTxt varchar (50)  ,

	@ParticipantTxt varchar (50)  ,

	@Enabled bit   ,

	@CustomerNumberExceptionList varchar (500)  ,

	@WebProductProviderName varchar (50)  ,

	@WebProductProviderBranding varchar (50)  ,

	@WebSecProductProvider varchar (50)  ,

	@CurrencyId char (3)  ,

	@BillingWholesalerId char (10)  ,

	@BillingCustomerNumber char (10)  ,

	@TaxableId int   ,

	@WebSiteUrl varchar (100)  ,

	@AdminSiteUrl varchar (100)  ,

	@AdminSiteIp varchar (100)  ,

	@SelfServeUrl varchar (100)  ,

	@SelfServeIp varchar (100)  ,

	@WebConferencingUrl varchar (100)  ,

	@WebConferencingIp varchar (100)  ,

	@SupportEmail varchar (50)  ,

	@SupportPhoneNumber varchar (30)  ,

	@DoRetailBilling bit   ,

	@CommissionLockDate datetime   ,

	@PortalId int   ,

	@BillingAddress1 varchar (50)  ,

	@BillingAddress2 varchar (50)  ,

	@BillingCity varchar (50)  ,

	@BillingCountry varchar (3)  ,

	@BillingRegion varchar (3)  ,

	@BillingPostalCode varchar (20)  
)
AS


					
				INSERT INTO [dbo].[Wholesaler]
					(
					[ID]
					,[CompanyName]
					,[CompanyShortName]
					,[RetailPriCustomerNumber]
					,[RetailPriCustomerNumberLIKEExp]
					,[DefaultModCodeLength]
					,[DefaultPassCodeLength]
					,[DefaultPasswordLength]
					,[DefaultCapsOK]
					,[ModeratorTxt]
					,[ParticipantTxt]
					,[Enabled]
					,[CustomerNumberExceptionList]
					,[WebProductProviderName]
					,[WebProductProviderBranding]
					,[WebSecProductProvider]
					,[CurrencyID]
					,[BillingWholesalerID]
					,[BillingCustomerNumber]
					,[TaxableID]
					,[WebSiteURL]
					,[AdminSiteURL]
					,[AdminSiteIP]
					,[SelfServeURL]
					,[SelfServeIP]
					,[WebConferencingURL]
					,[WebConferencingIP]
					,[SupportEmail]
					,[SupportPhoneNumber]
					,[DoRetailBilling]
					,[CommissionLockDate]
					,[PortalID]
					,[BillingAddress1]
					,[BillingAddress2]
					,[BillingCity]
					,[BillingCountry]
					,[BillingRegion]
					,[BillingPostalCode]
					)
				VALUES
					(
					@Id
					,@CompanyName
					,@CompanyShortName
					,@RetailPriCustomerNumber
					,@RetailPriCustomerNumberLikeExp
					,@DefaultModCodeLength
					,@DefaultPassCodeLength
					,@DefaultPasswordLength
					,@DefaultCapsOk
					,@ModeratorTxt
					,@ParticipantTxt
					,@Enabled
					,@CustomerNumberExceptionList
					,@WebProductProviderName
					,@WebProductProviderBranding
					,@WebSecProductProvider
					,@CurrencyId
					,@BillingWholesalerId
					,@BillingCustomerNumber
					,@TaxableId
					,@WebSiteUrl
					,@AdminSiteUrl
					,@AdminSiteIp
					,@SelfServeUrl
					,@SelfServeIp
					,@WebConferencingUrl
					,@WebConferencingIp
					,@SupportEmail
					,@SupportPhoneNumber
					,@DoRetailBilling
					,@CommissionLockDate
					,@PortalId
					,@BillingAddress1
					,@BillingAddress2
					,@BillingCity
					,@BillingCountry
					,@BillingRegion
					,@BillingPostalCode
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Wholesaler table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Update
(

	@Id varchar (10)  ,

	@OriginalId varchar (10)  ,

	@CompanyName varchar (50)  ,

	@CompanyShortName varchar (30)  ,

	@RetailPriCustomerNumber varchar (10)  ,

	@RetailPriCustomerNumberLikeExp varchar (10)  ,

	@DefaultModCodeLength tinyint   ,

	@DefaultPassCodeLength tinyint   ,

	@DefaultPasswordLength tinyint   ,

	@DefaultCapsOk bit   ,

	@ModeratorTxt varchar (50)  ,

	@ParticipantTxt varchar (50)  ,

	@Enabled bit   ,

	@CustomerNumberExceptionList varchar (500)  ,

	@WebProductProviderName varchar (50)  ,

	@WebProductProviderBranding varchar (50)  ,

	@WebSecProductProvider varchar (50)  ,

	@CurrencyId char (3)  ,

	@BillingWholesalerId char (10)  ,

	@BillingCustomerNumber char (10)  ,

	@TaxableId int   ,

	@WebSiteUrl varchar (100)  ,

	@AdminSiteUrl varchar (100)  ,

	@AdminSiteIp varchar (100)  ,

	@SelfServeUrl varchar (100)  ,

	@SelfServeIp varchar (100)  ,

	@WebConferencingUrl varchar (100)  ,

	@WebConferencingIp varchar (100)  ,

	@SupportEmail varchar (50)  ,

	@SupportPhoneNumber varchar (30)  ,

	@DoRetailBilling bit   ,

	@CommissionLockDate datetime   ,

	@PortalId int   ,

	@BillingAddress1 varchar (50)  ,

	@BillingAddress2 varchar (50)  ,

	@BillingCity varchar (50)  ,

	@BillingCountry varchar (3)  ,

	@BillingRegion varchar (3)  ,

	@BillingPostalCode varchar (20)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Wholesaler]
				SET
					[ID] = @Id
					,[CompanyName] = @CompanyName
					,[CompanyShortName] = @CompanyShortName
					,[RetailPriCustomerNumber] = @RetailPriCustomerNumber
					,[RetailPriCustomerNumberLIKEExp] = @RetailPriCustomerNumberLikeExp
					,[DefaultModCodeLength] = @DefaultModCodeLength
					,[DefaultPassCodeLength] = @DefaultPassCodeLength
					,[DefaultPasswordLength] = @DefaultPasswordLength
					,[DefaultCapsOK] = @DefaultCapsOk
					,[ModeratorTxt] = @ModeratorTxt
					,[ParticipantTxt] = @ParticipantTxt
					,[Enabled] = @Enabled
					,[CustomerNumberExceptionList] = @CustomerNumberExceptionList
					,[WebProductProviderName] = @WebProductProviderName
					,[WebProductProviderBranding] = @WebProductProviderBranding
					,[WebSecProductProvider] = @WebSecProductProvider
					,[CurrencyID] = @CurrencyId
					,[BillingWholesalerID] = @BillingWholesalerId
					,[BillingCustomerNumber] = @BillingCustomerNumber
					,[TaxableID] = @TaxableId
					,[WebSiteURL] = @WebSiteUrl
					,[AdminSiteURL] = @AdminSiteUrl
					,[AdminSiteIP] = @AdminSiteIp
					,[SelfServeURL] = @SelfServeUrl
					,[SelfServeIP] = @SelfServeIp
					,[WebConferencingURL] = @WebConferencingUrl
					,[WebConferencingIP] = @WebConferencingIp
					,[SupportEmail] = @SupportEmail
					,[SupportPhoneNumber] = @SupportPhoneNumber
					,[DoRetailBilling] = @DoRetailBilling
					,[CommissionLockDate] = @CommissionLockDate
					,[PortalID] = @PortalId
					,[BillingAddress1] = @BillingAddress1
					,[BillingAddress2] = @BillingAddress2
					,[BillingCity] = @BillingCity
					,[BillingCountry] = @BillingCountry
					,[BillingRegion] = @BillingRegion
					,[BillingPostalCode] = @BillingPostalCode
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Wholesaler table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Delete
(

	@Id varchar (10)  
)
AS


				DELETE FROM [dbo].[Wholesaler] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_GetByCurrencyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_GetByCurrencyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_GetByCurrencyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_GetByCurrencyId
(

	@CurrencyId char (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[CurrencyID] = @CurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_GetByBillingCountry procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_GetByBillingCountry') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_GetByBillingCountry
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_GetByBillingCountry
(

	@BillingCountry varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[BillingCountry] = @BillingCountry
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_GetByBillingRegion procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_GetByBillingRegion') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_GetByBillingRegion
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_GetByBillingRegion
(

	@BillingRegion varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[BillingRegion] = @BillingRegion
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_GetByTaxableId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_GetByTaxableId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_GetByTaxableId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_GetByTaxableId
(

	@TaxableId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[TaxableID] = @TaxableId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_GetById
(

	@Id varchar (10)  
)
AS


				SELECT
					[ID],
					[CompanyName],
					[CompanyShortName],
					[RetailPriCustomerNumber],
					[RetailPriCustomerNumberLIKEExp],
					[DefaultModCodeLength],
					[DefaultPassCodeLength],
					[DefaultPasswordLength],
					[DefaultCapsOK],
					[ModeratorTxt],
					[ParticipantTxt],
					[Enabled],
					[CustomerNumberExceptionList],
					[WebProductProviderName],
					[WebProductProviderBranding],
					[WebSecProductProvider],
					[CurrencyID],
					[BillingWholesalerID],
					[BillingCustomerNumber],
					[TaxableID],
					[WebSiteURL],
					[AdminSiteURL],
					[AdminSiteIP],
					[SelfServeURL],
					[SelfServeIP],
					[WebConferencingURL],
					[WebConferencingIP],
					[SupportEmail],
					[SupportPhoneNumber],
					[DoRetailBilling],
					[CommissionLockDate],
					[PortalID],
					[BillingAddress1],
					[BillingAddress2],
					[BillingCity],
					[BillingCountry],
					[BillingRegion],
					[BillingPostalCode]
				FROM
					[dbo].[Wholesaler]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_GetByLanguageIdFromIrWholesaler procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_GetByLanguageIdFromIrWholesaler') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_GetByLanguageIdFromIrWholesaler
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_GetByLanguageIdFromIrWholesaler
(

	@LanguageId varchar (5)  
)
AS


SELECT dbo.[Wholesaler].[ID]
       ,dbo.[Wholesaler].[CompanyName]
       ,dbo.[Wholesaler].[CompanyShortName]
       ,dbo.[Wholesaler].[RetailPriCustomerNumber]
       ,dbo.[Wholesaler].[RetailPriCustomerNumberLIKEExp]
       ,dbo.[Wholesaler].[DefaultModCodeLength]
       ,dbo.[Wholesaler].[DefaultPassCodeLength]
       ,dbo.[Wholesaler].[DefaultPasswordLength]
       ,dbo.[Wholesaler].[DefaultCapsOK]
       ,dbo.[Wholesaler].[ModeratorTxt]
       ,dbo.[Wholesaler].[ParticipantTxt]
       ,dbo.[Wholesaler].[Enabled]
       ,dbo.[Wholesaler].[CustomerNumberExceptionList]
       ,dbo.[Wholesaler].[WebProductProviderName]
       ,dbo.[Wholesaler].[WebProductProviderBranding]
       ,dbo.[Wholesaler].[WebSecProductProvider]
       ,dbo.[Wholesaler].[CurrencyID]
       ,dbo.[Wholesaler].[BillingWholesalerID]
       ,dbo.[Wholesaler].[BillingCustomerNumber]
       ,dbo.[Wholesaler].[TaxableID]
       ,dbo.[Wholesaler].[WebSiteURL]
       ,dbo.[Wholesaler].[AdminSiteURL]
       ,dbo.[Wholesaler].[AdminSiteIP]
       ,dbo.[Wholesaler].[SelfServeURL]
       ,dbo.[Wholesaler].[SelfServeIP]
       ,dbo.[Wholesaler].[WebConferencingURL]
       ,dbo.[Wholesaler].[WebConferencingIP]
       ,dbo.[Wholesaler].[SupportEmail]
       ,dbo.[Wholesaler].[SupportPhoneNumber]
       ,dbo.[Wholesaler].[DoRetailBilling]
       ,dbo.[Wholesaler].[CommissionLockDate]
       ,dbo.[Wholesaler].[PortalID]
       ,dbo.[Wholesaler].[BillingAddress1]
       ,dbo.[Wholesaler].[BillingAddress2]
       ,dbo.[Wholesaler].[BillingCity]
       ,dbo.[Wholesaler].[BillingCountry]
       ,dbo.[Wholesaler].[BillingRegion]
       ,dbo.[Wholesaler].[BillingPostalCode]
  FROM dbo.[Wholesaler]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[IRWholesaler] 
                WHERE dbo.[IRWholesaler].[LanguageID] = @LanguageId
                  AND dbo.[IRWholesaler].[WholesalerID] = dbo.[Wholesaler].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Wholesaler table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Find
(

	@SearchUsingOR bit   = null ,

	@Id varchar (10)  = null ,

	@CompanyName varchar (50)  = null ,

	@CompanyShortName varchar (30)  = null ,

	@RetailPriCustomerNumber varchar (10)  = null ,

	@RetailPriCustomerNumberLikeExp varchar (10)  = null ,

	@DefaultModCodeLength tinyint   = null ,

	@DefaultPassCodeLength tinyint   = null ,

	@DefaultPasswordLength tinyint   = null ,

	@DefaultCapsOk bit   = null ,

	@ModeratorTxt varchar (50)  = null ,

	@ParticipantTxt varchar (50)  = null ,

	@Enabled bit   = null ,

	@CustomerNumberExceptionList varchar (500)  = null ,

	@WebProductProviderName varchar (50)  = null ,

	@WebProductProviderBranding varchar (50)  = null ,

	@WebSecProductProvider varchar (50)  = null ,

	@CurrencyId char (3)  = null ,

	@BillingWholesalerId char (10)  = null ,

	@BillingCustomerNumber char (10)  = null ,

	@TaxableId int   = null ,

	@WebSiteUrl varchar (100)  = null ,

	@AdminSiteUrl varchar (100)  = null ,

	@AdminSiteIp varchar (100)  = null ,

	@SelfServeUrl varchar (100)  = null ,

	@SelfServeIp varchar (100)  = null ,

	@WebConferencingUrl varchar (100)  = null ,

	@WebConferencingIp varchar (100)  = null ,

	@SupportEmail varchar (50)  = null ,

	@SupportPhoneNumber varchar (30)  = null ,

	@DoRetailBilling bit   = null ,

	@CommissionLockDate datetime   = null ,

	@PortalId int   = null ,

	@BillingAddress1 varchar (50)  = null ,

	@BillingAddress2 varchar (50)  = null ,

	@BillingCity varchar (50)  = null ,

	@BillingCountry varchar (3)  = null ,

	@BillingRegion varchar (3)  = null ,

	@BillingPostalCode varchar (20)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CompanyName]
	, [CompanyShortName]
	, [RetailPriCustomerNumber]
	, [RetailPriCustomerNumberLIKEExp]
	, [DefaultModCodeLength]
	, [DefaultPassCodeLength]
	, [DefaultPasswordLength]
	, [DefaultCapsOK]
	, [ModeratorTxt]
	, [ParticipantTxt]
	, [Enabled]
	, [CustomerNumberExceptionList]
	, [WebProductProviderName]
	, [WebProductProviderBranding]
	, [WebSecProductProvider]
	, [CurrencyID]
	, [BillingWholesalerID]
	, [BillingCustomerNumber]
	, [TaxableID]
	, [WebSiteURL]
	, [AdminSiteURL]
	, [AdminSiteIP]
	, [SelfServeURL]
	, [SelfServeIP]
	, [WebConferencingURL]
	, [WebConferencingIP]
	, [SupportEmail]
	, [SupportPhoneNumber]
	, [DoRetailBilling]
	, [CommissionLockDate]
	, [PortalID]
	, [BillingAddress1]
	, [BillingAddress2]
	, [BillingCity]
	, [BillingCountry]
	, [BillingRegion]
	, [BillingPostalCode]
    FROM
	[dbo].[Wholesaler]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([CompanyShortName] = @CompanyShortName OR @CompanyShortName IS NULL)
	AND ([RetailPriCustomerNumber] = @RetailPriCustomerNumber OR @RetailPriCustomerNumber IS NULL)
	AND ([RetailPriCustomerNumberLIKEExp] = @RetailPriCustomerNumberLikeExp OR @RetailPriCustomerNumberLikeExp IS NULL)
	AND ([DefaultModCodeLength] = @DefaultModCodeLength OR @DefaultModCodeLength IS NULL)
	AND ([DefaultPassCodeLength] = @DefaultPassCodeLength OR @DefaultPassCodeLength IS NULL)
	AND ([DefaultPasswordLength] = @DefaultPasswordLength OR @DefaultPasswordLength IS NULL)
	AND ([DefaultCapsOK] = @DefaultCapsOk OR @DefaultCapsOk IS NULL)
	AND ([ModeratorTxt] = @ModeratorTxt OR @ModeratorTxt IS NULL)
	AND ([ParticipantTxt] = @ParticipantTxt OR @ParticipantTxt IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([CustomerNumberExceptionList] = @CustomerNumberExceptionList OR @CustomerNumberExceptionList IS NULL)
	AND ([WebProductProviderName] = @WebProductProviderName OR @WebProductProviderName IS NULL)
	AND ([WebProductProviderBranding] = @WebProductProviderBranding OR @WebProductProviderBranding IS NULL)
	AND ([WebSecProductProvider] = @WebSecProductProvider OR @WebSecProductProvider IS NULL)
	AND ([CurrencyID] = @CurrencyId OR @CurrencyId IS NULL)
	AND ([BillingWholesalerID] = @BillingWholesalerId OR @BillingWholesalerId IS NULL)
	AND ([BillingCustomerNumber] = @BillingCustomerNumber OR @BillingCustomerNumber IS NULL)
	AND ([TaxableID] = @TaxableId OR @TaxableId IS NULL)
	AND ([WebSiteURL] = @WebSiteUrl OR @WebSiteUrl IS NULL)
	AND ([AdminSiteURL] = @AdminSiteUrl OR @AdminSiteUrl IS NULL)
	AND ([AdminSiteIP] = @AdminSiteIp OR @AdminSiteIp IS NULL)
	AND ([SelfServeURL] = @SelfServeUrl OR @SelfServeUrl IS NULL)
	AND ([SelfServeIP] = @SelfServeIp OR @SelfServeIp IS NULL)
	AND ([WebConferencingURL] = @WebConferencingUrl OR @WebConferencingUrl IS NULL)
	AND ([WebConferencingIP] = @WebConferencingIp OR @WebConferencingIp IS NULL)
	AND ([SupportEmail] = @SupportEmail OR @SupportEmail IS NULL)
	AND ([SupportPhoneNumber] = @SupportPhoneNumber OR @SupportPhoneNumber IS NULL)
	AND ([DoRetailBilling] = @DoRetailBilling OR @DoRetailBilling IS NULL)
	AND ([CommissionLockDate] = @CommissionLockDate OR @CommissionLockDate IS NULL)
	AND ([PortalID] = @PortalId OR @PortalId IS NULL)
	AND ([BillingAddress1] = @BillingAddress1 OR @BillingAddress1 IS NULL)
	AND ([BillingAddress2] = @BillingAddress2 OR @BillingAddress2 IS NULL)
	AND ([BillingCity] = @BillingCity OR @BillingCity IS NULL)
	AND ([BillingCountry] = @BillingCountry OR @BillingCountry IS NULL)
	AND ([BillingRegion] = @BillingRegion OR @BillingRegion IS NULL)
	AND ([BillingPostalCode] = @BillingPostalCode OR @BillingPostalCode IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CompanyName]
	, [CompanyShortName]
	, [RetailPriCustomerNumber]
	, [RetailPriCustomerNumberLIKEExp]
	, [DefaultModCodeLength]
	, [DefaultPassCodeLength]
	, [DefaultPasswordLength]
	, [DefaultCapsOK]
	, [ModeratorTxt]
	, [ParticipantTxt]
	, [Enabled]
	, [CustomerNumberExceptionList]
	, [WebProductProviderName]
	, [WebProductProviderBranding]
	, [WebSecProductProvider]
	, [CurrencyID]
	, [BillingWholesalerID]
	, [BillingCustomerNumber]
	, [TaxableID]
	, [WebSiteURL]
	, [AdminSiteURL]
	, [AdminSiteIP]
	, [SelfServeURL]
	, [SelfServeIP]
	, [WebConferencingURL]
	, [WebConferencingIP]
	, [SupportEmail]
	, [SupportPhoneNumber]
	, [DoRetailBilling]
	, [CommissionLockDate]
	, [PortalID]
	, [BillingAddress1]
	, [BillingAddress2]
	, [BillingCity]
	, [BillingCountry]
	, [BillingRegion]
	, [BillingPostalCode]
    FROM
	[dbo].[Wholesaler]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([CompanyShortName] = @CompanyShortName AND @CompanyShortName is not null)
	OR ([RetailPriCustomerNumber] = @RetailPriCustomerNumber AND @RetailPriCustomerNumber is not null)
	OR ([RetailPriCustomerNumberLIKEExp] = @RetailPriCustomerNumberLikeExp AND @RetailPriCustomerNumberLikeExp is not null)
	OR ([DefaultModCodeLength] = @DefaultModCodeLength AND @DefaultModCodeLength is not null)
	OR ([DefaultPassCodeLength] = @DefaultPassCodeLength AND @DefaultPassCodeLength is not null)
	OR ([DefaultPasswordLength] = @DefaultPasswordLength AND @DefaultPasswordLength is not null)
	OR ([DefaultCapsOK] = @DefaultCapsOk AND @DefaultCapsOk is not null)
	OR ([ModeratorTxt] = @ModeratorTxt AND @ModeratorTxt is not null)
	OR ([ParticipantTxt] = @ParticipantTxt AND @ParticipantTxt is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([CustomerNumberExceptionList] = @CustomerNumberExceptionList AND @CustomerNumberExceptionList is not null)
	OR ([WebProductProviderName] = @WebProductProviderName AND @WebProductProviderName is not null)
	OR ([WebProductProviderBranding] = @WebProductProviderBranding AND @WebProductProviderBranding is not null)
	OR ([WebSecProductProvider] = @WebSecProductProvider AND @WebSecProductProvider is not null)
	OR ([CurrencyID] = @CurrencyId AND @CurrencyId is not null)
	OR ([BillingWholesalerID] = @BillingWholesalerId AND @BillingWholesalerId is not null)
	OR ([BillingCustomerNumber] = @BillingCustomerNumber AND @BillingCustomerNumber is not null)
	OR ([TaxableID] = @TaxableId AND @TaxableId is not null)
	OR ([WebSiteURL] = @WebSiteUrl AND @WebSiteUrl is not null)
	OR ([AdminSiteURL] = @AdminSiteUrl AND @AdminSiteUrl is not null)
	OR ([AdminSiteIP] = @AdminSiteIp AND @AdminSiteIp is not null)
	OR ([SelfServeURL] = @SelfServeUrl AND @SelfServeUrl is not null)
	OR ([SelfServeIP] = @SelfServeIp AND @SelfServeIp is not null)
	OR ([WebConferencingURL] = @WebConferencingUrl AND @WebConferencingUrl is not null)
	OR ([WebConferencingIP] = @WebConferencingIp AND @WebConferencingIp is not null)
	OR ([SupportEmail] = @SupportEmail AND @SupportEmail is not null)
	OR ([SupportPhoneNumber] = @SupportPhoneNumber AND @SupportPhoneNumber is not null)
	OR ([DoRetailBilling] = @DoRetailBilling AND @DoRetailBilling is not null)
	OR ([CommissionLockDate] = @CommissionLockDate AND @CommissionLockDate is not null)
	OR ([PortalID] = @PortalId AND @PortalId is not null)
	OR ([BillingAddress1] = @BillingAddress1 AND @BillingAddress1 is not null)
	OR ([BillingAddress2] = @BillingAddress2 AND @BillingAddress2 is not null)
	OR ([BillingCity] = @BillingCity AND @BillingCity is not null)
	OR ([BillingCountry] = @BillingCountry AND @BillingCountry is not null)
	OR ([BillingRegion] = @BillingRegion AND @BillingRegion is not null)
	OR ([BillingPostalCode] = @BillingPostalCode AND @BillingPostalCode is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Ticket table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_Get_List

AS


				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Ticket table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Title]'
				SET @SQL = @SQL + ', [IssueDescription]'
				SET @SQL = @SQL + ', [ClientContactInfo]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [StatusID]'
				SET @SQL = @SQL + ', [ResolutionText]'
				SET @SQL = @SQL + ', [TicketPriorityID]'
				SET @SQL = @SQL + ', [CreatedByUserID]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [AssignedToUserID]'
				SET @SQL = @SQL + ', [AssignedDate]'
				SET @SQL = @SQL + ', [FixedByUserID]'
				SET @SQL = @SQL + ', [FixedDate]'
				SET @SQL = @SQL + ', [ClosedByUserID]'
				SET @SQL = @SQL + ', [ClosedDate]'
				SET @SQL = @SQL + ', [TicketProductID]'
				SET @SQL = @SQL + ', [TicketCategoryID]'
				SET @SQL = @SQL + ', [DuplicateTicketID]'
				SET @SQL = @SQL + ' FROM [dbo].[Ticket]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Title],'
				SET @SQL = @SQL + ' [IssueDescription],'
				SET @SQL = @SQL + ' [ClientContactInfo],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [StatusID],'
				SET @SQL = @SQL + ' [ResolutionText],'
				SET @SQL = @SQL + ' [TicketPriorityID],'
				SET @SQL = @SQL + ' [CreatedByUserID],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [AssignedToUserID],'
				SET @SQL = @SQL + ' [AssignedDate],'
				SET @SQL = @SQL + ' [FixedByUserID],'
				SET @SQL = @SQL + ' [FixedDate],'
				SET @SQL = @SQL + ' [ClosedByUserID],'
				SET @SQL = @SQL + ' [ClosedDate],'
				SET @SQL = @SQL + ' [TicketProductID],'
				SET @SQL = @SQL + ' [TicketCategoryID],'
				SET @SQL = @SQL + ' [DuplicateTicketID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Ticket]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Ticket table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_Insert
(

	@Id int   ,

	@Title varchar (200)  ,

	@IssueDescription text   ,

	@ClientContactInfo varchar (200)  ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@StatusId int   ,

	@ResolutionText text   ,

	@TicketPriorityId int   ,

	@CreatedByUserId int   ,

	@CreatedDate datetime   ,

	@AssignedToUserId int   ,

	@AssignedDate datetime   ,

	@FixedByUserId int   ,

	@FixedDate datetime   ,

	@ClosedByUserId int   ,

	@ClosedDate datetime   ,

	@TicketProductId int   ,

	@TicketCategoryId int   ,

	@DuplicateTicketId int   
)
AS


					
				INSERT INTO [dbo].[Ticket]
					(
					[ID]
					,[Title]
					,[IssueDescription]
					,[ClientContactInfo]
					,[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[StatusID]
					,[ResolutionText]
					,[TicketPriorityID]
					,[CreatedByUserID]
					,[CreatedDate]
					,[AssignedToUserID]
					,[AssignedDate]
					,[FixedByUserID]
					,[FixedDate]
					,[ClosedByUserID]
					,[ClosedDate]
					,[TicketProductID]
					,[TicketCategoryID]
					,[DuplicateTicketID]
					)
				VALUES
					(
					@Id
					,@Title
					,@IssueDescription
					,@ClientContactInfo
					,@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@StatusId
					,@ResolutionText
					,@TicketPriorityId
					,@CreatedByUserId
					,@CreatedDate
					,@AssignedToUserId
					,@AssignedDate
					,@FixedByUserId
					,@FixedDate
					,@ClosedByUserId
					,@ClosedDate
					,@TicketProductId
					,@TicketCategoryId
					,@DuplicateTicketId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Ticket table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Title varchar (200)  ,

	@IssueDescription text   ,

	@ClientContactInfo varchar (200)  ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@StatusId int   ,

	@ResolutionText text   ,

	@TicketPriorityId int   ,

	@CreatedByUserId int   ,

	@CreatedDate datetime   ,

	@AssignedToUserId int   ,

	@AssignedDate datetime   ,

	@FixedByUserId int   ,

	@FixedDate datetime   ,

	@ClosedByUserId int   ,

	@ClosedDate datetime   ,

	@TicketProductId int   ,

	@TicketCategoryId int   ,

	@DuplicateTicketId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Ticket]
				SET
					[ID] = @Id
					,[Title] = @Title
					,[IssueDescription] = @IssueDescription
					,[ClientContactInfo] = @ClientContactInfo
					,[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[StatusID] = @StatusId
					,[ResolutionText] = @ResolutionText
					,[TicketPriorityID] = @TicketPriorityId
					,[CreatedByUserID] = @CreatedByUserId
					,[CreatedDate] = @CreatedDate
					,[AssignedToUserID] = @AssignedToUserId
					,[AssignedDate] = @AssignedDate
					,[FixedByUserID] = @FixedByUserId
					,[FixedDate] = @FixedDate
					,[ClosedByUserID] = @ClosedByUserId
					,[ClosedDate] = @ClosedDate
					,[TicketProductID] = @TicketProductId
					,[TicketCategoryID] = @TicketCategoryId
					,[DuplicateTicketID] = @DuplicateTicketId
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Ticket table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Ticket] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetByTicketProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetByTicketProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetByTicketProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetByTicketProductId
(

	@TicketProductId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[TicketProductID] = @TicketProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetByStatusId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetByStatusId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetByStatusId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetByStatusId
(

	@StatusId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[StatusID] = @StatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetByTicketPriorityId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetByTicketPriorityId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetByTicketPriorityId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetByTicketPriorityId
(

	@TicketPriorityId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[TicketPriorityID] = @TicketPriorityId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetByTicketCategoryId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetByTicketCategoryId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetByTicketCategoryId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetByTicketCategoryId
(

	@TicketCategoryId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[TicketCategoryID] = @TicketCategoryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[ModeratorID] = @ModeratorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Ticket table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Title],
					[IssueDescription],
					[ClientContactInfo],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[StatusID],
					[ResolutionText],
					[TicketPriorityID],
					[CreatedByUserID],
					[CreatedDate],
					[AssignedToUserID],
					[AssignedDate],
					[FixedByUserID],
					[FixedDate],
					[ClosedByUserID],
					[ClosedDate],
					[TicketProductID],
					[TicketCategoryID],
					[DuplicateTicketID]
				FROM
					[dbo].[Ticket]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicket_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicket_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicket_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Ticket table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicket_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Title varchar (200)  = null ,

	@IssueDescription text   = null ,

	@ClientContactInfo varchar (200)  = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@ModeratorId int   = null ,

	@StatusId int   = null ,

	@ResolutionText text   = null ,

	@TicketPriorityId int   = null ,

	@CreatedByUserId int   = null ,

	@CreatedDate datetime   = null ,

	@AssignedToUserId int   = null ,

	@AssignedDate datetime   = null ,

	@FixedByUserId int   = null ,

	@FixedDate datetime   = null ,

	@ClosedByUserId int   = null ,

	@ClosedDate datetime   = null ,

	@TicketProductId int   = null ,

	@TicketCategoryId int   = null ,

	@DuplicateTicketId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Title]
	, [IssueDescription]
	, [ClientContactInfo]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [StatusID]
	, [ResolutionText]
	, [TicketPriorityID]
	, [CreatedByUserID]
	, [CreatedDate]
	, [AssignedToUserID]
	, [AssignedDate]
	, [FixedByUserID]
	, [FixedDate]
	, [ClosedByUserID]
	, [ClosedDate]
	, [TicketProductID]
	, [TicketCategoryID]
	, [DuplicateTicketID]
    FROM
	[dbo].[Ticket]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Title] = @Title OR @Title IS NULL)
	AND ([ClientContactInfo] = @ClientContactInfo OR @ClientContactInfo IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([StatusID] = @StatusId OR @StatusId IS NULL)
	AND ([TicketPriorityID] = @TicketPriorityId OR @TicketPriorityId IS NULL)
	AND ([CreatedByUserID] = @CreatedByUserId OR @CreatedByUserId IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([AssignedToUserID] = @AssignedToUserId OR @AssignedToUserId IS NULL)
	AND ([AssignedDate] = @AssignedDate OR @AssignedDate IS NULL)
	AND ([FixedByUserID] = @FixedByUserId OR @FixedByUserId IS NULL)
	AND ([FixedDate] = @FixedDate OR @FixedDate IS NULL)
	AND ([ClosedByUserID] = @ClosedByUserId OR @ClosedByUserId IS NULL)
	AND ([ClosedDate] = @ClosedDate OR @ClosedDate IS NULL)
	AND ([TicketProductID] = @TicketProductId OR @TicketProductId IS NULL)
	AND ([TicketCategoryID] = @TicketCategoryId OR @TicketCategoryId IS NULL)
	AND ([DuplicateTicketID] = @DuplicateTicketId OR @DuplicateTicketId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Title]
	, [IssueDescription]
	, [ClientContactInfo]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [StatusID]
	, [ResolutionText]
	, [TicketPriorityID]
	, [CreatedByUserID]
	, [CreatedDate]
	, [AssignedToUserID]
	, [AssignedDate]
	, [FixedByUserID]
	, [FixedDate]
	, [ClosedByUserID]
	, [ClosedDate]
	, [TicketProductID]
	, [TicketCategoryID]
	, [DuplicateTicketID]
    FROM
	[dbo].[Ticket]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Title] = @Title AND @Title is not null)
	OR ([ClientContactInfo] = @ClientContactInfo AND @ClientContactInfo is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([StatusID] = @StatusId AND @StatusId is not null)
	OR ([TicketPriorityID] = @TicketPriorityId AND @TicketPriorityId is not null)
	OR ([CreatedByUserID] = @CreatedByUserId AND @CreatedByUserId is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([AssignedToUserID] = @AssignedToUserId AND @AssignedToUserId is not null)
	OR ([AssignedDate] = @AssignedDate AND @AssignedDate is not null)
	OR ([FixedByUserID] = @FixedByUserId AND @FixedByUserId is not null)
	OR ([FixedDate] = @FixedDate AND @FixedDate is not null)
	OR ([ClosedByUserID] = @ClosedByUserId AND @ClosedByUserId is not null)
	OR ([ClosedDate] = @ClosedDate AND @ClosedDate is not null)
	OR ([TicketProductID] = @TicketProductId AND @TicketProductId is not null)
	OR ([TicketCategoryID] = @TicketCategoryId AND @TicketCategoryId is not null)
	OR ([DuplicateTicketID] = @DuplicateTicketId AND @DuplicateTicketId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the WelcomeKitRequest table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_Get_List

AS


				
				SELECT
					[ID],
					[ModeratorID],
					[Notes],
					[RequestedBy],
					[LastModifiedBy],
					[LastModified],
					[CreatedDate],
					[RequestProcessed],
					[RequestCompletedDate],
					[RequestCompletedBy],
					[BilledDate]
				FROM
					[dbo].[WelcomeKitRequest]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the WelcomeKitRequest table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [RequestedBy]'
				SET @SQL = @SQL + ', [LastModifiedBy]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [RequestProcessed]'
				SET @SQL = @SQL + ', [RequestCompletedDate]'
				SET @SQL = @SQL + ', [RequestCompletedBy]'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ' FROM [dbo].[WelcomeKitRequest]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [RequestedBy],'
				SET @SQL = @SQL + ' [LastModifiedBy],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [RequestProcessed],'
				SET @SQL = @SQL + ' [RequestCompletedDate],'
				SET @SQL = @SQL + ' [RequestCompletedBy],'
				SET @SQL = @SQL + ' [BilledDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[WelcomeKitRequest]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the WelcomeKitRequest table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_Insert
(

	@Id int    OUTPUT,

	@ModeratorId int   ,

	@Notes varchar (500)  ,

	@RequestedBy varchar (100)  ,

	@LastModifiedBy varchar (100)  ,

	@LastModified datetime   ,

	@CreatedDate datetime   ,

	@RequestProcessed bit   ,

	@RequestCompletedDate datetime   ,

	@RequestCompletedBy varchar (100)  ,

	@BilledDate datetime   
)
AS


					
				INSERT INTO [dbo].[WelcomeKitRequest]
					(
					[ModeratorID]
					,[Notes]
					,[RequestedBy]
					,[LastModifiedBy]
					,[LastModified]
					,[CreatedDate]
					,[RequestProcessed]
					,[RequestCompletedDate]
					,[RequestCompletedBy]
					,[BilledDate]
					)
				VALUES
					(
					@ModeratorId
					,@Notes
					,@RequestedBy
					,@LastModifiedBy
					,@LastModified
					,@CreatedDate
					,@RequestProcessed
					,@RequestCompletedDate
					,@RequestCompletedBy
					,@BilledDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the WelcomeKitRequest table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_Update
(

	@Id int   ,

	@ModeratorId int   ,

	@Notes varchar (500)  ,

	@RequestedBy varchar (100)  ,

	@LastModifiedBy varchar (100)  ,

	@LastModified datetime   ,

	@CreatedDate datetime   ,

	@RequestProcessed bit   ,

	@RequestCompletedDate datetime   ,

	@RequestCompletedBy varchar (100)  ,

	@BilledDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[WelcomeKitRequest]
				SET
					[ModeratorID] = @ModeratorId
					,[Notes] = @Notes
					,[RequestedBy] = @RequestedBy
					,[LastModifiedBy] = @LastModifiedBy
					,[LastModified] = @LastModified
					,[CreatedDate] = @CreatedDate
					,[RequestProcessed] = @RequestProcessed
					,[RequestCompletedDate] = @RequestCompletedDate
					,[RequestCompletedBy] = @RequestCompletedBy
					,[BilledDate] = @BilledDate
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the WelcomeKitRequest table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[WelcomeKitRequest] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the WelcomeKitRequest table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[Notes],
					[RequestedBy],
					[LastModifiedBy],
					[LastModified],
					[CreatedDate],
					[RequestProcessed],
					[RequestCompletedDate],
					[RequestCompletedBy],
					[BilledDate]
				FROM
					[dbo].[WelcomeKitRequest]
				WHERE
					[ModeratorID] = @ModeratorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the WelcomeKitRequest table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[Notes],
					[RequestedBy],
					[LastModifiedBy],
					[LastModified],
					[CreatedDate],
					[RequestProcessed],
					[RequestCompletedDate],
					[RequestCompletedBy],
					[BilledDate]
				FROM
					[dbo].[WelcomeKitRequest]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_GetByCreatedDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_GetByCreatedDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_GetByCreatedDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the WelcomeKitRequest table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_GetByCreatedDate
(

	@CreatedDate datetime   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[Notes],
					[RequestedBy],
					[LastModifiedBy],
					[LastModified],
					[CreatedDate],
					[RequestProcessed],
					[RequestCompletedDate],
					[RequestCompletedBy],
					[BilledDate]
				FROM
					[dbo].[WelcomeKitRequest]
				WHERE
					[CreatedDate] = @CreatedDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWelcomeKitRequest_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWelcomeKitRequest_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWelcomeKitRequest_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the WelcomeKitRequest table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWelcomeKitRequest_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@ModeratorId int   = null ,

	@Notes varchar (500)  = null ,

	@RequestedBy varchar (100)  = null ,

	@LastModifiedBy varchar (100)  = null ,

	@LastModified datetime   = null ,

	@CreatedDate datetime   = null ,

	@RequestProcessed bit   = null ,

	@RequestCompletedDate datetime   = null ,

	@RequestCompletedBy varchar (100)  = null ,

	@BilledDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [Notes]
	, [RequestedBy]
	, [LastModifiedBy]
	, [LastModified]
	, [CreatedDate]
	, [RequestProcessed]
	, [RequestCompletedDate]
	, [RequestCompletedBy]
	, [BilledDate]
    FROM
	[dbo].[WelcomeKitRequest]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([RequestedBy] = @RequestedBy OR @RequestedBy IS NULL)
	AND ([LastModifiedBy] = @LastModifiedBy OR @LastModifiedBy IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([RequestProcessed] = @RequestProcessed OR @RequestProcessed IS NULL)
	AND ([RequestCompletedDate] = @RequestCompletedDate OR @RequestCompletedDate IS NULL)
	AND ([RequestCompletedBy] = @RequestCompletedBy OR @RequestCompletedBy IS NULL)
	AND ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [Notes]
	, [RequestedBy]
	, [LastModifiedBy]
	, [LastModified]
	, [CreatedDate]
	, [RequestProcessed]
	, [RequestCompletedDate]
	, [RequestCompletedBy]
	, [BilledDate]
    FROM
	[dbo].[WelcomeKitRequest]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([RequestedBy] = @RequestedBy AND @RequestedBy is not null)
	OR ([LastModifiedBy] = @LastModifiedBy AND @LastModifiedBy is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([RequestProcessed] = @RequestProcessed AND @RequestProcessed is not null)
	OR ([RequestCompletedDate] = @RequestCompletedDate AND @RequestCompletedDate is not null)
	OR ([RequestCompletedBy] = @RequestCompletedBy AND @RequestCompletedBy is not null)
	OR ([BilledDate] = @BilledDate AND @BilledDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Wholesaler_Product table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Get_List

AS


				
				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler_Product table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler_Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Enabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler_Product]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Wholesaler_Product table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Insert
(

	@Id int    OUTPUT,

	@ProductId int   ,

	@WholesalerId varchar (10)  ,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayNameAlt nvarchar (50)  ,

	@DescriptionAlt nvarchar (100)  ,

	@DisplayOrder int   ,

	@Enabled bit   
)
AS


					
				INSERT INTO [dbo].[Wholesaler_Product]
					(
					[ProductID]
					,[WholesalerID]
					,[Name]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[DisplayOrder]
					,[Enabled]
					)
				VALUES
					(
					@ProductId
					,@WholesalerId
					,@Name
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@DisplayOrder
					,@Enabled
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Wholesaler_Product table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Update
(

	@Id int   ,

	@ProductId int   ,

	@WholesalerId varchar (10)  ,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayNameAlt nvarchar (50)  ,

	@DescriptionAlt nvarchar (100)  ,

	@DisplayOrder int   ,

	@Enabled bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Wholesaler_Product]
				SET
					[ProductID] = @ProductId
					,[WholesalerID] = @WholesalerId
					,[Name] = @Name
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[DisplayOrder] = @DisplayOrder
					,[Enabled] = @Enabled
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Wholesaler_Product table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Wholesaler_Product] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_GetByProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_GetByProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_GetByProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_GetByProductId
(

	@ProductId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_GetByWholesalerIdProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_GetByWholesalerIdProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_GetByWholesalerIdProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_GetByWholesalerIdProductId
(

	@WholesalerId varchar (10)  ,

	@ProductId int   
)
AS


				SELECT
					[ID],
					[ProductID],
					[WholesalerID],
					[Name],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DisplayOrder],
					[Enabled]
				FROM
					[dbo].[Wholesaler_Product]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [ProductID] = @ProductId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Wholesaler_Product table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@ProductId int   = null ,

	@WholesalerId varchar (10)  = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@DisplayNameAlt nvarchar (50)  = null ,

	@DescriptionAlt nvarchar (100)  = null ,

	@DisplayOrder int   = null ,

	@Enabled bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [WholesalerID]
	, [Name]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DisplayOrder]
	, [Enabled]
    FROM
	[dbo].[Wholesaler_Product]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [WholesalerID]
	, [Name]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DisplayOrder]
	, [Enabled]
    FROM
	[dbo].[Wholesaler_Product]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the SalesPerson table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[ExternalAgent],
					[Enabled],
					[SalesManagerID]
				FROM
					[dbo].[SalesPerson]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the SalesPerson table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [FullName]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [ExternalAgent]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [SalesManagerID]'
				SET @SQL = @SQL + ' FROM [dbo].[SalesPerson]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [FullName],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [ExternalAgent],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [SalesManagerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[SalesPerson]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the SalesPerson table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@FullName varchar (50)  ,

	@EmailAddress varchar (100)  ,

	@ExternalAgent bit   ,

	@Enabled bit   ,

	@SalesManagerId int   
)
AS


					
				INSERT INTO [dbo].[SalesPerson]
					(
					[WholesalerID]
					,[FullName]
					,[EmailAddress]
					,[ExternalAgent]
					,[Enabled]
					,[SalesManagerID]
					)
				VALUES
					(
					@WholesalerId
					,@FullName
					,@EmailAddress
					,@ExternalAgent
					,@Enabled
					,@SalesManagerId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the SalesPerson table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@FullName varchar (50)  ,

	@EmailAddress varchar (100)  ,

	@ExternalAgent bit   ,

	@Enabled bit   ,

	@SalesManagerId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[SalesPerson]
				SET
					[WholesalerID] = @WholesalerId
					,[FullName] = @FullName
					,[EmailAddress] = @EmailAddress
					,[ExternalAgent] = @ExternalAgent
					,[Enabled] = @Enabled
					,[SalesManagerID] = @SalesManagerId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the SalesPerson table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[SalesPerson] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_GetBySalesManagerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_GetBySalesManagerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_GetBySalesManagerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SalesPerson table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_GetBySalesManagerId
(

	@SalesManagerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[ExternalAgent],
					[Enabled],
					[SalesManagerID]
				FROM
					[dbo].[SalesPerson]
				WHERE
					[SalesManagerID] = @SalesManagerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SalesPerson table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[ExternalAgent],
					[Enabled],
					[SalesManagerID]
				FROM
					[dbo].[SalesPerson]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the SalesPerson table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[ExternalAgent],
					[Enabled],
					[SalesManagerID]
				FROM
					[dbo].[SalesPerson]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pSalesPerson_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pSalesPerson_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pSalesPerson_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the SalesPerson table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pSalesPerson_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@FullName varchar (50)  = null ,

	@EmailAddress varchar (100)  = null ,

	@ExternalAgent bit   = null ,

	@Enabled bit   = null ,

	@SalesManagerId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [FullName]
	, [EmailAddress]
	, [ExternalAgent]
	, [Enabled]
	, [SalesManagerID]
    FROM
	[dbo].[SalesPerson]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([FullName] = @FullName OR @FullName IS NULL)
	AND ([EmailAddress] = @EmailAddress OR @EmailAddress IS NULL)
	AND ([ExternalAgent] = @ExternalAgent OR @ExternalAgent IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([SalesManagerID] = @SalesManagerId OR @SalesManagerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [FullName]
	, [EmailAddress]
	, [ExternalAgent]
	, [Enabled]
	, [SalesManagerID]
    FROM
	[dbo].[SalesPerson]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([FullName] = @FullName AND @FullName is not null)
	OR ([EmailAddress] = @EmailAddress AND @EmailAddress is not null)
	OR ([ExternalAgent] = @ExternalAgent AND @ExternalAgent is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([SalesManagerID] = @SalesManagerId AND @SalesManagerId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the MarketingService table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[Name]
				FROM
					[dbo].[MarketingService]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the MarketingService table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ' FROM [dbo].[MarketingService]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Name]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[MarketingService]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the MarketingService table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@Name varchar (100)  
)
AS


					
				INSERT INTO [dbo].[MarketingService]
					(
					[WholesalerID]
					,[Name]
					)
				VALUES
					(
					@WholesalerId
					,@Name
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the MarketingService table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@Name varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[MarketingService]
				SET
					[WholesalerID] = @WholesalerId
					,[Name] = @Name
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the MarketingService table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[MarketingService] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MarketingService table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[Name]
				FROM
					[dbo].[MarketingService]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the MarketingService table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[Name]
				FROM
					[dbo].[MarketingService]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_GetByUserIdFromUser_MarketingService procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_GetByUserIdFromUser_MarketingService') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_GetByUserIdFromUser_MarketingService
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_GetByUserIdFromUser_MarketingService
(

	@UserId int   
)
AS


SELECT dbo.[MarketingService].[ID]
       ,dbo.[MarketingService].[WholesalerID]
       ,dbo.[MarketingService].[Name]
  FROM dbo.[MarketingService]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[User_MarketingService] 
                WHERE dbo.[User_MarketingService].[UserID] = @UserId
                  AND dbo.[User_MarketingService].[MarketingServiceID] = dbo.[MarketingService].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pMarketingService_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pMarketingService_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pMarketingService_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the MarketingService table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pMarketingService_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@Name varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Name]
    FROM
	[dbo].[MarketingService]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Name]
    FROM
	[dbo].[MarketingService]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Moderator table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DepartmentID]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [UniqueModeratorID]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [WebMeetingID]'
				SET @SQL = @SQL + ', [omnovia_room_id]'
				SET @SQL = @SQL + ', [seevogh_meeting_url]'
				SET @SQL = @SQL + ', [SeeVoghMeetingID]'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DepartmentID],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [UniqueModeratorID],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [WebMeetingID],'
				SET @SQL = @SQL + ' [omnovia_room_id],'
				SET @SQL = @SQL + ' [seevogh_meeting_url],'
				SET @SQL = @SQL + ' [SeeVoghMeetingID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Moderator table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@ExternalModeratorNumber varchar (100)  ,

	@ModeratorCode varchar (16)  ,

	@PassCode varchar (16)  ,

	@Description varchar (100)  ,

	@DepartmentId int   ,

	@ModifiedBy varchar (100)  ,

	@CreatedDate datetime   ,

	@LastModified datetime   ,

	@Enabled bit   ,

	@UniqueModeratorId uniqueidentifier   ,

	@UserId int   ,

	@WebMeetingId varchar (50)  ,

	@Omnovia_Room_Id int   ,

	@Seevogh_Meeting_Url varchar (255)  ,

	@SeeVoghMeetingId varchar (50)  
)
AS


					
				INSERT INTO [dbo].[Moderator]
					(
					[WholesalerID]
					,[CustomerID]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[ExternalModeratorNumber]
					,[ModeratorCode]
					,[PassCode]
					,[Description]
					,[DepartmentID]
					,[ModifiedBy]
					,[CreatedDate]
					,[LastModified]
					,[Enabled]
					,[UniqueModeratorID]
					,[UserID]
					,[WebMeetingID]
					,[omnovia_room_id]
					,[seevogh_meeting_url]
					,[SeeVoghMeetingID]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@ExternalModeratorNumber
					,@ModeratorCode
					,@PassCode
					,@Description
					,@DepartmentId
					,@ModifiedBy
					,@CreatedDate
					,@LastModified
					,@Enabled
					,@UniqueModeratorId
					,@UserId
					,@WebMeetingId
					,@Omnovia_Room_Id
					,@Seevogh_Meeting_Url
					,@SeeVoghMeetingId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Moderator table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@ExternalModeratorNumber varchar (100)  ,

	@ModeratorCode varchar (16)  ,

	@PassCode varchar (16)  ,

	@Description varchar (100)  ,

	@DepartmentId int   ,

	@ModifiedBy varchar (100)  ,

	@CreatedDate datetime   ,

	@LastModified datetime   ,

	@Enabled bit   ,

	@UniqueModeratorId uniqueidentifier   ,

	@UserId int   ,

	@WebMeetingId varchar (50)  ,

	@Omnovia_Room_Id int   ,

	@Seevogh_Meeting_Url varchar (255)  ,

	@SeeVoghMeetingId varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Moderator]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[ExternalModeratorNumber] = @ExternalModeratorNumber
					,[ModeratorCode] = @ModeratorCode
					,[PassCode] = @PassCode
					,[Description] = @Description
					,[DepartmentID] = @DepartmentId
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
					,[LastModified] = @LastModified
					,[Enabled] = @Enabled
					,[UniqueModeratorID] = @UniqueModeratorId
					,[UserID] = @UserId
					,[WebMeetingID] = @WebMeetingId
					,[omnovia_room_id] = @Omnovia_Room_Id
					,[seevogh_meeting_url] = @Seevogh_Meeting_Url
					,[SeeVoghMeetingID] = @SeeVoghMeetingId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Moderator table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Moderator] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByCustomerIdPriCustomerNumberSecCustomerNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByCustomerIdPriCustomerNumberSecCustomerNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByCustomerIdPriCustomerNumberSecCustomerNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByCustomerIdPriCustomerNumberSecCustomerNumber
(

	@CustomerId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[CustomerID] = @CustomerId
					AND [PriCustomerNumber] = @PriCustomerNumber
					AND [SecCustomerNumber] = @SecCustomerNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByWholesalerIdPriCustomerNumberSecCustomerNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByWholesalerIdPriCustomerNumberSecCustomerNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByWholesalerIdPriCustomerNumberSecCustomerNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByWholesalerIdPriCustomerNumberSecCustomerNumber
(

	@WholesalerId varchar (10)  ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [PriCustomerNumber] = @PriCustomerNumber
					AND [SecCustomerNumber] = @SecCustomerNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByCustomerId
(

	@CustomerId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByWholesalerIdId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByWholesalerIdId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByWholesalerIdId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByWholesalerIdId
(

	@WholesalerId varchar (10)  ,

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByModeratorCode procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByModeratorCode') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByModeratorCode
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByModeratorCode
(

	@ModeratorCode varchar (16)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[ModeratorCode] = @ModeratorCode
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByModeratorCodePassCode procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByModeratorCodePassCode') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByModeratorCodePassCode
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByModeratorCodePassCode
(

	@ModeratorCode varchar (16)  ,

	@PassCode varchar (16)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[ModeratorCode] = @ModeratorCode
					AND [PassCode] = @PassCode
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByPassCode procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByPassCode') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByPassCode
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByPassCode
(

	@PassCode varchar (16)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[PassCode] = @PassCode
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByDepartmentId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByDepartmentId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByDepartmentId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByDepartmentId
(

	@DepartmentId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[DepartmentID] = @DepartmentId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByUserId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByUserId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByUserId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByUserId
(

	@UserId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[omnovia_room_id],
					[seevogh_meeting_url],
					[SeeVoghMeetingID]
				FROM
					[dbo].[Moderator]
				WHERE
					[UserID] = @UserId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_GetByDnisidFromModerator_Dnis procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_GetByDnisidFromModerator_Dnis') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_GetByDnisidFromModerator_Dnis
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_GetByDnisidFromModerator_Dnis
(

	@Dnisid int   
)
AS


SELECT dbo.[Moderator].[ID]
       ,dbo.[Moderator].[WholesalerID]
       ,dbo.[Moderator].[CustomerID]
       ,dbo.[Moderator].[PriCustomerNumber]
       ,dbo.[Moderator].[SecCustomerNumber]
       ,dbo.[Moderator].[ExternalModeratorNumber]
       ,dbo.[Moderator].[ModeratorCode]
       ,dbo.[Moderator].[PassCode]
       ,dbo.[Moderator].[Description]
       ,dbo.[Moderator].[DepartmentID]
       ,dbo.[Moderator].[ModifiedBy]
       ,dbo.[Moderator].[CreatedDate]
       ,dbo.[Moderator].[LastModified]
       ,dbo.[Moderator].[Enabled]
       ,dbo.[Moderator].[UniqueModeratorID]
       ,dbo.[Moderator].[UserID]
       ,dbo.[Moderator].[WebMeetingID]
       ,dbo.[Moderator].[omnovia_room_id]
       ,dbo.[Moderator].[seevogh_meeting_url]
       ,dbo.[Moderator].[SeeVoghMeetingID]
  FROM dbo.[Moderator]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Moderator_DNIS] 
                WHERE dbo.[Moderator_DNIS].[DNISID] = @Dnisid
                  AND dbo.[Moderator_DNIS].[ModeratorID] = dbo.[Moderator].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Moderator table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@SecCustomerNumber varchar (6)  = null ,

	@ExternalModeratorNumber varchar (100)  = null ,

	@ModeratorCode varchar (16)  = null ,

	@PassCode varchar (16)  = null ,

	@Description varchar (100)  = null ,

	@DepartmentId int   = null ,

	@ModifiedBy varchar (100)  = null ,

	@CreatedDate datetime   = null ,

	@LastModified datetime   = null ,

	@Enabled bit   = null ,

	@UniqueModeratorId uniqueidentifier   = null ,

	@UserId int   = null ,

	@WebMeetingId varchar (50)  = null ,

	@Omnovia_Room_Id int   = null ,

	@Seevogh_Meeting_Url varchar (255)  = null ,

	@SeeVoghMeetingId varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [ExternalModeratorNumber]
	, [ModeratorCode]
	, [PassCode]
	, [Description]
	, [DepartmentID]
	, [ModifiedBy]
	, [CreatedDate]
	, [LastModified]
	, [Enabled]
	, [UniqueModeratorID]
	, [UserID]
	, [WebMeetingID]
	, [omnovia_room_id]
	, [seevogh_meeting_url]
	, [SeeVoghMeetingID]
    FROM
	[dbo].[Moderator]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([ExternalModeratorNumber] = @ExternalModeratorNumber OR @ExternalModeratorNumber IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([PassCode] = @PassCode OR @PassCode IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DepartmentID] = @DepartmentId OR @DepartmentId IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([UniqueModeratorID] = @UniqueModeratorId OR @UniqueModeratorId IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
	AND ([WebMeetingID] = @WebMeetingId OR @WebMeetingId IS NULL)
	AND ([omnovia_room_id] = @Omnovia_Room_Id OR @Omnovia_Room_Id IS NULL)
	AND ([seevogh_meeting_url] = @Seevogh_Meeting_Url OR @Seevogh_Meeting_Url IS NULL)
	AND ([SeeVoghMeetingID] = @SeeVoghMeetingId OR @SeeVoghMeetingId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [ExternalModeratorNumber]
	, [ModeratorCode]
	, [PassCode]
	, [Description]
	, [DepartmentID]
	, [ModifiedBy]
	, [CreatedDate]
	, [LastModified]
	, [Enabled]
	, [UniqueModeratorID]
	, [UserID]
	, [WebMeetingID]
	, [omnovia_room_id]
	, [seevogh_meeting_url]
	, [SeeVoghMeetingID]
    FROM
	[dbo].[Moderator]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([ExternalModeratorNumber] = @ExternalModeratorNumber AND @ExternalModeratorNumber is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([PassCode] = @PassCode AND @PassCode is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DepartmentID] = @DepartmentId AND @DepartmentId is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([UniqueModeratorID] = @UniqueModeratorId AND @UniqueModeratorId is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	OR ([WebMeetingID] = @WebMeetingId AND @WebMeetingId is not null)
	OR ([omnovia_room_id] = @Omnovia_Room_Id AND @Omnovia_Room_Id is not null)
	OR ([seevogh_meeting_url] = @Seevogh_Meeting_Url AND @Seevogh_Meeting_Url is not null)
	OR ([SeeVoghMeetingID] = @SeeVoghMeetingId AND @SeeVoghMeetingId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipant_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipant_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipant_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Participant table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipant_Get_List

AS


				
				SELECT
					[ID],
					[ParticipantListID],
					[Name],
					[CompanyName],
					[EmailAddress],
					[PhoneNumber],
					[PIN],
					[UserName],
					[Password]
				FROM
					[dbo].[Participant]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipant_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipant_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipant_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Participant table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipant_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ParticipantListID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [PhoneNumber]'
				SET @SQL = @SQL + ', [PIN]'
				SET @SQL = @SQL + ', [UserName]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ' FROM [dbo].[Participant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ParticipantListID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [PhoneNumber],'
				SET @SQL = @SQL + ' [PIN],'
				SET @SQL = @SQL + ' [UserName],'
				SET @SQL = @SQL + ' [Password]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Participant]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipant_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipant_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipant_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Participant table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipant_Insert
(

	@Id int   ,

	@ParticipantListId int   ,

	@Name varchar (100)  ,

	@CompanyName varchar (100)  ,

	@EmailAddress varchar (50)  ,

	@PhoneNumber varchar (30)  ,

	@Pin varchar (16)  ,

	@UserName varchar (50)  ,

	@Password varchar (20)  
)
AS


					
				INSERT INTO [dbo].[Participant]
					(
					[ID]
					,[ParticipantListID]
					,[Name]
					,[CompanyName]
					,[EmailAddress]
					,[PhoneNumber]
					,[PIN]
					,[UserName]
					,[Password]
					)
				VALUES
					(
					@Id
					,@ParticipantListId
					,@Name
					,@CompanyName
					,@EmailAddress
					,@PhoneNumber
					,@Pin
					,@UserName
					,@Password
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipant_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipant_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipant_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Participant table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipant_Update
(

	@Id int   ,

	@OriginalId int   ,

	@ParticipantListId int   ,

	@Name varchar (100)  ,

	@CompanyName varchar (100)  ,

	@EmailAddress varchar (50)  ,

	@PhoneNumber varchar (30)  ,

	@Pin varchar (16)  ,

	@UserName varchar (50)  ,

	@Password varchar (20)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Participant]
				SET
					[ID] = @Id
					,[ParticipantListID] = @ParticipantListId
					,[Name] = @Name
					,[CompanyName] = @CompanyName
					,[EmailAddress] = @EmailAddress
					,[PhoneNumber] = @PhoneNumber
					,[PIN] = @Pin
					,[UserName] = @UserName
					,[Password] = @Password
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipant_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipant_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipant_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Participant table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipant_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Participant] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipant_GetByParticipantListId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipant_GetByParticipantListId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipant_GetByParticipantListId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Participant table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipant_GetByParticipantListId
(

	@ParticipantListId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ParticipantListID],
					[Name],
					[CompanyName],
					[EmailAddress],
					[PhoneNumber],
					[PIN],
					[UserName],
					[Password]
				FROM
					[dbo].[Participant]
				WHERE
					[ParticipantListID] = @ParticipantListId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipant_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipant_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipant_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Participant table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipant_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[ParticipantListID],
					[Name],
					[CompanyName],
					[EmailAddress],
					[PhoneNumber],
					[PIN],
					[UserName],
					[Password]
				FROM
					[dbo].[Participant]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipant_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipant_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipant_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Participant table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipant_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@ParticipantListId int   = null ,

	@Name varchar (100)  = null ,

	@CompanyName varchar (100)  = null ,

	@EmailAddress varchar (50)  = null ,

	@PhoneNumber varchar (30)  = null ,

	@Pin varchar (16)  = null ,

	@UserName varchar (50)  = null ,

	@Password varchar (20)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ParticipantListID]
	, [Name]
	, [CompanyName]
	, [EmailAddress]
	, [PhoneNumber]
	, [PIN]
	, [UserName]
	, [Password]
    FROM
	[dbo].[Participant]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ParticipantListID] = @ParticipantListId OR @ParticipantListId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([EmailAddress] = @EmailAddress OR @EmailAddress IS NULL)
	AND ([PhoneNumber] = @PhoneNumber OR @PhoneNumber IS NULL)
	AND ([PIN] = @Pin OR @Pin IS NULL)
	AND ([UserName] = @UserName OR @UserName IS NULL)
	AND ([Password] = @Password OR @Password IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ParticipantListID]
	, [Name]
	, [CompanyName]
	, [EmailAddress]
	, [PhoneNumber]
	, [PIN]
	, [UserName]
	, [Password]
    FROM
	[dbo].[Participant]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ParticipantListID] = @ParticipantListId AND @ParticipantListId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([EmailAddress] = @EmailAddress AND @EmailAddress is not null)
	OR ([PhoneNumber] = @PhoneNumber AND @PhoneNumber is not null)
	OR ([PIN] = @Pin AND @Pin is not null)
	OR ([UserName] = @UserName AND @UserName is not null)
	OR ([Password] = @Password AND @Password is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Moderator_DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_Get_List

AS


				
				SELECT
					[DNISID],
					[ModeratorID]
				FROM
					[dbo].[Moderator_DNIS]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Moderator_DNIS table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[DNISID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [DNISID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator_DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [DNISID],'
				SET @SQL = @SQL + ' [ModeratorID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Moderator_DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Moderator_DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_Insert
(

	@Dnisid int   ,

	@ModeratorId int   
)
AS


					
				INSERT INTO [dbo].[Moderator_DNIS]
					(
					[DNISID]
					,[ModeratorID]
					)
				VALUES
					(
					@Dnisid
					,@ModeratorId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Moderator_DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_Update
(

	@Dnisid int   ,

	@OriginalDnisid int   ,

	@ModeratorId int   ,

	@OriginalModeratorId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Moderator_DNIS]
				SET
					[DNISID] = @Dnisid
					,[ModeratorID] = @ModeratorId
				WHERE
[DNISID] = @OriginalDnisid 
AND [ModeratorID] = @OriginalModeratorId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Moderator_DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_Delete
(

	@Dnisid int   ,

	@ModeratorId int   
)
AS


				DELETE FROM [dbo].[Moderator_DNIS] WITH (ROWLOCK) 
				WHERE
					[DNISID] = @Dnisid
					AND [ModeratorID] = @ModeratorId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_GetByDnisid procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_GetByDnisid') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_GetByDnisid
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_GetByDnisid
(

	@Dnisid int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[DNISID],
					[ModeratorID]
				FROM
					[dbo].[Moderator_DNIS]
				WHERE
					[DNISID] = @Dnisid
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_GetByDnisidModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_GetByDnisidModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_GetByDnisidModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_GetByDnisidModeratorId
(

	@Dnisid int   ,

	@ModeratorId int   
)
AS


				SELECT
					[DNISID],
					[ModeratorID]
				FROM
					[dbo].[Moderator_DNIS]
				WHERE
					[DNISID] = @Dnisid
					AND [ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Moderator_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SELECT
					[DNISID],
					[ModeratorID]
				FROM
					[dbo].[Moderator_DNIS]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pModerator_DNIS_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pModerator_DNIS_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pModerator_DNIS_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Moderator_DNIS table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pModerator_DNIS_Find
(

	@SearchUsingOR bit   = null ,

	@Dnisid int   = null ,

	@ModeratorId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [DNISID]
	, [ModeratorID]
    FROM
	[dbo].[Moderator_DNIS]
    WHERE 
	 ([DNISID] = @Dnisid OR @Dnisid IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [DNISID]
	, [ModeratorID]
    FROM
	[dbo].[Moderator_DNIS]
    WHERE 
	 ([DNISID] = @Dnisid AND @Dnisid is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipantList_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipantList_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipantList_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ParticipantList table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipantList_Get_List

AS


				
				SELECT
					[ID],
					[CustomerID],
					[Name]
				FROM
					[dbo].[ParticipantList]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipantList_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipantList_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipantList_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ParticipantList table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipantList_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ' FROM [dbo].[ParticipantList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Name]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ParticipantList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipantList_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipantList_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipantList_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ParticipantList table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipantList_Insert
(

	@Id int    OUTPUT,

	@CustomerId int   ,

	@Name varchar (50)  
)
AS


					
				INSERT INTO [dbo].[ParticipantList]
					(
					[CustomerID]
					,[Name]
					)
				VALUES
					(
					@CustomerId
					,@Name
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipantList_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipantList_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipantList_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ParticipantList table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipantList_Update
(

	@Id int   ,

	@CustomerId int   ,

	@Name varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ParticipantList]
				SET
					[CustomerID] = @CustomerId
					,[Name] = @Name
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipantList_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipantList_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipantList_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ParticipantList table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipantList_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ParticipantList] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipantList_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipantList_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipantList_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ParticipantList table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipantList_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CustomerID],
					[Name]
				FROM
					[dbo].[ParticipantList]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipantList_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipantList_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipantList_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ParticipantList table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipantList_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[CustomerID],
					[Name]
				FROM
					[dbo].[ParticipantList]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pParticipantList_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pParticipantList_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pParticipantList_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ParticipantList table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pParticipantList_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CustomerId int   = null ,

	@Name varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [Name]
    FROM
	[dbo].[ParticipantList]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [Name]
    FROM
	[dbo].[ParticipantList]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempReplayIDs_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempReplayIDs_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempReplayIDs_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempReplayIDs table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempReplayIDs_Get_List

AS


				
				SELECT
					[ReplayID],
					[AuxiliaryCID],
					[BillingDuration],
					[Notes],
					[Enabled],
					[ModifiedBy],
					[LastModifiedDate],
					[CreatedDate]
				FROM
					[dbo].[TempReplayIDs]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempReplayIDs_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempReplayIDs_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempReplayIDs_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempReplayIDs table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempReplayIDs_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ReplayID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ReplayID]'
				SET @SQL = @SQL + ', [AuxiliaryCID]'
				SET @SQL = @SQL + ', [BillingDuration]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [LastModifiedDate]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[TempReplayIDs]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ReplayID],'
				SET @SQL = @SQL + ' [AuxiliaryCID],'
				SET @SQL = @SQL + ' [BillingDuration],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [LastModifiedDate],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempReplayIDs]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempReplayIDs_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempReplayIDs_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempReplayIDs_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempReplayIDs table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempReplayIDs_Insert
(

	@ReplayId int   ,

	@AuxiliaryCid varchar (7)  ,

	@BillingDuration smallint   ,

	@Notes varchar (200)  ,

	@Enabled bit   ,

	@ModifiedBy varchar (50)  ,

	@LastModifiedDate datetime   ,

	@CreatedDate datetime   
)
AS


					
				INSERT INTO [dbo].[TempReplayIDs]
					(
					[ReplayID]
					,[AuxiliaryCID]
					,[BillingDuration]
					,[Notes]
					,[Enabled]
					,[ModifiedBy]
					,[LastModifiedDate]
					,[CreatedDate]
					)
				VALUES
					(
					@ReplayId
					,@AuxiliaryCid
					,@BillingDuration
					,@Notes
					,@Enabled
					,@ModifiedBy
					,@LastModifiedDate
					,@CreatedDate
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempReplayIDs_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempReplayIDs_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempReplayIDs_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempReplayIDs table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempReplayIDs_Update
(

	@ReplayId int   ,

	@OriginalReplayId int   ,

	@AuxiliaryCid varchar (7)  ,

	@BillingDuration smallint   ,

	@Notes varchar (200)  ,

	@Enabled bit   ,

	@ModifiedBy varchar (50)  ,

	@LastModifiedDate datetime   ,

	@CreatedDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempReplayIDs]
				SET
					[ReplayID] = @ReplayId
					,[AuxiliaryCID] = @AuxiliaryCid
					,[BillingDuration] = @BillingDuration
					,[Notes] = @Notes
					,[Enabled] = @Enabled
					,[ModifiedBy] = @ModifiedBy
					,[LastModifiedDate] = @LastModifiedDate
					,[CreatedDate] = @CreatedDate
				WHERE
[ReplayID] = @OriginalReplayId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempReplayIDs_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempReplayIDs_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempReplayIDs_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempReplayIDs table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempReplayIDs_Delete
(

	@ReplayId int   
)
AS


				DELETE FROM [dbo].[TempReplayIDs] WITH (ROWLOCK) 
				WHERE
					[ReplayID] = @ReplayId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempReplayIDs_GetByReplayId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempReplayIDs_GetByReplayId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempReplayIDs_GetByReplayId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempReplayIDs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempReplayIDs_GetByReplayId
(

	@ReplayId int   
)
AS


				SELECT
					[ReplayID],
					[AuxiliaryCID],
					[BillingDuration],
					[Notes],
					[Enabled],
					[ModifiedBy],
					[LastModifiedDate],
					[CreatedDate]
				FROM
					[dbo].[TempReplayIDs]
				WHERE
					[ReplayID] = @ReplayId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempReplayIDs_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempReplayIDs_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempReplayIDs_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempReplayIDs table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempReplayIDs_Find
(

	@SearchUsingOR bit   = null ,

	@ReplayId int   = null ,

	@AuxiliaryCid varchar (7)  = null ,

	@BillingDuration smallint   = null ,

	@Notes varchar (200)  = null ,

	@Enabled bit   = null ,

	@ModifiedBy varchar (50)  = null ,

	@LastModifiedDate datetime   = null ,

	@CreatedDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ReplayID]
	, [AuxiliaryCID]
	, [BillingDuration]
	, [Notes]
	, [Enabled]
	, [ModifiedBy]
	, [LastModifiedDate]
	, [CreatedDate]
    FROM
	[dbo].[TempReplayIDs]
    WHERE 
	 ([ReplayID] = @ReplayId OR @ReplayId IS NULL)
	AND ([AuxiliaryCID] = @AuxiliaryCid OR @AuxiliaryCid IS NULL)
	AND ([BillingDuration] = @BillingDuration OR @BillingDuration IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([LastModifiedDate] = @LastModifiedDate OR @LastModifiedDate IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ReplayID]
	, [AuxiliaryCID]
	, [BillingDuration]
	, [Notes]
	, [Enabled]
	, [ModifiedBy]
	, [LastModifiedDate]
	, [CreatedDate]
    FROM
	[dbo].[TempReplayIDs]
    WHERE 
	 ([ReplayID] = @ReplayId AND @ReplayId is not null)
	OR ([AuxiliaryCID] = @AuxiliaryCid AND @AuxiliaryCid is not null)
	OR ([BillingDuration] = @BillingDuration AND @BillingDuration is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([LastModifiedDate] = @LastModifiedDate AND @LastModifiedDate is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempExistingCodes_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempExistingCodes_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempExistingCodes_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempExistingCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempExistingCodes_Get_List

AS


				
				SELECT
					[Codes],
					[NewCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[Location],
					[WholesalerID]
				FROM
					[dbo].[TempExistingCodes]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempExistingCodes_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempExistingCodes_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempExistingCodes_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempExistingCodes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempExistingCodes_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[Codes]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [Codes]'
				SET @SQL = @SQL + ', [NewCode]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [Location]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ' FROM [dbo].[TempExistingCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [Codes],'
				SET @SQL = @SQL + ' [NewCode],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [Location],'
				SET @SQL = @SQL + ' [WholesalerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempExistingCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempExistingCodes_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempExistingCodes_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempExistingCodes_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempExistingCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempExistingCodes_Insert
(

	@Codes varchar (16)  ,

	@NewCode bit   ,

	@PriCustomerNumber varchar (50)  ,

	@SecCustomerNumber varchar (50)  ,

	@Location varchar (50)  ,

	@WholesalerId varchar (10)  
)
AS


					
				INSERT INTO [dbo].[TempExistingCodes]
					(
					[Codes]
					,[NewCode]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[Location]
					,[WholesalerID]
					)
				VALUES
					(
					@Codes
					,@NewCode
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@Location
					,@WholesalerId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempExistingCodes_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempExistingCodes_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempExistingCodes_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempExistingCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempExistingCodes_Update
(

	@Codes varchar (16)  ,

	@OriginalCodes varchar (16)  ,

	@NewCode bit   ,

	@PriCustomerNumber varchar (50)  ,

	@SecCustomerNumber varchar (50)  ,

	@Location varchar (50)  ,

	@WholesalerId varchar (10)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempExistingCodes]
				SET
					[Codes] = @Codes
					,[NewCode] = @NewCode
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[Location] = @Location
					,[WholesalerID] = @WholesalerId
				WHERE
[Codes] = @OriginalCodes 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempExistingCodes_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempExistingCodes_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempExistingCodes_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempExistingCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempExistingCodes_Delete
(

	@Codes varchar (16)  
)
AS


				DELETE FROM [dbo].[TempExistingCodes] WITH (ROWLOCK) 
				WHERE
					[Codes] = @Codes
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempExistingCodes_GetByCodes procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempExistingCodes_GetByCodes') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempExistingCodes_GetByCodes
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempExistingCodes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempExistingCodes_GetByCodes
(

	@Codes varchar (16)  
)
AS


				SELECT
					[Codes],
					[NewCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[Location],
					[WholesalerID]
				FROM
					[dbo].[TempExistingCodes]
				WHERE
					[Codes] = @Codes
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempExistingCodes_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempExistingCodes_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempExistingCodes_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempExistingCodes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempExistingCodes_Find
(

	@SearchUsingOR bit   = null ,

	@Codes varchar (16)  = null ,

	@NewCode bit   = null ,

	@PriCustomerNumber varchar (50)  = null ,

	@SecCustomerNumber varchar (50)  = null ,

	@Location varchar (50)  = null ,

	@WholesalerId varchar (10)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [Codes]
	, [NewCode]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [Location]
	, [WholesalerID]
    FROM
	[dbo].[TempExistingCodes]
    WHERE 
	 ([Codes] = @Codes OR @Codes IS NULL)
	AND ([NewCode] = @NewCode OR @NewCode IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([Location] = @Location OR @Location IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [Codes]
	, [NewCode]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [Location]
	, [WholesalerID]
    FROM
	[dbo].[TempExistingCodes]
    WHERE 
	 ([Codes] = @Codes AND @Codes is not null)
	OR ([NewCode] = @NewCode AND @NewCode is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([Location] = @Location AND @Location is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempCodes_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempCodes_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempCodes_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempCodes_Get_List

AS


				
				SELECT
					[ID],
					[Codes],
					[NewCode],
					[CreatedDate],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[Location]
				FROM
					[dbo].[TempCodes]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempCodes_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempCodes_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempCodes_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempCodes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempCodes_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Codes]'
				SET @SQL = @SQL + ', [NewCode]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [Location]'
				SET @SQL = @SQL + ' FROM [dbo].[TempCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Codes],'
				SET @SQL = @SQL + ' [NewCode],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [Location]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempCodes_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempCodes_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempCodes_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempCodes_Insert
(

	@Id int   ,

	@Codes varchar (8)  ,

	@NewCode bit   ,

	@CreatedDate datetime   ,

	@PriCustomerNumber varchar (50)  ,

	@SecCustomerNumber varchar (50)  ,

	@Location varchar (50)  
)
AS


					
				INSERT INTO [dbo].[TempCodes]
					(
					[ID]
					,[Codes]
					,[NewCode]
					,[CreatedDate]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[Location]
					)
				VALUES
					(
					@Id
					,@Codes
					,@NewCode
					,@CreatedDate
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@Location
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempCodes_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempCodes_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempCodes_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempCodes_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Codes varchar (8)  ,

	@NewCode bit   ,

	@CreatedDate datetime   ,

	@PriCustomerNumber varchar (50)  ,

	@SecCustomerNumber varchar (50)  ,

	@Location varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempCodes]
				SET
					[ID] = @Id
					,[Codes] = @Codes
					,[NewCode] = @NewCode
					,[CreatedDate] = @CreatedDate
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[Location] = @Location
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempCodes_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempCodes_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempCodes_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempCodes_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[TempCodes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempCodes_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempCodes_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempCodes_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempCodes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempCodes_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Codes],
					[NewCode],
					[CreatedDate],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[Location]
				FROM
					[dbo].[TempCodes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempCodes_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempCodes_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempCodes_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempCodes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempCodes_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Codes varchar (8)  = null ,

	@NewCode bit   = null ,

	@CreatedDate datetime   = null ,

	@PriCustomerNumber varchar (50)  = null ,

	@SecCustomerNumber varchar (50)  = null ,

	@Location varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Codes]
	, [NewCode]
	, [CreatedDate]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [Location]
    FROM
	[dbo].[TempCodes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Codes] = @Codes OR @Codes IS NULL)
	AND ([NewCode] = @NewCode OR @NewCode IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([Location] = @Location OR @Location IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Codes]
	, [NewCode]
	, [CreatedDate]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [Location]
    FROM
	[dbo].[TempCodes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Codes] = @Codes AND @Codes is not null)
	OR ([NewCode] = @NewCode AND @NewCode is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([Location] = @Location AND @Location is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.ptempCodeChanges_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.ptempCodeChanges_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.ptempCodeChanges_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the tempCodeChanges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.ptempCodeChanges_Get_List

AS


				
				SELECT
					[ID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[OrigModCode],
					[OrigPassCode],
					[ExpectedOrigModCode],
					[ExpectedOrigPassCode],
					[NewModCode],
					[NewPassCode],
					[AppliedDate]
				FROM
					[dbo].[tempCodeChanges]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.ptempCodeChanges_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.ptempCodeChanges_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.ptempCodeChanges_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the tempCodeChanges table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.ptempCodeChanges_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [OrigModCode]'
				SET @SQL = @SQL + ', [OrigPassCode]'
				SET @SQL = @SQL + ', [ExpectedOrigModCode]'
				SET @SQL = @SQL + ', [ExpectedOrigPassCode]'
				SET @SQL = @SQL + ', [NewModCode]'
				SET @SQL = @SQL + ', [NewPassCode]'
				SET @SQL = @SQL + ', [AppliedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[tempCodeChanges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [OrigModCode],'
				SET @SQL = @SQL + ' [OrigPassCode],'
				SET @SQL = @SQL + ' [ExpectedOrigModCode],'
				SET @SQL = @SQL + ' [ExpectedOrigPassCode],'
				SET @SQL = @SQL + ' [NewModCode],'
				SET @SQL = @SQL + ' [NewPassCode],'
				SET @SQL = @SQL + ' [AppliedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[tempCodeChanges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.ptempCodeChanges_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.ptempCodeChanges_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.ptempCodeChanges_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the tempCodeChanges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.ptempCodeChanges_Insert
(

	@Id int    OUTPUT,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@OrigModCode varchar (8)  ,

	@OrigPassCode varchar (8)  ,

	@ExpectedOrigModCode varchar (8)  ,

	@ExpectedOrigPassCode varchar (8)  ,

	@NewModCode varchar (8)  ,

	@NewPassCode varchar (8)  ,

	@AppliedDate datetime   
)
AS


					
				INSERT INTO [dbo].[tempCodeChanges]
					(
					[PriCustomerNumber]
					,[SecCustomerNumber]
					,[OrigModCode]
					,[OrigPassCode]
					,[ExpectedOrigModCode]
					,[ExpectedOrigPassCode]
					,[NewModCode]
					,[NewPassCode]
					,[AppliedDate]
					)
				VALUES
					(
					@PriCustomerNumber
					,@SecCustomerNumber
					,@OrigModCode
					,@OrigPassCode
					,@ExpectedOrigModCode
					,@ExpectedOrigPassCode
					,@NewModCode
					,@NewPassCode
					,@AppliedDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.ptempCodeChanges_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.ptempCodeChanges_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.ptempCodeChanges_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the tempCodeChanges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.ptempCodeChanges_Update
(

	@Id int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@OrigModCode varchar (8)  ,

	@OrigPassCode varchar (8)  ,

	@ExpectedOrigModCode varchar (8)  ,

	@ExpectedOrigPassCode varchar (8)  ,

	@NewModCode varchar (8)  ,

	@NewPassCode varchar (8)  ,

	@AppliedDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[tempCodeChanges]
				SET
					[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[OrigModCode] = @OrigModCode
					,[OrigPassCode] = @OrigPassCode
					,[ExpectedOrigModCode] = @ExpectedOrigModCode
					,[ExpectedOrigPassCode] = @ExpectedOrigPassCode
					,[NewModCode] = @NewModCode
					,[NewPassCode] = @NewPassCode
					,[AppliedDate] = @AppliedDate
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.ptempCodeChanges_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.ptempCodeChanges_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.ptempCodeChanges_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the tempCodeChanges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.ptempCodeChanges_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[tempCodeChanges] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.ptempCodeChanges_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.ptempCodeChanges_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.ptempCodeChanges_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the tempCodeChanges table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.ptempCodeChanges_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[OrigModCode],
					[OrigPassCode],
					[ExpectedOrigModCode],
					[ExpectedOrigPassCode],
					[NewModCode],
					[NewPassCode],
					[AppliedDate]
				FROM
					[dbo].[tempCodeChanges]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.ptempCodeChanges_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.ptempCodeChanges_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.ptempCodeChanges_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the tempCodeChanges table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.ptempCodeChanges_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@SecCustomerNumber varchar (6)  = null ,

	@OrigModCode varchar (8)  = null ,

	@OrigPassCode varchar (8)  = null ,

	@ExpectedOrigModCode varchar (8)  = null ,

	@ExpectedOrigPassCode varchar (8)  = null ,

	@NewModCode varchar (8)  = null ,

	@NewPassCode varchar (8)  = null ,

	@AppliedDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [OrigModCode]
	, [OrigPassCode]
	, [ExpectedOrigModCode]
	, [ExpectedOrigPassCode]
	, [NewModCode]
	, [NewPassCode]
	, [AppliedDate]
    FROM
	[dbo].[tempCodeChanges]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([OrigModCode] = @OrigModCode OR @OrigModCode IS NULL)
	AND ([OrigPassCode] = @OrigPassCode OR @OrigPassCode IS NULL)
	AND ([ExpectedOrigModCode] = @ExpectedOrigModCode OR @ExpectedOrigModCode IS NULL)
	AND ([ExpectedOrigPassCode] = @ExpectedOrigPassCode OR @ExpectedOrigPassCode IS NULL)
	AND ([NewModCode] = @NewModCode OR @NewModCode IS NULL)
	AND ([NewPassCode] = @NewPassCode OR @NewPassCode IS NULL)
	AND ([AppliedDate] = @AppliedDate OR @AppliedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [OrigModCode]
	, [OrigPassCode]
	, [ExpectedOrigModCode]
	, [ExpectedOrigPassCode]
	, [NewModCode]
	, [NewPassCode]
	, [AppliedDate]
    FROM
	[dbo].[tempCodeChanges]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([OrigModCode] = @OrigModCode AND @OrigModCode is not null)
	OR ([OrigPassCode] = @OrigPassCode AND @OrigPassCode is not null)
	OR ([ExpectedOrigModCode] = @ExpectedOrigModCode AND @ExpectedOrigModCode is not null)
	OR ([ExpectedOrigPassCode] = @ExpectedOrigPassCode AND @ExpectedOrigPassCode is not null)
	OR ([NewModCode] = @NewModCode AND @NewModCode is not null)
	OR ([NewPassCode] = @NewPassCode AND @NewPassCode is not null)
	OR ([AppliedDate] = @AppliedDate AND @AppliedDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempSampleRatesPerProduct_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempSampleRatesPerProduct_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempSampleRatesPerProduct_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempSampleRatesPerProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempSampleRatesPerProduct_Get_List

AS


				
				SELECT
					[ID],
					[DateInterval],
					[NumberOfPorts],
					[AccessType],
					[WholesalerID]
				FROM
					[dbo].[TempSampleRatesPerProduct]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempSampleRatesPerProduct_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempSampleRatesPerProduct_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempSampleRatesPerProduct_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempSampleRatesPerProduct table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempSampleRatesPerProduct_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [DateInterval]'
				SET @SQL = @SQL + ', [NumberOfPorts]'
				SET @SQL = @SQL + ', [AccessType]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ' FROM [dbo].[TempSampleRatesPerProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [DateInterval],'
				SET @SQL = @SQL + ' [NumberOfPorts],'
				SET @SQL = @SQL + ' [AccessType],'
				SET @SQL = @SQL + ' [WholesalerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempSampleRatesPerProduct]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempSampleRatesPerProduct_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempSampleRatesPerProduct_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempSampleRatesPerProduct_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempSampleRatesPerProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempSampleRatesPerProduct_Insert
(

	@Id int    OUTPUT,

	@DateInterval datetime   ,

	@NumberOfPorts int   ,

	@AccessType int   ,

	@WholesalerId varchar (10)  
)
AS


					
				INSERT INTO [dbo].[TempSampleRatesPerProduct]
					(
					[DateInterval]
					,[NumberOfPorts]
					,[AccessType]
					,[WholesalerID]
					)
				VALUES
					(
					@DateInterval
					,@NumberOfPorts
					,@AccessType
					,@WholesalerId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempSampleRatesPerProduct_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempSampleRatesPerProduct_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempSampleRatesPerProduct_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempSampleRatesPerProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempSampleRatesPerProduct_Update
(

	@Id int   ,

	@DateInterval datetime   ,

	@NumberOfPorts int   ,

	@AccessType int   ,

	@WholesalerId varchar (10)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempSampleRatesPerProduct]
				SET
					[DateInterval] = @DateInterval
					,[NumberOfPorts] = @NumberOfPorts
					,[AccessType] = @AccessType
					,[WholesalerID] = @WholesalerId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempSampleRatesPerProduct_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempSampleRatesPerProduct_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempSampleRatesPerProduct_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempSampleRatesPerProduct table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempSampleRatesPerProduct_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[TempSampleRatesPerProduct] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempSampleRatesPerProduct_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempSampleRatesPerProduct_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempSampleRatesPerProduct_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempSampleRatesPerProduct table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempSampleRatesPerProduct_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[DateInterval],
					[NumberOfPorts],
					[AccessType],
					[WholesalerID]
				FROM
					[dbo].[TempSampleRatesPerProduct]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempSampleRatesPerProduct_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempSampleRatesPerProduct_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempSampleRatesPerProduct_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempSampleRatesPerProduct table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempSampleRatesPerProduct_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@DateInterval datetime   = null ,

	@NumberOfPorts int   = null ,

	@AccessType int   = null ,

	@WholesalerId varchar (10)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [DateInterval]
	, [NumberOfPorts]
	, [AccessType]
	, [WholesalerID]
    FROM
	[dbo].[TempSampleRatesPerProduct]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([DateInterval] = @DateInterval OR @DateInterval IS NULL)
	AND ([NumberOfPorts] = @NumberOfPorts OR @NumberOfPorts IS NULL)
	AND ([AccessType] = @AccessType OR @AccessType IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [DateInterval]
	, [NumberOfPorts]
	, [AccessType]
	, [WholesalerID]
    FROM
	[dbo].[TempSampleRatesPerProduct]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([DateInterval] = @DateInterval AND @DateInterval is not null)
	OR ([NumberOfPorts] = @NumberOfPorts AND @NumberOfPorts is not null)
	OR ([AccessType] = @AccessType AND @AccessType is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempTotalDollarsSpent_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempTotalDollarsSpent_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempTotalDollarsSpent_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TempTotalDollarsSpent table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempTotalDollarsSpent_Get_List

AS


				
				SELECT
					[ID123],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TotalDollarsSpent],
					[LastTimeUsed],
					[CreatedDate]
				FROM
					[dbo].[TempTotalDollarsSpent]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempTotalDollarsSpent_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempTotalDollarsSpent_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempTotalDollarsSpent_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TempTotalDollarsSpent table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempTotalDollarsSpent_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID123]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID123]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [TotalDollarsSpent]'
				SET @SQL = @SQL + ', [LastTimeUsed]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[TempTotalDollarsSpent]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID123],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [TotalDollarsSpent],'
				SET @SQL = @SQL + ' [LastTimeUsed],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TempTotalDollarsSpent]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempTotalDollarsSpent_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempTotalDollarsSpent_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempTotalDollarsSpent_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TempTotalDollarsSpent table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempTotalDollarsSpent_Insert
(

	@Id123 int    OUTPUT,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@TotalDollarsSpent decimal (18, 5)  ,

	@LastTimeUsed datetime   ,

	@CreatedDate datetime   
)
AS


					
				INSERT INTO [dbo].[TempTotalDollarsSpent]
					(
					[PriCustomerNumber]
					,[SecCustomerNumber]
					,[TotalDollarsSpent]
					,[LastTimeUsed]
					,[CreatedDate]
					)
				VALUES
					(
					@PriCustomerNumber
					,@SecCustomerNumber
					,@TotalDollarsSpent
					,@LastTimeUsed
					,@CreatedDate
					)
				
				-- Get the identity value
				SET @Id123 = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempTotalDollarsSpent_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempTotalDollarsSpent_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempTotalDollarsSpent_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TempTotalDollarsSpent table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempTotalDollarsSpent_Update
(

	@Id123 int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@TotalDollarsSpent decimal (18, 5)  ,

	@LastTimeUsed datetime   ,

	@CreatedDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TempTotalDollarsSpent]
				SET
					[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[TotalDollarsSpent] = @TotalDollarsSpent
					,[LastTimeUsed] = @LastTimeUsed
					,[CreatedDate] = @CreatedDate
				WHERE
[ID123] = @Id123 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempTotalDollarsSpent_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempTotalDollarsSpent_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempTotalDollarsSpent_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TempTotalDollarsSpent table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempTotalDollarsSpent_Delete
(

	@Id123 int   
)
AS


				DELETE FROM [dbo].[TempTotalDollarsSpent] WITH (ROWLOCK) 
				WHERE
					[ID123] = @Id123
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempTotalDollarsSpent_GetById123 procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempTotalDollarsSpent_GetById123') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempTotalDollarsSpent_GetById123
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempTotalDollarsSpent table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempTotalDollarsSpent_GetById123
(

	@Id123 int   
)
AS


				SELECT
					[ID123],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TotalDollarsSpent],
					[LastTimeUsed],
					[CreatedDate]
				FROM
					[dbo].[TempTotalDollarsSpent]
				WHERE
					[ID123] = @Id123
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempTotalDollarsSpent_GetByPriCustomerNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempTotalDollarsSpent_GetByPriCustomerNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempTotalDollarsSpent_GetByPriCustomerNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TempTotalDollarsSpent table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempTotalDollarsSpent_GetByPriCustomerNumber
(

	@PriCustomerNumber varchar (10)  
)
AS


				SELECT
					[ID123],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TotalDollarsSpent],
					[LastTimeUsed],
					[CreatedDate]
				FROM
					[dbo].[TempTotalDollarsSpent]
				WHERE
					[PriCustomerNumber] = @PriCustomerNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTempTotalDollarsSpent_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTempTotalDollarsSpent_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTempTotalDollarsSpent_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TempTotalDollarsSpent table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTempTotalDollarsSpent_Find
(

	@SearchUsingOR bit   = null ,

	@Id123 int   = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@SecCustomerNumber varchar (6)  = null ,

	@TotalDollarsSpent decimal (18, 5)  = null ,

	@LastTimeUsed datetime   = null ,

	@CreatedDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID123]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [TotalDollarsSpent]
	, [LastTimeUsed]
	, [CreatedDate]
    FROM
	[dbo].[TempTotalDollarsSpent]
    WHERE 
	 ([ID123] = @Id123 OR @Id123 IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([TotalDollarsSpent] = @TotalDollarsSpent OR @TotalDollarsSpent IS NULL)
	AND ([LastTimeUsed] = @LastTimeUsed OR @LastTimeUsed IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID123]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [TotalDollarsSpent]
	, [LastTimeUsed]
	, [CreatedDate]
    FROM
	[dbo].[TempTotalDollarsSpent]
    WHERE 
	 ([ID123] = @Id123 AND @Id123 is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([TotalDollarsSpent] = @TotalDollarsSpent AND @TotalDollarsSpent is not null)
	OR ([LastTimeUsed] = @LastTimeUsed AND @LastTimeUsed is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the RatedCDR table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_Get_List

AS


				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the RatedCDR table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ConferenceID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [Moderator]'
				SET @SQL = @SQL + ', [ExternalCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [ConferenceStartTime]'
				SET @SQL = @SQL + ', [ConferenceEndTime]'
				SET @SQL = @SQL + ', [ConferenceElapsedTime]'
				SET @SQL = @SQL + ', [StartTime]'
				SET @SQL = @SQL + ', [EndTime]'
				SET @SQL = @SQL + ', [ElapsedTime]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [DNIS]'
				SET @SQL = @SQL + ', [DialNumber]'
				SET @SQL = @SQL + ', [ANI]'
				SET @SQL = @SQL + ', [ParticipantName]'
				SET @SQL = @SQL + ', [Destination]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [ConnectProductRateID]'
				SET @SQL = @SQL + ', [BridgeProductRateID]'
				SET @SQL = @SQL + ', [LDProductRateID]'
				SET @SQL = @SQL + ', [ProductRateTaxableValue]'
				SET @SQL = @SQL + ', [CustomerTaxableValue]'
				SET @SQL = @SQL + ', [WSTaxableValue]'
				SET @SQL = @SQL + ', [RetailConnectCharge]'
				SET @SQL = @SQL + ', [RetailBridgeRate]'
				SET @SQL = @SQL + ', [RetailLDRate]'
				SET @SQL = @SQL + ', [RetailCurrency]'
				SET @SQL = @SQL + ', [RetailBillingInterval]'
				SET @SQL = @SQL + ', [RetailTotalConnectCharge]'
				SET @SQL = @SQL + ', [RetailTotalBridge]'
				SET @SQL = @SQL + ', [RetailTotalLD]'
				SET @SQL = @SQL + ', [RetailTotal]'
				SET @SQL = @SQL + ', [RetailTotalCredit]'
				SET @SQL = @SQL + ', [RetailLocalTaxRate]'
				SET @SQL = @SQL + ', [RetailFederalTaxRate]'
				SET @SQL = @SQL + ', [RetailLocalTax]'
				SET @SQL = @SQL + ', [RetailFederalTax]'
				SET @SQL = @SQL + ', [RetailTotalTax]'
				SET @SQL = @SQL + ', [WSConnectCharge]'
				SET @SQL = @SQL + ', [WSBridgeRate]'
				SET @SQL = @SQL + ', [WSLDRate]'
				SET @SQL = @SQL + ', [WSCurrency]'
				SET @SQL = @SQL + ', [WSBillingInterval]'
				SET @SQL = @SQL + ', [WSTotalConnectCharge]'
				SET @SQL = @SQL + ', [WSTotalBridge]'
				SET @SQL = @SQL + ', [WSTotalLD]'
				SET @SQL = @SQL + ', [WSTotal]'
				SET @SQL = @SQL + ', [WSLocalTaxRate]'
				SET @SQL = @SQL + ', [WSFederalTaxRate]'
				SET @SQL = @SQL + ', [WSLocalTax]'
				SET @SQL = @SQL + ', [WSFederalTax]'
				SET @SQL = @SQL + ', [WSTotalTax]'
				SET @SQL = @SQL + ', [BillingStatus]'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ', [ProcessedDate]'
				SET @SQL = @SQL + ', [SeeVoghMeetingID]'
				SET @SQL = @SQL + ' FROM [dbo].[RatedCDR]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ConferenceID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [Moderator],'
				SET @SQL = @SQL + ' [ExternalCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [ConferenceStartTime],'
				SET @SQL = @SQL + ' [ConferenceEndTime],'
				SET @SQL = @SQL + ' [ConferenceElapsedTime],'
				SET @SQL = @SQL + ' [StartTime],'
				SET @SQL = @SQL + ' [EndTime],'
				SET @SQL = @SQL + ' [ElapsedTime],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [DNIS],'
				SET @SQL = @SQL + ' [DialNumber],'
				SET @SQL = @SQL + ' [ANI],'
				SET @SQL = @SQL + ' [ParticipantName],'
				SET @SQL = @SQL + ' [Destination],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [ConnectProductRateID],'
				SET @SQL = @SQL + ' [BridgeProductRateID],'
				SET @SQL = @SQL + ' [LDProductRateID],'
				SET @SQL = @SQL + ' [ProductRateTaxableValue],'
				SET @SQL = @SQL + ' [CustomerTaxableValue],'
				SET @SQL = @SQL + ' [WSTaxableValue],'
				SET @SQL = @SQL + ' [RetailConnectCharge],'
				SET @SQL = @SQL + ' [RetailBridgeRate],'
				SET @SQL = @SQL + ' [RetailLDRate],'
				SET @SQL = @SQL + ' [RetailCurrency],'
				SET @SQL = @SQL + ' [RetailBillingInterval],'
				SET @SQL = @SQL + ' [RetailTotalConnectCharge],'
				SET @SQL = @SQL + ' [RetailTotalBridge],'
				SET @SQL = @SQL + ' [RetailTotalLD],'
				SET @SQL = @SQL + ' [RetailTotal],'
				SET @SQL = @SQL + ' [RetailTotalCredit],'
				SET @SQL = @SQL + ' [RetailLocalTaxRate],'
				SET @SQL = @SQL + ' [RetailFederalTaxRate],'
				SET @SQL = @SQL + ' [RetailLocalTax],'
				SET @SQL = @SQL + ' [RetailFederalTax],'
				SET @SQL = @SQL + ' [RetailTotalTax],'
				SET @SQL = @SQL + ' [WSConnectCharge],'
				SET @SQL = @SQL + ' [WSBridgeRate],'
				SET @SQL = @SQL + ' [WSLDRate],'
				SET @SQL = @SQL + ' [WSCurrency],'
				SET @SQL = @SQL + ' [WSBillingInterval],'
				SET @SQL = @SQL + ' [WSTotalConnectCharge],'
				SET @SQL = @SQL + ' [WSTotalBridge],'
				SET @SQL = @SQL + ' [WSTotalLD],'
				SET @SQL = @SQL + ' [WSTotal],'
				SET @SQL = @SQL + ' [WSLocalTaxRate],'
				SET @SQL = @SQL + ' [WSFederalTaxRate],'
				SET @SQL = @SQL + ' [WSLocalTax],'
				SET @SQL = @SQL + ' [WSFederalTax],'
				SET @SQL = @SQL + ' [WSTotalTax],'
				SET @SQL = @SQL + ' [BillingStatus],'
				SET @SQL = @SQL + ' [BilledDate],'
				SET @SQL = @SQL + ' [ProcessedDate],'
				SET @SQL = @SQL + ' [SeeVoghMeetingID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[RatedCDR]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the RatedCDR table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_Insert
(

	@Id uniqueidentifier   ,

	@ConferenceId varchar (50)  ,

	@ModeratorId int   ,

	@CustomerId int   ,

	@WholesalerId varchar (10)  ,

	@ModeratorCode varchar (10)  ,

	@PassCode varchar (10)  ,

	@ModeratorName varchar (50)  ,

	@Moderator int   ,

	@ExternalCustomerNumber varchar (100)  ,

	@ExternalModeratorNumber varchar (100)  ,

	@ReferenceNumber varchar (50)  ,

	@ConferenceStartTime datetime   ,

	@ConferenceEndTime datetime   ,

	@ConferenceElapsedTime int   ,

	@StartTime datetime   ,

	@EndTime datetime   ,

	@ElapsedTime int   ,

	@BridgeId int   ,

	@UniqueConferenceId varchar (40)  ,

	@AuxiliaryConferenceId varchar (40)  ,

	@Dnis varchar (50)  ,

	@DialNumber varchar (50)  ,

	@Ani varchar (50)  ,

	@ParticipantName varchar (50)  ,

	@Destination varchar (50)  ,

	@AccessTypeId int   ,

	@ConnectProductRateId int   ,

	@BridgeProductRateId int   ,

	@LdProductRateId int   ,

	@ProductRateTaxableValue int   ,

	@CustomerTaxableValue int   ,

	@WsTaxableValue int   ,

	@RetailConnectCharge decimal (18, 2)  ,

	@RetailBridgeRate decimal (9, 5)  ,

	@RetailLdRate decimal (9, 5)  ,

	@RetailCurrency char (3)  ,

	@RetailBillingInterval int   ,

	@RetailTotalConnectCharge decimal (18, 2)  ,

	@RetailTotalBridge decimal (18, 2)  ,

	@RetailTotalLd decimal (18, 2)  ,

	@RetailTotal decimal (18, 2)  ,

	@RetailTotalCredit decimal (18, 2)  ,

	@RetailLocalTaxRate decimal (9, 5)  ,

	@RetailFederalTaxRate decimal (9, 5)  ,

	@RetailLocalTax decimal (18, 7)  ,

	@RetailFederalTax decimal (18, 7)  ,

	@RetailTotalTax decimal (18, 7)  ,

	@WsConnectCharge decimal (18, 2)  ,

	@WsBridgeRate decimal (9, 5)  ,

	@WsldRate decimal (9, 5)  ,

	@WsCurrency char (3)  ,

	@WsBillingInterval int   ,

	@WsTotalConnectCharge decimal (18, 2)  ,

	@WsTotalBridge decimal (18, 2)  ,

	@WsTotalLd decimal (18, 2)  ,

	@WsTotal decimal (18, 2)  ,

	@WsLocalTaxRate decimal (9, 5)  ,

	@WsFederalTaxRate decimal (9, 5)  ,

	@WsLocalTax decimal (18, 7)  ,

	@WsFederalTax decimal (18, 7)  ,

	@WsTotalTax decimal (18, 7)  ,

	@BillingStatus smallint   ,

	@BilledDate datetime   ,

	@ProcessedDate datetime   ,

	@SeeVoghMeetingId varchar (50)  
)
AS


					
				INSERT INTO [dbo].[RatedCDR]
					(
					[ID]
					,[ConferenceID]
					,[ModeratorID]
					,[CustomerID]
					,[WholesalerID]
					,[ModeratorCode]
					,[PassCode]
					,[ModeratorName]
					,[Moderator]
					,[ExternalCustomerNumber]
					,[ExternalModeratorNumber]
					,[ReferenceNumber]
					,[ConferenceStartTime]
					,[ConferenceEndTime]
					,[ConferenceElapsedTime]
					,[StartTime]
					,[EndTime]
					,[ElapsedTime]
					,[BridgeID]
					,[UniqueConferenceID]
					,[AuxiliaryConferenceID]
					,[DNIS]
					,[DialNumber]
					,[ANI]
					,[ParticipantName]
					,[Destination]
					,[AccessTypeID]
					,[ConnectProductRateID]
					,[BridgeProductRateID]
					,[LDProductRateID]
					,[ProductRateTaxableValue]
					,[CustomerTaxableValue]
					,[WSTaxableValue]
					,[RetailConnectCharge]
					,[RetailBridgeRate]
					,[RetailLDRate]
					,[RetailCurrency]
					,[RetailBillingInterval]
					,[RetailTotalConnectCharge]
					,[RetailTotalBridge]
					,[RetailTotalLD]
					,[RetailTotal]
					,[RetailTotalCredit]
					,[RetailLocalTaxRate]
					,[RetailFederalTaxRate]
					,[RetailLocalTax]
					,[RetailFederalTax]
					,[RetailTotalTax]
					,[WSConnectCharge]
					,[WSBridgeRate]
					,[WSLDRate]
					,[WSCurrency]
					,[WSBillingInterval]
					,[WSTotalConnectCharge]
					,[WSTotalBridge]
					,[WSTotalLD]
					,[WSTotal]
					,[WSLocalTaxRate]
					,[WSFederalTaxRate]
					,[WSLocalTax]
					,[WSFederalTax]
					,[WSTotalTax]
					,[BillingStatus]
					,[BilledDate]
					,[ProcessedDate]
					,[SeeVoghMeetingID]
					)
				VALUES
					(
					@Id
					,@ConferenceId
					,@ModeratorId
					,@CustomerId
					,@WholesalerId
					,@ModeratorCode
					,@PassCode
					,@ModeratorName
					,@Moderator
					,@ExternalCustomerNumber
					,@ExternalModeratorNumber
					,@ReferenceNumber
					,@ConferenceStartTime
					,@ConferenceEndTime
					,@ConferenceElapsedTime
					,@StartTime
					,@EndTime
					,@ElapsedTime
					,@BridgeId
					,@UniqueConferenceId
					,@AuxiliaryConferenceId
					,@Dnis
					,@DialNumber
					,@Ani
					,@ParticipantName
					,@Destination
					,@AccessTypeId
					,@ConnectProductRateId
					,@BridgeProductRateId
					,@LdProductRateId
					,@ProductRateTaxableValue
					,@CustomerTaxableValue
					,@WsTaxableValue
					,@RetailConnectCharge
					,@RetailBridgeRate
					,@RetailLdRate
					,@RetailCurrency
					,@RetailBillingInterval
					,@RetailTotalConnectCharge
					,@RetailTotalBridge
					,@RetailTotalLd
					,@RetailTotal
					,@RetailTotalCredit
					,@RetailLocalTaxRate
					,@RetailFederalTaxRate
					,@RetailLocalTax
					,@RetailFederalTax
					,@RetailTotalTax
					,@WsConnectCharge
					,@WsBridgeRate
					,@WsldRate
					,@WsCurrency
					,@WsBillingInterval
					,@WsTotalConnectCharge
					,@WsTotalBridge
					,@WsTotalLd
					,@WsTotal
					,@WsLocalTaxRate
					,@WsFederalTaxRate
					,@WsLocalTax
					,@WsFederalTax
					,@WsTotalTax
					,@BillingStatus
					,@BilledDate
					,@ProcessedDate
					,@SeeVoghMeetingId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the RatedCDR table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_Update
(

	@Id uniqueidentifier   ,

	@OriginalId uniqueidentifier   ,

	@ConferenceId varchar (50)  ,

	@ModeratorId int   ,

	@CustomerId int   ,

	@WholesalerId varchar (10)  ,

	@ModeratorCode varchar (10)  ,

	@PassCode varchar (10)  ,

	@ModeratorName varchar (50)  ,

	@Moderator int   ,

	@ExternalCustomerNumber varchar (100)  ,

	@ExternalModeratorNumber varchar (100)  ,

	@ReferenceNumber varchar (50)  ,

	@ConferenceStartTime datetime   ,

	@ConferenceEndTime datetime   ,

	@ConferenceElapsedTime int   ,

	@StartTime datetime   ,

	@EndTime datetime   ,

	@ElapsedTime int   ,

	@BridgeId int   ,

	@UniqueConferenceId varchar (40)  ,

	@AuxiliaryConferenceId varchar (40)  ,

	@Dnis varchar (50)  ,

	@DialNumber varchar (50)  ,

	@Ani varchar (50)  ,

	@ParticipantName varchar (50)  ,

	@Destination varchar (50)  ,

	@AccessTypeId int   ,

	@ConnectProductRateId int   ,

	@BridgeProductRateId int   ,

	@LdProductRateId int   ,

	@ProductRateTaxableValue int   ,

	@CustomerTaxableValue int   ,

	@WsTaxableValue int   ,

	@RetailConnectCharge decimal (18, 2)  ,

	@RetailBridgeRate decimal (9, 5)  ,

	@RetailLdRate decimal (9, 5)  ,

	@RetailCurrency char (3)  ,

	@RetailBillingInterval int   ,

	@RetailTotalConnectCharge decimal (18, 2)  ,

	@RetailTotalBridge decimal (18, 2)  ,

	@RetailTotalLd decimal (18, 2)  ,

	@RetailTotal decimal (18, 2)  ,

	@RetailTotalCredit decimal (18, 2)  ,

	@RetailLocalTaxRate decimal (9, 5)  ,

	@RetailFederalTaxRate decimal (9, 5)  ,

	@RetailLocalTax decimal (18, 7)  ,

	@RetailFederalTax decimal (18, 7)  ,

	@RetailTotalTax decimal (18, 7)  ,

	@WsConnectCharge decimal (18, 2)  ,

	@WsBridgeRate decimal (9, 5)  ,

	@WsldRate decimal (9, 5)  ,

	@WsCurrency char (3)  ,

	@WsBillingInterval int   ,

	@WsTotalConnectCharge decimal (18, 2)  ,

	@WsTotalBridge decimal (18, 2)  ,

	@WsTotalLd decimal (18, 2)  ,

	@WsTotal decimal (18, 2)  ,

	@WsLocalTaxRate decimal (9, 5)  ,

	@WsFederalTaxRate decimal (9, 5)  ,

	@WsLocalTax decimal (18, 7)  ,

	@WsFederalTax decimal (18, 7)  ,

	@WsTotalTax decimal (18, 7)  ,

	@BillingStatus smallint   ,

	@BilledDate datetime   ,

	@ProcessedDate datetime   ,

	@SeeVoghMeetingId varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[RatedCDR]
				SET
					[ID] = @Id
					,[ConferenceID] = @ConferenceId
					,[ModeratorID] = @ModeratorId
					,[CustomerID] = @CustomerId
					,[WholesalerID] = @WholesalerId
					,[ModeratorCode] = @ModeratorCode
					,[PassCode] = @PassCode
					,[ModeratorName] = @ModeratorName
					,[Moderator] = @Moderator
					,[ExternalCustomerNumber] = @ExternalCustomerNumber
					,[ExternalModeratorNumber] = @ExternalModeratorNumber
					,[ReferenceNumber] = @ReferenceNumber
					,[ConferenceStartTime] = @ConferenceStartTime
					,[ConferenceEndTime] = @ConferenceEndTime
					,[ConferenceElapsedTime] = @ConferenceElapsedTime
					,[StartTime] = @StartTime
					,[EndTime] = @EndTime
					,[ElapsedTime] = @ElapsedTime
					,[BridgeID] = @BridgeId
					,[UniqueConferenceID] = @UniqueConferenceId
					,[AuxiliaryConferenceID] = @AuxiliaryConferenceId
					,[DNIS] = @Dnis
					,[DialNumber] = @DialNumber
					,[ANI] = @Ani
					,[ParticipantName] = @ParticipantName
					,[Destination] = @Destination
					,[AccessTypeID] = @AccessTypeId
					,[ConnectProductRateID] = @ConnectProductRateId
					,[BridgeProductRateID] = @BridgeProductRateId
					,[LDProductRateID] = @LdProductRateId
					,[ProductRateTaxableValue] = @ProductRateTaxableValue
					,[CustomerTaxableValue] = @CustomerTaxableValue
					,[WSTaxableValue] = @WsTaxableValue
					,[RetailConnectCharge] = @RetailConnectCharge
					,[RetailBridgeRate] = @RetailBridgeRate
					,[RetailLDRate] = @RetailLdRate
					,[RetailCurrency] = @RetailCurrency
					,[RetailBillingInterval] = @RetailBillingInterval
					,[RetailTotalConnectCharge] = @RetailTotalConnectCharge
					,[RetailTotalBridge] = @RetailTotalBridge
					,[RetailTotalLD] = @RetailTotalLd
					,[RetailTotal] = @RetailTotal
					,[RetailTotalCredit] = @RetailTotalCredit
					,[RetailLocalTaxRate] = @RetailLocalTaxRate
					,[RetailFederalTaxRate] = @RetailFederalTaxRate
					,[RetailLocalTax] = @RetailLocalTax
					,[RetailFederalTax] = @RetailFederalTax
					,[RetailTotalTax] = @RetailTotalTax
					,[WSConnectCharge] = @WsConnectCharge
					,[WSBridgeRate] = @WsBridgeRate
					,[WSLDRate] = @WsldRate
					,[WSCurrency] = @WsCurrency
					,[WSBillingInterval] = @WsBillingInterval
					,[WSTotalConnectCharge] = @WsTotalConnectCharge
					,[WSTotalBridge] = @WsTotalBridge
					,[WSTotalLD] = @WsTotalLd
					,[WSTotal] = @WsTotal
					,[WSLocalTaxRate] = @WsLocalTaxRate
					,[WSFederalTaxRate] = @WsFederalTaxRate
					,[WSLocalTax] = @WsLocalTax
					,[WSFederalTax] = @WsFederalTax
					,[WSTotalTax] = @WsTotalTax
					,[BillingStatus] = @BillingStatus
					,[BilledDate] = @BilledDate
					,[ProcessedDate] = @ProcessedDate
					,[SeeVoghMeetingID] = @SeeVoghMeetingId
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the RatedCDR table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_Delete
(

	@Id uniqueidentifier   
)
AS


				DELETE FROM [dbo].[RatedCDR] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByAccessTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByAccessTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByAccessTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByAccessTypeId
(

	@AccessTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[AccessTypeID] = @AccessTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByBridgeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByBridgeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByBridgeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByBridgeId
(

	@BridgeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[BridgeID] = @BridgeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetById
(

	@Id uniqueidentifier   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByConferenceIdBridgeIdWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByConferenceIdBridgeIdWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByConferenceIdBridgeIdWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByConferenceIdBridgeIdWholesalerId
(

	@ConferenceId varchar (50)  ,

	@BridgeId int   ,

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[ConferenceID] = @ConferenceId
					AND [BridgeID] = @BridgeId
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByWholesalerIdModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByWholesalerIdModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByWholesalerIdModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByWholesalerIdModeratorId
(

	@WholesalerId varchar (10)  ,

	@ModeratorId int   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByAccessTypeIdBridgeProductRateId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByAccessTypeIdBridgeProductRateId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByAccessTypeIdBridgeProductRateId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByAccessTypeIdBridgeProductRateId
(

	@AccessTypeId int   ,

	@BridgeProductRateId int   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[AccessTypeID] = @AccessTypeId
					AND [BridgeProductRateID] = @BridgeProductRateId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByWholesalerIdStartTimeEndTime procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByWholesalerIdStartTimeEndTime') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByWholesalerIdStartTimeEndTime
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByWholesalerIdStartTimeEndTime
(

	@WholesalerId varchar (10)  ,

	@StartTime datetime   ,

	@EndTime datetime   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [StartTime] = @StartTime
					AND [EndTime] = @EndTime
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByReferenceNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByReferenceNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByReferenceNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByReferenceNumber
(

	@ReferenceNumber varchar (50)  
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[ReferenceNumber] = @ReferenceNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByBilledDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByBilledDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByBilledDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByBilledDate
(

	@BilledDate datetime   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[BilledDate] = @BilledDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_GetByUniqueConferenceId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_GetByUniqueConferenceId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_GetByUniqueConferenceId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the RatedCDR table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_GetByUniqueConferenceId
(

	@UniqueConferenceId varchar (40)  
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[ConferenceStartTime],
					[ConferenceEndTime],
					[ConferenceElapsedTime],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailTotalCredit],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[SeeVoghMeetingID]
				FROM
					[dbo].[RatedCDR]
				WHERE
					[UniqueConferenceID] = @UniqueConferenceId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pRatedCDR_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pRatedCDR_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pRatedCDR_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the RatedCDR table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pRatedCDR_Find
(

	@SearchUsingOR bit   = null ,

	@Id uniqueidentifier   = null ,

	@ConferenceId varchar (50)  = null ,

	@ModeratorId int   = null ,

	@CustomerId int   = null ,

	@WholesalerId varchar (10)  = null ,

	@ModeratorCode varchar (10)  = null ,

	@PassCode varchar (10)  = null ,

	@ModeratorName varchar (50)  = null ,

	@Moderator int   = null ,

	@ExternalCustomerNumber varchar (100)  = null ,

	@ExternalModeratorNumber varchar (100)  = null ,

	@ReferenceNumber varchar (50)  = null ,

	@ConferenceStartTime datetime   = null ,

	@ConferenceEndTime datetime   = null ,

	@ConferenceElapsedTime int   = null ,

	@StartTime datetime   = null ,

	@EndTime datetime   = null ,

	@ElapsedTime int   = null ,

	@BridgeId int   = null ,

	@UniqueConferenceId varchar (40)  = null ,

	@AuxiliaryConferenceId varchar (40)  = null ,

	@Dnis varchar (50)  = null ,

	@DialNumber varchar (50)  = null ,

	@Ani varchar (50)  = null ,

	@ParticipantName varchar (50)  = null ,

	@Destination varchar (50)  = null ,

	@AccessTypeId int   = null ,

	@ConnectProductRateId int   = null ,

	@BridgeProductRateId int   = null ,

	@LdProductRateId int   = null ,

	@ProductRateTaxableValue int   = null ,

	@CustomerTaxableValue int   = null ,

	@WsTaxableValue int   = null ,

	@RetailConnectCharge decimal (18, 2)  = null ,

	@RetailBridgeRate decimal (9, 5)  = null ,

	@RetailLdRate decimal (9, 5)  = null ,

	@RetailCurrency char (3)  = null ,

	@RetailBillingInterval int   = null ,

	@RetailTotalConnectCharge decimal (18, 2)  = null ,

	@RetailTotalBridge decimal (18, 2)  = null ,

	@RetailTotalLd decimal (18, 2)  = null ,

	@RetailTotal decimal (18, 2)  = null ,

	@RetailTotalCredit decimal (18, 2)  = null ,

	@RetailLocalTaxRate decimal (9, 5)  = null ,

	@RetailFederalTaxRate decimal (9, 5)  = null ,

	@RetailLocalTax decimal (18, 7)  = null ,

	@RetailFederalTax decimal (18, 7)  = null ,

	@RetailTotalTax decimal (18, 7)  = null ,

	@WsConnectCharge decimal (18, 2)  = null ,

	@WsBridgeRate decimal (9, 5)  = null ,

	@WsldRate decimal (9, 5)  = null ,

	@WsCurrency char (3)  = null ,

	@WsBillingInterval int   = null ,

	@WsTotalConnectCharge decimal (18, 2)  = null ,

	@WsTotalBridge decimal (18, 2)  = null ,

	@WsTotalLd decimal (18, 2)  = null ,

	@WsTotal decimal (18, 2)  = null ,

	@WsLocalTaxRate decimal (9, 5)  = null ,

	@WsFederalTaxRate decimal (9, 5)  = null ,

	@WsLocalTax decimal (18, 7)  = null ,

	@WsFederalTax decimal (18, 7)  = null ,

	@WsTotalTax decimal (18, 7)  = null ,

	@BillingStatus smallint   = null ,

	@BilledDate datetime   = null ,

	@ProcessedDate datetime   = null ,

	@SeeVoghMeetingId varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ConferenceID]
	, [ModeratorID]
	, [CustomerID]
	, [WholesalerID]
	, [ModeratorCode]
	, [PassCode]
	, [ModeratorName]
	, [Moderator]
	, [ExternalCustomerNumber]
	, [ExternalModeratorNumber]
	, [ReferenceNumber]
	, [ConferenceStartTime]
	, [ConferenceEndTime]
	, [ConferenceElapsedTime]
	, [StartTime]
	, [EndTime]
	, [ElapsedTime]
	, [BridgeID]
	, [UniqueConferenceID]
	, [AuxiliaryConferenceID]
	, [DNIS]
	, [DialNumber]
	, [ANI]
	, [ParticipantName]
	, [Destination]
	, [AccessTypeID]
	, [ConnectProductRateID]
	, [BridgeProductRateID]
	, [LDProductRateID]
	, [ProductRateTaxableValue]
	, [CustomerTaxableValue]
	, [WSTaxableValue]
	, [RetailConnectCharge]
	, [RetailBridgeRate]
	, [RetailLDRate]
	, [RetailCurrency]
	, [RetailBillingInterval]
	, [RetailTotalConnectCharge]
	, [RetailTotalBridge]
	, [RetailTotalLD]
	, [RetailTotal]
	, [RetailTotalCredit]
	, [RetailLocalTaxRate]
	, [RetailFederalTaxRate]
	, [RetailLocalTax]
	, [RetailFederalTax]
	, [RetailTotalTax]
	, [WSConnectCharge]
	, [WSBridgeRate]
	, [WSLDRate]
	, [WSCurrency]
	, [WSBillingInterval]
	, [WSTotalConnectCharge]
	, [WSTotalBridge]
	, [WSTotalLD]
	, [WSTotal]
	, [WSLocalTaxRate]
	, [WSFederalTaxRate]
	, [WSLocalTax]
	, [WSFederalTax]
	, [WSTotalTax]
	, [BillingStatus]
	, [BilledDate]
	, [ProcessedDate]
	, [SeeVoghMeetingID]
    FROM
	[dbo].[RatedCDR]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ConferenceID] = @ConferenceId OR @ConferenceId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([PassCode] = @PassCode OR @PassCode IS NULL)
	AND ([ModeratorName] = @ModeratorName OR @ModeratorName IS NULL)
	AND ([Moderator] = @Moderator OR @Moderator IS NULL)
	AND ([ExternalCustomerNumber] = @ExternalCustomerNumber OR @ExternalCustomerNumber IS NULL)
	AND ([ExternalModeratorNumber] = @ExternalModeratorNumber OR @ExternalModeratorNumber IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([ConferenceStartTime] = @ConferenceStartTime OR @ConferenceStartTime IS NULL)
	AND ([ConferenceEndTime] = @ConferenceEndTime OR @ConferenceEndTime IS NULL)
	AND ([ConferenceElapsedTime] = @ConferenceElapsedTime OR @ConferenceElapsedTime IS NULL)
	AND ([StartTime] = @StartTime OR @StartTime IS NULL)
	AND ([EndTime] = @EndTime OR @EndTime IS NULL)
	AND ([ElapsedTime] = @ElapsedTime OR @ElapsedTime IS NULL)
	AND ([BridgeID] = @BridgeId OR @BridgeId IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([AuxiliaryConferenceID] = @AuxiliaryConferenceId OR @AuxiliaryConferenceId IS NULL)
	AND ([DNIS] = @Dnis OR @Dnis IS NULL)
	AND ([DialNumber] = @DialNumber OR @DialNumber IS NULL)
	AND ([ANI] = @Ani OR @Ani IS NULL)
	AND ([ParticipantName] = @ParticipantName OR @ParticipantName IS NULL)
	AND ([Destination] = @Destination OR @Destination IS NULL)
	AND ([AccessTypeID] = @AccessTypeId OR @AccessTypeId IS NULL)
	AND ([ConnectProductRateID] = @ConnectProductRateId OR @ConnectProductRateId IS NULL)
	AND ([BridgeProductRateID] = @BridgeProductRateId OR @BridgeProductRateId IS NULL)
	AND ([LDProductRateID] = @LdProductRateId OR @LdProductRateId IS NULL)
	AND ([ProductRateTaxableValue] = @ProductRateTaxableValue OR @ProductRateTaxableValue IS NULL)
	AND ([CustomerTaxableValue] = @CustomerTaxableValue OR @CustomerTaxableValue IS NULL)
	AND ([WSTaxableValue] = @WsTaxableValue OR @WsTaxableValue IS NULL)
	AND ([RetailConnectCharge] = @RetailConnectCharge OR @RetailConnectCharge IS NULL)
	AND ([RetailBridgeRate] = @RetailBridgeRate OR @RetailBridgeRate IS NULL)
	AND ([RetailLDRate] = @RetailLdRate OR @RetailLdRate IS NULL)
	AND ([RetailCurrency] = @RetailCurrency OR @RetailCurrency IS NULL)
	AND ([RetailBillingInterval] = @RetailBillingInterval OR @RetailBillingInterval IS NULL)
	AND ([RetailTotalConnectCharge] = @RetailTotalConnectCharge OR @RetailTotalConnectCharge IS NULL)
	AND ([RetailTotalBridge] = @RetailTotalBridge OR @RetailTotalBridge IS NULL)
	AND ([RetailTotalLD] = @RetailTotalLd OR @RetailTotalLd IS NULL)
	AND ([RetailTotal] = @RetailTotal OR @RetailTotal IS NULL)
	AND ([RetailTotalCredit] = @RetailTotalCredit OR @RetailTotalCredit IS NULL)
	AND ([RetailLocalTaxRate] = @RetailLocalTaxRate OR @RetailLocalTaxRate IS NULL)
	AND ([RetailFederalTaxRate] = @RetailFederalTaxRate OR @RetailFederalTaxRate IS NULL)
	AND ([RetailLocalTax] = @RetailLocalTax OR @RetailLocalTax IS NULL)
	AND ([RetailFederalTax] = @RetailFederalTax OR @RetailFederalTax IS NULL)
	AND ([RetailTotalTax] = @RetailTotalTax OR @RetailTotalTax IS NULL)
	AND ([WSConnectCharge] = @WsConnectCharge OR @WsConnectCharge IS NULL)
	AND ([WSBridgeRate] = @WsBridgeRate OR @WsBridgeRate IS NULL)
	AND ([WSLDRate] = @WsldRate OR @WsldRate IS NULL)
	AND ([WSCurrency] = @WsCurrency OR @WsCurrency IS NULL)
	AND ([WSBillingInterval] = @WsBillingInterval OR @WsBillingInterval IS NULL)
	AND ([WSTotalConnectCharge] = @WsTotalConnectCharge OR @WsTotalConnectCharge IS NULL)
	AND ([WSTotalBridge] = @WsTotalBridge OR @WsTotalBridge IS NULL)
	AND ([WSTotalLD] = @WsTotalLd OR @WsTotalLd IS NULL)
	AND ([WSTotal] = @WsTotal OR @WsTotal IS NULL)
	AND ([WSLocalTaxRate] = @WsLocalTaxRate OR @WsLocalTaxRate IS NULL)
	AND ([WSFederalTaxRate] = @WsFederalTaxRate OR @WsFederalTaxRate IS NULL)
	AND ([WSLocalTax] = @WsLocalTax OR @WsLocalTax IS NULL)
	AND ([WSFederalTax] = @WsFederalTax OR @WsFederalTax IS NULL)
	AND ([WSTotalTax] = @WsTotalTax OR @WsTotalTax IS NULL)
	AND ([BillingStatus] = @BillingStatus OR @BillingStatus IS NULL)
	AND ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
	AND ([ProcessedDate] = @ProcessedDate OR @ProcessedDate IS NULL)
	AND ([SeeVoghMeetingID] = @SeeVoghMeetingId OR @SeeVoghMeetingId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ConferenceID]
	, [ModeratorID]
	, [CustomerID]
	, [WholesalerID]
	, [ModeratorCode]
	, [PassCode]
	, [ModeratorName]
	, [Moderator]
	, [ExternalCustomerNumber]
	, [ExternalModeratorNumber]
	, [ReferenceNumber]
	, [ConferenceStartTime]
	, [ConferenceEndTime]
	, [ConferenceElapsedTime]
	, [StartTime]
	, [EndTime]
	, [ElapsedTime]
	, [BridgeID]
	, [UniqueConferenceID]
	, [AuxiliaryConferenceID]
	, [DNIS]
	, [DialNumber]
	, [ANI]
	, [ParticipantName]
	, [Destination]
	, [AccessTypeID]
	, [ConnectProductRateID]
	, [BridgeProductRateID]
	, [LDProductRateID]
	, [ProductRateTaxableValue]
	, [CustomerTaxableValue]
	, [WSTaxableValue]
	, [RetailConnectCharge]
	, [RetailBridgeRate]
	, [RetailLDRate]
	, [RetailCurrency]
	, [RetailBillingInterval]
	, [RetailTotalConnectCharge]
	, [RetailTotalBridge]
	, [RetailTotalLD]
	, [RetailTotal]
	, [RetailTotalCredit]
	, [RetailLocalTaxRate]
	, [RetailFederalTaxRate]
	, [RetailLocalTax]
	, [RetailFederalTax]
	, [RetailTotalTax]
	, [WSConnectCharge]
	, [WSBridgeRate]
	, [WSLDRate]
	, [WSCurrency]
	, [WSBillingInterval]
	, [WSTotalConnectCharge]
	, [WSTotalBridge]
	, [WSTotalLD]
	, [WSTotal]
	, [WSLocalTaxRate]
	, [WSFederalTaxRate]
	, [WSLocalTax]
	, [WSFederalTax]
	, [WSTotalTax]
	, [BillingStatus]
	, [BilledDate]
	, [ProcessedDate]
	, [SeeVoghMeetingID]
    FROM
	[dbo].[RatedCDR]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ConferenceID] = @ConferenceId AND @ConferenceId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([PassCode] = @PassCode AND @PassCode is not null)
	OR ([ModeratorName] = @ModeratorName AND @ModeratorName is not null)
	OR ([Moderator] = @Moderator AND @Moderator is not null)
	OR ([ExternalCustomerNumber] = @ExternalCustomerNumber AND @ExternalCustomerNumber is not null)
	OR ([ExternalModeratorNumber] = @ExternalModeratorNumber AND @ExternalModeratorNumber is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([ConferenceStartTime] = @ConferenceStartTime AND @ConferenceStartTime is not null)
	OR ([ConferenceEndTime] = @ConferenceEndTime AND @ConferenceEndTime is not null)
	OR ([ConferenceElapsedTime] = @ConferenceElapsedTime AND @ConferenceElapsedTime is not null)
	OR ([StartTime] = @StartTime AND @StartTime is not null)
	OR ([EndTime] = @EndTime AND @EndTime is not null)
	OR ([ElapsedTime] = @ElapsedTime AND @ElapsedTime is not null)
	OR ([BridgeID] = @BridgeId AND @BridgeId is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([AuxiliaryConferenceID] = @AuxiliaryConferenceId AND @AuxiliaryConferenceId is not null)
	OR ([DNIS] = @Dnis AND @Dnis is not null)
	OR ([DialNumber] = @DialNumber AND @DialNumber is not null)
	OR ([ANI] = @Ani AND @Ani is not null)
	OR ([ParticipantName] = @ParticipantName AND @ParticipantName is not null)
	OR ([Destination] = @Destination AND @Destination is not null)
	OR ([AccessTypeID] = @AccessTypeId AND @AccessTypeId is not null)
	OR ([ConnectProductRateID] = @ConnectProductRateId AND @ConnectProductRateId is not null)
	OR ([BridgeProductRateID] = @BridgeProductRateId AND @BridgeProductRateId is not null)
	OR ([LDProductRateID] = @LdProductRateId AND @LdProductRateId is not null)
	OR ([ProductRateTaxableValue] = @ProductRateTaxableValue AND @ProductRateTaxableValue is not null)
	OR ([CustomerTaxableValue] = @CustomerTaxableValue AND @CustomerTaxableValue is not null)
	OR ([WSTaxableValue] = @WsTaxableValue AND @WsTaxableValue is not null)
	OR ([RetailConnectCharge] = @RetailConnectCharge AND @RetailConnectCharge is not null)
	OR ([RetailBridgeRate] = @RetailBridgeRate AND @RetailBridgeRate is not null)
	OR ([RetailLDRate] = @RetailLdRate AND @RetailLdRate is not null)
	OR ([RetailCurrency] = @RetailCurrency AND @RetailCurrency is not null)
	OR ([RetailBillingInterval] = @RetailBillingInterval AND @RetailBillingInterval is not null)
	OR ([RetailTotalConnectCharge] = @RetailTotalConnectCharge AND @RetailTotalConnectCharge is not null)
	OR ([RetailTotalBridge] = @RetailTotalBridge AND @RetailTotalBridge is not null)
	OR ([RetailTotalLD] = @RetailTotalLd AND @RetailTotalLd is not null)
	OR ([RetailTotal] = @RetailTotal AND @RetailTotal is not null)
	OR ([RetailTotalCredit] = @RetailTotalCredit AND @RetailTotalCredit is not null)
	OR ([RetailLocalTaxRate] = @RetailLocalTaxRate AND @RetailLocalTaxRate is not null)
	OR ([RetailFederalTaxRate] = @RetailFederalTaxRate AND @RetailFederalTaxRate is not null)
	OR ([RetailLocalTax] = @RetailLocalTax AND @RetailLocalTax is not null)
	OR ([RetailFederalTax] = @RetailFederalTax AND @RetailFederalTax is not null)
	OR ([RetailTotalTax] = @RetailTotalTax AND @RetailTotalTax is not null)
	OR ([WSConnectCharge] = @WsConnectCharge AND @WsConnectCharge is not null)
	OR ([WSBridgeRate] = @WsBridgeRate AND @WsBridgeRate is not null)
	OR ([WSLDRate] = @WsldRate AND @WsldRate is not null)
	OR ([WSCurrency] = @WsCurrency AND @WsCurrency is not null)
	OR ([WSBillingInterval] = @WsBillingInterval AND @WsBillingInterval is not null)
	OR ([WSTotalConnectCharge] = @WsTotalConnectCharge AND @WsTotalConnectCharge is not null)
	OR ([WSTotalBridge] = @WsTotalBridge AND @WsTotalBridge is not null)
	OR ([WSTotalLD] = @WsTotalLd AND @WsTotalLd is not null)
	OR ([WSTotal] = @WsTotal AND @WsTotal is not null)
	OR ([WSLocalTaxRate] = @WsLocalTaxRate AND @WsLocalTaxRate is not null)
	OR ([WSFederalTaxRate] = @WsFederalTaxRate AND @WsFederalTaxRate is not null)
	OR ([WSLocalTax] = @WsLocalTax AND @WsLocalTax is not null)
	OR ([WSFederalTax] = @WsFederalTax AND @WsFederalTax is not null)
	OR ([WSTotalTax] = @WsTotalTax AND @WsTotalTax is not null)
	OR ([BillingStatus] = @BillingStatus AND @BillingStatus is not null)
	OR ([BilledDate] = @BilledDate AND @BilledDate is not null)
	OR ([ProcessedDate] = @ProcessedDate AND @ProcessedDate is not null)
	OR ([SeeVoghMeetingID] = @SeeVoghMeetingId AND @SeeVoghMeetingId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTrend_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTrend_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTrend_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Trend table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTrend_Get_List

AS


				
				SELECT
					[CompanyID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[RetailCurrency],
					[CompanyName],
					[TotalRevenueMonth01],
					[TotalRevenueMonth02],
					[TotalRevenueMonth03],
					[TotalRevenueMonth04],
					[TotalRevenueMonth05],
					[TotalRevenueMonth06],
					[TotalRevenueMonth07],
					[TotalRevenueMonth08],
					[TotalRevenueMonth09],
					[TotalRevenueMonth10],
					[TotalRevenueMonth11],
					[TotalRevenueMonth12],
					[YearCategory],
					[StartDate],
					[EndDate]
				FROM
					[dbo].[Trend]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTrend_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTrend_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTrend_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Trend table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTrend_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CompanyID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [RetailCurrency]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [TotalRevenueMonth01]'
				SET @SQL = @SQL + ', [TotalRevenueMonth02]'
				SET @SQL = @SQL + ', [TotalRevenueMonth03]'
				SET @SQL = @SQL + ', [TotalRevenueMonth04]'
				SET @SQL = @SQL + ', [TotalRevenueMonth05]'
				SET @SQL = @SQL + ', [TotalRevenueMonth06]'
				SET @SQL = @SQL + ', [TotalRevenueMonth07]'
				SET @SQL = @SQL + ', [TotalRevenueMonth08]'
				SET @SQL = @SQL + ', [TotalRevenueMonth09]'
				SET @SQL = @SQL + ', [TotalRevenueMonth10]'
				SET @SQL = @SQL + ', [TotalRevenueMonth11]'
				SET @SQL = @SQL + ', [TotalRevenueMonth12]'
				SET @SQL = @SQL + ', [YearCategory]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ' FROM [dbo].[Trend]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [RetailCurrency],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [TotalRevenueMonth01],'
				SET @SQL = @SQL + ' [TotalRevenueMonth02],'
				SET @SQL = @SQL + ' [TotalRevenueMonth03],'
				SET @SQL = @SQL + ' [TotalRevenueMonth04],'
				SET @SQL = @SQL + ' [TotalRevenueMonth05],'
				SET @SQL = @SQL + ' [TotalRevenueMonth06],'
				SET @SQL = @SQL + ' [TotalRevenueMonth07],'
				SET @SQL = @SQL + ' [TotalRevenueMonth08],'
				SET @SQL = @SQL + ' [TotalRevenueMonth09],'
				SET @SQL = @SQL + ' [TotalRevenueMonth10],'
				SET @SQL = @SQL + ' [TotalRevenueMonth11],'
				SET @SQL = @SQL + ' [TotalRevenueMonth12],'
				SET @SQL = @SQL + ' [YearCategory],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Trend]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTrend_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTrend_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTrend_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Trend table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTrend_Insert
(

	@CompanyId int   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@SalesPersonId int   ,

	@RetailCurrency char (3)  ,

	@CompanyName varchar (50)  ,

	@TotalRevenueMonth01 decimal (18, 2)  ,

	@TotalRevenueMonth02 decimal (18, 2)  ,

	@TotalRevenueMonth03 decimal (18, 2)  ,

	@TotalRevenueMonth04 decimal (18, 2)  ,

	@TotalRevenueMonth05 decimal (18, 2)  ,

	@TotalRevenueMonth06 decimal (18, 2)  ,

	@TotalRevenueMonth07 decimal (18, 2)  ,

	@TotalRevenueMonth08 decimal (18, 2)  ,

	@TotalRevenueMonth09 decimal (18, 2)  ,

	@TotalRevenueMonth10 decimal (18, 2)  ,

	@TotalRevenueMonth11 decimal (18, 2)  ,

	@TotalRevenueMonth12 decimal (18, 2)  ,

	@YearCategory int   ,

	@StartDate datetime   ,

	@EndDate datetime   
)
AS


					
				INSERT INTO [dbo].[Trend]
					(
					[CompanyID]
					,[WholesalerID]
					,[CustomerID]
					,[SalesPersonID]
					,[RetailCurrency]
					,[CompanyName]
					,[TotalRevenueMonth01]
					,[TotalRevenueMonth02]
					,[TotalRevenueMonth03]
					,[TotalRevenueMonth04]
					,[TotalRevenueMonth05]
					,[TotalRevenueMonth06]
					,[TotalRevenueMonth07]
					,[TotalRevenueMonth08]
					,[TotalRevenueMonth09]
					,[TotalRevenueMonth10]
					,[TotalRevenueMonth11]
					,[TotalRevenueMonth12]
					,[YearCategory]
					,[StartDate]
					,[EndDate]
					)
				VALUES
					(
					@CompanyId
					,@WholesalerId
					,@CustomerId
					,@SalesPersonId
					,@RetailCurrency
					,@CompanyName
					,@TotalRevenueMonth01
					,@TotalRevenueMonth02
					,@TotalRevenueMonth03
					,@TotalRevenueMonth04
					,@TotalRevenueMonth05
					,@TotalRevenueMonth06
					,@TotalRevenueMonth07
					,@TotalRevenueMonth08
					,@TotalRevenueMonth09
					,@TotalRevenueMonth10
					,@TotalRevenueMonth11
					,@TotalRevenueMonth12
					,@YearCategory
					,@StartDate
					,@EndDate
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTrend_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTrend_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTrend_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Trend table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTrend_Update
(

	@CompanyId int   ,

	@WholesalerId varchar (10)  ,

	@OriginalWholesalerId varchar (10)  ,

	@CustomerId int   ,

	@OriginalCustomerId int   ,

	@SalesPersonId int   ,

	@RetailCurrency char (3)  ,

	@CompanyName varchar (50)  ,

	@TotalRevenueMonth01 decimal (18, 2)  ,

	@TotalRevenueMonth02 decimal (18, 2)  ,

	@TotalRevenueMonth03 decimal (18, 2)  ,

	@TotalRevenueMonth04 decimal (18, 2)  ,

	@TotalRevenueMonth05 decimal (18, 2)  ,

	@TotalRevenueMonth06 decimal (18, 2)  ,

	@TotalRevenueMonth07 decimal (18, 2)  ,

	@TotalRevenueMonth08 decimal (18, 2)  ,

	@TotalRevenueMonth09 decimal (18, 2)  ,

	@TotalRevenueMonth10 decimal (18, 2)  ,

	@TotalRevenueMonth11 decimal (18, 2)  ,

	@TotalRevenueMonth12 decimal (18, 2)  ,

	@YearCategory int   ,

	@StartDate datetime   ,

	@EndDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Trend]
				SET
					[CompanyID] = @CompanyId
					,[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[SalesPersonID] = @SalesPersonId
					,[RetailCurrency] = @RetailCurrency
					,[CompanyName] = @CompanyName
					,[TotalRevenueMonth01] = @TotalRevenueMonth01
					,[TotalRevenueMonth02] = @TotalRevenueMonth02
					,[TotalRevenueMonth03] = @TotalRevenueMonth03
					,[TotalRevenueMonth04] = @TotalRevenueMonth04
					,[TotalRevenueMonth05] = @TotalRevenueMonth05
					,[TotalRevenueMonth06] = @TotalRevenueMonth06
					,[TotalRevenueMonth07] = @TotalRevenueMonth07
					,[TotalRevenueMonth08] = @TotalRevenueMonth08
					,[TotalRevenueMonth09] = @TotalRevenueMonth09
					,[TotalRevenueMonth10] = @TotalRevenueMonth10
					,[TotalRevenueMonth11] = @TotalRevenueMonth11
					,[TotalRevenueMonth12] = @TotalRevenueMonth12
					,[YearCategory] = @YearCategory
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
				WHERE
[WholesalerID] = @OriginalWholesalerId 
AND [CustomerID] = @OriginalCustomerId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTrend_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTrend_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTrend_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Trend table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTrend_Delete
(

	@WholesalerId varchar (10)  ,

	@CustomerId int   
)
AS


				DELETE FROM [dbo].[Trend] WITH (ROWLOCK) 
				WHERE
					[WholesalerID] = @WholesalerId
					AND [CustomerID] = @CustomerId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTrend_GetByWholesalerIdCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTrend_GetByWholesalerIdCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTrend_GetByWholesalerIdCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Trend table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTrend_GetByWholesalerIdCustomerId
(

	@WholesalerId varchar (10)  ,

	@CustomerId int   
)
AS


				SELECT
					[CompanyID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[RetailCurrency],
					[CompanyName],
					[TotalRevenueMonth01],
					[TotalRevenueMonth02],
					[TotalRevenueMonth03],
					[TotalRevenueMonth04],
					[TotalRevenueMonth05],
					[TotalRevenueMonth06],
					[TotalRevenueMonth07],
					[TotalRevenueMonth08],
					[TotalRevenueMonth09],
					[TotalRevenueMonth10],
					[TotalRevenueMonth11],
					[TotalRevenueMonth12],
					[YearCategory],
					[StartDate],
					[EndDate]
				FROM
					[dbo].[Trend]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTrend_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTrend_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTrend_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Trend table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTrend_Find
(

	@SearchUsingOR bit   = null ,

	@CompanyId int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@SalesPersonId int   = null ,

	@RetailCurrency char (3)  = null ,

	@CompanyName varchar (50)  = null ,

	@TotalRevenueMonth01 decimal (18, 2)  = null ,

	@TotalRevenueMonth02 decimal (18, 2)  = null ,

	@TotalRevenueMonth03 decimal (18, 2)  = null ,

	@TotalRevenueMonth04 decimal (18, 2)  = null ,

	@TotalRevenueMonth05 decimal (18, 2)  = null ,

	@TotalRevenueMonth06 decimal (18, 2)  = null ,

	@TotalRevenueMonth07 decimal (18, 2)  = null ,

	@TotalRevenueMonth08 decimal (18, 2)  = null ,

	@TotalRevenueMonth09 decimal (18, 2)  = null ,

	@TotalRevenueMonth10 decimal (18, 2)  = null ,

	@TotalRevenueMonth11 decimal (18, 2)  = null ,

	@TotalRevenueMonth12 decimal (18, 2)  = null ,

	@YearCategory int   = null ,

	@StartDate datetime   = null ,

	@EndDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [CompanyID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [RetailCurrency]
	, [CompanyName]
	, [TotalRevenueMonth01]
	, [TotalRevenueMonth02]
	, [TotalRevenueMonth03]
	, [TotalRevenueMonth04]
	, [TotalRevenueMonth05]
	, [TotalRevenueMonth06]
	, [TotalRevenueMonth07]
	, [TotalRevenueMonth08]
	, [TotalRevenueMonth09]
	, [TotalRevenueMonth10]
	, [TotalRevenueMonth11]
	, [TotalRevenueMonth12]
	, [YearCategory]
	, [StartDate]
	, [EndDate]
    FROM
	[dbo].[Trend]
    WHERE 
	 ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([RetailCurrency] = @RetailCurrency OR @RetailCurrency IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([TotalRevenueMonth01] = @TotalRevenueMonth01 OR @TotalRevenueMonth01 IS NULL)
	AND ([TotalRevenueMonth02] = @TotalRevenueMonth02 OR @TotalRevenueMonth02 IS NULL)
	AND ([TotalRevenueMonth03] = @TotalRevenueMonth03 OR @TotalRevenueMonth03 IS NULL)
	AND ([TotalRevenueMonth04] = @TotalRevenueMonth04 OR @TotalRevenueMonth04 IS NULL)
	AND ([TotalRevenueMonth05] = @TotalRevenueMonth05 OR @TotalRevenueMonth05 IS NULL)
	AND ([TotalRevenueMonth06] = @TotalRevenueMonth06 OR @TotalRevenueMonth06 IS NULL)
	AND ([TotalRevenueMonth07] = @TotalRevenueMonth07 OR @TotalRevenueMonth07 IS NULL)
	AND ([TotalRevenueMonth08] = @TotalRevenueMonth08 OR @TotalRevenueMonth08 IS NULL)
	AND ([TotalRevenueMonth09] = @TotalRevenueMonth09 OR @TotalRevenueMonth09 IS NULL)
	AND ([TotalRevenueMonth10] = @TotalRevenueMonth10 OR @TotalRevenueMonth10 IS NULL)
	AND ([TotalRevenueMonth11] = @TotalRevenueMonth11 OR @TotalRevenueMonth11 IS NULL)
	AND ([TotalRevenueMonth12] = @TotalRevenueMonth12 OR @TotalRevenueMonth12 IS NULL)
	AND ([YearCategory] = @YearCategory OR @YearCategory IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [CompanyID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [RetailCurrency]
	, [CompanyName]
	, [TotalRevenueMonth01]
	, [TotalRevenueMonth02]
	, [TotalRevenueMonth03]
	, [TotalRevenueMonth04]
	, [TotalRevenueMonth05]
	, [TotalRevenueMonth06]
	, [TotalRevenueMonth07]
	, [TotalRevenueMonth08]
	, [TotalRevenueMonth09]
	, [TotalRevenueMonth10]
	, [TotalRevenueMonth11]
	, [TotalRevenueMonth12]
	, [YearCategory]
	, [StartDate]
	, [EndDate]
    FROM
	[dbo].[Trend]
    WHERE 
	 ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([RetailCurrency] = @RetailCurrency AND @RetailCurrency is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([TotalRevenueMonth01] = @TotalRevenueMonth01 AND @TotalRevenueMonth01 is not null)
	OR ([TotalRevenueMonth02] = @TotalRevenueMonth02 AND @TotalRevenueMonth02 is not null)
	OR ([TotalRevenueMonth03] = @TotalRevenueMonth03 AND @TotalRevenueMonth03 is not null)
	OR ([TotalRevenueMonth04] = @TotalRevenueMonth04 AND @TotalRevenueMonth04 is not null)
	OR ([TotalRevenueMonth05] = @TotalRevenueMonth05 AND @TotalRevenueMonth05 is not null)
	OR ([TotalRevenueMonth06] = @TotalRevenueMonth06 AND @TotalRevenueMonth06 is not null)
	OR ([TotalRevenueMonth07] = @TotalRevenueMonth07 AND @TotalRevenueMonth07 is not null)
	OR ([TotalRevenueMonth08] = @TotalRevenueMonth08 AND @TotalRevenueMonth08 is not null)
	OR ([TotalRevenueMonth09] = @TotalRevenueMonth09 AND @TotalRevenueMonth09 is not null)
	OR ([TotalRevenueMonth10] = @TotalRevenueMonth10 AND @TotalRevenueMonth10 is not null)
	OR ([TotalRevenueMonth11] = @TotalRevenueMonth11 AND @TotalRevenueMonth11 is not null)
	OR ([TotalRevenueMonth12] = @TotalRevenueMonth12 AND @TotalRevenueMonth12 is not null)
	OR ([YearCategory] = @YearCategory AND @YearCategory is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketUserAssociations_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketUserAssociations_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketUserAssociations_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketUserAssociations table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketUserAssociations_Get_List

AS


				
				SELECT
					[UserID],
					[TicketUserID]
				FROM
					[dbo].[TicketUserAssociations]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketUserAssociations_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketUserAssociations_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketUserAssociations_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketUserAssociations table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketUserAssociations_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [TicketUserID]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketUserAssociations]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [TicketUserID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketUserAssociations]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketUserAssociations_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketUserAssociations_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketUserAssociations_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketUserAssociations table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketUserAssociations_Insert
(

	@UserId int   ,

	@TicketUserId int   
)
AS


					
				INSERT INTO [dbo].[TicketUserAssociations]
					(
					[UserID]
					,[TicketUserID]
					)
				VALUES
					(
					@UserId
					,@TicketUserId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketUserAssociations_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketUserAssociations_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketUserAssociations_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketUserAssociations table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketUserAssociations_Update
(

	@UserId int   ,

	@OriginalUserId int   ,

	@TicketUserId int   ,

	@OriginalTicketUserId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketUserAssociations]
				SET
					[UserID] = @UserId
					,[TicketUserID] = @TicketUserId
				WHERE
[UserID] = @OriginalUserId 
AND [TicketUserID] = @OriginalTicketUserId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketUserAssociations_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketUserAssociations_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketUserAssociations_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketUserAssociations table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketUserAssociations_Delete
(

	@UserId int   ,

	@TicketUserId int   
)
AS


				DELETE FROM [dbo].[TicketUserAssociations] WITH (ROWLOCK) 
				WHERE
					[UserID] = @UserId
					AND [TicketUserID] = @TicketUserId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketUserAssociations_GetByUserIdTicketUserId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketUserAssociations_GetByUserIdTicketUserId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketUserAssociations_GetByUserIdTicketUserId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketUserAssociations table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketUserAssociations_GetByUserIdTicketUserId
(

	@UserId int   ,

	@TicketUserId int   
)
AS


				SELECT
					[UserID],
					[TicketUserID]
				FROM
					[dbo].[TicketUserAssociations]
				WHERE
					[UserID] = @UserId
					AND [TicketUserID] = @TicketUserId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketUserAssociations_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketUserAssociations_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketUserAssociations_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketUserAssociations table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketUserAssociations_Find
(

	@SearchUsingOR bit   = null ,

	@UserId int   = null ,

	@TicketUserId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UserID]
	, [TicketUserID]
    FROM
	[dbo].[TicketUserAssociations]
    WHERE 
	 ([UserID] = @UserId OR @UserId IS NULL)
	AND ([TicketUserID] = @TicketUserId OR @TicketUserId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UserID]
	, [TicketUserID]
    FROM
	[dbo].[TicketUserAssociations]
    WHERE 
	 ([UserID] = @UserId AND @UserId is not null)
	OR ([TicketUserID] = @TicketUserId AND @TicketUserId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatusHistory_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatusHistory_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatusHistory_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the TicketStatusHistory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatusHistory_Get_List

AS


				
				SELECT
					[TicketID],
					[StatusID],
					[StatusDate]
				FROM
					[dbo].[TicketStatusHistory]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatusHistory_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatusHistory_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatusHistory_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the TicketStatusHistory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatusHistory_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[TicketID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [TicketID]'
				SET @SQL = @SQL + ', [StatusID]'
				SET @SQL = @SQL + ', [StatusDate]'
				SET @SQL = @SQL + ' FROM [dbo].[TicketStatusHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [TicketID],'
				SET @SQL = @SQL + ' [StatusID],'
				SET @SQL = @SQL + ' [StatusDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[TicketStatusHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatusHistory_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatusHistory_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatusHistory_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the TicketStatusHistory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatusHistory_Insert
(

	@TicketId int   ,

	@StatusId int   ,

	@StatusDate datetime   
)
AS


					
				INSERT INTO [dbo].[TicketStatusHistory]
					(
					[TicketID]
					,[StatusID]
					,[StatusDate]
					)
				VALUES
					(
					@TicketId
					,@StatusId
					,@StatusDate
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatusHistory_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatusHistory_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatusHistory_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the TicketStatusHistory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatusHistory_Update
(

	@TicketId int   ,

	@OriginalTicketId int   ,

	@StatusId int   ,

	@StatusDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[TicketStatusHistory]
				SET
					[TicketID] = @TicketId
					,[StatusID] = @StatusId
					,[StatusDate] = @StatusDate
				WHERE
[TicketID] = @OriginalTicketId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatusHistory_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatusHistory_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatusHistory_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the TicketStatusHistory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatusHistory_Delete
(

	@TicketId int   
)
AS


				DELETE FROM [dbo].[TicketStatusHistory] WITH (ROWLOCK) 
				WHERE
					[TicketID] = @TicketId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatusHistory_GetByStatusId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatusHistory_GetByStatusId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatusHistory_GetByStatusId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketStatusHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatusHistory_GetByStatusId
(

	@StatusId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[TicketID],
					[StatusID],
					[StatusDate]
				FROM
					[dbo].[TicketStatusHistory]
				WHERE
					[StatusID] = @StatusId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatusHistory_GetByTicketId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatusHistory_GetByTicketId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatusHistory_GetByTicketId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the TicketStatusHistory table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatusHistory_GetByTicketId
(

	@TicketId int   
)
AS


				SELECT
					[TicketID],
					[StatusID],
					[StatusDate]
				FROM
					[dbo].[TicketStatusHistory]
				WHERE
					[TicketID] = @TicketId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pTicketStatusHistory_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pTicketStatusHistory_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pTicketStatusHistory_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the TicketStatusHistory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pTicketStatusHistory_Find
(

	@SearchUsingOR bit   = null ,

	@TicketId int   = null ,

	@StatusId int   = null ,

	@StatusDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [TicketID]
	, [StatusID]
	, [StatusDate]
    FROM
	[dbo].[TicketStatusHistory]
    WHERE 
	 ([TicketID] = @TicketId OR @TicketId IS NULL)
	AND ([StatusID] = @StatusId OR @StatusId IS NULL)
	AND ([StatusDate] = @StatusDate OR @StatusDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [TicketID]
	, [StatusID]
	, [StatusDate]
    FROM
	[dbo].[TicketStatusHistory]
    WHERE 
	 ([TicketID] = @TicketId AND @TicketId is not null)
	OR ([StatusID] = @StatusId AND @StatusId is not null)
	OR ([StatusDate] = @StatusDate AND @StatusDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ProductRateValue table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_Get_List

AS


				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ProductRateValue table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [SellRateCurrencyID]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [BuyRateCurrencyID]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [SellRateCurrencyID],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [BuyRateCurrencyID],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ProductRateValue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ProductRateValue table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_Insert
(

	@Id int    OUTPUT,

	@ProductRateId int   ,

	@SellRate decimal (9, 4)  ,

	@SellRateCurrencyId char (3)  ,

	@BuyRate decimal (9, 4)  ,

	@BuyRateCurrencyId char (3)  ,

	@DefaultOption tinyint   ,

	@StartDate datetime   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   
)
AS


					
				INSERT INTO [dbo].[ProductRateValue]
					(
					[ProductRateID]
					,[SellRate]
					,[SellRateCurrencyID]
					,[BuyRate]
					,[BuyRateCurrencyID]
					,[DefaultOption]
					,[StartDate]
					,[WholesalerID]
					,[CustomerID]
					)
				VALUES
					(
					@ProductRateId
					,@SellRate
					,@SellRateCurrencyId
					,@BuyRate
					,@BuyRateCurrencyId
					,@DefaultOption
					,@StartDate
					,@WholesalerId
					,@CustomerId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ProductRateValue table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_Update
(

	@Id int   ,

	@ProductRateId int   ,

	@SellRate decimal (9, 4)  ,

	@SellRateCurrencyId char (3)  ,

	@BuyRate decimal (9, 4)  ,

	@BuyRateCurrencyId char (3)  ,

	@DefaultOption tinyint   ,

	@StartDate datetime   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ProductRateValue]
				SET
					[ProductRateID] = @ProductRateId
					,[SellRate] = @SellRate
					,[SellRateCurrencyID] = @SellRateCurrencyId
					,[BuyRate] = @BuyRate
					,[BuyRateCurrencyID] = @BuyRateCurrencyId
					,[DefaultOption] = @DefaultOption
					,[StartDate] = @StartDate
					,[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ProductRateValue table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ProductRateValue] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetByBuyRateCurrencyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetByBuyRateCurrencyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetByBuyRateCurrencyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetByBuyRateCurrencyId
(

	@BuyRateCurrencyId char (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[BuyRateCurrencyID] = @BuyRateCurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetBySellRateCurrencyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetBySellRateCurrencyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetBySellRateCurrencyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetBySellRateCurrencyId
(

	@SellRateCurrencyId char (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[SellRateCurrencyID] = @SellRateCurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetByProductRateId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetByProductRateId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetByProductRateId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetByProductRateId
(

	@ProductRateId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ProductRateID] = @ProductRateId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetByCustomerIdProductRateId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetByCustomerIdProductRateId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetByCustomerIdProductRateId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetByCustomerIdProductRateId
(

	@CustomerId int   ,

	@ProductRateId int   
)
AS


				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[CustomerID] = @CustomerId
					AND [ProductRateID] = @ProductRateId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetByProductRateIdDefaultOption procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetByProductRateIdDefaultOption') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetByProductRateIdDefaultOption
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetByProductRateIdDefaultOption
(

	@ProductRateId int   ,

	@DefaultOption tinyint   
)
AS


				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ProductRateID] = @ProductRateId
					AND [DefaultOption] = @DefaultOption
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetByIdProductRateIdSellRateSellRateCurrencyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetByIdProductRateIdSellRateSellRateCurrencyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetByIdProductRateIdSellRateSellRateCurrencyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetByIdProductRateIdSellRateSellRateCurrencyId
(

	@Id int   ,

	@ProductRateId int   ,

	@SellRate decimal (9, 4)  ,

	@SellRateCurrencyId char (3)  
)
AS


				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ID] = @Id
					AND [ProductRateID] = @ProductRateId
					AND [SellRate] = @SellRate
					AND [SellRateCurrencyID] = @SellRateCurrencyId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ProductRateValue table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_GetByProductRateIdDefaultOptionWholesalerIdCustomerIdSellRateCurrencyId
(

	@ProductRateId int   ,

	@DefaultOption tinyint   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@SellRateCurrencyId char (3)  
)
AS


				SELECT
					[ID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[DefaultOption],
					[StartDate],
					[WholesalerID],
					[CustomerID]
				FROM
					[dbo].[ProductRateValue]
				WHERE
					[ProductRateID] = @ProductRateId
					AND [DefaultOption] = @DefaultOption
					AND [WholesalerID] = @WholesalerId
					AND [CustomerID] = @CustomerId
					AND [SellRateCurrencyID] = @SellRateCurrencyId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pProductRateValue_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pProductRateValue_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pProductRateValue_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ProductRateValue table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pProductRateValue_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@ProductRateId int   = null ,

	@SellRate decimal (9, 4)  = null ,

	@SellRateCurrencyId char (3)  = null ,

	@BuyRate decimal (9, 4)  = null ,

	@BuyRateCurrencyId char (3)  = null ,

	@DefaultOption tinyint   = null ,

	@StartDate datetime   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductRateID]
	, [SellRate]
	, [SellRateCurrencyID]
	, [BuyRate]
	, [BuyRateCurrencyID]
	, [DefaultOption]
	, [StartDate]
	, [WholesalerID]
	, [CustomerID]
    FROM
	[dbo].[ProductRateValue]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([SellRate] = @SellRate OR @SellRate IS NULL)
	AND ([SellRateCurrencyID] = @SellRateCurrencyId OR @SellRateCurrencyId IS NULL)
	AND ([BuyRate] = @BuyRate OR @BuyRate IS NULL)
	AND ([BuyRateCurrencyID] = @BuyRateCurrencyId OR @BuyRateCurrencyId IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductRateID]
	, [SellRate]
	, [SellRateCurrencyID]
	, [BuyRate]
	, [BuyRateCurrencyID]
	, [DefaultOption]
	, [StartDate]
	, [WholesalerID]
	, [CustomerID]
    FROM
	[dbo].[ProductRateValue]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([SellRate] = @SellRate AND @SellRate is not null)
	OR ([SellRateCurrencyID] = @SellRateCurrencyId AND @SellRateCurrencyId is not null)
	OR ([BuyRate] = @BuyRate AND @BuyRate is not null)
	OR ([BuyRateCurrencyID] = @BuyRateCurrencyId AND @BuyRateCurrencyId is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadPeriod_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadPeriod_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadPeriod_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadPeriod table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadPeriod_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadPeriod]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadPeriod_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadPeriod_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadPeriod_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadPeriod table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadPeriod_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadPeriod]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadPeriod]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadPeriod_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadPeriod_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadPeriod_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadPeriod table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadPeriod_Insert
(

	@Id int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[LeadPeriod]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadPeriod_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadPeriod_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadPeriod_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadPeriod table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadPeriod_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadPeriod]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadPeriod_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadPeriod_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadPeriod_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadPeriod table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadPeriod_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[LeadPeriod] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadPeriod_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadPeriod_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadPeriod_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadPeriod table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadPeriod_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadPeriod]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadPeriod_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadPeriod_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadPeriod_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadPeriod table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadPeriod_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Value int   = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadPeriod]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadPeriod]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DNIS table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [DNISTypeID]'
				SET @SQL = @SQL + ', [DNISNumber]'
				SET @SQL = @SQL + ', [DialNumber]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [CallFlowID]'
				SET @SQL = @SQL + ', [PromptSetID]'
				SET @SQL = @SQL + ' FROM [dbo].[DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [DNISTypeID],'
				SET @SQL = @SQL + ' [DNISNumber],'
				SET @SQL = @SQL + ' [DialNumber],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [CallFlowID],'
				SET @SQL = @SQL + ' [PromptSetID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@AccessTypeId int   ,

	@DnisTypeId int   ,

	@DnisNumber varchar (50)  ,

	@DialNumber varchar (50)  ,

	@Description varchar (100)  ,

	@Enabled bit   ,

	@DisplayOrder int   ,

	@DefaultOption bit   ,

	@CallFlowId int   ,

	@PromptSetId int   
)
AS


					
				INSERT INTO [dbo].[DNIS]
					(
					[WholesalerID]
					,[AccessTypeID]
					,[DNISTypeID]
					,[DNISNumber]
					,[DialNumber]
					,[Description]
					,[Enabled]
					,[DisplayOrder]
					,[DefaultOption]
					,[CallFlowID]
					,[PromptSetID]
					)
				VALUES
					(
					@WholesalerId
					,@AccessTypeId
					,@DnisTypeId
					,@DnisNumber
					,@DialNumber
					,@Description
					,@Enabled
					,@DisplayOrder
					,@DefaultOption
					,@CallFlowId
					,@PromptSetId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@AccessTypeId int   ,

	@DnisTypeId int   ,

	@DnisNumber varchar (50)  ,

	@DialNumber varchar (50)  ,

	@Description varchar (100)  ,

	@Enabled bit   ,

	@DisplayOrder int   ,

	@DefaultOption bit   ,

	@CallFlowId int   ,

	@PromptSetId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DNIS]
				SET
					[WholesalerID] = @WholesalerId
					,[AccessTypeID] = @AccessTypeId
					,[DNISTypeID] = @DnisTypeId
					,[DNISNumber] = @DnisNumber
					,[DialNumber] = @DialNumber
					,[Description] = @Description
					,[Enabled] = @Enabled
					,[DisplayOrder] = @DisplayOrder
					,[DefaultOption] = @DefaultOption
					,[CallFlowID] = @CallFlowId
					,[PromptSetID] = @PromptSetId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[DNIS] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByAccessTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByAccessTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByAccessTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByAccessTypeId
(

	@AccessTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[AccessTypeID] = @AccessTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByCallFlowId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByCallFlowId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByCallFlowId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByCallFlowId
(

	@CallFlowId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[CallFlowID] = @CallFlowId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByPromptSetId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByPromptSetId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByPromptSetId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByPromptSetId
(

	@PromptSetId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[PromptSetID] = @PromptSetId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByDnisTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByDnisTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByDnisTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByDnisTypeId
(

	@DnisTypeId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[DNISTypeID] = @DnisTypeId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByDnisNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByDnisNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByDnisNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByDnisNumber
(

	@DnisNumber varchar (50)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[DNISNumber] = @DnisNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByDialNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByDialNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByDialNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByDialNumber
(

	@DialNumber varchar (50)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[AccessTypeID],
					[DNISTypeID],
					[DNISNumber],
					[DialNumber],
					[Description],
					[Enabled],
					[DisplayOrder],
					[DefaultOption],
					[CallFlowID],
					[PromptSetID]
				FROM
					[dbo].[DNIS]
				WHERE
					[DialNumber] = @DialNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByCustomerIdFromCustomer_Dnis procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByCustomerIdFromCustomer_Dnis') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByCustomerIdFromCustomer_Dnis
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByCustomerIdFromCustomer_Dnis
(

	@CustomerId int   
)
AS


SELECT dbo.[DNIS].[ID]
       ,dbo.[DNIS].[WholesalerID]
       ,dbo.[DNIS].[AccessTypeID]
       ,dbo.[DNIS].[DNISTypeID]
       ,dbo.[DNIS].[DNISNumber]
       ,dbo.[DNIS].[DialNumber]
       ,dbo.[DNIS].[Description]
       ,dbo.[DNIS].[Enabled]
       ,dbo.[DNIS].[DisplayOrder]
       ,dbo.[DNIS].[DefaultOption]
       ,dbo.[DNIS].[CallFlowID]
       ,dbo.[DNIS].[PromptSetID]
  FROM dbo.[DNIS]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Customer_DNIS] 
                WHERE dbo.[Customer_DNIS].[CustomerID] = @CustomerId
                  AND dbo.[Customer_DNIS].[DNISID] = dbo.[DNIS].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_GetByModeratorIdFromModerator_Dnis procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_GetByModeratorIdFromModerator_Dnis') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_GetByModeratorIdFromModerator_Dnis
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_GetByModeratorIdFromModerator_Dnis
(

	@ModeratorId int   
)
AS


SELECT dbo.[DNIS].[ID]
       ,dbo.[DNIS].[WholesalerID]
       ,dbo.[DNIS].[AccessTypeID]
       ,dbo.[DNIS].[DNISTypeID]
       ,dbo.[DNIS].[DNISNumber]
       ,dbo.[DNIS].[DialNumber]
       ,dbo.[DNIS].[Description]
       ,dbo.[DNIS].[Enabled]
       ,dbo.[DNIS].[DisplayOrder]
       ,dbo.[DNIS].[DefaultOption]
       ,dbo.[DNIS].[CallFlowID]
       ,dbo.[DNIS].[PromptSetID]
  FROM dbo.[DNIS]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Moderator_DNIS] 
                WHERE dbo.[Moderator_DNIS].[ModeratorID] = @ModeratorId
                  AND dbo.[Moderator_DNIS].[DNISID] = dbo.[DNIS].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNIS_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNIS_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNIS_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DNIS table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNIS_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@AccessTypeId int   = null ,

	@DnisTypeId int   = null ,

	@DnisNumber varchar (50)  = null ,

	@DialNumber varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@Enabled bit   = null ,

	@DisplayOrder int   = null ,

	@DefaultOption bit   = null ,

	@CallFlowId int   = null ,

	@PromptSetId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [AccessTypeID]
	, [DNISTypeID]
	, [DNISNumber]
	, [DialNumber]
	, [Description]
	, [Enabled]
	, [DisplayOrder]
	, [DefaultOption]
	, [CallFlowID]
	, [PromptSetID]
    FROM
	[dbo].[DNIS]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([AccessTypeID] = @AccessTypeId OR @AccessTypeId IS NULL)
	AND ([DNISTypeID] = @DnisTypeId OR @DnisTypeId IS NULL)
	AND ([DNISNumber] = @DnisNumber OR @DnisNumber IS NULL)
	AND ([DialNumber] = @DialNumber OR @DialNumber IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([CallFlowID] = @CallFlowId OR @CallFlowId IS NULL)
	AND ([PromptSetID] = @PromptSetId OR @PromptSetId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [AccessTypeID]
	, [DNISTypeID]
	, [DNISNumber]
	, [DialNumber]
	, [Description]
	, [Enabled]
	, [DisplayOrder]
	, [DefaultOption]
	, [CallFlowID]
	, [PromptSetID]
    FROM
	[dbo].[DNIS]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([AccessTypeID] = @AccessTypeId AND @AccessTypeId is not null)
	OR ([DNISTypeID] = @DnisTypeId AND @DnisTypeId is not null)
	OR ([DNISNumber] = @DnisNumber AND @DnisNumber is not null)
	OR ([DialNumber] = @DialNumber AND @DialNumber is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([CallFlowID] = @CallFlowId AND @CallFlowId is not null)
	OR ([PromptSetID] = @PromptSetId AND @PromptSetId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadChurnReason_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadChurnReason_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadChurnReason_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the LeadChurnReason table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadChurnReason_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadChurnReason]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadChurnReason_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadChurnReason_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadChurnReason_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the LeadChurnReason table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadChurnReason_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[LeadChurnReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[LeadChurnReason]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadChurnReason_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadChurnReason_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadChurnReason_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the LeadChurnReason table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadChurnReason_Insert
(

	@Id int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[LeadChurnReason]
					(
					[ID]
					,[Name]
					,[Value]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@Name
					,@Value
					,@DisplayOrder
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadChurnReason_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadChurnReason_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadChurnReason_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the LeadChurnReason table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadChurnReason_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Name varchar (50)  ,

	@Value int   ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[LeadChurnReason]
				SET
					[ID] = @Id
					,[Name] = @Name
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadChurnReason_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadChurnReason_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadChurnReason_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the LeadChurnReason table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadChurnReason_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[LeadChurnReason] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadChurnReason_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadChurnReason_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadChurnReason_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the LeadChurnReason table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadChurnReason_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Value],
					[DisplayOrder]
				FROM
					[dbo].[LeadChurnReason]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLeadChurnReason_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLeadChurnReason_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLeadChurnReason_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the LeadChurnReason table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLeadChurnReason_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Value int   = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadChurnReason]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Value]
	, [DisplayOrder]
    FROM
	[dbo].[LeadChurnReason]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNISType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNISType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNISType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DNISType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNISType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[DisplayOrder],
					[DisplayName]
				FROM
					[dbo].[DNISType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNISType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNISType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNISType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DNISType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNISType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ' FROM [dbo].[DNISType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [DisplayName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DNISType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNISType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNISType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNISType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DNISType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNISType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (30)  ,

	@DisplayOrder smallint   ,

	@DisplayName varchar (30)  
)
AS


					
				INSERT INTO [dbo].[DNISType]
					(
					[Name]
					,[DisplayOrder]
					,[DisplayName]
					)
				VALUES
					(
					@Name
					,@DisplayOrder
					,@DisplayName
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNISType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNISType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNISType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DNISType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNISType_Update
(

	@Id int   ,

	@Name varchar (30)  ,

	@DisplayOrder smallint   ,

	@DisplayName varchar (30)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DNISType]
				SET
					[Name] = @Name
					,[DisplayOrder] = @DisplayOrder
					,[DisplayName] = @DisplayName
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNISType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNISType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNISType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DNISType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNISType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[DNISType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNISType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNISType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNISType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DNISType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNISType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayOrder],
					[DisplayName]
				FROM
					[dbo].[DNISType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDNISType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDNISType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDNISType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DNISType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDNISType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (30)  = null ,

	@DisplayOrder smallint   = null ,

	@DisplayName varchar (30)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayOrder]
	, [DisplayName]
    FROM
	[dbo].[DNISType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayOrder]
	, [DisplayName]
    FROM
	[dbo].[DNISType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Company table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Company]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Company table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[Company]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Company]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Company table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@Description varchar (100)  
)
AS


					
				INSERT INTO [dbo].[Company]
					(
					[WholesalerID]
					,[Description]
					)
				VALUES
					(
					@WholesalerId
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Company table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@Description varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Company]
				SET
					[WholesalerID] = @WholesalerId
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Company table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Company] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Company table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Company]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Company table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Company]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_GetByWholesalerIdDescription procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_GetByWholesalerIdDescription') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_GetByWholesalerIdDescription
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Company table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_GetByWholesalerIdDescription
(

	@WholesalerId varchar (10)  ,

	@Description varchar (100)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[Description]
				FROM
					[dbo].[Company]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [Description] = @Description
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompany_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompany_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompany_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Company table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompany_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@Description varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Description]
    FROM
	[dbo].[Company]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [Description]
    FROM
	[dbo].[Company]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pClientNotes_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pClientNotes_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pClientNotes_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ClientNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pClientNotes_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[Notes],
					[ModuleID]
				FROM
					[dbo].[ClientNotes]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pClientNotes_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pClientNotes_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pClientNotes_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ClientNotes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pClientNotes_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ModuleID]'
				SET @SQL = @SQL + ' FROM [dbo].[ClientNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ModuleID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ClientNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pClientNotes_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pClientNotes_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pClientNotes_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ClientNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pClientNotes_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@Notes text   ,

	@ModuleId int   
)
AS


					
				INSERT INTO [dbo].[ClientNotes]
					(
					[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[Notes]
					,[ModuleID]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@Notes
					,@ModuleId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pClientNotes_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pClientNotes_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pClientNotes_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ClientNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pClientNotes_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@Notes text   ,

	@ModuleId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ClientNotes]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[Notes] = @Notes
					,[ModuleID] = @ModuleId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pClientNotes_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pClientNotes_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pClientNotes_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ClientNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pClientNotes_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ClientNotes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pClientNotes_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pClientNotes_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pClientNotes_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ClientNotes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pClientNotes_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[Notes],
					[ModuleID]
				FROM
					[dbo].[ClientNotes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pClientNotes_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pClientNotes_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pClientNotes_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ClientNotes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pClientNotes_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@ModeratorId int   = null ,

	@Notes text   = null ,

	@ModuleId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [Notes]
	, [ModuleID]
    FROM
	[dbo].[ClientNotes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([ModuleID] = @ModuleId OR @ModuleId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [Notes]
	, [ModuleID]
    FROM
	[dbo].[ClientNotes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([ModuleID] = @ModuleId AND @ModuleId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCharity_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCharity_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCharity_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Charity table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCharity_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description],
					[LogoURL],
					[DisplayOrder]
				FROM
					[dbo].[Charity]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCharity_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCharity_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCharity_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Charity table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCharity_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [LogoURL]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Charity]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [LogoURL],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Charity]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCharity_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCharity_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCharity_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Charity table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCharity_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (1000)  ,

	@LogoUrl varchar (100)  ,

	@DisplayOrder int   
)
AS


					
				INSERT INTO [dbo].[Charity]
					(
					[Name]
					,[Description]
					,[LogoURL]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@Description
					,@LogoUrl
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCharity_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCharity_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCharity_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Charity table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCharity_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (1000)  ,

	@LogoUrl varchar (100)  ,

	@DisplayOrder int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Charity]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[LogoURL] = @LogoUrl
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCharity_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCharity_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCharity_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Charity table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCharity_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Charity] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCharity_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCharity_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCharity_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Charity table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCharity_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[LogoURL],
					[DisplayOrder]
				FROM
					[dbo].[Charity]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCharity_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCharity_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCharity_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Charity table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCharity_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (1000)  = null ,

	@LogoUrl varchar (100)  = null ,

	@DisplayOrder int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [LogoURL]
	, [DisplayOrder]
    FROM
	[dbo].[Charity]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([LogoURL] = @LogoUrl OR @LogoUrl IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [LogoURL]
	, [DisplayOrder]
    FROM
	[dbo].[Charity]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([LogoURL] = @LogoUrl AND @LogoUrl is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCallFlow_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCallFlow_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCallFlow_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CallFlow table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCallFlow_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[CallFlow]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCallFlow_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCallFlow_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCallFlow_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CallFlow table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCallFlow_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[CallFlow]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CallFlow]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCallFlow_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCallFlow_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCallFlow_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CallFlow table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCallFlow_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (100)  
)
AS


					
				INSERT INTO [dbo].[CallFlow]
					(
					[Name]
					,[Description]
					)
				VALUES
					(
					@Name
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCallFlow_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCallFlow_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCallFlow_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CallFlow table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCallFlow_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CallFlow]
				SET
					[Name] = @Name
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCallFlow_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCallFlow_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCallFlow_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CallFlow table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCallFlow_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[CallFlow] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCallFlow_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCallFlow_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCallFlow_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CallFlow table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCallFlow_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[CallFlow]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCallFlow_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCallFlow_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCallFlow_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CallFlow table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCallFlow_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[CallFlow]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[CallFlow]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Commission table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Commission table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ', [TotalCredits]'
				SET @SQL = @SQL + ', [ProductCharges]'
				SET @SQL = @SQL + ', [MiscCharges]'
				SET @SQL = @SQL + ', [TotalAmount]'
				SET @SQL = @SQL + ', [CommissionRate]'
				SET @SQL = @SQL + ', [TotalCommission]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ' FROM [dbo].[Commission]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [BilledDate],'
				SET @SQL = @SQL + ' [TotalCredits],'
				SET @SQL = @SQL + ' [ProductCharges],'
				SET @SQL = @SQL + ' [MiscCharges],'
				SET @SQL = @SQL + ' [TotalAmount],'
				SET @SQL = @SQL + ' [CommissionRate],'
				SET @SQL = @SQL + ' [TotalCommission],'
				SET @SQL = @SQL + ' [CurrencyID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Commission]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Commission table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@SalesPersonId int   ,

	@BilledDate datetime   ,

	@TotalCredits decimal (10, 2)  ,

	@ProductCharges decimal (10, 2)  ,

	@MiscCharges decimal (10, 2)  ,

	@TotalAmount decimal (10, 2)  ,

	@CommissionRate decimal (10, 2)  ,

	@TotalCommission decimal (10, 2)  ,

	@CurrencyId char (3)  
)
AS


					
				INSERT INTO [dbo].[Commission]
					(
					[WholesalerID]
					,[CustomerID]
					,[SalesPersonID]
					,[BilledDate]
					,[TotalCredits]
					,[ProductCharges]
					,[MiscCharges]
					,[TotalAmount]
					,[CommissionRate]
					,[TotalCommission]
					,[CurrencyID]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@SalesPersonId
					,@BilledDate
					,@TotalCredits
					,@ProductCharges
					,@MiscCharges
					,@TotalAmount
					,@CommissionRate
					,@TotalCommission
					,@CurrencyId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Commission table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@SalesPersonId int   ,

	@BilledDate datetime   ,

	@TotalCredits decimal (10, 2)  ,

	@ProductCharges decimal (10, 2)  ,

	@MiscCharges decimal (10, 2)  ,

	@TotalAmount decimal (10, 2)  ,

	@CommissionRate decimal (10, 2)  ,

	@TotalCommission decimal (10, 2)  ,

	@CurrencyId char (3)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Commission]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[SalesPersonID] = @SalesPersonId
					,[BilledDate] = @BilledDate
					,[TotalCredits] = @TotalCredits
					,[ProductCharges] = @ProductCharges
					,[MiscCharges] = @MiscCharges
					,[TotalAmount] = @TotalAmount
					,[CommissionRate] = @CommissionRate
					,[TotalCommission] = @TotalCommission
					,[CurrencyID] = @CurrencyId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Commission table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Commission] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_GetByCurrencyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_GetByCurrencyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_GetByCurrencyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_GetByCurrencyId
(

	@CurrencyId char (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[CurrencyID] = @CurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_GetBySalesPersonId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_GetBySalesPersonId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_GetBySalesPersonId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_GetBySalesPersonId
(

	@SalesPersonId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Commission table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[BilledDate],
					[TotalCredits],
					[ProductCharges],
					[MiscCharges],
					[TotalAmount],
					[CommissionRate],
					[TotalCommission],
					[CurrencyID]
				FROM
					[dbo].[Commission]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommission_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommission_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommission_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Commission table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommission_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@SalesPersonId int   = null ,

	@BilledDate datetime   = null ,

	@TotalCredits decimal (10, 2)  = null ,

	@ProductCharges decimal (10, 2)  = null ,

	@MiscCharges decimal (10, 2)  = null ,

	@TotalAmount decimal (10, 2)  = null ,

	@CommissionRate decimal (10, 2)  = null ,

	@TotalCommission decimal (10, 2)  = null ,

	@CurrencyId char (3)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [BilledDate]
	, [TotalCredits]
	, [ProductCharges]
	, [MiscCharges]
	, [TotalAmount]
	, [CommissionRate]
	, [TotalCommission]
	, [CurrencyID]
    FROM
	[dbo].[Commission]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
	AND ([TotalCredits] = @TotalCredits OR @TotalCredits IS NULL)
	AND ([ProductCharges] = @ProductCharges OR @ProductCharges IS NULL)
	AND ([MiscCharges] = @MiscCharges OR @MiscCharges IS NULL)
	AND ([TotalAmount] = @TotalAmount OR @TotalAmount IS NULL)
	AND ([CommissionRate] = @CommissionRate OR @CommissionRate IS NULL)
	AND ([TotalCommission] = @TotalCommission OR @TotalCommission IS NULL)
	AND ([CurrencyID] = @CurrencyId OR @CurrencyId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [BilledDate]
	, [TotalCredits]
	, [ProductCharges]
	, [MiscCharges]
	, [TotalAmount]
	, [CommissionRate]
	, [TotalCommission]
	, [CurrencyID]
    FROM
	[dbo].[Commission]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([BilledDate] = @BilledDate AND @BilledDate is not null)
	OR ([TotalCredits] = @TotalCredits AND @TotalCredits is not null)
	OR ([ProductCharges] = @ProductCharges AND @ProductCharges is not null)
	OR ([MiscCharges] = @MiscCharges AND @MiscCharges is not null)
	OR ([TotalAmount] = @TotalAmount AND @TotalAmount is not null)
	OR ([CommissionRate] = @CommissionRate AND @CommissionRate is not null)
	OR ([TotalCommission] = @TotalCommission AND @TotalCommission is not null)
	OR ([CurrencyID] = @CurrencyId AND @CurrencyId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CommissionCustomer table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CommissionCustomer table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [InvoiceCount]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[CommissionCustomer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [InvoiceCount],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CommissionCustomer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CommissionCustomer table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@SalesPersonId int   ,

	@InvoiceCount int   ,

	@CreatedDate datetime   
)
AS


					
				INSERT INTO [dbo].[CommissionCustomer]
					(
					[WholesalerID]
					,[CustomerID]
					,[SalesPersonID]
					,[InvoiceCount]
					,[CreatedDate]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@SalesPersonId
					,@InvoiceCount
					,@CreatedDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CommissionCustomer table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@SalesPersonId int   ,

	@InvoiceCount int   ,

	@CreatedDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CommissionCustomer]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[SalesPersonID] = @SalesPersonId
					,[InvoiceCount] = @InvoiceCount
					,[CreatedDate] = @CreatedDate
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CommissionCustomer table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[CommissionCustomer] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CommissionCustomer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_GetBySalesPersonId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_GetBySalesPersonId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_GetBySalesPersonId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CommissionCustomer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_GetBySalesPersonId
(

	@SalesPersonId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CommissionCustomer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CommissionCustomer table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[SalesPersonID],
					[InvoiceCount],
					[CreatedDate]
				FROM
					[dbo].[CommissionCustomer]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCommissionCustomer_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCommissionCustomer_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCommissionCustomer_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CommissionCustomer table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCommissionCustomer_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@SalesPersonId int   = null ,

	@InvoiceCount int   = null ,

	@CreatedDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [InvoiceCount]
	, [CreatedDate]
    FROM
	[dbo].[CommissionCustomer]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([InvoiceCount] = @InvoiceCount OR @InvoiceCount IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [SalesPersonID]
	, [InvoiceCount]
	, [CreatedDate]
    FROM
	[dbo].[CommissionCustomer]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([InvoiceCount] = @InvoiceCount AND @InvoiceCount is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyInfo_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyInfo_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyInfo_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CompanyInfo table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyInfo_Get_List

AS


				
				SELECT
					[ID],
					[LeadID],
					[CompanyID],
					[SLAEndDate],
					[Address],
					[City],
					[CountryID],
					[Postal]
				FROM
					[dbo].[CompanyInfo]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyInfo_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyInfo_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyInfo_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyInfo table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyInfo_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [LeadID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [SLAEndDate]'
				SET @SQL = @SQL + ', [Address]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [CountryID]'
				SET @SQL = @SQL + ', [Postal]'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyInfo]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [LeadID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [SLAEndDate],'
				SET @SQL = @SQL + ' [Address],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [CountryID],'
				SET @SQL = @SQL + ' [Postal]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyInfo]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyInfo_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyInfo_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyInfo_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CompanyInfo table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyInfo_Insert
(

	@Id int   ,

	@LeadId int   ,

	@CompanyId int   ,

	@SlaEndDate datetime   ,

	@Address varchar (100)  ,

	@City varchar (50)  ,

	@CountryId varchar (3)  ,

	@Postal varchar (10)  
)
AS


					
				INSERT INTO [dbo].[CompanyInfo]
					(
					[ID]
					,[LeadID]
					,[CompanyID]
					,[SLAEndDate]
					,[Address]
					,[City]
					,[CountryID]
					,[Postal]
					)
				VALUES
					(
					@Id
					,@LeadId
					,@CompanyId
					,@SlaEndDate
					,@Address
					,@City
					,@CountryId
					,@Postal
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyInfo_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyInfo_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyInfo_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CompanyInfo table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyInfo_Update
(

	@Id int   ,

	@OriginalId int   ,

	@LeadId int   ,

	@CompanyId int   ,

	@SlaEndDate datetime   ,

	@Address varchar (100)  ,

	@City varchar (50)  ,

	@CountryId varchar (3)  ,

	@Postal varchar (10)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CompanyInfo]
				SET
					[ID] = @Id
					,[LeadID] = @LeadId
					,[CompanyID] = @CompanyId
					,[SLAEndDate] = @SlaEndDate
					,[Address] = @Address
					,[City] = @City
					,[CountryID] = @CountryId
					,[Postal] = @Postal
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyInfo_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyInfo_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyInfo_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CompanyInfo table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyInfo_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[CompanyInfo] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyInfo_GetByCountryId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyInfo_GetByCountryId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyInfo_GetByCountryId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyInfo table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyInfo_GetByCountryId
(

	@CountryId varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[LeadID],
					[CompanyID],
					[SLAEndDate],
					[Address],
					[City],
					[CountryID],
					[Postal]
				FROM
					[dbo].[CompanyInfo]
				WHERE
					[CountryID] = @CountryId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyInfo_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyInfo_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyInfo_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyInfo table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyInfo_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[LeadID],
					[CompanyID],
					[SLAEndDate],
					[Address],
					[City],
					[CountryID],
					[Postal]
				FROM
					[dbo].[CompanyInfo]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyInfo_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyInfo_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyInfo_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CompanyInfo table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyInfo_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@LeadId int   = null ,

	@CompanyId int   = null ,

	@SlaEndDate datetime   = null ,

	@Address varchar (100)  = null ,

	@City varchar (50)  = null ,

	@CountryId varchar (3)  = null ,

	@Postal varchar (10)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [LeadID]
	, [CompanyID]
	, [SLAEndDate]
	, [Address]
	, [City]
	, [CountryID]
	, [Postal]
    FROM
	[dbo].[CompanyInfo]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([LeadID] = @LeadId OR @LeadId IS NULL)
	AND ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([SLAEndDate] = @SlaEndDate OR @SlaEndDate IS NULL)
	AND ([Address] = @Address OR @Address IS NULL)
	AND ([City] = @City OR @City IS NULL)
	AND ([CountryID] = @CountryId OR @CountryId IS NULL)
	AND ([Postal] = @Postal OR @Postal IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [LeadID]
	, [CompanyID]
	, [SLAEndDate]
	, [Address]
	, [City]
	, [CountryID]
	, [Postal]
    FROM
	[dbo].[CompanyInfo]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([LeadID] = @LeadId AND @LeadId is not null)
	OR ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([SLAEndDate] = @SlaEndDate AND @SlaEndDate is not null)
	OR ([Address] = @Address AND @Address is not null)
	OR ([City] = @City AND @City is not null)
	OR ([CountryID] = @CountryId AND @CountryId is not null)
	OR ([Postal] = @Postal AND @Postal is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurve_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurve_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurve_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Curve table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurve_Get_List

AS


				
				SELECT
					[ID],
					[Description]
				FROM
					[dbo].[Curve]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurve_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurve_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurve_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Curve table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurve_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[Curve]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Curve]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurve_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurve_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurve_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Curve table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurve_Insert
(

	@Id int   ,

	@Description varchar (100)  
)
AS


					
				INSERT INTO [dbo].[Curve]
					(
					[ID]
					,[Description]
					)
				VALUES
					(
					@Id
					,@Description
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurve_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurve_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurve_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Curve table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurve_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Description varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Curve]
				SET
					[ID] = @Id
					,[Description] = @Description
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurve_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurve_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurve_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Curve table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurve_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Curve] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurve_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurve_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurve_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Curve table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurve_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Description]
				FROM
					[dbo].[Curve]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCurve_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCurve_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCurve_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Curve table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCurve_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Description varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Description]
    FROM
	[dbo].[Curve]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Description]
    FROM
	[dbo].[Curve]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CompanyLeadTracking table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_Get_List

AS


				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyLeadTracking table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyInfoID]'
				SET @SQL = @SQL + ', [ProjectedRevenue]'
				SET @SQL = @SQL + ', [LeadProductID]'
				SET @SQL = @SQL + ', [LeadSourceID]'
				SET @SQL = @SQL + ', [LeadStageID]'
				SET @SQL = @SQL + ', [ExpectedCloseDate]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [LeadPeriodID]'
				SET @SQL = @SQL + ', [LeadChurnReasonID]'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyLeadTracking]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyInfoID],'
				SET @SQL = @SQL + ' [ProjectedRevenue],'
				SET @SQL = @SQL + ' [LeadProductID],'
				SET @SQL = @SQL + ' [LeadSourceID],'
				SET @SQL = @SQL + ' [LeadStageID],'
				SET @SQL = @SQL + ' [ExpectedCloseDate],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [LeadPeriodID],'
				SET @SQL = @SQL + ' [LeadChurnReasonID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyLeadTracking]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CompanyLeadTracking table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_Insert
(

	@Id int   ,

	@CompanyInfoId int   ,

	@ProjectedRevenue decimal (9, 0)  ,

	@LeadProductId int   ,

	@LeadSourceId int   ,

	@LeadStageId int   ,

	@ExpectedCloseDate datetime   ,

	@CreatedDate datetime   ,

	@ModifiedBy varchar (50)  ,

	@LeadPeriodId int   ,

	@LeadChurnReasonId int   
)
AS


					
				INSERT INTO [dbo].[CompanyLeadTracking]
					(
					[ID]
					,[CompanyInfoID]
					,[ProjectedRevenue]
					,[LeadProductID]
					,[LeadSourceID]
					,[LeadStageID]
					,[ExpectedCloseDate]
					,[CreatedDate]
					,[ModifiedBy]
					,[LeadPeriodID]
					,[LeadChurnReasonID]
					)
				VALUES
					(
					@Id
					,@CompanyInfoId
					,@ProjectedRevenue
					,@LeadProductId
					,@LeadSourceId
					,@LeadStageId
					,@ExpectedCloseDate
					,@CreatedDate
					,@ModifiedBy
					,@LeadPeriodId
					,@LeadChurnReasonId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CompanyLeadTracking table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_Update
(

	@Id int   ,

	@OriginalId int   ,

	@CompanyInfoId int   ,

	@ProjectedRevenue decimal (9, 0)  ,

	@LeadProductId int   ,

	@LeadSourceId int   ,

	@LeadStageId int   ,

	@ExpectedCloseDate datetime   ,

	@CreatedDate datetime   ,

	@ModifiedBy varchar (50)  ,

	@LeadPeriodId int   ,

	@LeadChurnReasonId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CompanyLeadTracking]
				SET
					[ID] = @Id
					,[CompanyInfoID] = @CompanyInfoId
					,[ProjectedRevenue] = @ProjectedRevenue
					,[LeadProductID] = @LeadProductId
					,[LeadSourceID] = @LeadSourceId
					,[LeadStageID] = @LeadStageId
					,[ExpectedCloseDate] = @ExpectedCloseDate
					,[CreatedDate] = @CreatedDate
					,[ModifiedBy] = @ModifiedBy
					,[LeadPeriodID] = @LeadPeriodId
					,[LeadChurnReasonID] = @LeadChurnReasonId
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CompanyLeadTracking table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[CompanyLeadTracking] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_GetByLeadPeriodId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_GetByLeadPeriodId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_GetByLeadPeriodId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_GetByLeadPeriodId
(

	@LeadPeriodId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadPeriodID] = @LeadPeriodId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_GetByCompanyInfoId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_GetByCompanyInfoId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_GetByCompanyInfoId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_GetByCompanyInfoId
(

	@CompanyInfoId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[CompanyInfoID] = @CompanyInfoId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_GetByLeadSourceId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_GetByLeadSourceId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_GetByLeadSourceId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_GetByLeadSourceId
(

	@LeadSourceId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadSourceID] = @LeadSourceId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_GetByLeadChurnReasonId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_GetByLeadChurnReasonId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_GetByLeadChurnReasonId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_GetByLeadChurnReasonId
(

	@LeadChurnReasonId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadChurnReasonID] = @LeadChurnReasonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_GetByLeadProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_GetByLeadProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_GetByLeadProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_GetByLeadProductId
(

	@LeadProductId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadProductID] = @LeadProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_GetByLeadStageId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_GetByLeadStageId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_GetByLeadStageId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_GetByLeadStageId
(

	@LeadStageId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[LeadStageID] = @LeadStageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTracking table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[CompanyInfoID],
					[ProjectedRevenue],
					[LeadProductID],
					[LeadSourceID],
					[LeadStageID],
					[ExpectedCloseDate],
					[CreatedDate],
					[ModifiedBy],
					[LeadPeriodID],
					[LeadChurnReasonID]
				FROM
					[dbo].[CompanyLeadTracking]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTracking_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTracking_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTracking_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CompanyLeadTracking table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTracking_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CompanyInfoId int   = null ,

	@ProjectedRevenue decimal (9, 0)  = null ,

	@LeadProductId int   = null ,

	@LeadSourceId int   = null ,

	@LeadStageId int   = null ,

	@ExpectedCloseDate datetime   = null ,

	@CreatedDate datetime   = null ,

	@ModifiedBy varchar (50)  = null ,

	@LeadPeriodId int   = null ,

	@LeadChurnReasonId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CompanyInfoID]
	, [ProjectedRevenue]
	, [LeadProductID]
	, [LeadSourceID]
	, [LeadStageID]
	, [ExpectedCloseDate]
	, [CreatedDate]
	, [ModifiedBy]
	, [LeadPeriodID]
	, [LeadChurnReasonID]
    FROM
	[dbo].[CompanyLeadTracking]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CompanyInfoID] = @CompanyInfoId OR @CompanyInfoId IS NULL)
	AND ([ProjectedRevenue] = @ProjectedRevenue OR @ProjectedRevenue IS NULL)
	AND ([LeadProductID] = @LeadProductId OR @LeadProductId IS NULL)
	AND ([LeadSourceID] = @LeadSourceId OR @LeadSourceId IS NULL)
	AND ([LeadStageID] = @LeadStageId OR @LeadStageId IS NULL)
	AND ([ExpectedCloseDate] = @ExpectedCloseDate OR @ExpectedCloseDate IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([LeadPeriodID] = @LeadPeriodId OR @LeadPeriodId IS NULL)
	AND ([LeadChurnReasonID] = @LeadChurnReasonId OR @LeadChurnReasonId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CompanyInfoID]
	, [ProjectedRevenue]
	, [LeadProductID]
	, [LeadSourceID]
	, [LeadStageID]
	, [ExpectedCloseDate]
	, [CreatedDate]
	, [ModifiedBy]
	, [LeadPeriodID]
	, [LeadChurnReasonID]
    FROM
	[dbo].[CompanyLeadTracking]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CompanyInfoID] = @CompanyInfoId AND @CompanyInfoId is not null)
	OR ([ProjectedRevenue] = @ProjectedRevenue AND @ProjectedRevenue is not null)
	OR ([LeadProductID] = @LeadProductId AND @LeadProductId is not null)
	OR ([LeadSourceID] = @LeadSourceId AND @LeadSourceId is not null)
	OR ([LeadStageID] = @LeadStageId AND @LeadStageId is not null)
	OR ([ExpectedCloseDate] = @ExpectedCloseDate AND @ExpectedCloseDate is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([LeadPeriodID] = @LeadPeriodId AND @LeadPeriodId is not null)
	OR ([LeadChurnReasonID] = @LeadChurnReasonId AND @LeadChurnReasonId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pConferencingSummary_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pConferencingSummary_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pConferencingSummary_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ConferencingSummary table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pConferencingSummary_Get_List

AS


				
				SELECT
					[BilledDate],
					[ProductID],
					[Currency],
					[LocalSeconds],
					[LDSeconds],
					[TotalBridge],
					[TotalLD],
					[TotalMiscellaneous]
				FROM
					[dbo].[ConferencingSummary]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pConferencingSummary_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pConferencingSummary_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pConferencingSummary_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ConferencingSummary table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pConferencingSummary_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[BilledDate]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [Currency]'
				SET @SQL = @SQL + ', [LocalSeconds]'
				SET @SQL = @SQL + ', [LDSeconds]'
				SET @SQL = @SQL + ', [TotalBridge]'
				SET @SQL = @SQL + ', [TotalLD]'
				SET @SQL = @SQL + ', [TotalMiscellaneous]'
				SET @SQL = @SQL + ' FROM [dbo].[ConferencingSummary]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [BilledDate],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [Currency],'
				SET @SQL = @SQL + ' [LocalSeconds],'
				SET @SQL = @SQL + ' [LDSeconds],'
				SET @SQL = @SQL + ' [TotalBridge],'
				SET @SQL = @SQL + ' [TotalLD],'
				SET @SQL = @SQL + ' [TotalMiscellaneous]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ConferencingSummary]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pConferencingSummary_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pConferencingSummary_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pConferencingSummary_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ConferencingSummary table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pConferencingSummary_Insert
(

	@BilledDate datetime   ,

	@ProductId int   ,

	@Currency char (3)  ,

	@LocalSeconds int   ,

	@LdSeconds int   ,

	@TotalBridge decimal (18, 2)  ,

	@TotalLd decimal (18, 2)  ,

	@TotalMiscellaneous decimal (18, 2)  
)
AS


					
				INSERT INTO [dbo].[ConferencingSummary]
					(
					[BilledDate]
					,[ProductID]
					,[Currency]
					,[LocalSeconds]
					,[LDSeconds]
					,[TotalBridge]
					,[TotalLD]
					,[TotalMiscellaneous]
					)
				VALUES
					(
					@BilledDate
					,@ProductId
					,@Currency
					,@LocalSeconds
					,@LdSeconds
					,@TotalBridge
					,@TotalLd
					,@TotalMiscellaneous
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pConferencingSummary_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pConferencingSummary_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pConferencingSummary_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ConferencingSummary table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pConferencingSummary_Update
(

	@BilledDate datetime   ,

	@OriginalBilledDate datetime   ,

	@ProductId int   ,

	@OriginalProductId int   ,

	@Currency char (3)  ,

	@OriginalCurrency char (3)  ,

	@LocalSeconds int   ,

	@LdSeconds int   ,

	@TotalBridge decimal (18, 2)  ,

	@TotalLd decimal (18, 2)  ,

	@TotalMiscellaneous decimal (18, 2)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ConferencingSummary]
				SET
					[BilledDate] = @BilledDate
					,[ProductID] = @ProductId
					,[Currency] = @Currency
					,[LocalSeconds] = @LocalSeconds
					,[LDSeconds] = @LdSeconds
					,[TotalBridge] = @TotalBridge
					,[TotalLD] = @TotalLd
					,[TotalMiscellaneous] = @TotalMiscellaneous
				WHERE
[BilledDate] = @OriginalBilledDate 
AND [ProductID] = @OriginalProductId 
AND [Currency] = @OriginalCurrency 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pConferencingSummary_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pConferencingSummary_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pConferencingSummary_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ConferencingSummary table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pConferencingSummary_Delete
(

	@BilledDate datetime   ,

	@ProductId int   ,

	@Currency char (3)  
)
AS


				DELETE FROM [dbo].[ConferencingSummary] WITH (ROWLOCK) 
				WHERE
					[BilledDate] = @BilledDate
					AND [ProductID] = @ProductId
					AND [Currency] = @Currency
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pConferencingSummary_GetByBilledDateProductIdCurrency procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pConferencingSummary_GetByBilledDateProductIdCurrency') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pConferencingSummary_GetByBilledDateProductIdCurrency
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ConferencingSummary table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pConferencingSummary_GetByBilledDateProductIdCurrency
(

	@BilledDate datetime   ,

	@ProductId int   ,

	@Currency char (3)  
)
AS


				SELECT
					[BilledDate],
					[ProductID],
					[Currency],
					[LocalSeconds],
					[LDSeconds],
					[TotalBridge],
					[TotalLD],
					[TotalMiscellaneous]
				FROM
					[dbo].[ConferencingSummary]
				WHERE
					[BilledDate] = @BilledDate
					AND [ProductID] = @ProductId
					AND [Currency] = @Currency
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pConferencingSummary_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pConferencingSummary_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pConferencingSummary_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ConferencingSummary table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pConferencingSummary_Find
(

	@SearchUsingOR bit   = null ,

	@BilledDate datetime   = null ,

	@ProductId int   = null ,

	@Currency char (3)  = null ,

	@LocalSeconds int   = null ,

	@LdSeconds int   = null ,

	@TotalBridge decimal (18, 2)  = null ,

	@TotalLd decimal (18, 2)  = null ,

	@TotalMiscellaneous decimal (18, 2)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [BilledDate]
	, [ProductID]
	, [Currency]
	, [LocalSeconds]
	, [LDSeconds]
	, [TotalBridge]
	, [TotalLD]
	, [TotalMiscellaneous]
    FROM
	[dbo].[ConferencingSummary]
    WHERE 
	 ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([Currency] = @Currency OR @Currency IS NULL)
	AND ([LocalSeconds] = @LocalSeconds OR @LocalSeconds IS NULL)
	AND ([LDSeconds] = @LdSeconds OR @LdSeconds IS NULL)
	AND ([TotalBridge] = @TotalBridge OR @TotalBridge IS NULL)
	AND ([TotalLD] = @TotalLd OR @TotalLd IS NULL)
	AND ([TotalMiscellaneous] = @TotalMiscellaneous OR @TotalMiscellaneous IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [BilledDate]
	, [ProductID]
	, [Currency]
	, [LocalSeconds]
	, [LDSeconds]
	, [TotalBridge]
	, [TotalLD]
	, [TotalMiscellaneous]
    FROM
	[dbo].[ConferencingSummary]
    WHERE 
	 ([BilledDate] = @BilledDate AND @BilledDate is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([Currency] = @Currency AND @Currency is not null)
	OR ([LocalSeconds] = @LocalSeconds AND @LocalSeconds is not null)
	OR ([LDSeconds] = @LdSeconds AND @LdSeconds is not null)
	OR ([TotalBridge] = @TotalBridge AND @TotalBridge is not null)
	OR ([TotalLD] = @TotalLd AND @TotalLd is not null)
	OR ([TotalMiscellaneous] = @TotalMiscellaneous AND @TotalMiscellaneous is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BridgeType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[BridgeType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BridgeType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (100)  
)
AS


					
				INSERT INTO [dbo].[BridgeType]
					(
					[Name]
					,[Description]
					)
				VALUES
					(
					@Name
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BridgeType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BridgeType]
				SET
					[Name] = @Name
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BridgeType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[BridgeType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[BridgeType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BridgeType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[BridgeType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[BridgeType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTrackingNotes_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTrackingNotes_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTrackingNotes_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CompanyLeadTrackingNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTrackingNotes_Get_List

AS


				
				SELECT
					[ID],
					[CompanyLeadTrackingID],
					[Notes],
					[OldValues],
					[CreatedDate],
					[ModifiedBy]
				FROM
					[dbo].[CompanyLeadTrackingNotes]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTrackingNotes_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTrackingNotes_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTrackingNotes_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CompanyLeadTrackingNotes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTrackingNotes_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyLeadTrackingID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [OldValues]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyLeadTrackingNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyLeadTrackingID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [OldValues],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ModifiedBy]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CompanyLeadTrackingNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTrackingNotes_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTrackingNotes_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTrackingNotes_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CompanyLeadTrackingNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTrackingNotes_Insert
(

	@Id int   ,

	@CompanyLeadTrackingId int   ,

	@Notes varchar (1000)  ,

	@OldValues varchar (1000)  ,

	@CreatedDate datetime   ,

	@ModifiedBy varchar (50)  
)
AS


					
				INSERT INTO [dbo].[CompanyLeadTrackingNotes]
					(
					[ID]
					,[CompanyLeadTrackingID]
					,[Notes]
					,[OldValues]
					,[CreatedDate]
					,[ModifiedBy]
					)
				VALUES
					(
					@Id
					,@CompanyLeadTrackingId
					,@Notes
					,@OldValues
					,@CreatedDate
					,@ModifiedBy
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTrackingNotes_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTrackingNotes_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTrackingNotes_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CompanyLeadTrackingNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTrackingNotes_Update
(

	@Id int   ,

	@OriginalId int   ,

	@CompanyLeadTrackingId int   ,

	@Notes varchar (1000)  ,

	@OldValues varchar (1000)  ,

	@CreatedDate datetime   ,

	@ModifiedBy varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CompanyLeadTrackingNotes]
				SET
					[ID] = @Id
					,[CompanyLeadTrackingID] = @CompanyLeadTrackingId
					,[Notes] = @Notes
					,[OldValues] = @OldValues
					,[CreatedDate] = @CreatedDate
					,[ModifiedBy] = @ModifiedBy
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTrackingNotes_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTrackingNotes_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTrackingNotes_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CompanyLeadTrackingNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTrackingNotes_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[CompanyLeadTrackingNotes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTrackingNotes_GetByCompanyLeadTrackingId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTrackingNotes_GetByCompanyLeadTrackingId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTrackingNotes_GetByCompanyLeadTrackingId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTrackingNotes table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTrackingNotes_GetByCompanyLeadTrackingId
(

	@CompanyLeadTrackingId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CompanyLeadTrackingID],
					[Notes],
					[OldValues],
					[CreatedDate],
					[ModifiedBy]
				FROM
					[dbo].[CompanyLeadTrackingNotes]
				WHERE
					[CompanyLeadTrackingID] = @CompanyLeadTrackingId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTrackingNotes_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTrackingNotes_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTrackingNotes_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CompanyLeadTrackingNotes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTrackingNotes_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[CompanyLeadTrackingID],
					[Notes],
					[OldValues],
					[CreatedDate],
					[ModifiedBy]
				FROM
					[dbo].[CompanyLeadTrackingNotes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCompanyLeadTrackingNotes_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCompanyLeadTrackingNotes_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCompanyLeadTrackingNotes_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CompanyLeadTrackingNotes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCompanyLeadTrackingNotes_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CompanyLeadTrackingId int   = null ,

	@Notes varchar (1000)  = null ,

	@OldValues varchar (1000)  = null ,

	@CreatedDate datetime   = null ,

	@ModifiedBy varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CompanyLeadTrackingID]
	, [Notes]
	, [OldValues]
	, [CreatedDate]
	, [ModifiedBy]
    FROM
	[dbo].[CompanyLeadTrackingNotes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CompanyLeadTrackingID] = @CompanyLeadTrackingId OR @CompanyLeadTrackingId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([OldValues] = @OldValues OR @OldValues IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CompanyLeadTrackingID]
	, [Notes]
	, [OldValues]
	, [CreatedDate]
	, [ModifiedBy]
    FROM
	[dbo].[CompanyLeadTrackingNotes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CompanyLeadTrackingID] = @CompanyLeadTrackingId AND @CompanyLeadTrackingId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([OldValues] = @OldValues AND @OldValues is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequestType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequestType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequestType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BridgeRequestType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequestType_Get_List

AS


				
				SELECT
					[ID],
					[Name]
				FROM
					[dbo].[BridgeRequestType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequestType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequestType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequestType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeRequestType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequestType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeRequestType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeRequestType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequestType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequestType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequestType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BridgeRequestType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequestType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  
)
AS


					
				INSERT INTO [dbo].[BridgeRequestType]
					(
					[Name]
					)
				VALUES
					(
					@Name
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequestType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequestType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequestType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BridgeRequestType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequestType_Update
(

	@Id int   ,

	@Name varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BridgeRequestType]
				SET
					[Name] = @Name
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequestType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequestType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequestType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BridgeRequestType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequestType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[BridgeRequestType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequestType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequestType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequestType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequestType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequestType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name]
				FROM
					[dbo].[BridgeRequestType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequestType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequestType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequestType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BridgeRequestType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequestType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
    FROM
	[dbo].[BridgeRequestType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
    FROM
	[dbo].[BridgeRequestType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotes_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotes_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotes_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AdminSiteNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotes_Get_List

AS


				
				SELECT
					[ID],
					[CustomerID],
					[UserID],
					[ModeratorID],
					[Notes],
					[ModifiedBy],
					[CreatedDate],
					[WholesalerID],
					[Deleted]
				FROM
					[dbo].[AdminSiteNotes]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotes_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotes_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotes_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AdminSiteNotes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotes_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [Deleted]'
				SET @SQL = @SQL + ' FROM [dbo].[AdminSiteNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [Deleted]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AdminSiteNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotes_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotes_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotes_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AdminSiteNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotes_Insert
(

	@Id int   ,

	@CustomerId int   ,

	@UserId int   ,

	@ModeratorId int   ,

	@Notes nvarchar (3000)  ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   ,

	@WholesalerId varchar (10)  ,

	@Deleted bit   
)
AS


					
				INSERT INTO [dbo].[AdminSiteNotes]
					(
					[ID]
					,[CustomerID]
					,[UserID]
					,[ModeratorID]
					,[Notes]
					,[ModifiedBy]
					,[CreatedDate]
					,[WholesalerID]
					,[Deleted]
					)
				VALUES
					(
					@Id
					,@CustomerId
					,@UserId
					,@ModeratorId
					,@Notes
					,@ModifiedBy
					,@CreatedDate
					,@WholesalerId
					,@Deleted
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotes_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotes_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotes_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AdminSiteNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotes_Update
(

	@Id int   ,

	@OriginalId int   ,

	@CustomerId int   ,

	@UserId int   ,

	@ModeratorId int   ,

	@Notes nvarchar (3000)  ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   ,

	@WholesalerId varchar (10)  ,

	@Deleted bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AdminSiteNotes]
				SET
					[ID] = @Id
					,[CustomerID] = @CustomerId
					,[UserID] = @UserId
					,[ModeratorID] = @ModeratorId
					,[Notes] = @Notes
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
					,[WholesalerID] = @WholesalerId
					,[Deleted] = @Deleted
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotes_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotes_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotes_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AdminSiteNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotes_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[AdminSiteNotes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotes_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotes_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotes_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AdminSiteNotes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotes_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[CustomerID],
					[UserID],
					[ModeratorID],
					[Notes],
					[ModifiedBy],
					[CreatedDate],
					[WholesalerID],
					[Deleted]
				FROM
					[dbo].[AdminSiteNotes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotes_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotes_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotes_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AdminSiteNotes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotes_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CustomerId int   = null ,

	@UserId int   = null ,

	@ModeratorId int   = null ,

	@Notes nvarchar (3000)  = null ,

	@ModifiedBy varchar (50)  = null ,

	@CreatedDate datetime   = null ,

	@WholesalerId varchar (10)  = null ,

	@Deleted bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [UserID]
	, [ModeratorID]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
	, [WholesalerID]
	, [Deleted]
    FROM
	[dbo].[AdminSiteNotes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([Deleted] = @Deleted OR @Deleted IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [UserID]
	, [ModeratorID]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
	, [WholesalerID]
	, [Deleted]
    FROM
	[dbo].[AdminSiteNotes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([Deleted] = @Deleted AND @Deleted is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pActionType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pActionType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pActionType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ActionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pActionType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[ActionType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pActionType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pActionType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pActionType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ActionType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pActionType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[ActionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ActionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pActionType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pActionType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pActionType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ActionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pActionType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (100)  ,

	@Description varchar (200)  
)
AS


					
				INSERT INTO [dbo].[ActionType]
					(
					[Name]
					,[Description]
					)
				VALUES
					(
					@Name
					,@Description
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pActionType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pActionType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pActionType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ActionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pActionType_Update
(

	@Id int   ,

	@Name varchar (100)  ,

	@Description varchar (200)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ActionType]
				SET
					[Name] = @Name
					,[Description] = @Description
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pActionType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pActionType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pActionType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ActionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pActionType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ActionType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pActionType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pActionType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pActionType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ActionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pActionType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[ActionType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pActionType_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pActionType_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pActionType_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ActionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pActionType_GetByName
(

	@Name varchar (100)  
)
AS


				SELECT
					[ID],
					[Name],
					[Description]
				FROM
					[dbo].[ActionType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pActionType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pActionType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pActionType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ActionType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pActionType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (100)  = null ,

	@Description varchar (200)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[ActionType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
    FROM
	[dbo].[ActionType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAction_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAction_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAction_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Action table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAction_Get_List

AS


				
				SELECT
					[ID],
					[DateTimeStamp],
					[ActionTypeID],
					[ActionFrom],
					[ExtraInfo],
					[ProcessedFlag]
				FROM
					[dbo].[Action]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAction_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAction_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAction_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Action table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAction_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [DateTimeStamp]'
				SET @SQL = @SQL + ', [ActionTypeID]'
				SET @SQL = @SQL + ', [ActionFrom]'
				SET @SQL = @SQL + ', [ExtraInfo]'
				SET @SQL = @SQL + ', [ProcessedFlag]'
				SET @SQL = @SQL + ' FROM [dbo].[Action]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [DateTimeStamp],'
				SET @SQL = @SQL + ' [ActionTypeID],'
				SET @SQL = @SQL + ' [ActionFrom],'
				SET @SQL = @SQL + ' [ExtraInfo],'
				SET @SQL = @SQL + ' [ProcessedFlag]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Action]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAction_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAction_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAction_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Action table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAction_Insert
(

	@Id int    OUTPUT,

	@DateTimeStamp datetime   ,

	@ActionTypeId int   ,

	@ActionFrom varchar (100)  ,

	@ExtraInfo varchar (200)  ,

	@ProcessedFlag nchar (1)  
)
AS


					
				INSERT INTO [dbo].[Action]
					(
					[DateTimeStamp]
					,[ActionTypeID]
					,[ActionFrom]
					,[ExtraInfo]
					,[ProcessedFlag]
					)
				VALUES
					(
					@DateTimeStamp
					,@ActionTypeId
					,@ActionFrom
					,@ExtraInfo
					,@ProcessedFlag
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAction_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAction_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAction_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Action table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAction_Update
(

	@Id int   ,

	@DateTimeStamp datetime   ,

	@ActionTypeId int   ,

	@ActionFrom varchar (100)  ,

	@ExtraInfo varchar (200)  ,

	@ProcessedFlag nchar (1)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Action]
				SET
					[DateTimeStamp] = @DateTimeStamp
					,[ActionTypeID] = @ActionTypeId
					,[ActionFrom] = @ActionFrom
					,[ExtraInfo] = @ExtraInfo
					,[ProcessedFlag] = @ProcessedFlag
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAction_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAction_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAction_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Action table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAction_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Action] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAction_GetByActionTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAction_GetByActionTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAction_GetByActionTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Action table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAction_GetByActionTypeId
(

	@ActionTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[DateTimeStamp],
					[ActionTypeID],
					[ActionFrom],
					[ExtraInfo],
					[ProcessedFlag]
				FROM
					[dbo].[Action]
				WHERE
					[ActionTypeID] = @ActionTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAction_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAction_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAction_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Action table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAction_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[DateTimeStamp],
					[ActionTypeID],
					[ActionFrom],
					[ExtraInfo],
					[ProcessedFlag]
				FROM
					[dbo].[Action]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAction_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAction_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAction_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Action table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAction_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@DateTimeStamp datetime   = null ,

	@ActionTypeId int   = null ,

	@ActionFrom varchar (100)  = null ,

	@ExtraInfo varchar (200)  = null ,

	@ProcessedFlag nchar (1)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [DateTimeStamp]
	, [ActionTypeID]
	, [ActionFrom]
	, [ExtraInfo]
	, [ProcessedFlag]
    FROM
	[dbo].[Action]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([DateTimeStamp] = @DateTimeStamp OR @DateTimeStamp IS NULL)
	AND ([ActionTypeID] = @ActionTypeId OR @ActionTypeId IS NULL)
	AND ([ActionFrom] = @ActionFrom OR @ActionFrom IS NULL)
	AND ([ExtraInfo] = @ExtraInfo OR @ExtraInfo IS NULL)
	AND ([ProcessedFlag] = @ProcessedFlag OR @ProcessedFlag IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [DateTimeStamp]
	, [ActionTypeID]
	, [ActionFrom]
	, [ExtraInfo]
	, [ProcessedFlag]
    FROM
	[dbo].[Action]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([DateTimeStamp] = @DateTimeStamp AND @DateTimeStamp is not null)
	OR ([ActionTypeID] = @ActionTypeId AND @ActionTypeId is not null)
	OR ([ActionFrom] = @ActionFrom AND @ActionFrom is not null)
	OR ([ExtraInfo] = @ExtraInfo AND @ExtraInfo is not null)
	OR ([ProcessedFlag] = @ProcessedFlag AND @ProcessedFlag is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccountManager_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccountManager_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccountManager_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AccountManager table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccountManager_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[Enabled]
				FROM
					[dbo].[AccountManager]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccountManager_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccountManager_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccountManager_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccountManager table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccountManager_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [FullName]'
				SET @SQL = @SQL + ', [EmailAddress]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ' FROM [dbo].[AccountManager]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [FullName],'
				SET @SQL = @SQL + ' [EmailAddress],'
				SET @SQL = @SQL + ' [Enabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AccountManager]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccountManager_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccountManager_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccountManager_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AccountManager table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccountManager_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@FullName varchar (50)  ,

	@EmailAddress varchar (100)  ,

	@Enabled bit   
)
AS


					
				INSERT INTO [dbo].[AccountManager]
					(
					[WholesalerID]
					,[FullName]
					,[EmailAddress]
					,[Enabled]
					)
				VALUES
					(
					@WholesalerId
					,@FullName
					,@EmailAddress
					,@Enabled
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccountManager_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccountManager_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccountManager_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AccountManager table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccountManager_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@FullName varchar (50)  ,

	@EmailAddress varchar (100)  ,

	@Enabled bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AccountManager]
				SET
					[WholesalerID] = @WholesalerId
					,[FullName] = @FullName
					,[EmailAddress] = @EmailAddress
					,[Enabled] = @Enabled
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccountManager_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccountManager_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccountManager_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AccountManager table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccountManager_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[AccountManager] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccountManager_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccountManager_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccountManager_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccountManager table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccountManager_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[Enabled]
				FROM
					[dbo].[AccountManager]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccountManager_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccountManager_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccountManager_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccountManager table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccountManager_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[FullName],
					[EmailAddress],
					[Enabled]
				FROM
					[dbo].[AccountManager]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccountManager_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccountManager_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccountManager_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AccountManager table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccountManager_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@FullName varchar (50)  = null ,

	@EmailAddress varchar (100)  = null ,

	@Enabled bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [FullName]
	, [EmailAddress]
	, [Enabled]
    FROM
	[dbo].[AccountManager]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([FullName] = @FullName OR @FullName IS NULL)
	AND ([EmailAddress] = @EmailAddress OR @EmailAddress IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [FullName]
	, [EmailAddress]
	, [Enabled]
    FROM
	[dbo].[AccountManager]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([FullName] = @FullName AND @FullName is not null)
	OR ([EmailAddress] = @EmailAddress AND @EmailAddress is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AccessType_ProductRate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_Get_List

AS


				
				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AccessType_ProductRate table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ' FROM [dbo].[AccessType_ProductRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [ProductRateID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AccessType_ProductRate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AccessType_ProductRate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_Insert
(

	@Id int    OUTPUT,

	@AccessTypeId int   ,

	@ProductRateId int   
)
AS


					
				INSERT INTO [dbo].[AccessType_ProductRate]
					(
					[AccessTypeID]
					,[ProductRateID]
					)
				VALUES
					(
					@AccessTypeId
					,@ProductRateId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AccessType_ProductRate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_Update
(

	@Id int   ,

	@AccessTypeId int   ,

	@ProductRateId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AccessType_ProductRate]
				SET
					[AccessTypeID] = @AccessTypeId
					,[ProductRateID] = @ProductRateId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AccessType_ProductRate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[AccessType_ProductRate] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_GetByAccessTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_GetByAccessTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_GetByAccessTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType_ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_GetByAccessTypeId
(

	@AccessTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
				WHERE
					[AccessTypeID] = @AccessTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_GetByProductRateId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_GetByProductRateId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_GetByProductRateId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType_ProductRate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_GetByProductRateId
(

	@ProductRateId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
				WHERE
					[ProductRateID] = @ProductRateId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType_ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_GetByAccessTypeIdProductRateId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_GetByAccessTypeIdProductRateId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_GetByAccessTypeIdProductRateId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AccessType_ProductRate table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_GetByAccessTypeIdProductRateId
(

	@AccessTypeId int   ,

	@ProductRateId int   
)
AS


				SELECT
					[ID],
					[AccessTypeID],
					[ProductRateID]
				FROM
					[dbo].[AccessType_ProductRate]
				WHERE
					[AccessTypeID] = @AccessTypeId
					AND [ProductRateID] = @ProductRateId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAccessType_ProductRate_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAccessType_ProductRate_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAccessType_ProductRate_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AccessType_ProductRate table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAccessType_ProductRate_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@AccessTypeId int   = null ,

	@ProductRateId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [AccessTypeID]
	, [ProductRateID]
    FROM
	[dbo].[AccessType_ProductRate]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([AccessTypeID] = @AccessTypeId OR @AccessTypeId IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [AccessTypeID]
	, [ProductRateID]
    FROM
	[dbo].[AccessType_ProductRate]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([AccessTypeID] = @AccessTypeId AND @AccessTypeId is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotesHistory_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotesHistory_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotesHistory_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AdminSiteNotesHistory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotesHistory_Get_List

AS


				
				SELECT
					[ID],
					[AdminSiteNotesID],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[AdminSiteNotesHistory]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotesHistory_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotesHistory_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotesHistory_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AdminSiteNotesHistory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotesHistory_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [AdminSiteNotesID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[AdminSiteNotesHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [AdminSiteNotesID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AdminSiteNotesHistory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotesHistory_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotesHistory_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotesHistory_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AdminSiteNotesHistory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotesHistory_Insert
(

	@Id int    OUTPUT,

	@AdminSiteNotesId int   ,

	@Notes nvarchar (3000)  ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   
)
AS


					
				INSERT INTO [dbo].[AdminSiteNotesHistory]
					(
					[AdminSiteNotesID]
					,[Notes]
					,[ModifiedBy]
					,[CreatedDate]
					)
				VALUES
					(
					@AdminSiteNotesId
					,@Notes
					,@ModifiedBy
					,@CreatedDate
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotesHistory_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotesHistory_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotesHistory_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AdminSiteNotesHistory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotesHistory_Update
(

	@Id int   ,

	@AdminSiteNotesId int   ,

	@Notes nvarchar (3000)  ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AdminSiteNotesHistory]
				SET
					[AdminSiteNotesID] = @AdminSiteNotesId
					,[Notes] = @Notes
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotesHistory_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotesHistory_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotesHistory_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AdminSiteNotesHistory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotesHistory_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[AdminSiteNotesHistory] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotesHistory_GetByAdminSiteNotesId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotesHistory_GetByAdminSiteNotesId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotesHistory_GetByAdminSiteNotesId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AdminSiteNotesHistory table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotesHistory_GetByAdminSiteNotesId
(

	@AdminSiteNotesId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[AdminSiteNotesID],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[AdminSiteNotesHistory]
				WHERE
					[AdminSiteNotesID] = @AdminSiteNotesId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotesHistory_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotesHistory_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotesHistory_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AdminSiteNotesHistory table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotesHistory_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[AdminSiteNotesID],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[AdminSiteNotesHistory]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAdminSiteNotesHistory_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAdminSiteNotesHistory_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAdminSiteNotesHistory_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AdminSiteNotesHistory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAdminSiteNotesHistory_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@AdminSiteNotesId int   = null ,

	@Notes nvarchar (3000)  = null ,

	@ModifiedBy varchar (50)  = null ,

	@CreatedDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [AdminSiteNotesID]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
    FROM
	[dbo].[AdminSiteNotesHistory]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([AdminSiteNotesID] = @AdminSiteNotesId OR @AdminSiteNotesId IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [AdminSiteNotesID]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
    FROM
	[dbo].[AdminSiteNotesHistory]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([AdminSiteNotesID] = @AdminSiteNotesId AND @AdminSiteNotesId is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAreaCodeNXX_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAreaCodeNXX_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAreaCodeNXX_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AreaCodeNXX table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAreaCodeNXX_Get_List

AS


				
				SELECT
					[ID],
					[AreaCode],
					[Location1],
					[Location2],
					[ISOCountryCode]
				FROM
					[dbo].[AreaCodeNXX]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAreaCodeNXX_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAreaCodeNXX_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAreaCodeNXX_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AreaCodeNXX table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAreaCodeNXX_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [AreaCode]'
				SET @SQL = @SQL + ', [Location1]'
				SET @SQL = @SQL + ', [Location2]'
				SET @SQL = @SQL + ', [ISOCountryCode]'
				SET @SQL = @SQL + ' FROM [dbo].[AreaCodeNXX]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [AreaCode],'
				SET @SQL = @SQL + ' [Location1],'
				SET @SQL = @SQL + ' [Location2],'
				SET @SQL = @SQL + ' [ISOCountryCode]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AreaCodeNXX]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAreaCodeNXX_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAreaCodeNXX_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAreaCodeNXX_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AreaCodeNXX table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAreaCodeNXX_Insert
(

	@Id int   ,

	@AreaCode varchar (3)  ,

	@Location1 varchar (50)  ,

	@Location2 varchar (50)  ,

	@IsoCountryCode varchar (3)  
)
AS


					
				INSERT INTO [dbo].[AreaCodeNXX]
					(
					[ID]
					,[AreaCode]
					,[Location1]
					,[Location2]
					,[ISOCountryCode]
					)
				VALUES
					(
					@Id
					,@AreaCode
					,@Location1
					,@Location2
					,@IsoCountryCode
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAreaCodeNXX_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAreaCodeNXX_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAreaCodeNXX_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AreaCodeNXX table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAreaCodeNXX_Update
(

	@Id int   ,

	@OriginalId int   ,

	@AreaCode varchar (3)  ,

	@Location1 varchar (50)  ,

	@Location2 varchar (50)  ,

	@IsoCountryCode varchar (3)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AreaCodeNXX]
				SET
					[ID] = @Id
					,[AreaCode] = @AreaCode
					,[Location1] = @Location1
					,[Location2] = @Location2
					,[ISOCountryCode] = @IsoCountryCode
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAreaCodeNXX_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAreaCodeNXX_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAreaCodeNXX_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AreaCodeNXX table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAreaCodeNXX_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[AreaCodeNXX] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAreaCodeNXX_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAreaCodeNXX_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAreaCodeNXX_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AreaCodeNXX table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAreaCodeNXX_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[AreaCode],
					[Location1],
					[Location2],
					[ISOCountryCode]
				FROM
					[dbo].[AreaCodeNXX]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAreaCodeNXX_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAreaCodeNXX_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAreaCodeNXX_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AreaCodeNXX table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAreaCodeNXX_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@AreaCode varchar (3)  = null ,

	@Location1 varchar (50)  = null ,

	@Location2 varchar (50)  = null ,

	@IsoCountryCode varchar (3)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [AreaCode]
	, [Location1]
	, [Location2]
	, [ISOCountryCode]
    FROM
	[dbo].[AreaCodeNXX]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([AreaCode] = @AreaCode OR @AreaCode IS NULL)
	AND ([Location1] = @Location1 OR @Location1 IS NULL)
	AND ([Location2] = @Location2 OR @Location2 IS NULL)
	AND ([ISOCountryCode] = @IsoCountryCode OR @IsoCountryCode IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [AreaCode]
	, [Location1]
	, [Location2]
	, [ISOCountryCode]
    FROM
	[dbo].[AreaCodeNXX]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([AreaCode] = @AreaCode AND @AreaCode is not null)
	OR ([Location1] = @Location1 AND @Location1 is not null)
	OR ([Location2] = @Location2 AND @Location2 is not null)
	OR ([ISOCountryCode] = @IsoCountryCode AND @IsoCountryCode is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAuditLog_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAuditLog_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAuditLog_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AuditLog table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAuditLog_Get_List

AS


				
				SELECT
					[ID],
					[TblName],
					[TablePKID],
					[CreatedDate],
					[CustomerID],
					[ModeratorID],
					[ColumnsUpdated],
					[Category]
				FROM
					[dbo].[AuditLog]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAuditLog_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAuditLog_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAuditLog_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AuditLog table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAuditLog_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [TblName]'
				SET @SQL = @SQL + ', [TablePKID]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [ColumnsUpdated]'
				SET @SQL = @SQL + ', [Category]'
				SET @SQL = @SQL + ' FROM [dbo].[AuditLog]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [TblName],'
				SET @SQL = @SQL + ' [TablePKID],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [ColumnsUpdated],'
				SET @SQL = @SQL + ' [Category]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AuditLog]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAuditLog_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAuditLog_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAuditLog_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AuditLog table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAuditLog_Insert
(

	@Id int    OUTPUT,

	@TblName nvarchar (50)  ,

	@TablePkid int   ,

	@CreatedDate datetime   ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@ColumnsUpdated xml   ,

	@Category nvarchar (50)  
)
AS


					
				INSERT INTO [dbo].[AuditLog]
					(
					[TblName]
					,[TablePKID]
					,[CreatedDate]
					,[CustomerID]
					,[ModeratorID]
					,[ColumnsUpdated]
					,[Category]
					)
				VALUES
					(
					@TblName
					,@TablePkid
					,@CreatedDate
					,@CustomerId
					,@ModeratorId
					,@ColumnsUpdated
					,@Category
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAuditLog_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAuditLog_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAuditLog_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AuditLog table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAuditLog_Update
(

	@Id int   ,

	@TblName nvarchar (50)  ,

	@TablePkid int   ,

	@CreatedDate datetime   ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@ColumnsUpdated xml   ,

	@Category nvarchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AuditLog]
				SET
					[TblName] = @TblName
					,[TablePKID] = @TablePkid
					,[CreatedDate] = @CreatedDate
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[ColumnsUpdated] = @ColumnsUpdated
					,[Category] = @Category
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAuditLog_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAuditLog_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAuditLog_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AuditLog table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAuditLog_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[AuditLog] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAuditLog_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAuditLog_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAuditLog_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AuditLog table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAuditLog_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[TblName],
					[TablePKID],
					[CreatedDate],
					[CustomerID],
					[ModeratorID],
					[ColumnsUpdated],
					[Category]
				FROM
					[dbo].[AuditLog]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAuditLog_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAuditLog_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAuditLog_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AuditLog table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAuditLog_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@TblName nvarchar (50)  = null ,

	@TablePkid int   = null ,

	@CreatedDate datetime   = null ,

	@CustomerId int   = null ,

	@ModeratorId int   = null ,

	@ColumnsUpdated xml   = null ,

	@Category nvarchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [TblName]
	, [TablePKID]
	, [CreatedDate]
	, [CustomerID]
	, [ModeratorID]
	, [ColumnsUpdated]
	, [Category]
    FROM
	[dbo].[AuditLog]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([TblName] = @TblName OR @TblName IS NULL)
	AND ([TablePKID] = @TablePkid OR @TablePkid IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([ColumnsUpdated] = @ColumnsUpdated OR @ColumnsUpdated IS NULL)
	AND ([Category] = @Category OR @Category IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [TblName]
	, [TablePKID]
	, [CreatedDate]
	, [CustomerID]
	, [ModeratorID]
	, [ColumnsUpdated]
	, [Category]
    FROM
	[dbo].[AuditLog]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([TblName] = @TblName AND @TblName is not null)
	OR ([TablePKID] = @TablePkid AND @TablePkid is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([ColumnsUpdated] = @ColumnsUpdated AND @ColumnsUpdated is not null)
	OR ([Category] = @Category AND @Category is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BridgeRequest table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_Get_List

AS


				
				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeRequest table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [TransTimeStamp]'
				SET @SQL = @SQL + ', [ProcessFlag]'
				SET @SQL = @SQL + ', [BridgeRequestTypeID]'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeRequest]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [TransTimeStamp],'
				SET @SQL = @SQL + ' [ProcessFlag],'
				SET @SQL = @SQL + ' [BridgeRequestTypeID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeRequest]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BridgeRequest table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_Insert
(

	@Id uniqueidentifier   ,

	@ModeratorId int   ,

	@TransTimeStamp datetime   ,

	@ProcessFlag char (1)  ,

	@BridgeRequestTypeId int   
)
AS


					
				INSERT INTO [dbo].[BridgeRequest]
					(
					[ModeratorID]
					,[TransTimeStamp]
					,[ProcessFlag]
					,[BridgeRequestTypeID]
					)
				VALUES
					(
					@ModeratorId
					,@TransTimeStamp
					,@ProcessFlag
					,@BridgeRequestTypeId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BridgeRequest table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_Update
(

	@Id uniqueidentifier   ,

	@OriginalId uniqueidentifier   ,

	@ModeratorId int   ,

	@TransTimeStamp datetime   ,

	@ProcessFlag char (1)  ,

	@BridgeRequestTypeId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BridgeRequest]
				SET
					[ModeratorID] = @ModeratorId
					,[TransTimeStamp] = @TransTimeStamp
					,[ProcessFlag] = @ProcessFlag
					,[BridgeRequestTypeID] = @BridgeRequestTypeId
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BridgeRequest table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_Delete
(

	@Id uniqueidentifier   
)
AS


				DELETE FROM [dbo].[BridgeRequest] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequest table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
				WHERE
					[ModeratorID] = @ModeratorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_GetByBridgeRequestTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_GetByBridgeRequestTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_GetByBridgeRequestTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequest table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_GetByBridgeRequestTypeId
(

	@BridgeRequestTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
				WHERE
					[BridgeRequestTypeID] = @BridgeRequestTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequest table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_GetById
(

	@Id uniqueidentifier   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_GetByModeratorIdProcessFlag procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_GetByModeratorIdProcessFlag') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_GetByModeratorIdProcessFlag
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeRequest table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_GetByModeratorIdProcessFlag
(

	@ModeratorId int   ,

	@ProcessFlag char (1)  
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[TransTimeStamp],
					[ProcessFlag],
					[BridgeRequestTypeID]
				FROM
					[dbo].[BridgeRequest]
				WHERE
					[ModeratorID] = @ModeratorId
					AND [ProcessFlag] = @ProcessFlag
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeRequest_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeRequest_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeRequest_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BridgeRequest table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeRequest_Find
(

	@SearchUsingOR bit   = null ,

	@Id uniqueidentifier   = null ,

	@ModeratorId int   = null ,

	@TransTimeStamp datetime   = null ,

	@ProcessFlag char (1)  = null ,

	@BridgeRequestTypeId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [TransTimeStamp]
	, [ProcessFlag]
	, [BridgeRequestTypeID]
    FROM
	[dbo].[BridgeRequest]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([TransTimeStamp] = @TransTimeStamp OR @TransTimeStamp IS NULL)
	AND ([ProcessFlag] = @ProcessFlag OR @ProcessFlag IS NULL)
	AND ([BridgeRequestTypeID] = @BridgeRequestTypeId OR @BridgeRequestTypeId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [TransTimeStamp]
	, [ProcessFlag]
	, [BridgeRequestTypeID]
    FROM
	[dbo].[BridgeRequest]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([TransTimeStamp] = @TransTimeStamp AND @TransTimeStamp is not null)
	OR ([ProcessFlag] = @ProcessFlag AND @ProcessFlag is not null)
	OR ([BridgeRequestTypeID] = @BridgeRequestTypeId AND @BridgeRequestTypeId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridge_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridge_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridge_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Bridge table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridge_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description],
					[IPAddress],
					[WebRequestSecurityToken],
					[WebRequestAPIURL],
					[WebRequestMethod],
					[WebRequestContentType],
					[UserName],
					[Password],
					[BridgeTypeID],
					[DBConnectionString]
				FROM
					[dbo].[Bridge]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridge_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridge_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridge_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Bridge table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridge_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [IPAddress]'
				SET @SQL = @SQL + ', [WebRequestSecurityToken]'
				SET @SQL = @SQL + ', [WebRequestAPIURL]'
				SET @SQL = @SQL + ', [WebRequestMethod]'
				SET @SQL = @SQL + ', [WebRequestContentType]'
				SET @SQL = @SQL + ', [UserName]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [BridgeTypeID]'
				SET @SQL = @SQL + ', [DBConnectionString]'
				SET @SQL = @SQL + ' FROM [dbo].[Bridge]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [IPAddress],'
				SET @SQL = @SQL + ' [WebRequestSecurityToken],'
				SET @SQL = @SQL + ' [WebRequestAPIURL],'
				SET @SQL = @SQL + ' [WebRequestMethod],'
				SET @SQL = @SQL + ' [WebRequestContentType],'
				SET @SQL = @SQL + ' [UserName],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [BridgeTypeID],'
				SET @SQL = @SQL + ' [DBConnectionString]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Bridge]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridge_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridge_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridge_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Bridge table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridge_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@IpAddress varchar (30)  ,

	@WebRequestSecurityToken varchar (30)  ,

	@WebRequestApiurl varchar (100)  ,

	@WebRequestMethod varchar (20)  ,

	@WebRequestContentType varchar (30)  ,

	@UserName varchar (50)  ,

	@Password varchar (30)  ,

	@BridgeTypeId int   ,

	@DbConnectionString varchar (100)  
)
AS


					
				INSERT INTO [dbo].[Bridge]
					(
					[Name]
					,[Description]
					,[IPAddress]
					,[WebRequestSecurityToken]
					,[WebRequestAPIURL]
					,[WebRequestMethod]
					,[WebRequestContentType]
					,[UserName]
					,[Password]
					,[BridgeTypeID]
					,[DBConnectionString]
					)
				VALUES
					(
					@Name
					,@Description
					,@IpAddress
					,@WebRequestSecurityToken
					,@WebRequestApiurl
					,@WebRequestMethod
					,@WebRequestContentType
					,@UserName
					,@Password
					,@BridgeTypeId
					,@DbConnectionString
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridge_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridge_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridge_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Bridge table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridge_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@IpAddress varchar (30)  ,

	@WebRequestSecurityToken varchar (30)  ,

	@WebRequestApiurl varchar (100)  ,

	@WebRequestMethod varchar (20)  ,

	@WebRequestContentType varchar (30)  ,

	@UserName varchar (50)  ,

	@Password varchar (30)  ,

	@BridgeTypeId int   ,

	@DbConnectionString varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Bridge]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[IPAddress] = @IpAddress
					,[WebRequestSecurityToken] = @WebRequestSecurityToken
					,[WebRequestAPIURL] = @WebRequestApiurl
					,[WebRequestMethod] = @WebRequestMethod
					,[WebRequestContentType] = @WebRequestContentType
					,[UserName] = @UserName
					,[Password] = @Password
					,[BridgeTypeID] = @BridgeTypeId
					,[DBConnectionString] = @DbConnectionString
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridge_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridge_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridge_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Bridge table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridge_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Bridge] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridge_GetByBridgeTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridge_GetByBridgeTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridge_GetByBridgeTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Bridge table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridge_GetByBridgeTypeId
(

	@BridgeTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Name],
					[Description],
					[IPAddress],
					[WebRequestSecurityToken],
					[WebRequestAPIURL],
					[WebRequestMethod],
					[WebRequestContentType],
					[UserName],
					[Password],
					[BridgeTypeID],
					[DBConnectionString]
				FROM
					[dbo].[Bridge]
				WHERE
					[BridgeTypeID] = @BridgeTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridge_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridge_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridge_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Bridge table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridge_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[IPAddress],
					[WebRequestSecurityToken],
					[WebRequestAPIURL],
					[WebRequestMethod],
					[WebRequestContentType],
					[UserName],
					[Password],
					[BridgeTypeID],
					[DBConnectionString]
				FROM
					[dbo].[Bridge]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridge_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridge_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridge_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Bridge table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridge_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@IpAddress varchar (30)  = null ,

	@WebRequestSecurityToken varchar (30)  = null ,

	@WebRequestApiurl varchar (100)  = null ,

	@WebRequestMethod varchar (20)  = null ,

	@WebRequestContentType varchar (30)  = null ,

	@UserName varchar (50)  = null ,

	@Password varchar (30)  = null ,

	@BridgeTypeId int   = null ,

	@DbConnectionString varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [IPAddress]
	, [WebRequestSecurityToken]
	, [WebRequestAPIURL]
	, [WebRequestMethod]
	, [WebRequestContentType]
	, [UserName]
	, [Password]
	, [BridgeTypeID]
	, [DBConnectionString]
    FROM
	[dbo].[Bridge]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([IPAddress] = @IpAddress OR @IpAddress IS NULL)
	AND ([WebRequestSecurityToken] = @WebRequestSecurityToken OR @WebRequestSecurityToken IS NULL)
	AND ([WebRequestAPIURL] = @WebRequestApiurl OR @WebRequestApiurl IS NULL)
	AND ([WebRequestMethod] = @WebRequestMethod OR @WebRequestMethod IS NULL)
	AND ([WebRequestContentType] = @WebRequestContentType OR @WebRequestContentType IS NULL)
	AND ([UserName] = @UserName OR @UserName IS NULL)
	AND ([Password] = @Password OR @Password IS NULL)
	AND ([BridgeTypeID] = @BridgeTypeId OR @BridgeTypeId IS NULL)
	AND ([DBConnectionString] = @DbConnectionString OR @DbConnectionString IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [IPAddress]
	, [WebRequestSecurityToken]
	, [WebRequestAPIURL]
	, [WebRequestMethod]
	, [WebRequestContentType]
	, [UserName]
	, [Password]
	, [BridgeTypeID]
	, [DBConnectionString]
    FROM
	[dbo].[Bridge]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([IPAddress] = @IpAddress AND @IpAddress is not null)
	OR ([WebRequestSecurityToken] = @WebRequestSecurityToken AND @WebRequestSecurityToken is not null)
	OR ([WebRequestAPIURL] = @WebRequestApiurl AND @WebRequestApiurl is not null)
	OR ([WebRequestMethod] = @WebRequestMethod AND @WebRequestMethod is not null)
	OR ([WebRequestContentType] = @WebRequestContentType AND @WebRequestContentType is not null)
	OR ([UserName] = @UserName AND @UserName is not null)
	OR ([Password] = @Password AND @Password is not null)
	OR ([BridgeTypeID] = @BridgeTypeId AND @BridgeTypeId is not null)
	OR ([DBConnectionString] = @DbConnectionString AND @DbConnectionString is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BillableLegs table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_Get_List

AS


				
				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BillableLegs table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ConferenceID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [Moderator]'
				SET @SQL = @SQL + ', [ExternalCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [StartTime]'
				SET @SQL = @SQL + ', [EndTime]'
				SET @SQL = @SQL + ', [ElapsedTime]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [DNIS]'
				SET @SQL = @SQL + ', [DialNumber]'
				SET @SQL = @SQL + ', [ANI]'
				SET @SQL = @SQL + ', [ParticipantName]'
				SET @SQL = @SQL + ', [Destination]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [ConnectProductRateID]'
				SET @SQL = @SQL + ', [BridgeProductRateID]'
				SET @SQL = @SQL + ', [LDProductRateID]'
				SET @SQL = @SQL + ', [ProductRateTaxableValue]'
				SET @SQL = @SQL + ', [CustomerTaxableValue]'
				SET @SQL = @SQL + ', [WSTaxableValue]'
				SET @SQL = @SQL + ', [RetailConnectCharge]'
				SET @SQL = @SQL + ', [RetailBridgeRate]'
				SET @SQL = @SQL + ', [RetailLDRate]'
				SET @SQL = @SQL + ', [RetailCurrency]'
				SET @SQL = @SQL + ', [RetailBillingInterval]'
				SET @SQL = @SQL + ', [RetailTotalConnectCharge]'
				SET @SQL = @SQL + ', [RetailTotalBridge]'
				SET @SQL = @SQL + ', [RetailTotalLD]'
				SET @SQL = @SQL + ', [RetailTotal]'
				SET @SQL = @SQL + ', [RetailLocalTaxRate]'
				SET @SQL = @SQL + ', [RetailFederalTaxRate]'
				SET @SQL = @SQL + ', [RetailLocalTax]'
				SET @SQL = @SQL + ', [RetailFederalTax]'
				SET @SQL = @SQL + ', [RetailTotalTax]'
				SET @SQL = @SQL + ', [WSConnectCharge]'
				SET @SQL = @SQL + ', [WSBridgeRate]'
				SET @SQL = @SQL + ', [WSLDRate]'
				SET @SQL = @SQL + ', [WSCurrency]'
				SET @SQL = @SQL + ', [WSBillingInterval]'
				SET @SQL = @SQL + ', [WSTotalConnectCharge]'
				SET @SQL = @SQL + ', [WSTotalBridge]'
				SET @SQL = @SQL + ', [WSTotalLD]'
				SET @SQL = @SQL + ', [WSTotal]'
				SET @SQL = @SQL + ', [WSLocalTaxRate]'
				SET @SQL = @SQL + ', [WSFederalTaxRate]'
				SET @SQL = @SQL + ', [WSLocalTax]'
				SET @SQL = @SQL + ', [WSFederalTax]'
				SET @SQL = @SQL + ', [WSTotalTax]'
				SET @SQL = @SQL + ', [BillingStatus]'
				SET @SQL = @SQL + ', [BilledDate]'
				SET @SQL = @SQL + ', [ProcessedDate]'
				SET @SQL = @SQL + ', [RatedToZero]'
				SET @SQL = @SQL + ', [ProductName]'
				SET @SQL = @SQL + ', [ProductNameAlt]'
				SET @SQL = @SQL + ' FROM [dbo].[BillableLegs]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ConferenceID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [Moderator],'
				SET @SQL = @SQL + ' [ExternalCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [StartTime],'
				SET @SQL = @SQL + ' [EndTime],'
				SET @SQL = @SQL + ' [ElapsedTime],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [DNIS],'
				SET @SQL = @SQL + ' [DialNumber],'
				SET @SQL = @SQL + ' [ANI],'
				SET @SQL = @SQL + ' [ParticipantName],'
				SET @SQL = @SQL + ' [Destination],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [ConnectProductRateID],'
				SET @SQL = @SQL + ' [BridgeProductRateID],'
				SET @SQL = @SQL + ' [LDProductRateID],'
				SET @SQL = @SQL + ' [ProductRateTaxableValue],'
				SET @SQL = @SQL + ' [CustomerTaxableValue],'
				SET @SQL = @SQL + ' [WSTaxableValue],'
				SET @SQL = @SQL + ' [RetailConnectCharge],'
				SET @SQL = @SQL + ' [RetailBridgeRate],'
				SET @SQL = @SQL + ' [RetailLDRate],'
				SET @SQL = @SQL + ' [RetailCurrency],'
				SET @SQL = @SQL + ' [RetailBillingInterval],'
				SET @SQL = @SQL + ' [RetailTotalConnectCharge],'
				SET @SQL = @SQL + ' [RetailTotalBridge],'
				SET @SQL = @SQL + ' [RetailTotalLD],'
				SET @SQL = @SQL + ' [RetailTotal],'
				SET @SQL = @SQL + ' [RetailLocalTaxRate],'
				SET @SQL = @SQL + ' [RetailFederalTaxRate],'
				SET @SQL = @SQL + ' [RetailLocalTax],'
				SET @SQL = @SQL + ' [RetailFederalTax],'
				SET @SQL = @SQL + ' [RetailTotalTax],'
				SET @SQL = @SQL + ' [WSConnectCharge],'
				SET @SQL = @SQL + ' [WSBridgeRate],'
				SET @SQL = @SQL + ' [WSLDRate],'
				SET @SQL = @SQL + ' [WSCurrency],'
				SET @SQL = @SQL + ' [WSBillingInterval],'
				SET @SQL = @SQL + ' [WSTotalConnectCharge],'
				SET @SQL = @SQL + ' [WSTotalBridge],'
				SET @SQL = @SQL + ' [WSTotalLD],'
				SET @SQL = @SQL + ' [WSTotal],'
				SET @SQL = @SQL + ' [WSLocalTaxRate],'
				SET @SQL = @SQL + ' [WSFederalTaxRate],'
				SET @SQL = @SQL + ' [WSLocalTax],'
				SET @SQL = @SQL + ' [WSFederalTax],'
				SET @SQL = @SQL + ' [WSTotalTax],'
				SET @SQL = @SQL + ' [BillingStatus],'
				SET @SQL = @SQL + ' [BilledDate],'
				SET @SQL = @SQL + ' [ProcessedDate],'
				SET @SQL = @SQL + ' [RatedToZero],'
				SET @SQL = @SQL + ' [ProductName],'
				SET @SQL = @SQL + ' [ProductNameAlt]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BillableLegs]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BillableLegs table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_Insert
(

	@Id uniqueidentifier   ,

	@ConferenceId varchar (50)  ,

	@ModeratorId int   ,

	@WholesalerId varchar (10)  ,

	@ModeratorCode varchar (10)  ,

	@PassCode varchar (10)  ,

	@ModeratorName varchar (50)  ,

	@Moderator int   ,

	@ExternalCustomerNumber varchar (100)  ,

	@ExternalModeratorNumber varchar (100)  ,

	@ReferenceNumber varchar (255)  ,

	@StartTime datetime   ,

	@EndTime datetime   ,

	@ElapsedTime int   ,

	@BridgeId smallint   ,

	@UniqueConferenceId varchar (40)  ,

	@AuxiliaryConferenceId varchar (40)  ,

	@Dnis varchar (50)  ,

	@DialNumber varchar (50)  ,

	@Ani varchar (36)  ,

	@ParticipantName varchar (50)  ,

	@Destination varchar (50)  ,

	@AccessTypeId int   ,

	@ConnectProductRateId int   ,

	@BridgeProductRateId int   ,

	@LdProductRateId int   ,

	@ProductRateTaxableValue int   ,

	@CustomerTaxableValue int   ,

	@WsTaxableValue int   ,

	@RetailConnectCharge decimal (18, 2)  ,

	@RetailBridgeRate decimal (9, 5)  ,

	@RetailLdRate decimal (9, 5)  ,

	@RetailCurrency char (3)  ,

	@RetailBillingInterval int   ,

	@RetailTotalConnectCharge decimal (18, 2)  ,

	@RetailTotalBridge decimal (18, 2)  ,

	@RetailTotalLd decimal (18, 2)  ,

	@RetailTotal decimal (18, 2)  ,

	@RetailLocalTaxRate decimal (9, 5)  ,

	@RetailFederalTaxRate decimal (9, 5)  ,

	@RetailLocalTax decimal (18, 7)  ,

	@RetailFederalTax decimal (18, 7)  ,

	@RetailTotalTax decimal (18, 7)  ,

	@WsConnectCharge decimal (18, 2)  ,

	@WsBridgeRate decimal (9, 5)  ,

	@WsldRate decimal (9, 5)  ,

	@WsCurrency char (3)  ,

	@WsBillingInterval int   ,

	@WsTotalConnectCharge decimal (18, 2)  ,

	@WsTotalBridge decimal (18, 2)  ,

	@WsTotalLd decimal (18, 2)  ,

	@WsTotal decimal (18, 2)  ,

	@WsLocalTaxRate decimal (9, 5)  ,

	@WsFederalTaxRate decimal (9, 5)  ,

	@WsLocalTax decimal (18, 7)  ,

	@WsFederalTax decimal (18, 7)  ,

	@WsTotalTax decimal (18, 7)  ,

	@BillingStatus smallint   ,

	@BilledDate datetime   ,

	@ProcessedDate datetime   ,

	@RatedToZero bit   ,

	@ProductName varchar (100)  ,

	@ProductNameAlt nvarchar (100)  
)
AS


					
				INSERT INTO [dbo].[BillableLegs]
					(
					[ID]
					,[ConferenceID]
					,[ModeratorID]
					,[WholesalerID]
					,[ModeratorCode]
					,[PassCode]
					,[ModeratorName]
					,[Moderator]
					,[ExternalCustomerNumber]
					,[ExternalModeratorNumber]
					,[ReferenceNumber]
					,[StartTime]
					,[EndTime]
					,[ElapsedTime]
					,[BridgeID]
					,[UniqueConferenceID]
					,[AuxiliaryConferenceID]
					,[DNIS]
					,[DialNumber]
					,[ANI]
					,[ParticipantName]
					,[Destination]
					,[AccessTypeID]
					,[ConnectProductRateID]
					,[BridgeProductRateID]
					,[LDProductRateID]
					,[ProductRateTaxableValue]
					,[CustomerTaxableValue]
					,[WSTaxableValue]
					,[RetailConnectCharge]
					,[RetailBridgeRate]
					,[RetailLDRate]
					,[RetailCurrency]
					,[RetailBillingInterval]
					,[RetailTotalConnectCharge]
					,[RetailTotalBridge]
					,[RetailTotalLD]
					,[RetailTotal]
					,[RetailLocalTaxRate]
					,[RetailFederalTaxRate]
					,[RetailLocalTax]
					,[RetailFederalTax]
					,[RetailTotalTax]
					,[WSConnectCharge]
					,[WSBridgeRate]
					,[WSLDRate]
					,[WSCurrency]
					,[WSBillingInterval]
					,[WSTotalConnectCharge]
					,[WSTotalBridge]
					,[WSTotalLD]
					,[WSTotal]
					,[WSLocalTaxRate]
					,[WSFederalTaxRate]
					,[WSLocalTax]
					,[WSFederalTax]
					,[WSTotalTax]
					,[BillingStatus]
					,[BilledDate]
					,[ProcessedDate]
					,[RatedToZero]
					,[ProductName]
					,[ProductNameAlt]
					)
				VALUES
					(
					@Id
					,@ConferenceId
					,@ModeratorId
					,@WholesalerId
					,@ModeratorCode
					,@PassCode
					,@ModeratorName
					,@Moderator
					,@ExternalCustomerNumber
					,@ExternalModeratorNumber
					,@ReferenceNumber
					,@StartTime
					,@EndTime
					,@ElapsedTime
					,@BridgeId
					,@UniqueConferenceId
					,@AuxiliaryConferenceId
					,@Dnis
					,@DialNumber
					,@Ani
					,@ParticipantName
					,@Destination
					,@AccessTypeId
					,@ConnectProductRateId
					,@BridgeProductRateId
					,@LdProductRateId
					,@ProductRateTaxableValue
					,@CustomerTaxableValue
					,@WsTaxableValue
					,@RetailConnectCharge
					,@RetailBridgeRate
					,@RetailLdRate
					,@RetailCurrency
					,@RetailBillingInterval
					,@RetailTotalConnectCharge
					,@RetailTotalBridge
					,@RetailTotalLd
					,@RetailTotal
					,@RetailLocalTaxRate
					,@RetailFederalTaxRate
					,@RetailLocalTax
					,@RetailFederalTax
					,@RetailTotalTax
					,@WsConnectCharge
					,@WsBridgeRate
					,@WsldRate
					,@WsCurrency
					,@WsBillingInterval
					,@WsTotalConnectCharge
					,@WsTotalBridge
					,@WsTotalLd
					,@WsTotal
					,@WsLocalTaxRate
					,@WsFederalTaxRate
					,@WsLocalTax
					,@WsFederalTax
					,@WsTotalTax
					,@BillingStatus
					,@BilledDate
					,@ProcessedDate
					,@RatedToZero
					,@ProductName
					,@ProductNameAlt
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BillableLegs table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_Update
(

	@Id uniqueidentifier   ,

	@OriginalId uniqueidentifier   ,

	@ConferenceId varchar (50)  ,

	@ModeratorId int   ,

	@WholesalerId varchar (10)  ,

	@ModeratorCode varchar (10)  ,

	@PassCode varchar (10)  ,

	@ModeratorName varchar (50)  ,

	@Moderator int   ,

	@ExternalCustomerNumber varchar (100)  ,

	@ExternalModeratorNumber varchar (100)  ,

	@ReferenceNumber varchar (255)  ,

	@StartTime datetime   ,

	@EndTime datetime   ,

	@ElapsedTime int   ,

	@BridgeId smallint   ,

	@UniqueConferenceId varchar (40)  ,

	@AuxiliaryConferenceId varchar (40)  ,

	@Dnis varchar (50)  ,

	@DialNumber varchar (50)  ,

	@Ani varchar (36)  ,

	@ParticipantName varchar (50)  ,

	@Destination varchar (50)  ,

	@AccessTypeId int   ,

	@ConnectProductRateId int   ,

	@BridgeProductRateId int   ,

	@LdProductRateId int   ,

	@ProductRateTaxableValue int   ,

	@CustomerTaxableValue int   ,

	@WsTaxableValue int   ,

	@RetailConnectCharge decimal (18, 2)  ,

	@RetailBridgeRate decimal (9, 5)  ,

	@RetailLdRate decimal (9, 5)  ,

	@RetailCurrency char (3)  ,

	@RetailBillingInterval int   ,

	@RetailTotalConnectCharge decimal (18, 2)  ,

	@RetailTotalBridge decimal (18, 2)  ,

	@RetailTotalLd decimal (18, 2)  ,

	@RetailTotal decimal (18, 2)  ,

	@RetailLocalTaxRate decimal (9, 5)  ,

	@RetailFederalTaxRate decimal (9, 5)  ,

	@RetailLocalTax decimal (18, 7)  ,

	@RetailFederalTax decimal (18, 7)  ,

	@RetailTotalTax decimal (18, 7)  ,

	@WsConnectCharge decimal (18, 2)  ,

	@WsBridgeRate decimal (9, 5)  ,

	@WsldRate decimal (9, 5)  ,

	@WsCurrency char (3)  ,

	@WsBillingInterval int   ,

	@WsTotalConnectCharge decimal (18, 2)  ,

	@WsTotalBridge decimal (18, 2)  ,

	@WsTotalLd decimal (18, 2)  ,

	@WsTotal decimal (18, 2)  ,

	@WsLocalTaxRate decimal (9, 5)  ,

	@WsFederalTaxRate decimal (9, 5)  ,

	@WsLocalTax decimal (18, 7)  ,

	@WsFederalTax decimal (18, 7)  ,

	@WsTotalTax decimal (18, 7)  ,

	@BillingStatus smallint   ,

	@BilledDate datetime   ,

	@ProcessedDate datetime   ,

	@RatedToZero bit   ,

	@ProductName varchar (100)  ,

	@ProductNameAlt nvarchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BillableLegs]
				SET
					[ID] = @Id
					,[ConferenceID] = @ConferenceId
					,[ModeratorID] = @ModeratorId
					,[WholesalerID] = @WholesalerId
					,[ModeratorCode] = @ModeratorCode
					,[PassCode] = @PassCode
					,[ModeratorName] = @ModeratorName
					,[Moderator] = @Moderator
					,[ExternalCustomerNumber] = @ExternalCustomerNumber
					,[ExternalModeratorNumber] = @ExternalModeratorNumber
					,[ReferenceNumber] = @ReferenceNumber
					,[StartTime] = @StartTime
					,[EndTime] = @EndTime
					,[ElapsedTime] = @ElapsedTime
					,[BridgeID] = @BridgeId
					,[UniqueConferenceID] = @UniqueConferenceId
					,[AuxiliaryConferenceID] = @AuxiliaryConferenceId
					,[DNIS] = @Dnis
					,[DialNumber] = @DialNumber
					,[ANI] = @Ani
					,[ParticipantName] = @ParticipantName
					,[Destination] = @Destination
					,[AccessTypeID] = @AccessTypeId
					,[ConnectProductRateID] = @ConnectProductRateId
					,[BridgeProductRateID] = @BridgeProductRateId
					,[LDProductRateID] = @LdProductRateId
					,[ProductRateTaxableValue] = @ProductRateTaxableValue
					,[CustomerTaxableValue] = @CustomerTaxableValue
					,[WSTaxableValue] = @WsTaxableValue
					,[RetailConnectCharge] = @RetailConnectCharge
					,[RetailBridgeRate] = @RetailBridgeRate
					,[RetailLDRate] = @RetailLdRate
					,[RetailCurrency] = @RetailCurrency
					,[RetailBillingInterval] = @RetailBillingInterval
					,[RetailTotalConnectCharge] = @RetailTotalConnectCharge
					,[RetailTotalBridge] = @RetailTotalBridge
					,[RetailTotalLD] = @RetailTotalLd
					,[RetailTotal] = @RetailTotal
					,[RetailLocalTaxRate] = @RetailLocalTaxRate
					,[RetailFederalTaxRate] = @RetailFederalTaxRate
					,[RetailLocalTax] = @RetailLocalTax
					,[RetailFederalTax] = @RetailFederalTax
					,[RetailTotalTax] = @RetailTotalTax
					,[WSConnectCharge] = @WsConnectCharge
					,[WSBridgeRate] = @WsBridgeRate
					,[WSLDRate] = @WsldRate
					,[WSCurrency] = @WsCurrency
					,[WSBillingInterval] = @WsBillingInterval
					,[WSTotalConnectCharge] = @WsTotalConnectCharge
					,[WSTotalBridge] = @WsTotalBridge
					,[WSTotalLD] = @WsTotalLd
					,[WSTotal] = @WsTotal
					,[WSLocalTaxRate] = @WsLocalTaxRate
					,[WSFederalTaxRate] = @WsFederalTaxRate
					,[WSLocalTax] = @WsLocalTax
					,[WSFederalTax] = @WsFederalTax
					,[WSTotalTax] = @WsTotalTax
					,[BillingStatus] = @BillingStatus
					,[BilledDate] = @BilledDate
					,[ProcessedDate] = @ProcessedDate
					,[RatedToZero] = @RatedToZero
					,[ProductName] = @ProductName
					,[ProductNameAlt] = @ProductNameAlt
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BillableLegs table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_Delete
(

	@Id uniqueidentifier   
)
AS


				DELETE FROM [dbo].[BillableLegs] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetById
(

	@Id uniqueidentifier   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetByConferenceIdBridgeIdWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetByConferenceIdBridgeIdWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetByConferenceIdBridgeIdWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetByConferenceIdBridgeIdWholesalerId
(

	@ConferenceId varchar (50)  ,

	@BridgeId smallint   ,

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[ConferenceID] = @ConferenceId
					AND [BridgeID] = @BridgeId
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetByWholesalerIdModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetByWholesalerIdModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetByWholesalerIdModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetByWholesalerIdModeratorId
(

	@WholesalerId varchar (10)  ,

	@ModeratorId int   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[ModeratorID] = @ModeratorId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetByWholesalerIdStartTimeEndTime procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetByWholesalerIdStartTimeEndTime') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetByWholesalerIdStartTimeEndTime
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetByWholesalerIdStartTimeEndTime
(

	@WholesalerId varchar (10)  ,

	@StartTime datetime   ,

	@EndTime datetime   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [StartTime] = @StartTime
					AND [EndTime] = @EndTime
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetByReferenceNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetByReferenceNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetByReferenceNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetByReferenceNumber
(

	@ReferenceNumber varchar (255)  
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[ReferenceNumber] = @ReferenceNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_GetByBilledDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_GetByBilledDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_GetByBilledDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BillableLegs table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_GetByBilledDate
(

	@BilledDate datetime   
)
AS


				SELECT
					[ID],
					[ConferenceID],
					[ModeratorID],
					[WholesalerID],
					[ModeratorCode],
					[PassCode],
					[ModeratorName],
					[Moderator],
					[ExternalCustomerNumber],
					[ExternalModeratorNumber],
					[ReferenceNumber],
					[StartTime],
					[EndTime],
					[ElapsedTime],
					[BridgeID],
					[UniqueConferenceID],
					[AuxiliaryConferenceID],
					[DNIS],
					[DialNumber],
					[ANI],
					[ParticipantName],
					[Destination],
					[AccessTypeID],
					[ConnectProductRateID],
					[BridgeProductRateID],
					[LDProductRateID],
					[ProductRateTaxableValue],
					[CustomerTaxableValue],
					[WSTaxableValue],
					[RetailConnectCharge],
					[RetailBridgeRate],
					[RetailLDRate],
					[RetailCurrency],
					[RetailBillingInterval],
					[RetailTotalConnectCharge],
					[RetailTotalBridge],
					[RetailTotalLD],
					[RetailTotal],
					[RetailLocalTaxRate],
					[RetailFederalTaxRate],
					[RetailLocalTax],
					[RetailFederalTax],
					[RetailTotalTax],
					[WSConnectCharge],
					[WSBridgeRate],
					[WSLDRate],
					[WSCurrency],
					[WSBillingInterval],
					[WSTotalConnectCharge],
					[WSTotalBridge],
					[WSTotalLD],
					[WSTotal],
					[WSLocalTaxRate],
					[WSFederalTaxRate],
					[WSLocalTax],
					[WSFederalTax],
					[WSTotalTax],
					[BillingStatus],
					[BilledDate],
					[ProcessedDate],
					[RatedToZero],
					[ProductName],
					[ProductNameAlt]
				FROM
					[dbo].[BillableLegs]
				WHERE
					[BilledDate] = @BilledDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBillableLegs_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBillableLegs_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBillableLegs_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BillableLegs table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBillableLegs_Find
(

	@SearchUsingOR bit   = null ,

	@Id uniqueidentifier   = null ,

	@ConferenceId varchar (50)  = null ,

	@ModeratorId int   = null ,

	@WholesalerId varchar (10)  = null ,

	@ModeratorCode varchar (10)  = null ,

	@PassCode varchar (10)  = null ,

	@ModeratorName varchar (50)  = null ,

	@Moderator int   = null ,

	@ExternalCustomerNumber varchar (100)  = null ,

	@ExternalModeratorNumber varchar (100)  = null ,

	@ReferenceNumber varchar (255)  = null ,

	@StartTime datetime   = null ,

	@EndTime datetime   = null ,

	@ElapsedTime int   = null ,

	@BridgeId smallint   = null ,

	@UniqueConferenceId varchar (40)  = null ,

	@AuxiliaryConferenceId varchar (40)  = null ,

	@Dnis varchar (50)  = null ,

	@DialNumber varchar (50)  = null ,

	@Ani varchar (36)  = null ,

	@ParticipantName varchar (50)  = null ,

	@Destination varchar (50)  = null ,

	@AccessTypeId int   = null ,

	@ConnectProductRateId int   = null ,

	@BridgeProductRateId int   = null ,

	@LdProductRateId int   = null ,

	@ProductRateTaxableValue int   = null ,

	@CustomerTaxableValue int   = null ,

	@WsTaxableValue int   = null ,

	@RetailConnectCharge decimal (18, 2)  = null ,

	@RetailBridgeRate decimal (9, 5)  = null ,

	@RetailLdRate decimal (9, 5)  = null ,

	@RetailCurrency char (3)  = null ,

	@RetailBillingInterval int   = null ,

	@RetailTotalConnectCharge decimal (18, 2)  = null ,

	@RetailTotalBridge decimal (18, 2)  = null ,

	@RetailTotalLd decimal (18, 2)  = null ,

	@RetailTotal decimal (18, 2)  = null ,

	@RetailLocalTaxRate decimal (9, 5)  = null ,

	@RetailFederalTaxRate decimal (9, 5)  = null ,

	@RetailLocalTax decimal (18, 7)  = null ,

	@RetailFederalTax decimal (18, 7)  = null ,

	@RetailTotalTax decimal (18, 7)  = null ,

	@WsConnectCharge decimal (18, 2)  = null ,

	@WsBridgeRate decimal (9, 5)  = null ,

	@WsldRate decimal (9, 5)  = null ,

	@WsCurrency char (3)  = null ,

	@WsBillingInterval int   = null ,

	@WsTotalConnectCharge decimal (18, 2)  = null ,

	@WsTotalBridge decimal (18, 2)  = null ,

	@WsTotalLd decimal (18, 2)  = null ,

	@WsTotal decimal (18, 2)  = null ,

	@WsLocalTaxRate decimal (9, 5)  = null ,

	@WsFederalTaxRate decimal (9, 5)  = null ,

	@WsLocalTax decimal (18, 7)  = null ,

	@WsFederalTax decimal (18, 7)  = null ,

	@WsTotalTax decimal (18, 7)  = null ,

	@BillingStatus smallint   = null ,

	@BilledDate datetime   = null ,

	@ProcessedDate datetime   = null ,

	@RatedToZero bit   = null ,

	@ProductName varchar (100)  = null ,

	@ProductNameAlt nvarchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ConferenceID]
	, [ModeratorID]
	, [WholesalerID]
	, [ModeratorCode]
	, [PassCode]
	, [ModeratorName]
	, [Moderator]
	, [ExternalCustomerNumber]
	, [ExternalModeratorNumber]
	, [ReferenceNumber]
	, [StartTime]
	, [EndTime]
	, [ElapsedTime]
	, [BridgeID]
	, [UniqueConferenceID]
	, [AuxiliaryConferenceID]
	, [DNIS]
	, [DialNumber]
	, [ANI]
	, [ParticipantName]
	, [Destination]
	, [AccessTypeID]
	, [ConnectProductRateID]
	, [BridgeProductRateID]
	, [LDProductRateID]
	, [ProductRateTaxableValue]
	, [CustomerTaxableValue]
	, [WSTaxableValue]
	, [RetailConnectCharge]
	, [RetailBridgeRate]
	, [RetailLDRate]
	, [RetailCurrency]
	, [RetailBillingInterval]
	, [RetailTotalConnectCharge]
	, [RetailTotalBridge]
	, [RetailTotalLD]
	, [RetailTotal]
	, [RetailLocalTaxRate]
	, [RetailFederalTaxRate]
	, [RetailLocalTax]
	, [RetailFederalTax]
	, [RetailTotalTax]
	, [WSConnectCharge]
	, [WSBridgeRate]
	, [WSLDRate]
	, [WSCurrency]
	, [WSBillingInterval]
	, [WSTotalConnectCharge]
	, [WSTotalBridge]
	, [WSTotalLD]
	, [WSTotal]
	, [WSLocalTaxRate]
	, [WSFederalTaxRate]
	, [WSLocalTax]
	, [WSFederalTax]
	, [WSTotalTax]
	, [BillingStatus]
	, [BilledDate]
	, [ProcessedDate]
	, [RatedToZero]
	, [ProductName]
	, [ProductNameAlt]
    FROM
	[dbo].[BillableLegs]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ConferenceID] = @ConferenceId OR @ConferenceId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([ModeratorCode] = @ModeratorCode OR @ModeratorCode IS NULL)
	AND ([PassCode] = @PassCode OR @PassCode IS NULL)
	AND ([ModeratorName] = @ModeratorName OR @ModeratorName IS NULL)
	AND ([Moderator] = @Moderator OR @Moderator IS NULL)
	AND ([ExternalCustomerNumber] = @ExternalCustomerNumber OR @ExternalCustomerNumber IS NULL)
	AND ([ExternalModeratorNumber] = @ExternalModeratorNumber OR @ExternalModeratorNumber IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([StartTime] = @StartTime OR @StartTime IS NULL)
	AND ([EndTime] = @EndTime OR @EndTime IS NULL)
	AND ([ElapsedTime] = @ElapsedTime OR @ElapsedTime IS NULL)
	AND ([BridgeID] = @BridgeId OR @BridgeId IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([AuxiliaryConferenceID] = @AuxiliaryConferenceId OR @AuxiliaryConferenceId IS NULL)
	AND ([DNIS] = @Dnis OR @Dnis IS NULL)
	AND ([DialNumber] = @DialNumber OR @DialNumber IS NULL)
	AND ([ANI] = @Ani OR @Ani IS NULL)
	AND ([ParticipantName] = @ParticipantName OR @ParticipantName IS NULL)
	AND ([Destination] = @Destination OR @Destination IS NULL)
	AND ([AccessTypeID] = @AccessTypeId OR @AccessTypeId IS NULL)
	AND ([ConnectProductRateID] = @ConnectProductRateId OR @ConnectProductRateId IS NULL)
	AND ([BridgeProductRateID] = @BridgeProductRateId OR @BridgeProductRateId IS NULL)
	AND ([LDProductRateID] = @LdProductRateId OR @LdProductRateId IS NULL)
	AND ([ProductRateTaxableValue] = @ProductRateTaxableValue OR @ProductRateTaxableValue IS NULL)
	AND ([CustomerTaxableValue] = @CustomerTaxableValue OR @CustomerTaxableValue IS NULL)
	AND ([WSTaxableValue] = @WsTaxableValue OR @WsTaxableValue IS NULL)
	AND ([RetailConnectCharge] = @RetailConnectCharge OR @RetailConnectCharge IS NULL)
	AND ([RetailBridgeRate] = @RetailBridgeRate OR @RetailBridgeRate IS NULL)
	AND ([RetailLDRate] = @RetailLdRate OR @RetailLdRate IS NULL)
	AND ([RetailCurrency] = @RetailCurrency OR @RetailCurrency IS NULL)
	AND ([RetailBillingInterval] = @RetailBillingInterval OR @RetailBillingInterval IS NULL)
	AND ([RetailTotalConnectCharge] = @RetailTotalConnectCharge OR @RetailTotalConnectCharge IS NULL)
	AND ([RetailTotalBridge] = @RetailTotalBridge OR @RetailTotalBridge IS NULL)
	AND ([RetailTotalLD] = @RetailTotalLd OR @RetailTotalLd IS NULL)
	AND ([RetailTotal] = @RetailTotal OR @RetailTotal IS NULL)
	AND ([RetailLocalTaxRate] = @RetailLocalTaxRate OR @RetailLocalTaxRate IS NULL)
	AND ([RetailFederalTaxRate] = @RetailFederalTaxRate OR @RetailFederalTaxRate IS NULL)
	AND ([RetailLocalTax] = @RetailLocalTax OR @RetailLocalTax IS NULL)
	AND ([RetailFederalTax] = @RetailFederalTax OR @RetailFederalTax IS NULL)
	AND ([RetailTotalTax] = @RetailTotalTax OR @RetailTotalTax IS NULL)
	AND ([WSConnectCharge] = @WsConnectCharge OR @WsConnectCharge IS NULL)
	AND ([WSBridgeRate] = @WsBridgeRate OR @WsBridgeRate IS NULL)
	AND ([WSLDRate] = @WsldRate OR @WsldRate IS NULL)
	AND ([WSCurrency] = @WsCurrency OR @WsCurrency IS NULL)
	AND ([WSBillingInterval] = @WsBillingInterval OR @WsBillingInterval IS NULL)
	AND ([WSTotalConnectCharge] = @WsTotalConnectCharge OR @WsTotalConnectCharge IS NULL)
	AND ([WSTotalBridge] = @WsTotalBridge OR @WsTotalBridge IS NULL)
	AND ([WSTotalLD] = @WsTotalLd OR @WsTotalLd IS NULL)
	AND ([WSTotal] = @WsTotal OR @WsTotal IS NULL)
	AND ([WSLocalTaxRate] = @WsLocalTaxRate OR @WsLocalTaxRate IS NULL)
	AND ([WSFederalTaxRate] = @WsFederalTaxRate OR @WsFederalTaxRate IS NULL)
	AND ([WSLocalTax] = @WsLocalTax OR @WsLocalTax IS NULL)
	AND ([WSFederalTax] = @WsFederalTax OR @WsFederalTax IS NULL)
	AND ([WSTotalTax] = @WsTotalTax OR @WsTotalTax IS NULL)
	AND ([BillingStatus] = @BillingStatus OR @BillingStatus IS NULL)
	AND ([BilledDate] = @BilledDate OR @BilledDate IS NULL)
	AND ([ProcessedDate] = @ProcessedDate OR @ProcessedDate IS NULL)
	AND ([RatedToZero] = @RatedToZero OR @RatedToZero IS NULL)
	AND ([ProductName] = @ProductName OR @ProductName IS NULL)
	AND ([ProductNameAlt] = @ProductNameAlt OR @ProductNameAlt IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ConferenceID]
	, [ModeratorID]
	, [WholesalerID]
	, [ModeratorCode]
	, [PassCode]
	, [ModeratorName]
	, [Moderator]
	, [ExternalCustomerNumber]
	, [ExternalModeratorNumber]
	, [ReferenceNumber]
	, [StartTime]
	, [EndTime]
	, [ElapsedTime]
	, [BridgeID]
	, [UniqueConferenceID]
	, [AuxiliaryConferenceID]
	, [DNIS]
	, [DialNumber]
	, [ANI]
	, [ParticipantName]
	, [Destination]
	, [AccessTypeID]
	, [ConnectProductRateID]
	, [BridgeProductRateID]
	, [LDProductRateID]
	, [ProductRateTaxableValue]
	, [CustomerTaxableValue]
	, [WSTaxableValue]
	, [RetailConnectCharge]
	, [RetailBridgeRate]
	, [RetailLDRate]
	, [RetailCurrency]
	, [RetailBillingInterval]
	, [RetailTotalConnectCharge]
	, [RetailTotalBridge]
	, [RetailTotalLD]
	, [RetailTotal]
	, [RetailLocalTaxRate]
	, [RetailFederalTaxRate]
	, [RetailLocalTax]
	, [RetailFederalTax]
	, [RetailTotalTax]
	, [WSConnectCharge]
	, [WSBridgeRate]
	, [WSLDRate]
	, [WSCurrency]
	, [WSBillingInterval]
	, [WSTotalConnectCharge]
	, [WSTotalBridge]
	, [WSTotalLD]
	, [WSTotal]
	, [WSLocalTaxRate]
	, [WSFederalTaxRate]
	, [WSLocalTax]
	, [WSFederalTax]
	, [WSTotalTax]
	, [BillingStatus]
	, [BilledDate]
	, [ProcessedDate]
	, [RatedToZero]
	, [ProductName]
	, [ProductNameAlt]
    FROM
	[dbo].[BillableLegs]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ConferenceID] = @ConferenceId AND @ConferenceId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([ModeratorCode] = @ModeratorCode AND @ModeratorCode is not null)
	OR ([PassCode] = @PassCode AND @PassCode is not null)
	OR ([ModeratorName] = @ModeratorName AND @ModeratorName is not null)
	OR ([Moderator] = @Moderator AND @Moderator is not null)
	OR ([ExternalCustomerNumber] = @ExternalCustomerNumber AND @ExternalCustomerNumber is not null)
	OR ([ExternalModeratorNumber] = @ExternalModeratorNumber AND @ExternalModeratorNumber is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([StartTime] = @StartTime AND @StartTime is not null)
	OR ([EndTime] = @EndTime AND @EndTime is not null)
	OR ([ElapsedTime] = @ElapsedTime AND @ElapsedTime is not null)
	OR ([BridgeID] = @BridgeId AND @BridgeId is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([AuxiliaryConferenceID] = @AuxiliaryConferenceId AND @AuxiliaryConferenceId is not null)
	OR ([DNIS] = @Dnis AND @Dnis is not null)
	OR ([DialNumber] = @DialNumber AND @DialNumber is not null)
	OR ([ANI] = @Ani AND @Ani is not null)
	OR ([ParticipantName] = @ParticipantName AND @ParticipantName is not null)
	OR ([Destination] = @Destination AND @Destination is not null)
	OR ([AccessTypeID] = @AccessTypeId AND @AccessTypeId is not null)
	OR ([ConnectProductRateID] = @ConnectProductRateId AND @ConnectProductRateId is not null)
	OR ([BridgeProductRateID] = @BridgeProductRateId AND @BridgeProductRateId is not null)
	OR ([LDProductRateID] = @LdProductRateId AND @LdProductRateId is not null)
	OR ([ProductRateTaxableValue] = @ProductRateTaxableValue AND @ProductRateTaxableValue is not null)
	OR ([CustomerTaxableValue] = @CustomerTaxableValue AND @CustomerTaxableValue is not null)
	OR ([WSTaxableValue] = @WsTaxableValue AND @WsTaxableValue is not null)
	OR ([RetailConnectCharge] = @RetailConnectCharge AND @RetailConnectCharge is not null)
	OR ([RetailBridgeRate] = @RetailBridgeRate AND @RetailBridgeRate is not null)
	OR ([RetailLDRate] = @RetailLdRate AND @RetailLdRate is not null)
	OR ([RetailCurrency] = @RetailCurrency AND @RetailCurrency is not null)
	OR ([RetailBillingInterval] = @RetailBillingInterval AND @RetailBillingInterval is not null)
	OR ([RetailTotalConnectCharge] = @RetailTotalConnectCharge AND @RetailTotalConnectCharge is not null)
	OR ([RetailTotalBridge] = @RetailTotalBridge AND @RetailTotalBridge is not null)
	OR ([RetailTotalLD] = @RetailTotalLd AND @RetailTotalLd is not null)
	OR ([RetailTotal] = @RetailTotal AND @RetailTotal is not null)
	OR ([RetailLocalTaxRate] = @RetailLocalTaxRate AND @RetailLocalTaxRate is not null)
	OR ([RetailFederalTaxRate] = @RetailFederalTaxRate AND @RetailFederalTaxRate is not null)
	OR ([RetailLocalTax] = @RetailLocalTax AND @RetailLocalTax is not null)
	OR ([RetailFederalTax] = @RetailFederalTax AND @RetailFederalTax is not null)
	OR ([RetailTotalTax] = @RetailTotalTax AND @RetailTotalTax is not null)
	OR ([WSConnectCharge] = @WsConnectCharge AND @WsConnectCharge is not null)
	OR ([WSBridgeRate] = @WsBridgeRate AND @WsBridgeRate is not null)
	OR ([WSLDRate] = @WsldRate AND @WsldRate is not null)
	OR ([WSCurrency] = @WsCurrency AND @WsCurrency is not null)
	OR ([WSBillingInterval] = @WsBillingInterval AND @WsBillingInterval is not null)
	OR ([WSTotalConnectCharge] = @WsTotalConnectCharge AND @WsTotalConnectCharge is not null)
	OR ([WSTotalBridge] = @WsTotalBridge AND @WsTotalBridge is not null)
	OR ([WSTotalLD] = @WsTotalLd AND @WsTotalLd is not null)
	OR ([WSTotal] = @WsTotal AND @WsTotal is not null)
	OR ([WSLocalTaxRate] = @WsLocalTaxRate AND @WsLocalTaxRate is not null)
	OR ([WSFederalTaxRate] = @WsFederalTaxRate AND @WsFederalTaxRate is not null)
	OR ([WSLocalTax] = @WsLocalTax AND @WsLocalTax is not null)
	OR ([WSFederalTax] = @WsFederalTax AND @WsFederalTax is not null)
	OR ([WSTotalTax] = @WsTotalTax AND @WsTotalTax is not null)
	OR ([BillingStatus] = @BillingStatus AND @BillingStatus is not null)
	OR ([BilledDate] = @BilledDate AND @BilledDate is not null)
	OR ([ProcessedDate] = @ProcessedDate AND @ProcessedDate is not null)
	OR ([RatedToZero] = @RatedToZero AND @RatedToZero is not null)
	OR ([ProductName] = @ProductName AND @ProductName is not null)
	OR ([ProductNameAlt] = @ProductNameAlt AND @ProductNameAlt is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Customer table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [ExternalCustomerNumber]'
				SET @SQL = @SQL + ', [PrimaryContactName]'
				SET @SQL = @SQL + ', [PrimaryContactPhoneNumber]'
				SET @SQL = @SQL + ', [PrimaryContactEmailAddress]'
				SET @SQL = @SQL + ', [PrimaryContactAddress1]'
				SET @SQL = @SQL + ', [PrimaryContactAddress2]'
				SET @SQL = @SQL + ', [PrimaryContactCity]'
				SET @SQL = @SQL + ', [PrimaryContactCountry]'
				SET @SQL = @SQL + ', [PrimaryContactRegion]'
				SET @SQL = @SQL + ', [PrimaryContactPostalCode]'
				SET @SQL = @SQL + ', [PrimaryContactFaxNumber]'
				SET @SQL = @SQL + ', [BillingContactName]'
				SET @SQL = @SQL + ', [BillingContactPhoneNumber]'
				SET @SQL = @SQL + ', [BillingContactEmailAddress]'
				SET @SQL = @SQL + ', [BillingContactAddress1]'
				SET @SQL = @SQL + ', [BillingContactAddress2]'
				SET @SQL = @SQL + ', [BillingContactCity]'
				SET @SQL = @SQL + ', [BillingContactCountry]'
				SET @SQL = @SQL + ', [BillingContactRegion]'
				SET @SQL = @SQL + ', [BillingContactPostalCode]'
				SET @SQL = @SQL + ', [BillingContactFaxNumber]'
				SET @SQL = @SQL + ', [WebsiteURL]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [VerticalID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ', [BillingPeriodCutoff]'
				SET @SQL = @SQL + ', [TaxableID]'
				SET @SQL = @SQL + ', [CreditCardNameOnCard]'
				SET @SQL = @SQL + ', [CreditCardNumber]'
				SET @SQL = @SQL + ', [CreditCardExp]'
				SET @SQL = @SQL + ', [CreditCardVerCode]'
				SET @SQL = @SQL + ', [CreditCardTypeName]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [UniqueCustomerID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [WebGroupID]'
				SET @SQL = @SQL + ', [AccountManagerID]'
				SET @SQL = @SQL + ' FROM [dbo].[Customer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [ExternalCustomerNumber],'
				SET @SQL = @SQL + ' [PrimaryContactName],'
				SET @SQL = @SQL + ' [PrimaryContactPhoneNumber],'
				SET @SQL = @SQL + ' [PrimaryContactEmailAddress],'
				SET @SQL = @SQL + ' [PrimaryContactAddress1],'
				SET @SQL = @SQL + ' [PrimaryContactAddress2],'
				SET @SQL = @SQL + ' [PrimaryContactCity],'
				SET @SQL = @SQL + ' [PrimaryContactCountry],'
				SET @SQL = @SQL + ' [PrimaryContactRegion],'
				SET @SQL = @SQL + ' [PrimaryContactPostalCode],'
				SET @SQL = @SQL + ' [PrimaryContactFaxNumber],'
				SET @SQL = @SQL + ' [BillingContactName],'
				SET @SQL = @SQL + ' [BillingContactPhoneNumber],'
				SET @SQL = @SQL + ' [BillingContactEmailAddress],'
				SET @SQL = @SQL + ' [BillingContactAddress1],'
				SET @SQL = @SQL + ' [BillingContactAddress2],'
				SET @SQL = @SQL + ' [BillingContactCity],'
				SET @SQL = @SQL + ' [BillingContactCountry],'
				SET @SQL = @SQL + ' [BillingContactRegion],'
				SET @SQL = @SQL + ' [BillingContactPostalCode],'
				SET @SQL = @SQL + ' [BillingContactFaxNumber],'
				SET @SQL = @SQL + ' [WebsiteURL],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [VerticalID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [CurrencyID],'
				SET @SQL = @SQL + ' [BillingPeriodCutoff],'
				SET @SQL = @SQL + ' [TaxableID],'
				SET @SQL = @SQL + ' [CreditCardNameOnCard],'
				SET @SQL = @SQL + ' [CreditCardNumber],'
				SET @SQL = @SQL + ' [CreditCardExp],'
				SET @SQL = @SQL + ' [CreditCardVerCode],'
				SET @SQL = @SQL + ' [CreditCardTypeName],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [UniqueCustomerID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [WebGroupID],'
				SET @SQL = @SQL + ' [AccountManagerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Customer]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Customer table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@PriCustomerNumber varchar (10)  ,

	@Description varchar (100)  ,

	@ExternalCustomerNumber varchar (100)  ,

	@PrimaryContactName varchar (50)  ,

	@PrimaryContactPhoneNumber varchar (30)  ,

	@PrimaryContactEmailAddress varchar (100)  ,

	@PrimaryContactAddress1 varchar (50)  ,

	@PrimaryContactAddress2 varchar (50)  ,

	@PrimaryContactCity varchar (50)  ,

	@PrimaryContactCountry varchar (3)  ,

	@PrimaryContactRegion varchar (3)  ,

	@PrimaryContactPostalCode varchar (20)  ,

	@PrimaryContactFaxNumber varchar (30)  ,

	@BillingContactName varchar (50)  ,

	@BillingContactPhoneNumber varchar (30)  ,

	@BillingContactEmailAddress varchar (100)  ,

	@BillingContactAddress1 varchar (50)  ,

	@BillingContactAddress2 varchar (50)  ,

	@BillingContactCity varchar (50)  ,

	@BillingContactCountry varchar (3)  ,

	@BillingContactRegion varchar (3)  ,

	@BillingContactPostalCode varchar (20)  ,

	@BillingContactFaxNumber varchar (30)  ,

	@WebsiteUrl varchar (100)  ,

	@SalesPersonId int   ,

	@VerticalId int   ,

	@CompanyId int   ,

	@CurrencyId char (3)  ,

	@BillingPeriodCutoff int   ,

	@TaxableId int   ,

	@CreditCardNameOnCard varchar (50)  ,

	@CreditCardNumber varchar (20)  ,

	@CreditCardExp varchar (4)  ,

	@CreditCardVerCode varchar (6)  ,

	@CreditCardTypeName varchar (50)  ,

	@CreatedDate datetime   ,

	@LastModified datetime   ,

	@UniqueCustomerId uniqueidentifier   ,

	@Enabled bit   ,

	@UserId int   ,

	@WebGroupId varchar (50)  ,

	@AccountManagerId int   
)
AS


					
				INSERT INTO [dbo].[Customer]
					(
					[WholesalerID]
					,[PriCustomerNumber]
					,[Description]
					,[ExternalCustomerNumber]
					,[PrimaryContactName]
					,[PrimaryContactPhoneNumber]
					,[PrimaryContactEmailAddress]
					,[PrimaryContactAddress1]
					,[PrimaryContactAddress2]
					,[PrimaryContactCity]
					,[PrimaryContactCountry]
					,[PrimaryContactRegion]
					,[PrimaryContactPostalCode]
					,[PrimaryContactFaxNumber]
					,[BillingContactName]
					,[BillingContactPhoneNumber]
					,[BillingContactEmailAddress]
					,[BillingContactAddress1]
					,[BillingContactAddress2]
					,[BillingContactCity]
					,[BillingContactCountry]
					,[BillingContactRegion]
					,[BillingContactPostalCode]
					,[BillingContactFaxNumber]
					,[WebsiteURL]
					,[SalesPersonID]
					,[VerticalID]
					,[CompanyID]
					,[CurrencyID]
					,[BillingPeriodCutoff]
					,[TaxableID]
					,[CreditCardNameOnCard]
					,[CreditCardNumber]
					,[CreditCardExp]
					,[CreditCardVerCode]
					,[CreditCardTypeName]
					,[CreatedDate]
					,[LastModified]
					,[UniqueCustomerID]
					,[Enabled]
					,[UserID]
					,[WebGroupID]
					,[AccountManagerID]
					)
				VALUES
					(
					@WholesalerId
					,@PriCustomerNumber
					,@Description
					,@ExternalCustomerNumber
					,@PrimaryContactName
					,@PrimaryContactPhoneNumber
					,@PrimaryContactEmailAddress
					,@PrimaryContactAddress1
					,@PrimaryContactAddress2
					,@PrimaryContactCity
					,@PrimaryContactCountry
					,@PrimaryContactRegion
					,@PrimaryContactPostalCode
					,@PrimaryContactFaxNumber
					,@BillingContactName
					,@BillingContactPhoneNumber
					,@BillingContactEmailAddress
					,@BillingContactAddress1
					,@BillingContactAddress2
					,@BillingContactCity
					,@BillingContactCountry
					,@BillingContactRegion
					,@BillingContactPostalCode
					,@BillingContactFaxNumber
					,@WebsiteUrl
					,@SalesPersonId
					,@VerticalId
					,@CompanyId
					,@CurrencyId
					,@BillingPeriodCutoff
					,@TaxableId
					,@CreditCardNameOnCard
					,@CreditCardNumber
					,@CreditCardExp
					,@CreditCardVerCode
					,@CreditCardTypeName
					,@CreatedDate
					,@LastModified
					,@UniqueCustomerId
					,@Enabled
					,@UserId
					,@WebGroupId
					,@AccountManagerId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Customer table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@PriCustomerNumber varchar (10)  ,

	@Description varchar (100)  ,

	@ExternalCustomerNumber varchar (100)  ,

	@PrimaryContactName varchar (50)  ,

	@PrimaryContactPhoneNumber varchar (30)  ,

	@PrimaryContactEmailAddress varchar (100)  ,

	@PrimaryContactAddress1 varchar (50)  ,

	@PrimaryContactAddress2 varchar (50)  ,

	@PrimaryContactCity varchar (50)  ,

	@PrimaryContactCountry varchar (3)  ,

	@PrimaryContactRegion varchar (3)  ,

	@PrimaryContactPostalCode varchar (20)  ,

	@PrimaryContactFaxNumber varchar (30)  ,

	@BillingContactName varchar (50)  ,

	@BillingContactPhoneNumber varchar (30)  ,

	@BillingContactEmailAddress varchar (100)  ,

	@BillingContactAddress1 varchar (50)  ,

	@BillingContactAddress2 varchar (50)  ,

	@BillingContactCity varchar (50)  ,

	@BillingContactCountry varchar (3)  ,

	@BillingContactRegion varchar (3)  ,

	@BillingContactPostalCode varchar (20)  ,

	@BillingContactFaxNumber varchar (30)  ,

	@WebsiteUrl varchar (100)  ,

	@SalesPersonId int   ,

	@VerticalId int   ,

	@CompanyId int   ,

	@CurrencyId char (3)  ,

	@BillingPeriodCutoff int   ,

	@TaxableId int   ,

	@CreditCardNameOnCard varchar (50)  ,

	@CreditCardNumber varchar (20)  ,

	@CreditCardExp varchar (4)  ,

	@CreditCardVerCode varchar (6)  ,

	@CreditCardTypeName varchar (50)  ,

	@CreatedDate datetime   ,

	@LastModified datetime   ,

	@UniqueCustomerId uniqueidentifier   ,

	@Enabled bit   ,

	@UserId int   ,

	@WebGroupId varchar (50)  ,

	@AccountManagerId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Customer]
				SET
					[WholesalerID] = @WholesalerId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[Description] = @Description
					,[ExternalCustomerNumber] = @ExternalCustomerNumber
					,[PrimaryContactName] = @PrimaryContactName
					,[PrimaryContactPhoneNumber] = @PrimaryContactPhoneNumber
					,[PrimaryContactEmailAddress] = @PrimaryContactEmailAddress
					,[PrimaryContactAddress1] = @PrimaryContactAddress1
					,[PrimaryContactAddress2] = @PrimaryContactAddress2
					,[PrimaryContactCity] = @PrimaryContactCity
					,[PrimaryContactCountry] = @PrimaryContactCountry
					,[PrimaryContactRegion] = @PrimaryContactRegion
					,[PrimaryContactPostalCode] = @PrimaryContactPostalCode
					,[PrimaryContactFaxNumber] = @PrimaryContactFaxNumber
					,[BillingContactName] = @BillingContactName
					,[BillingContactPhoneNumber] = @BillingContactPhoneNumber
					,[BillingContactEmailAddress] = @BillingContactEmailAddress
					,[BillingContactAddress1] = @BillingContactAddress1
					,[BillingContactAddress2] = @BillingContactAddress2
					,[BillingContactCity] = @BillingContactCity
					,[BillingContactCountry] = @BillingContactCountry
					,[BillingContactRegion] = @BillingContactRegion
					,[BillingContactPostalCode] = @BillingContactPostalCode
					,[BillingContactFaxNumber] = @BillingContactFaxNumber
					,[WebsiteURL] = @WebsiteUrl
					,[SalesPersonID] = @SalesPersonId
					,[VerticalID] = @VerticalId
					,[CompanyID] = @CompanyId
					,[CurrencyID] = @CurrencyId
					,[BillingPeriodCutoff] = @BillingPeriodCutoff
					,[TaxableID] = @TaxableId
					,[CreditCardNameOnCard] = @CreditCardNameOnCard
					,[CreditCardNumber] = @CreditCardNumber
					,[CreditCardExp] = @CreditCardExp
					,[CreditCardVerCode] = @CreditCardVerCode
					,[CreditCardTypeName] = @CreditCardTypeName
					,[CreatedDate] = @CreatedDate
					,[LastModified] = @LastModified
					,[UniqueCustomerID] = @UniqueCustomerId
					,[Enabled] = @Enabled
					,[UserID] = @UserId
					,[WebGroupID] = @WebGroupId
					,[AccountManagerID] = @AccountManagerId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Customer table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Customer] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByCurrencyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByCurrencyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByCurrencyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByCurrencyId
(

	@CurrencyId char (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[CurrencyID] = @CurrencyId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByAccountManagerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByAccountManagerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByAccountManagerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByAccountManagerId
(

	@AccountManagerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[AccountManagerID] = @AccountManagerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByBillingContactCountry procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByBillingContactCountry') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByBillingContactCountry
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByBillingContactCountry
(

	@BillingContactCountry varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[BillingContactCountry] = @BillingContactCountry
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByBillingContactRegion procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByBillingContactRegion') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByBillingContactRegion
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByBillingContactRegion
(

	@BillingContactRegion varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[BillingContactRegion] = @BillingContactRegion
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByPrimaryContactCountry procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByPrimaryContactCountry') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByPrimaryContactCountry
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByPrimaryContactCountry
(

	@PrimaryContactCountry varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[PrimaryContactCountry] = @PrimaryContactCountry
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByPrimaryContactRegion procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByPrimaryContactRegion') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByPrimaryContactRegion
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByPrimaryContactRegion
(

	@PrimaryContactRegion varchar (3)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[PrimaryContactRegion] = @PrimaryContactRegion
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByTaxableId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByTaxableId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByTaxableId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByTaxableId
(

	@TaxableId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[TaxableID] = @TaxableId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByVerticalId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByVerticalId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByVerticalId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByVerticalId
(

	@VerticalId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[VerticalID] = @VerticalId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByWholesalerIdPriCustomerNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByWholesalerIdPriCustomerNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByWholesalerIdPriCustomerNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByWholesalerIdPriCustomerNumber
(

	@WholesalerId varchar (10)  ,

	@PriCustomerNumber varchar (10)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [PriCustomerNumber] = @PriCustomerNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetBySalesPersonId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetBySalesPersonId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetBySalesPersonId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetBySalesPersonId
(

	@SalesPersonId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[SalesPersonID] = @SalesPersonId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByCompanyId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByCompanyId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByCompanyId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByCompanyId
(

	@CompanyId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[CompanyID] = @CompanyId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByLastModified procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByLastModified') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByLastModified
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByLastModified
(

	@LastModified datetime   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[LastModified] = @LastModified
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByUserId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByUserId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByUserId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByUserId
(

	@UserId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[AccountManagerID]
				FROM
					[dbo].[Customer]
				WHERE
					[UserID] = @UserId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_GetByDnisidFromCustomer_Dnis procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_GetByDnisidFromCustomer_Dnis') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_GetByDnisidFromCustomer_Dnis
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_GetByDnisidFromCustomer_Dnis
(

	@Dnisid int   
)
AS


SELECT dbo.[Customer].[ID]
       ,dbo.[Customer].[WholesalerID]
       ,dbo.[Customer].[PriCustomerNumber]
       ,dbo.[Customer].[Description]
       ,dbo.[Customer].[ExternalCustomerNumber]
       ,dbo.[Customer].[PrimaryContactName]
       ,dbo.[Customer].[PrimaryContactPhoneNumber]
       ,dbo.[Customer].[PrimaryContactEmailAddress]
       ,dbo.[Customer].[PrimaryContactAddress1]
       ,dbo.[Customer].[PrimaryContactAddress2]
       ,dbo.[Customer].[PrimaryContactCity]
       ,dbo.[Customer].[PrimaryContactCountry]
       ,dbo.[Customer].[PrimaryContactRegion]
       ,dbo.[Customer].[PrimaryContactPostalCode]
       ,dbo.[Customer].[PrimaryContactFaxNumber]
       ,dbo.[Customer].[BillingContactName]
       ,dbo.[Customer].[BillingContactPhoneNumber]
       ,dbo.[Customer].[BillingContactEmailAddress]
       ,dbo.[Customer].[BillingContactAddress1]
       ,dbo.[Customer].[BillingContactAddress2]
       ,dbo.[Customer].[BillingContactCity]
       ,dbo.[Customer].[BillingContactCountry]
       ,dbo.[Customer].[BillingContactRegion]
       ,dbo.[Customer].[BillingContactPostalCode]
       ,dbo.[Customer].[BillingContactFaxNumber]
       ,dbo.[Customer].[WebsiteURL]
       ,dbo.[Customer].[SalesPersonID]
       ,dbo.[Customer].[VerticalID]
       ,dbo.[Customer].[CompanyID]
       ,dbo.[Customer].[CurrencyID]
       ,dbo.[Customer].[BillingPeriodCutoff]
       ,dbo.[Customer].[TaxableID]
       ,dbo.[Customer].[CreditCardNameOnCard]
       ,dbo.[Customer].[CreditCardNumber]
       ,dbo.[Customer].[CreditCardExp]
       ,dbo.[Customer].[CreditCardVerCode]
       ,dbo.[Customer].[CreditCardTypeName]
       ,dbo.[Customer].[CreatedDate]
       ,dbo.[Customer].[LastModified]
       ,dbo.[Customer].[UniqueCustomerID]
       ,dbo.[Customer].[Enabled]
       ,dbo.[Customer].[UserID]
       ,dbo.[Customer].[WebGroupID]
       ,dbo.[Customer].[AccountManagerID]
  FROM dbo.[Customer]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[Customer_DNIS] 
                WHERE dbo.[Customer_DNIS].[DNISID] = @Dnisid
                  AND dbo.[Customer_DNIS].[CustomerID] = dbo.[Customer].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Customer table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@Description varchar (100)  = null ,

	@ExternalCustomerNumber varchar (100)  = null ,

	@PrimaryContactName varchar (50)  = null ,

	@PrimaryContactPhoneNumber varchar (30)  = null ,

	@PrimaryContactEmailAddress varchar (100)  = null ,

	@PrimaryContactAddress1 varchar (50)  = null ,

	@PrimaryContactAddress2 varchar (50)  = null ,

	@PrimaryContactCity varchar (50)  = null ,

	@PrimaryContactCountry varchar (3)  = null ,

	@PrimaryContactRegion varchar (3)  = null ,

	@PrimaryContactPostalCode varchar (20)  = null ,

	@PrimaryContactFaxNumber varchar (30)  = null ,

	@BillingContactName varchar (50)  = null ,

	@BillingContactPhoneNumber varchar (30)  = null ,

	@BillingContactEmailAddress varchar (100)  = null ,

	@BillingContactAddress1 varchar (50)  = null ,

	@BillingContactAddress2 varchar (50)  = null ,

	@BillingContactCity varchar (50)  = null ,

	@BillingContactCountry varchar (3)  = null ,

	@BillingContactRegion varchar (3)  = null ,

	@BillingContactPostalCode varchar (20)  = null ,

	@BillingContactFaxNumber varchar (30)  = null ,

	@WebsiteUrl varchar (100)  = null ,

	@SalesPersonId int   = null ,

	@VerticalId int   = null ,

	@CompanyId int   = null ,

	@CurrencyId char (3)  = null ,

	@BillingPeriodCutoff int   = null ,

	@TaxableId int   = null ,

	@CreditCardNameOnCard varchar (50)  = null ,

	@CreditCardNumber varchar (20)  = null ,

	@CreditCardExp varchar (4)  = null ,

	@CreditCardVerCode varchar (6)  = null ,

	@CreditCardTypeName varchar (50)  = null ,

	@CreatedDate datetime   = null ,

	@LastModified datetime   = null ,

	@UniqueCustomerId uniqueidentifier   = null ,

	@Enabled bit   = null ,

	@UserId int   = null ,

	@WebGroupId varchar (50)  = null ,

	@AccountManagerId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [PriCustomerNumber]
	, [Description]
	, [ExternalCustomerNumber]
	, [PrimaryContactName]
	, [PrimaryContactPhoneNumber]
	, [PrimaryContactEmailAddress]
	, [PrimaryContactAddress1]
	, [PrimaryContactAddress2]
	, [PrimaryContactCity]
	, [PrimaryContactCountry]
	, [PrimaryContactRegion]
	, [PrimaryContactPostalCode]
	, [PrimaryContactFaxNumber]
	, [BillingContactName]
	, [BillingContactPhoneNumber]
	, [BillingContactEmailAddress]
	, [BillingContactAddress1]
	, [BillingContactAddress2]
	, [BillingContactCity]
	, [BillingContactCountry]
	, [BillingContactRegion]
	, [BillingContactPostalCode]
	, [BillingContactFaxNumber]
	, [WebsiteURL]
	, [SalesPersonID]
	, [VerticalID]
	, [CompanyID]
	, [CurrencyID]
	, [BillingPeriodCutoff]
	, [TaxableID]
	, [CreditCardNameOnCard]
	, [CreditCardNumber]
	, [CreditCardExp]
	, [CreditCardVerCode]
	, [CreditCardTypeName]
	, [CreatedDate]
	, [LastModified]
	, [UniqueCustomerID]
	, [Enabled]
	, [UserID]
	, [WebGroupID]
	, [AccountManagerID]
    FROM
	[dbo].[Customer]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([ExternalCustomerNumber] = @ExternalCustomerNumber OR @ExternalCustomerNumber IS NULL)
	AND ([PrimaryContactName] = @PrimaryContactName OR @PrimaryContactName IS NULL)
	AND ([PrimaryContactPhoneNumber] = @PrimaryContactPhoneNumber OR @PrimaryContactPhoneNumber IS NULL)
	AND ([PrimaryContactEmailAddress] = @PrimaryContactEmailAddress OR @PrimaryContactEmailAddress IS NULL)
	AND ([PrimaryContactAddress1] = @PrimaryContactAddress1 OR @PrimaryContactAddress1 IS NULL)
	AND ([PrimaryContactAddress2] = @PrimaryContactAddress2 OR @PrimaryContactAddress2 IS NULL)
	AND ([PrimaryContactCity] = @PrimaryContactCity OR @PrimaryContactCity IS NULL)
	AND ([PrimaryContactCountry] = @PrimaryContactCountry OR @PrimaryContactCountry IS NULL)
	AND ([PrimaryContactRegion] = @PrimaryContactRegion OR @PrimaryContactRegion IS NULL)
	AND ([PrimaryContactPostalCode] = @PrimaryContactPostalCode OR @PrimaryContactPostalCode IS NULL)
	AND ([PrimaryContactFaxNumber] = @PrimaryContactFaxNumber OR @PrimaryContactFaxNumber IS NULL)
	AND ([BillingContactName] = @BillingContactName OR @BillingContactName IS NULL)
	AND ([BillingContactPhoneNumber] = @BillingContactPhoneNumber OR @BillingContactPhoneNumber IS NULL)
	AND ([BillingContactEmailAddress] = @BillingContactEmailAddress OR @BillingContactEmailAddress IS NULL)
	AND ([BillingContactAddress1] = @BillingContactAddress1 OR @BillingContactAddress1 IS NULL)
	AND ([BillingContactAddress2] = @BillingContactAddress2 OR @BillingContactAddress2 IS NULL)
	AND ([BillingContactCity] = @BillingContactCity OR @BillingContactCity IS NULL)
	AND ([BillingContactCountry] = @BillingContactCountry OR @BillingContactCountry IS NULL)
	AND ([BillingContactRegion] = @BillingContactRegion OR @BillingContactRegion IS NULL)
	AND ([BillingContactPostalCode] = @BillingContactPostalCode OR @BillingContactPostalCode IS NULL)
	AND ([BillingContactFaxNumber] = @BillingContactFaxNumber OR @BillingContactFaxNumber IS NULL)
	AND ([WebsiteURL] = @WebsiteUrl OR @WebsiteUrl IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([VerticalID] = @VerticalId OR @VerticalId IS NULL)
	AND ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([CurrencyID] = @CurrencyId OR @CurrencyId IS NULL)
	AND ([BillingPeriodCutoff] = @BillingPeriodCutoff OR @BillingPeriodCutoff IS NULL)
	AND ([TaxableID] = @TaxableId OR @TaxableId IS NULL)
	AND ([CreditCardNameOnCard] = @CreditCardNameOnCard OR @CreditCardNameOnCard IS NULL)
	AND ([CreditCardNumber] = @CreditCardNumber OR @CreditCardNumber IS NULL)
	AND ([CreditCardExp] = @CreditCardExp OR @CreditCardExp IS NULL)
	AND ([CreditCardVerCode] = @CreditCardVerCode OR @CreditCardVerCode IS NULL)
	AND ([CreditCardTypeName] = @CreditCardTypeName OR @CreditCardTypeName IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([LastModified] = @LastModified OR @LastModified IS NULL)
	AND ([UniqueCustomerID] = @UniqueCustomerId OR @UniqueCustomerId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
	AND ([WebGroupID] = @WebGroupId OR @WebGroupId IS NULL)
	AND ([AccountManagerID] = @AccountManagerId OR @AccountManagerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [PriCustomerNumber]
	, [Description]
	, [ExternalCustomerNumber]
	, [PrimaryContactName]
	, [PrimaryContactPhoneNumber]
	, [PrimaryContactEmailAddress]
	, [PrimaryContactAddress1]
	, [PrimaryContactAddress2]
	, [PrimaryContactCity]
	, [PrimaryContactCountry]
	, [PrimaryContactRegion]
	, [PrimaryContactPostalCode]
	, [PrimaryContactFaxNumber]
	, [BillingContactName]
	, [BillingContactPhoneNumber]
	, [BillingContactEmailAddress]
	, [BillingContactAddress1]
	, [BillingContactAddress2]
	, [BillingContactCity]
	, [BillingContactCountry]
	, [BillingContactRegion]
	, [BillingContactPostalCode]
	, [BillingContactFaxNumber]
	, [WebsiteURL]
	, [SalesPersonID]
	, [VerticalID]
	, [CompanyID]
	, [CurrencyID]
	, [BillingPeriodCutoff]
	, [TaxableID]
	, [CreditCardNameOnCard]
	, [CreditCardNumber]
	, [CreditCardExp]
	, [CreditCardVerCode]
	, [CreditCardTypeName]
	, [CreatedDate]
	, [LastModified]
	, [UniqueCustomerID]
	, [Enabled]
	, [UserID]
	, [WebGroupID]
	, [AccountManagerID]
    FROM
	[dbo].[Customer]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([ExternalCustomerNumber] = @ExternalCustomerNumber AND @ExternalCustomerNumber is not null)
	OR ([PrimaryContactName] = @PrimaryContactName AND @PrimaryContactName is not null)
	OR ([PrimaryContactPhoneNumber] = @PrimaryContactPhoneNumber AND @PrimaryContactPhoneNumber is not null)
	OR ([PrimaryContactEmailAddress] = @PrimaryContactEmailAddress AND @PrimaryContactEmailAddress is not null)
	OR ([PrimaryContactAddress1] = @PrimaryContactAddress1 AND @PrimaryContactAddress1 is not null)
	OR ([PrimaryContactAddress2] = @PrimaryContactAddress2 AND @PrimaryContactAddress2 is not null)
	OR ([PrimaryContactCity] = @PrimaryContactCity AND @PrimaryContactCity is not null)
	OR ([PrimaryContactCountry] = @PrimaryContactCountry AND @PrimaryContactCountry is not null)
	OR ([PrimaryContactRegion] = @PrimaryContactRegion AND @PrimaryContactRegion is not null)
	OR ([PrimaryContactPostalCode] = @PrimaryContactPostalCode AND @PrimaryContactPostalCode is not null)
	OR ([PrimaryContactFaxNumber] = @PrimaryContactFaxNumber AND @PrimaryContactFaxNumber is not null)
	OR ([BillingContactName] = @BillingContactName AND @BillingContactName is not null)
	OR ([BillingContactPhoneNumber] = @BillingContactPhoneNumber AND @BillingContactPhoneNumber is not null)
	OR ([BillingContactEmailAddress] = @BillingContactEmailAddress AND @BillingContactEmailAddress is not null)
	OR ([BillingContactAddress1] = @BillingContactAddress1 AND @BillingContactAddress1 is not null)
	OR ([BillingContactAddress2] = @BillingContactAddress2 AND @BillingContactAddress2 is not null)
	OR ([BillingContactCity] = @BillingContactCity AND @BillingContactCity is not null)
	OR ([BillingContactCountry] = @BillingContactCountry AND @BillingContactCountry is not null)
	OR ([BillingContactRegion] = @BillingContactRegion AND @BillingContactRegion is not null)
	OR ([BillingContactPostalCode] = @BillingContactPostalCode AND @BillingContactPostalCode is not null)
	OR ([BillingContactFaxNumber] = @BillingContactFaxNumber AND @BillingContactFaxNumber is not null)
	OR ([WebsiteURL] = @WebsiteUrl AND @WebsiteUrl is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([VerticalID] = @VerticalId AND @VerticalId is not null)
	OR ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([CurrencyID] = @CurrencyId AND @CurrencyId is not null)
	OR ([BillingPeriodCutoff] = @BillingPeriodCutoff AND @BillingPeriodCutoff is not null)
	OR ([TaxableID] = @TaxableId AND @TaxableId is not null)
	OR ([CreditCardNameOnCard] = @CreditCardNameOnCard AND @CreditCardNameOnCard is not null)
	OR ([CreditCardNumber] = @CreditCardNumber AND @CreditCardNumber is not null)
	OR ([CreditCardExp] = @CreditCardExp AND @CreditCardExp is not null)
	OR ([CreditCardVerCode] = @CreditCardVerCode AND @CreditCardVerCode is not null)
	OR ([CreditCardTypeName] = @CreditCardTypeName AND @CreditCardTypeName is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([LastModified] = @LastModified AND @LastModified is not null)
	OR ([UniqueCustomerID] = @UniqueCustomerId AND @UniqueCustomerId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	OR ([WebGroupID] = @WebGroupId AND @WebGroupId is not null)
	OR ([AccountManagerID] = @AccountManagerId AND @AccountManagerId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAverageRates_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAverageRates_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAverageRates_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the AverageRates table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAverageRates_Get_List

AS


				
				SELECT
					[UsageMonth],
					[ProductRateID],
					[WholesalerID],
					[MedianRetailRate],
					[AverageRetailRate],
					[WeightedAverageRetailRate],
					[MedianWSRate],
					[AverageWSRate],
					[WeightedAverageWSRate],
					[UsageSeconds],
					[UsageQuantity]
				FROM
					[dbo].[AverageRates]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAverageRates_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAverageRates_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAverageRates_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the AverageRates table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAverageRates_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UsageMonth]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UsageMonth]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [MedianRetailRate]'
				SET @SQL = @SQL + ', [AverageRetailRate]'
				SET @SQL = @SQL + ', [WeightedAverageRetailRate]'
				SET @SQL = @SQL + ', [MedianWSRate]'
				SET @SQL = @SQL + ', [AverageWSRate]'
				SET @SQL = @SQL + ', [WeightedAverageWSRate]'
				SET @SQL = @SQL + ', [UsageSeconds]'
				SET @SQL = @SQL + ', [UsageQuantity]'
				SET @SQL = @SQL + ' FROM [dbo].[AverageRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UsageMonth],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [MedianRetailRate],'
				SET @SQL = @SQL + ' [AverageRetailRate],'
				SET @SQL = @SQL + ' [WeightedAverageRetailRate],'
				SET @SQL = @SQL + ' [MedianWSRate],'
				SET @SQL = @SQL + ' [AverageWSRate],'
				SET @SQL = @SQL + ' [WeightedAverageWSRate],'
				SET @SQL = @SQL + ' [UsageSeconds],'
				SET @SQL = @SQL + ' [UsageQuantity]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[AverageRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAverageRates_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAverageRates_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAverageRates_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the AverageRates table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAverageRates_Insert
(

	@UsageMonth datetime   ,

	@ProductRateId int   ,

	@WholesalerId char (10)  ,

	@MedianRetailRate decimal (9, 4)  ,

	@AverageRetailRate decimal (9, 4)  ,

	@WeightedAverageRetailRate decimal (9, 4)  ,

	@MedianWsRate decimal (9, 4)  ,

	@AverageWsRate decimal (9, 4)  ,

	@WeightedAverageWsRate decimal (9, 4)  ,

	@UsageSeconds int   ,

	@UsageQuantity int   
)
AS


					
				INSERT INTO [dbo].[AverageRates]
					(
					[UsageMonth]
					,[ProductRateID]
					,[WholesalerID]
					,[MedianRetailRate]
					,[AverageRetailRate]
					,[WeightedAverageRetailRate]
					,[MedianWSRate]
					,[AverageWSRate]
					,[WeightedAverageWSRate]
					,[UsageSeconds]
					,[UsageQuantity]
					)
				VALUES
					(
					@UsageMonth
					,@ProductRateId
					,@WholesalerId
					,@MedianRetailRate
					,@AverageRetailRate
					,@WeightedAverageRetailRate
					,@MedianWsRate
					,@AverageWsRate
					,@WeightedAverageWsRate
					,@UsageSeconds
					,@UsageQuantity
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAverageRates_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAverageRates_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAverageRates_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the AverageRates table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAverageRates_Update
(

	@UsageMonth datetime   ,

	@OriginalUsageMonth datetime   ,

	@ProductRateId int   ,

	@OriginalProductRateId int   ,

	@WholesalerId char (10)  ,

	@OriginalWholesalerId char (10)  ,

	@MedianRetailRate decimal (9, 4)  ,

	@AverageRetailRate decimal (9, 4)  ,

	@WeightedAverageRetailRate decimal (9, 4)  ,

	@MedianWsRate decimal (9, 4)  ,

	@AverageWsRate decimal (9, 4)  ,

	@WeightedAverageWsRate decimal (9, 4)  ,

	@UsageSeconds int   ,

	@UsageQuantity int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[AverageRates]
				SET
					[UsageMonth] = @UsageMonth
					,[ProductRateID] = @ProductRateId
					,[WholesalerID] = @WholesalerId
					,[MedianRetailRate] = @MedianRetailRate
					,[AverageRetailRate] = @AverageRetailRate
					,[WeightedAverageRetailRate] = @WeightedAverageRetailRate
					,[MedianWSRate] = @MedianWsRate
					,[AverageWSRate] = @AverageWsRate
					,[WeightedAverageWSRate] = @WeightedAverageWsRate
					,[UsageSeconds] = @UsageSeconds
					,[UsageQuantity] = @UsageQuantity
				WHERE
[UsageMonth] = @OriginalUsageMonth 
AND [ProductRateID] = @OriginalProductRateId 
AND [WholesalerID] = @OriginalWholesalerId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAverageRates_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAverageRates_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAverageRates_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the AverageRates table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAverageRates_Delete
(

	@UsageMonth datetime   ,

	@ProductRateId int   ,

	@WholesalerId char (10)  
)
AS


				DELETE FROM [dbo].[AverageRates] WITH (ROWLOCK) 
				WHERE
					[UsageMonth] = @UsageMonth
					AND [ProductRateID] = @ProductRateId
					AND [WholesalerID] = @WholesalerId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAverageRates_GetByUsageMonthProductRateIdWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAverageRates_GetByUsageMonthProductRateIdWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAverageRates_GetByUsageMonthProductRateIdWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the AverageRates table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAverageRates_GetByUsageMonthProductRateIdWholesalerId
(

	@UsageMonth datetime   ,

	@ProductRateId int   ,

	@WholesalerId char (10)  
)
AS


				SELECT
					[UsageMonth],
					[ProductRateID],
					[WholesalerID],
					[MedianRetailRate],
					[AverageRetailRate],
					[WeightedAverageRetailRate],
					[MedianWSRate],
					[AverageWSRate],
					[WeightedAverageWSRate],
					[UsageSeconds],
					[UsageQuantity]
				FROM
					[dbo].[AverageRates]
				WHERE
					[UsageMonth] = @UsageMonth
					AND [ProductRateID] = @ProductRateId
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pAverageRates_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pAverageRates_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pAverageRates_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the AverageRates table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pAverageRates_Find
(

	@SearchUsingOR bit   = null ,

	@UsageMonth datetime   = null ,

	@ProductRateId int   = null ,

	@WholesalerId char (10)  = null ,

	@MedianRetailRate decimal (9, 4)  = null ,

	@AverageRetailRate decimal (9, 4)  = null ,

	@WeightedAverageRetailRate decimal (9, 4)  = null ,

	@MedianWsRate decimal (9, 4)  = null ,

	@AverageWsRate decimal (9, 4)  = null ,

	@WeightedAverageWsRate decimal (9, 4)  = null ,

	@UsageSeconds int   = null ,

	@UsageQuantity int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [UsageMonth]
	, [ProductRateID]
	, [WholesalerID]
	, [MedianRetailRate]
	, [AverageRetailRate]
	, [WeightedAverageRetailRate]
	, [MedianWSRate]
	, [AverageWSRate]
	, [WeightedAverageWSRate]
	, [UsageSeconds]
	, [UsageQuantity]
    FROM
	[dbo].[AverageRates]
    WHERE 
	 ([UsageMonth] = @UsageMonth OR @UsageMonth IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([MedianRetailRate] = @MedianRetailRate OR @MedianRetailRate IS NULL)
	AND ([AverageRetailRate] = @AverageRetailRate OR @AverageRetailRate IS NULL)
	AND ([WeightedAverageRetailRate] = @WeightedAverageRetailRate OR @WeightedAverageRetailRate IS NULL)
	AND ([MedianWSRate] = @MedianWsRate OR @MedianWsRate IS NULL)
	AND ([AverageWSRate] = @AverageWsRate OR @AverageWsRate IS NULL)
	AND ([WeightedAverageWSRate] = @WeightedAverageWsRate OR @WeightedAverageWsRate IS NULL)
	AND ([UsageSeconds] = @UsageSeconds OR @UsageSeconds IS NULL)
	AND ([UsageQuantity] = @UsageQuantity OR @UsageQuantity IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [UsageMonth]
	, [ProductRateID]
	, [WholesalerID]
	, [MedianRetailRate]
	, [AverageRetailRate]
	, [WeightedAverageRetailRate]
	, [MedianWSRate]
	, [AverageWSRate]
	, [WeightedAverageWSRate]
	, [UsageSeconds]
	, [UsageQuantity]
    FROM
	[dbo].[AverageRates]
    WHERE 
	 ([UsageMonth] = @UsageMonth AND @UsageMonth is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([MedianRetailRate] = @MedianRetailRate AND @MedianRetailRate is not null)
	OR ([AverageRetailRate] = @AverageRetailRate AND @AverageRetailRate is not null)
	OR ([WeightedAverageRetailRate] = @WeightedAverageRetailRate AND @WeightedAverageRetailRate is not null)
	OR ([MedianWSRate] = @MedianWsRate AND @MedianWsRate is not null)
	OR ([AverageWSRate] = @AverageWsRate AND @AverageWsRate is not null)
	OR ([WeightedAverageWSRate] = @WeightedAverageWsRate AND @WeightedAverageWsRate is not null)
	OR ([UsageSeconds] = @UsageSeconds AND @UsageSeconds is not null)
	OR ([UsageQuantity] = @UsageQuantity AND @UsageQuantity is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the BridgeQueue table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_Get_List

AS


				
				SELECT
					[ID],
					[ModeratorID],
					[BridgeID],
					[ProcessFlag]
				FROM
					[dbo].[BridgeQueue]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the BridgeQueue table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [ProcessFlag]'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeQueue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [ProcessFlag]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[BridgeQueue]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the BridgeQueue table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_Insert
(

	@Id uniqueidentifier   ,

	@ModeratorId int   ,

	@BridgeId int   ,

	@ProcessFlag char (1)  
)
AS


					
				INSERT INTO [dbo].[BridgeQueue]
					(
					[ModeratorID]
					,[BridgeID]
					,[ProcessFlag]
					)
				VALUES
					(
					@ModeratorId
					,@BridgeId
					,@ProcessFlag
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the BridgeQueue table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_Update
(

	@Id uniqueidentifier   ,

	@OriginalId uniqueidentifier   ,

	@ModeratorId int   ,

	@BridgeId int   ,

	@ProcessFlag char (1)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[BridgeQueue]
				SET
					[ModeratorID] = @ModeratorId
					,[BridgeID] = @BridgeId
					,[ProcessFlag] = @ProcessFlag
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the BridgeQueue table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_Delete
(

	@Id uniqueidentifier   
)
AS


				DELETE FROM [dbo].[BridgeQueue] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_GetByBridgeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_GetByBridgeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_GetByBridgeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeQueue table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_GetByBridgeId
(

	@BridgeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[BridgeID],
					[ProcessFlag]
				FROM
					[dbo].[BridgeQueue]
				WHERE
					[BridgeID] = @BridgeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_GetByModeratorId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_GetByModeratorId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_GetByModeratorId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeQueue table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_GetByModeratorId
(

	@ModeratorId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ModeratorID],
					[BridgeID],
					[ProcessFlag]
				FROM
					[dbo].[BridgeQueue]
				WHERE
					[ModeratorID] = @ModeratorId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the BridgeQueue table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_GetById
(

	@Id uniqueidentifier   
)
AS


				SELECT
					[ID],
					[ModeratorID],
					[BridgeID],
					[ProcessFlag]
				FROM
					[dbo].[BridgeQueue]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pBridgeQueue_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pBridgeQueue_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pBridgeQueue_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the BridgeQueue table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pBridgeQueue_Find
(

	@SearchUsingOR bit   = null ,

	@Id uniqueidentifier   = null ,

	@ModeratorId int   = null ,

	@BridgeId int   = null ,

	@ProcessFlag char (1)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [BridgeID]
	, [ProcessFlag]
    FROM
	[dbo].[BridgeQueue]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([BridgeID] = @BridgeId OR @BridgeId IS NULL)
	AND ([ProcessFlag] = @ProcessFlag OR @ProcessFlag IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ModeratorID]
	, [BridgeID]
	, [ProcessFlag]
    FROM
	[dbo].[BridgeQueue]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([BridgeID] = @BridgeId AND @BridgeId is not null)
	OR ([ProcessFlag] = @ProcessFlag AND @ProcessFlag is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pForEx_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pForEx_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pForEx_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ForEx table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pForEx_Get_List

AS


				
				SELECT
					[ID],
					[FromCcy],
					[ToCcy],
					[Rate],
					[CurveID],
					[EffectiveDate]
				FROM
					[dbo].[ForEx]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pForEx_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pForEx_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pForEx_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ForEx table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pForEx_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [FromCcy]'
				SET @SQL = @SQL + ', [ToCcy]'
				SET @SQL = @SQL + ', [Rate]'
				SET @SQL = @SQL + ', [CurveID]'
				SET @SQL = @SQL + ', [EffectiveDate]'
				SET @SQL = @SQL + ' FROM [dbo].[ForEx]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [FromCcy],'
				SET @SQL = @SQL + ' [ToCcy],'
				SET @SQL = @SQL + ' [Rate],'
				SET @SQL = @SQL + ' [CurveID],'
				SET @SQL = @SQL + ' [EffectiveDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ForEx]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pForEx_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pForEx_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pForEx_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ForEx table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pForEx_Insert
(

	@Id int   ,

	@FromCcy char (3)  ,

	@ToCcy char (3)  ,

	@Rate decimal (18, 9)  ,

	@CurveId int   ,

	@EffectiveDate datetime   
)
AS


					
				INSERT INTO [dbo].[ForEx]
					(
					[ID]
					,[FromCcy]
					,[ToCcy]
					,[Rate]
					,[CurveID]
					,[EffectiveDate]
					)
				VALUES
					(
					@Id
					,@FromCcy
					,@ToCcy
					,@Rate
					,@CurveId
					,@EffectiveDate
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pForEx_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pForEx_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pForEx_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ForEx table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pForEx_Update
(

	@Id int   ,

	@OriginalId int   ,

	@FromCcy char (3)  ,

	@ToCcy char (3)  ,

	@Rate decimal (18, 9)  ,

	@CurveId int   ,

	@EffectiveDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ForEx]
				SET
					[ID] = @Id
					,[FromCcy] = @FromCcy
					,[ToCcy] = @ToCcy
					,[Rate] = @Rate
					,[CurveID] = @CurveId
					,[EffectiveDate] = @EffectiveDate
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pForEx_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pForEx_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pForEx_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ForEx table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pForEx_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ForEx] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pForEx_GetByCurveId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pForEx_GetByCurveId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pForEx_GetByCurveId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ForEx table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pForEx_GetByCurveId
(

	@CurveId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[FromCcy],
					[ToCcy],
					[Rate],
					[CurveID],
					[EffectiveDate]
				FROM
					[dbo].[ForEx]
				WHERE
					[CurveID] = @CurveId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pForEx_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pForEx_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pForEx_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ForEx table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pForEx_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[FromCcy],
					[ToCcy],
					[Rate],
					[CurveID],
					[EffectiveDate]
				FROM
					[dbo].[ForEx]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pForEx_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pForEx_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pForEx_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ForEx table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pForEx_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@FromCcy char (3)  = null ,

	@ToCcy char (3)  = null ,

	@Rate decimal (18, 9)  = null ,

	@CurveId int   = null ,

	@EffectiveDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [FromCcy]
	, [ToCcy]
	, [Rate]
	, [CurveID]
	, [EffectiveDate]
    FROM
	[dbo].[ForEx]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([FromCcy] = @FromCcy OR @FromCcy IS NULL)
	AND ([ToCcy] = @ToCcy OR @ToCcy IS NULL)
	AND ([Rate] = @Rate OR @Rate IS NULL)
	AND ([CurveID] = @CurveId OR @CurveId IS NULL)
	AND ([EffectiveDate] = @EffectiveDate OR @EffectiveDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [FromCcy]
	, [ToCcy]
	, [Rate]
	, [CurveID]
	, [EffectiveDate]
    FROM
	[dbo].[ForEx]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([FromCcy] = @FromCcy AND @FromCcy is not null)
	OR ([ToCcy] = @ToCcy AND @ToCcy is not null)
	OR ([Rate] = @Rate AND @Rate is not null)
	OR ([CurveID] = @CurveId AND @CurveId is not null)
	OR ([EffectiveDate] = @EffectiveDate AND @EffectiveDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Customer_DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_Get_List

AS


				
				SELECT
					[DNISID],
					[CustomerID]
				FROM
					[dbo].[Customer_DNIS]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer_DNIS table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[DNISID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [DNISID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ' FROM [dbo].[Customer_DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [DNISID],'
				SET @SQL = @SQL + ' [CustomerID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Customer_DNIS]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Customer_DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_Insert
(

	@Dnisid int   ,

	@CustomerId int   
)
AS


					
				INSERT INTO [dbo].[Customer_DNIS]
					(
					[DNISID]
					,[CustomerID]
					)
				VALUES
					(
					@Dnisid
					,@CustomerId
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Customer_DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_Update
(

	@Dnisid int   ,

	@OriginalDnisid int   ,

	@CustomerId int   ,

	@OriginalCustomerId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Customer_DNIS]
				SET
					[DNISID] = @Dnisid
					,[CustomerID] = @CustomerId
				WHERE
[DNISID] = @OriginalDnisid 
AND [CustomerID] = @OriginalCustomerId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Customer_DNIS table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_Delete
(

	@Dnisid int   ,

	@CustomerId int   
)
AS


				DELETE FROM [dbo].[Customer_DNIS] WITH (ROWLOCK) 
				WHERE
					[DNISID] = @Dnisid
					AND [CustomerID] = @CustomerId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_GetByDnisidCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_GetByDnisidCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_GetByDnisidCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_GetByDnisidCustomerId
(

	@Dnisid int   ,

	@CustomerId int   
)
AS


				SELECT
					[DNISID],
					[CustomerID]
				FROM
					[dbo].[Customer_DNIS]
				WHERE
					[DNISID] = @Dnisid
					AND [CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_GetByCustomerId
(

	@CustomerId int   
)
AS


				SELECT
					[DNISID],
					[CustomerID]
				FROM
					[dbo].[Customer_DNIS]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_GetByDnisid procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_GetByDnisid') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_GetByDnisid
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_DNIS table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_GetByDnisid
(

	@Dnisid int   
)
AS


				SELECT
					[DNISID],
					[CustomerID]
				FROM
					[dbo].[Customer_DNIS]
				WHERE
					[DNISID] = @Dnisid
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_DNIS_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_DNIS_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_DNIS_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Customer_DNIS table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_DNIS_Find
(

	@SearchUsingOR bit   = null ,

	@Dnisid int   = null ,

	@CustomerId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [DNISID]
	, [CustomerID]
    FROM
	[dbo].[Customer_DNIS]
    WHERE 
	 ([DNISID] = @Dnisid OR @Dnisid IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [DNISID]
	, [CustomerID]
    FROM
	[dbo].[Customer_DNIS]
    WHERE 
	 ([DNISID] = @Dnisid AND @Dnisid is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOptionType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOptionType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOptionType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the FeatureOptionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOptionType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder]
				FROM
					[dbo].[FeatureOptionType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOptionType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOptionType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOptionType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FeatureOptionType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOptionType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[FeatureOptionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FeatureOptionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOptionType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOptionType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOptionType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FeatureOptionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOptionType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[FeatureOptionType]
					(
					[Name]
					,[Description]
					,[DisplayOrder]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOptionType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOptionType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOptionType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FeatureOptionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOptionType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (100)  ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[FeatureOptionType]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOptionType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOptionType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOptionType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FeatureOptionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOptionType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[FeatureOptionType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOptionType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOptionType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOptionType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOptionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOptionType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayOrder]
				FROM
					[dbo].[FeatureOptionType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOptionType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOptionType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOptionType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FeatureOptionType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOptionType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (100)  = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
    FROM
	[dbo].[FeatureOptionType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayOrder]
    FROM
	[dbo].[FeatureOptionType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_Get_List

AS


				
				SELECT
					[ID],
					[ProductID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[Enabled],
					[DisplayOrder],
					[DisplayOnlyToCustomer],
					[DisplayInAMPSite],
					[DisplayToCustomer],
					[DisplayToModerator]
				FROM
					[dbo].[Feature]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Feature table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [DisplayOnlyToCustomer]'
				SET @SQL = @SQL + ', [DisplayInAMPSite]'
				SET @SQL = @SQL + ', [DisplayToCustomer]'
				SET @SQL = @SQL + ', [DisplayToModerator]'
				SET @SQL = @SQL + ' FROM [dbo].[Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [DisplayOnlyToCustomer],'
				SET @SQL = @SQL + ' [DisplayInAMPSite],'
				SET @SQL = @SQL + ' [DisplayToCustomer],'
				SET @SQL = @SQL + ' [DisplayToModerator]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_Insert
(

	@Id int    OUTPUT,

	@ProductId int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (500)  ,

	@DisplayNameAlt nvarchar (100)  ,

	@DescriptionAlt nvarchar (500)  ,

	@DefaultOption bit   ,

	@Enabled bit   ,

	@DisplayOrder int   ,

	@DisplayOnlyToCustomer bit   ,

	@DisplayInAmpSite bit   ,

	@DisplayToCustomer bit   ,

	@DisplayToModerator bit   
)
AS


					
				INSERT INTO [dbo].[Feature]
					(
					[ProductID]
					,[Name]
					,[DisplayName]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[DefaultOption]
					,[Enabled]
					,[DisplayOrder]
					,[DisplayOnlyToCustomer]
					,[DisplayInAMPSite]
					,[DisplayToCustomer]
					,[DisplayToModerator]
					)
				VALUES
					(
					@ProductId
					,@Name
					,@DisplayName
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@DefaultOption
					,@Enabled
					,@DisplayOrder
					,@DisplayOnlyToCustomer
					,@DisplayInAmpSite
					,@DisplayToCustomer
					,@DisplayToModerator
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_Update
(

	@Id int   ,

	@ProductId int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (500)  ,

	@DisplayNameAlt nvarchar (100)  ,

	@DescriptionAlt nvarchar (500)  ,

	@DefaultOption bit   ,

	@Enabled bit   ,

	@DisplayOrder int   ,

	@DisplayOnlyToCustomer bit   ,

	@DisplayInAmpSite bit   ,

	@DisplayToCustomer bit   ,

	@DisplayToModerator bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Feature]
				SET
					[ProductID] = @ProductId
					,[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[DefaultOption] = @DefaultOption
					,[Enabled] = @Enabled
					,[DisplayOrder] = @DisplayOrder
					,[DisplayOnlyToCustomer] = @DisplayOnlyToCustomer
					,[DisplayInAMPSite] = @DisplayInAmpSite
					,[DisplayToCustomer] = @DisplayToCustomer
					,[DisplayToModerator] = @DisplayToModerator
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Feature] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_GetByProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_GetByProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_GetByProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_GetByProductId
(

	@ProductId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[ProductID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[Enabled],
					[DisplayOrder],
					[DisplayOnlyToCustomer],
					[DisplayInAMPSite],
					[DisplayToCustomer],
					[DisplayToModerator]
				FROM
					[dbo].[Feature]
				WHERE
					[ProductID] = @ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[ProductID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[Enabled],
					[DisplayOrder],
					[DisplayOnlyToCustomer],
					[DisplayInAMPSite],
					[DisplayToCustomer],
					[DisplayToModerator]
				FROM
					[dbo].[Feature]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_GetByNameId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_GetByNameId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_GetByNameId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_GetByNameId
(

	@Name varchar (50)  ,

	@Id int   
)
AS


				SELECT
					[ID],
					[ProductID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[DefaultOption],
					[Enabled],
					[DisplayOrder],
					[DisplayOnlyToCustomer],
					[DisplayInAMPSite],
					[DisplayToCustomer],
					[DisplayToModerator]
				FROM
					[dbo].[Feature]
				WHERE
					[Name] = @Name
					AND [ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeature_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeature_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeature_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Feature table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeature_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@ProductId int   = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (50)  = null ,

	@Description varchar (500)  = null ,

	@DisplayNameAlt nvarchar (100)  = null ,

	@DescriptionAlt nvarchar (500)  = null ,

	@DefaultOption bit   = null ,

	@Enabled bit   = null ,

	@DisplayOrder int   = null ,

	@DisplayOnlyToCustomer bit   = null ,

	@DisplayInAmpSite bit   = null ,

	@DisplayToCustomer bit   = null ,

	@DisplayToModerator bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DefaultOption]
	, [Enabled]
	, [DisplayOrder]
	, [DisplayOnlyToCustomer]
	, [DisplayInAMPSite]
	, [DisplayToCustomer]
	, [DisplayToModerator]
    FROM
	[dbo].[Feature]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([ProductID] = @ProductId OR @ProductId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([DisplayOnlyToCustomer] = @DisplayOnlyToCustomer OR @DisplayOnlyToCustomer IS NULL)
	AND ([DisplayInAMPSite] = @DisplayInAmpSite OR @DisplayInAmpSite IS NULL)
	AND ([DisplayToCustomer] = @DisplayToCustomer OR @DisplayToCustomer IS NULL)
	AND ([DisplayToModerator] = @DisplayToModerator OR @DisplayToModerator IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [ProductID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [DefaultOption]
	, [Enabled]
	, [DisplayOrder]
	, [DisplayOnlyToCustomer]
	, [DisplayInAMPSite]
	, [DisplayToCustomer]
	, [DisplayToModerator]
    FROM
	[dbo].[Feature]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([ProductID] = @ProductId AND @ProductId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([DisplayOnlyToCustomer] = @DisplayOnlyToCustomer AND @DisplayOnlyToCustomer is not null)
	OR ([DisplayInAMPSite] = @DisplayInAmpSite AND @DisplayInAmpSite is not null)
	OR ([DisplayToCustomer] = @DisplayToCustomer AND @DisplayToCustomer is not null)
	OR ([DisplayToModerator] = @DisplayToModerator AND @DisplayToModerator is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pGLPostingType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pGLPostingType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pGLPostingType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the GLPostingType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pGLPostingType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[DisplayName],
					[DisplayOrder],
					[Multiplier],
					[CalculateTax]
				FROM
					[dbo].[GLPostingType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pGLPostingType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pGLPostingType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pGLPostingType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the GLPostingType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pGLPostingType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Multiplier]'
				SET @SQL = @SQL + ', [CalculateTax]'
				SET @SQL = @SQL + ' FROM [dbo].[GLPostingType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Multiplier],'
				SET @SQL = @SQL + ' [CalculateTax]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[GLPostingType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pGLPostingType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pGLPostingType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pGLPostingType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the GLPostingType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pGLPostingType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@DisplayOrder int   ,

	@Multiplier smallint   ,

	@CalculateTax bit   
)
AS


					
				INSERT INTO [dbo].[GLPostingType]
					(
					[Name]
					,[DisplayName]
					,[DisplayOrder]
					,[Multiplier]
					,[CalculateTax]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@DisplayOrder
					,@Multiplier
					,@CalculateTax
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pGLPostingType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pGLPostingType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pGLPostingType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the GLPostingType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pGLPostingType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@DisplayOrder int   ,

	@Multiplier smallint   ,

	@CalculateTax bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[GLPostingType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[DisplayOrder] = @DisplayOrder
					,[Multiplier] = @Multiplier
					,[CalculateTax] = @CalculateTax
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pGLPostingType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pGLPostingType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pGLPostingType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the GLPostingType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pGLPostingType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[GLPostingType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pGLPostingType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pGLPostingType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pGLPostingType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GLPostingType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pGLPostingType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[DisplayOrder],
					[Multiplier],
					[CalculateTax]
				FROM
					[dbo].[GLPostingType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pGLPostingType_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pGLPostingType_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pGLPostingType_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the GLPostingType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pGLPostingType_GetByName
(

	@Name varchar (50)  
)
AS


				SELECT
					[ID],
					[Name],
					[DisplayName],
					[DisplayOrder],
					[Multiplier],
					[CalculateTax]
				FROM
					[dbo].[GLPostingType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pGLPostingType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pGLPostingType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pGLPostingType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the GLPostingType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pGLPostingType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (50)  = null ,

	@DisplayOrder int   = null ,

	@Multiplier smallint   = null ,

	@CalculateTax bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [DisplayOrder]
	, [Multiplier]
	, [CalculateTax]
    FROM
	[dbo].[GLPostingType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Multiplier] = @Multiplier OR @Multiplier IS NULL)
	AND ([CalculateTax] = @CalculateTax OR @CalculateTax IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [DisplayName]
	, [DisplayOrder]
	, [Multiplier]
	, [CalculateTax]
    FROM
	[dbo].[GLPostingType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Multiplier] = @Multiplier AND @Multiplier is not null)
	OR ([CalculateTax] = @CalculateTax AND @CalculateTax is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the FeatureOption table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_Get_List

AS


				
				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the FeatureOption table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayNameAlt]'
				SET @SQL = @SQL + ', [DescriptionAlt]'
				SET @SQL = @SQL + ', [Value]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [FeatureOptionTypeID]'
				SET @SQL = @SQL + ', [RegularExpression]'
				SET @SQL = @SQL + ' FROM [dbo].[FeatureOption]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayNameAlt],'
				SET @SQL = @SQL + ' [DescriptionAlt],'
				SET @SQL = @SQL + ' [Value],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [FeatureOptionTypeID],'
				SET @SQL = @SQL + ' [RegularExpression]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[FeatureOption]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the FeatureOption table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_Insert
(

	@Id int    OUTPUT,

	@FeatureId int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (500)  ,

	@DisplayNameAlt nvarchar (100)  ,

	@DescriptionAlt nvarchar (500)  ,

	@Value varchar (100)  ,

	@DisplayOrder int   ,

	@DefaultOption bit   ,

	@Enabled bit   ,

	@FeatureOptionTypeId int   ,

	@RegularExpression varchar (50)  
)
AS


					
				INSERT INTO [dbo].[FeatureOption]
					(
					[FeatureID]
					,[Name]
					,[DisplayName]
					,[Description]
					,[DisplayNameAlt]
					,[DescriptionAlt]
					,[Value]
					,[DisplayOrder]
					,[DefaultOption]
					,[Enabled]
					,[FeatureOptionTypeID]
					,[RegularExpression]
					)
				VALUES
					(
					@FeatureId
					,@Name
					,@DisplayName
					,@Description
					,@DisplayNameAlt
					,@DescriptionAlt
					,@Value
					,@DisplayOrder
					,@DefaultOption
					,@Enabled
					,@FeatureOptionTypeId
					,@RegularExpression
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the FeatureOption table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_Update
(

	@Id int   ,

	@FeatureId int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@Description varchar (500)  ,

	@DisplayNameAlt nvarchar (100)  ,

	@DescriptionAlt nvarchar (500)  ,

	@Value varchar (100)  ,

	@DisplayOrder int   ,

	@DefaultOption bit   ,

	@Enabled bit   ,

	@FeatureOptionTypeId int   ,

	@RegularExpression varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[FeatureOption]
				SET
					[FeatureID] = @FeatureId
					,[Name] = @Name
					,[DisplayName] = @DisplayName
					,[Description] = @Description
					,[DisplayNameAlt] = @DisplayNameAlt
					,[DescriptionAlt] = @DescriptionAlt
					,[Value] = @Value
					,[DisplayOrder] = @DisplayOrder
					,[DefaultOption] = @DefaultOption
					,[Enabled] = @Enabled
					,[FeatureOptionTypeID] = @FeatureOptionTypeId
					,[RegularExpression] = @RegularExpression
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the FeatureOption table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[FeatureOption] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_GetByFeatureOptionTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_GetByFeatureOptionTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_GetByFeatureOptionTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOption table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_GetByFeatureOptionTypeId
(

	@FeatureOptionTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
				WHERE
					[FeatureOptionTypeID] = @FeatureOptionTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOption table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_GetByNameFeatureIdId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_GetByNameFeatureIdId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_GetByNameFeatureIdId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOption table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_GetByNameFeatureIdId
(

	@Name varchar (50)  ,

	@FeatureId int   ,

	@Id int   
)
AS


				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
				WHERE
					[Name] = @Name
					AND [FeatureID] = @FeatureId
					AND [ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_GetByFeatureId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_GetByFeatureId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_GetByFeatureId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the FeatureOption table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_GetByFeatureId
(

	@FeatureId int   
)
AS


				SELECT
					[ID],
					[FeatureID],
					[Name],
					[DisplayName],
					[Description],
					[DisplayNameAlt],
					[DescriptionAlt],
					[Value],
					[DisplayOrder],
					[DefaultOption],
					[Enabled],
					[FeatureOptionTypeID],
					[RegularExpression]
				FROM
					[dbo].[FeatureOption]
				WHERE
					[FeatureID] = @FeatureId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pFeatureOption_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pFeatureOption_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pFeatureOption_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the FeatureOption table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pFeatureOption_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@FeatureId int   = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (50)  = null ,

	@Description varchar (500)  = null ,

	@DisplayNameAlt nvarchar (100)  = null ,

	@DescriptionAlt nvarchar (500)  = null ,

	@Value varchar (100)  = null ,

	@DisplayOrder int   = null ,

	@DefaultOption bit   = null ,

	@Enabled bit   = null ,

	@FeatureOptionTypeId int   = null ,

	@RegularExpression varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [FeatureID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [Value]
	, [DisplayOrder]
	, [DefaultOption]
	, [Enabled]
	, [FeatureOptionTypeID]
	, [RegularExpression]
    FROM
	[dbo].[FeatureOption]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([FeatureID] = @FeatureId OR @FeatureId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayNameAlt] = @DisplayNameAlt OR @DisplayNameAlt IS NULL)
	AND ([DescriptionAlt] = @DescriptionAlt OR @DescriptionAlt IS NULL)
	AND ([Value] = @Value OR @Value IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([DefaultOption] = @DefaultOption OR @DefaultOption IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([FeatureOptionTypeID] = @FeatureOptionTypeId OR @FeatureOptionTypeId IS NULL)
	AND ([RegularExpression] = @RegularExpression OR @RegularExpression IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [FeatureID]
	, [Name]
	, [DisplayName]
	, [Description]
	, [DisplayNameAlt]
	, [DescriptionAlt]
	, [Value]
	, [DisplayOrder]
	, [DefaultOption]
	, [Enabled]
	, [FeatureOptionTypeID]
	, [RegularExpression]
    FROM
	[dbo].[FeatureOption]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([FeatureID] = @FeatureId AND @FeatureId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayNameAlt] = @DisplayNameAlt AND @DisplayNameAlt is not null)
	OR ([DescriptionAlt] = @DescriptionAlt AND @DescriptionAlt is not null)
	OR ([Value] = @Value AND @Value is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([DefaultOption] = @DefaultOption AND @DefaultOption is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([FeatureOptionTypeID] = @FeatureOptionTypeId AND @FeatureOptionTypeId is not null)
	OR ([RegularExpression] = @RegularExpression AND @RegularExpression is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceCharges_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceCharges_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceCharges_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the InvoiceCharges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceCharges_Get_List

AS


				
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[InvoiceCharges]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceCharges_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceCharges_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceCharges_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceCharges table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceCharges_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeID]'
				SET @SQL = @SQL + ', [TransactionDescription]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionAmount]'
				SET @SQL = @SQL + ', [LocalTaxRate]'
				SET @SQL = @SQL + ', [FederalTaxRate]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [TransactionTotal]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [WSTransactionAmount]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceCharges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeID],'
				SET @SQL = @SQL + ' [TransactionDescription],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionAmount],'
				SET @SQL = @SQL + ' [LocalTaxRate],'
				SET @SQL = @SQL + ' [FederalTaxRate],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [TransactionTotal],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [WSTransactionAmount],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceCharges]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceCharges_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceCharges_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceCharges_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the InvoiceCharges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceCharges_Insert
(

	@Id int    OUTPUT,

	@StartDate datetime   ,

	@EndDate datetime   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@CustomerTransactionTypeId int   ,

	@TransactionDescription varchar (100)  ,

	@TransactionDate datetime   ,

	@TransactionAmount decimal (9, 2)  ,

	@LocalTaxRate decimal (9, 5)  ,

	@FederalTaxRate decimal (9, 5)  ,

	@LocalTaxAmount decimal (18, 7)  ,

	@FederalTaxAmount decimal (18, 7)  ,

	@TransactionTotal decimal (9, 2)  ,

	@Wholesaler_ProductId int   ,

	@ProductRateId int   ,

	@Quantity int   ,

	@SellRate decimal (9, 4)  ,

	@BuyRate decimal (9, 4)  ,

	@WsTransactionAmount decimal (9, 2)  ,

	@ReferenceNumber varchar (100)  ,

	@UniqueConferenceId varchar (50)  ,

	@ElapsedTimeSeconds int   
)
AS


					
				INSERT INTO [dbo].[InvoiceCharges]
					(
					[StartDate]
					,[EndDate]
					,[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[CustomerTransactionTypeID]
					,[TransactionDescription]
					,[TransactionDate]
					,[TransactionAmount]
					,[LocalTaxRate]
					,[FederalTaxRate]
					,[LocalTaxAmount]
					,[FederalTaxAmount]
					,[TransactionTotal]
					,[Wholesaler_ProductID]
					,[ProductRateID]
					,[Quantity]
					,[SellRate]
					,[BuyRate]
					,[WSTransactionAmount]
					,[ReferenceNumber]
					,[UniqueConferenceID]
					,[ElapsedTimeSeconds]
					)
				VALUES
					(
					@StartDate
					,@EndDate
					,@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@CustomerTransactionTypeId
					,@TransactionDescription
					,@TransactionDate
					,@TransactionAmount
					,@LocalTaxRate
					,@FederalTaxRate
					,@LocalTaxAmount
					,@FederalTaxAmount
					,@TransactionTotal
					,@Wholesaler_ProductId
					,@ProductRateId
					,@Quantity
					,@SellRate
					,@BuyRate
					,@WsTransactionAmount
					,@ReferenceNumber
					,@UniqueConferenceId
					,@ElapsedTimeSeconds
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceCharges_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceCharges_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceCharges_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the InvoiceCharges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceCharges_Update
(

	@Id int   ,

	@StartDate datetime   ,

	@EndDate datetime   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@CustomerTransactionTypeId int   ,

	@TransactionDescription varchar (100)  ,

	@TransactionDate datetime   ,

	@TransactionAmount decimal (9, 2)  ,

	@LocalTaxRate decimal (9, 5)  ,

	@FederalTaxRate decimal (9, 5)  ,

	@LocalTaxAmount decimal (18, 7)  ,

	@FederalTaxAmount decimal (18, 7)  ,

	@TransactionTotal decimal (9, 2)  ,

	@Wholesaler_ProductId int   ,

	@ProductRateId int   ,

	@Quantity int   ,

	@SellRate decimal (9, 4)  ,

	@BuyRate decimal (9, 4)  ,

	@WsTransactionAmount decimal (9, 2)  ,

	@ReferenceNumber varchar (100)  ,

	@UniqueConferenceId varchar (50)  ,

	@ElapsedTimeSeconds int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[InvoiceCharges]
				SET
					[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[CustomerTransactionTypeID] = @CustomerTransactionTypeId
					,[TransactionDescription] = @TransactionDescription
					,[TransactionDate] = @TransactionDate
					,[TransactionAmount] = @TransactionAmount
					,[LocalTaxRate] = @LocalTaxRate
					,[FederalTaxRate] = @FederalTaxRate
					,[LocalTaxAmount] = @LocalTaxAmount
					,[FederalTaxAmount] = @FederalTaxAmount
					,[TransactionTotal] = @TransactionTotal
					,[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[ProductRateID] = @ProductRateId
					,[Quantity] = @Quantity
					,[SellRate] = @SellRate
					,[BuyRate] = @BuyRate
					,[WSTransactionAmount] = @WsTransactionAmount
					,[ReferenceNumber] = @ReferenceNumber
					,[UniqueConferenceID] = @UniqueConferenceId
					,[ElapsedTimeSeconds] = @ElapsedTimeSeconds
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceCharges_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceCharges_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceCharges_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the InvoiceCharges table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceCharges_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[InvoiceCharges] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceCharges_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceCharges_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceCharges_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceCharges table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceCharges_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[InvoiceCharges]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceCharges_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceCharges_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceCharges_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the InvoiceCharges table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceCharges_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@StartDate datetime   = null ,

	@EndDate datetime   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@ModeratorId int   = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@SecCustomerNumber varchar (6)  = null ,

	@CustomerTransactionTypeId int   = null ,

	@TransactionDescription varchar (100)  = null ,

	@TransactionDate datetime   = null ,

	@TransactionAmount decimal (9, 2)  = null ,

	@LocalTaxRate decimal (9, 5)  = null ,

	@FederalTaxRate decimal (9, 5)  = null ,

	@LocalTaxAmount decimal (18, 7)  = null ,

	@FederalTaxAmount decimal (18, 7)  = null ,

	@TransactionTotal decimal (9, 2)  = null ,

	@Wholesaler_ProductId int   = null ,

	@ProductRateId int   = null ,

	@Quantity int   = null ,

	@SellRate decimal (9, 4)  = null ,

	@BuyRate decimal (9, 4)  = null ,

	@WsTransactionAmount decimal (9, 2)  = null ,

	@ReferenceNumber varchar (100)  = null ,

	@UniqueConferenceId varchar (50)  = null ,

	@ElapsedTimeSeconds int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [StartDate]
	, [EndDate]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [CustomerTransactionTypeID]
	, [TransactionDescription]
	, [TransactionDate]
	, [TransactionAmount]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TransactionTotal]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[InvoiceCharges]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([CustomerTransactionTypeID] = @CustomerTransactionTypeId OR @CustomerTransactionTypeId IS NULL)
	AND ([TransactionDescription] = @TransactionDescription OR @TransactionDescription IS NULL)
	AND ([TransactionDate] = @TransactionDate OR @TransactionDate IS NULL)
	AND ([TransactionAmount] = @TransactionAmount OR @TransactionAmount IS NULL)
	AND ([LocalTaxRate] = @LocalTaxRate OR @LocalTaxRate IS NULL)
	AND ([FederalTaxRate] = @FederalTaxRate OR @FederalTaxRate IS NULL)
	AND ([LocalTaxAmount] = @LocalTaxAmount OR @LocalTaxAmount IS NULL)
	AND ([FederalTaxAmount] = @FederalTaxAmount OR @FederalTaxAmount IS NULL)
	AND ([TransactionTotal] = @TransactionTotal OR @TransactionTotal IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([SellRate] = @SellRate OR @SellRate IS NULL)
	AND ([BuyRate] = @BuyRate OR @BuyRate IS NULL)
	AND ([WSTransactionAmount] = @WsTransactionAmount OR @WsTransactionAmount IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([ElapsedTimeSeconds] = @ElapsedTimeSeconds OR @ElapsedTimeSeconds IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [StartDate]
	, [EndDate]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [CustomerTransactionTypeID]
	, [TransactionDescription]
	, [TransactionDate]
	, [TransactionAmount]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TransactionTotal]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[InvoiceCharges]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([CustomerTransactionTypeID] = @CustomerTransactionTypeId AND @CustomerTransactionTypeId is not null)
	OR ([TransactionDescription] = @TransactionDescription AND @TransactionDescription is not null)
	OR ([TransactionDate] = @TransactionDate AND @TransactionDate is not null)
	OR ([TransactionAmount] = @TransactionAmount AND @TransactionAmount is not null)
	OR ([LocalTaxRate] = @LocalTaxRate AND @LocalTaxRate is not null)
	OR ([FederalTaxRate] = @FederalTaxRate AND @FederalTaxRate is not null)
	OR ([LocalTaxAmount] = @LocalTaxAmount AND @LocalTaxAmount is not null)
	OR ([FederalTaxAmount] = @FederalTaxAmount AND @FederalTaxAmount is not null)
	OR ([TransactionTotal] = @TransactionTotal AND @TransactionTotal is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([SellRate] = @SellRate AND @SellRate is not null)
	OR ([BuyRate] = @BuyRate AND @BuyRate is not null)
	OR ([WSTransactionAmount] = @WsTransactionAmount AND @WsTransactionAmount is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([ElapsedTimeSeconds] = @ElapsedTimeSeconds AND @ElapsedTimeSeconds is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the InvoiceNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceNotes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [Note]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [Note],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [ModifiedBy]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceNotes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the InvoiceNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@StartDate datetime   ,

	@EndDate datetime   ,

	@Note nvarchar (1000)  ,

	@Enabled bit   ,

	@ModifiedBy varchar (50)  
)
AS


					
				INSERT INTO [dbo].[InvoiceNotes]
					(
					[WholesalerID]
					,[StartDate]
					,[EndDate]
					,[Note]
					,[Enabled]
					,[ModifiedBy]
					)
				VALUES
					(
					@WholesalerId
					,@StartDate
					,@EndDate
					,@Note
					,@Enabled
					,@ModifiedBy
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the InvoiceNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@StartDate datetime   ,

	@EndDate datetime   ,

	@Note nvarchar (1000)  ,

	@Enabled bit   ,

	@ModifiedBy varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[InvoiceNotes]
				SET
					[WholesalerID] = @WholesalerId
					,[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[Note] = @Note
					,[Enabled] = @Enabled
					,[ModifiedBy] = @ModifiedBy
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the InvoiceNotes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[InvoiceNotes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceNotes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_GetByStartDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_GetByStartDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_GetByStartDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceNotes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_GetByStartDate
(

	@StartDate datetime   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
				WHERE
					[StartDate] = @StartDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_GetByEndDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_GetByEndDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_GetByEndDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceNotes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_GetByEndDate
(

	@EndDate datetime   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
				WHERE
					[EndDate] = @EndDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceNotes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[StartDate],
					[EndDate],
					[Note],
					[Enabled],
					[ModifiedBy]
				FROM
					[dbo].[InvoiceNotes]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceNotes_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceNotes_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceNotes_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the InvoiceNotes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceNotes_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@StartDate datetime   = null ,

	@EndDate datetime   = null ,

	@Note nvarchar (1000)  = null ,

	@Enabled bit   = null ,

	@ModifiedBy varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [StartDate]
	, [EndDate]
	, [Note]
	, [Enabled]
	, [ModifiedBy]
    FROM
	[dbo].[InvoiceNotes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([Note] = @Note OR @Note IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [StartDate]
	, [EndDate]
	, [Note]
	, [Enabled]
	, [ModifiedBy]
    FROM
	[dbo].[InvoiceNotes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([Note] = @Note AND @Note is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Lead table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Lead table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [AssignedDate]'
				SET @SQL = @SQL + ', [ExpiryDate]'
				SET @SQL = @SQL + ', [ContactName]'
				SET @SQL = @SQL + ', [ContactNumber]'
				SET @SQL = @SQL + ', [ContactEmail]'
				SET @SQL = @SQL + ' FROM [dbo].[Lead]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [AssignedDate],'
				SET @SQL = @SQL + ' [ExpiryDate],'
				SET @SQL = @SQL + ' [ContactName],'
				SET @SQL = @SQL + ' [ContactNumber],'
				SET @SQL = @SQL + ' [ContactEmail]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Lead]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Lead table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_Insert
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@CompanyName varchar (50)  ,

	@SalesPersonId int   ,

	@CreatedDate datetime   ,

	@AssignedDate datetime   ,

	@ExpiryDate datetime   ,

	@ContactName varchar (100)  ,

	@ContactNumber varchar (30)  ,

	@ContactEmail varchar (100)  
)
AS


					
				INSERT INTO [dbo].[Lead]
					(
					[ID]
					,[WholesalerID]
					,[CompanyName]
					,[SalesPersonID]
					,[CreatedDate]
					,[AssignedDate]
					,[ExpiryDate]
					,[ContactName]
					,[ContactNumber]
					,[ContactEmail]
					)
				VALUES
					(
					@Id
					,@WholesalerId
					,@CompanyName
					,@SalesPersonId
					,@CreatedDate
					,@AssignedDate
					,@ExpiryDate
					,@ContactName
					,@ContactNumber
					,@ContactEmail
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Lead table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_Update
(

	@Id int   ,

	@OriginalId int   ,

	@WholesalerId varchar (10)  ,

	@CompanyName varchar (50)  ,

	@SalesPersonId int   ,

	@CreatedDate datetime   ,

	@AssignedDate datetime   ,

	@ExpiryDate datetime   ,

	@ContactName varchar (100)  ,

	@ContactNumber varchar (30)  ,

	@ContactEmail varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Lead]
				SET
					[ID] = @Id
					,[WholesalerID] = @WholesalerId
					,[CompanyName] = @CompanyName
					,[SalesPersonID] = @SalesPersonId
					,[CreatedDate] = @CreatedDate
					,[AssignedDate] = @AssignedDate
					,[ExpiryDate] = @ExpiryDate
					,[ContactName] = @ContactName
					,[ContactNumber] = @ContactNumber
					,[ContactEmail] = @ContactEmail
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Lead table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Lead] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Lead table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_GetBySalesPersonId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_GetBySalesPersonId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_GetBySalesPersonId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Lead table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_GetBySalesPersonId
(

	@SalesPersonId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
				WHERE
					[SalesPersonID] = @SalesPersonId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Lead table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_GetByContactEmail procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_GetByContactEmail') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_GetByContactEmail
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Lead table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_GetByContactEmail
(

	@ContactEmail varchar (100)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CompanyName],
					[SalesPersonID],
					[CreatedDate],
					[AssignedDate],
					[ExpiryDate],
					[ContactName],
					[ContactNumber],
					[ContactEmail]
				FROM
					[dbo].[Lead]
				WHERE
					[ContactEmail] = @ContactEmail
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLead_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLead_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLead_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Lead table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLead_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CompanyName varchar (50)  = null ,

	@SalesPersonId int   = null ,

	@CreatedDate datetime   = null ,

	@AssignedDate datetime   = null ,

	@ExpiryDate datetime   = null ,

	@ContactName varchar (100)  = null ,

	@ContactNumber varchar (30)  = null ,

	@ContactEmail varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CompanyName]
	, [SalesPersonID]
	, [CreatedDate]
	, [AssignedDate]
	, [ExpiryDate]
	, [ContactName]
	, [ContactNumber]
	, [ContactEmail]
    FROM
	[dbo].[Lead]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CompanyName] = @CompanyName OR @CompanyName IS NULL)
	AND ([SalesPersonID] = @SalesPersonId OR @SalesPersonId IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([AssignedDate] = @AssignedDate OR @AssignedDate IS NULL)
	AND ([ExpiryDate] = @ExpiryDate OR @ExpiryDate IS NULL)
	AND ([ContactName] = @ContactName OR @ContactName IS NULL)
	AND ([ContactNumber] = @ContactNumber OR @ContactNumber IS NULL)
	AND ([ContactEmail] = @ContactEmail OR @ContactEmail IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CompanyName]
	, [SalesPersonID]
	, [CreatedDate]
	, [AssignedDate]
	, [ExpiryDate]
	, [ContactName]
	, [ContactNumber]
	, [ContactEmail]
    FROM
	[dbo].[Lead]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CompanyName] = @CompanyName AND @CompanyName is not null)
	OR ([SalesPersonID] = @SalesPersonId AND @SalesPersonId is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([AssignedDate] = @AssignedDate AND @AssignedDate is not null)
	OR ([ExpiryDate] = @ExpiryDate AND @ExpiryDate is not null)
	OR ([ContactName] = @ContactName AND @ContactName is not null)
	OR ([ContactNumber] = @ContactNumber AND @ContactNumber is not null)
	OR ([ContactEmail] = @ContactEmail AND @ContactEmail is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLanguage_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLanguage_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLanguage_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Language table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLanguage_Get_List

AS


				
				SELECT
					[ID],
					[DisplayName],
					[DisplayOrder]
				FROM
					[dbo].[Language]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLanguage_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLanguage_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLanguage_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Language table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLanguage_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[Language]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Language]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLanguage_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLanguage_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLanguage_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Language table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLanguage_Insert
(

	@Id varchar (5)  ,

	@DisplayName varchar (50)  ,

	@DisplayOrder smallint   
)
AS


					
				INSERT INTO [dbo].[Language]
					(
					[ID]
					,[DisplayName]
					,[DisplayOrder]
					)
				VALUES
					(
					@Id
					,@DisplayName
					,@DisplayOrder
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLanguage_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLanguage_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLanguage_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Language table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLanguage_Update
(

	@Id varchar (5)  ,

	@OriginalId varchar (5)  ,

	@DisplayName varchar (50)  ,

	@DisplayOrder smallint   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Language]
				SET
					[ID] = @Id
					,[DisplayName] = @DisplayName
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLanguage_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLanguage_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLanguage_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Language table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLanguage_Delete
(

	@Id varchar (5)  
)
AS


				DELETE FROM [dbo].[Language] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLanguage_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLanguage_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLanguage_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Language table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLanguage_GetById
(

	@Id varchar (5)  
)
AS


				SELECT
					[ID],
					[DisplayName],
					[DisplayOrder]
				FROM
					[dbo].[Language]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLanguage_GetByWholesalerIdFromIrWholesaler procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLanguage_GetByWholesalerIdFromIrWholesaler') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLanguage_GetByWholesalerIdFromIrWholesaler
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records through a junction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLanguage_GetByWholesalerIdFromIrWholesaler
(

	@WholesalerId varchar (10)  
)
AS


SELECT dbo.[Language].[ID]
       ,dbo.[Language].[DisplayName]
       ,dbo.[Language].[DisplayOrder]
  FROM dbo.[Language]
 WHERE EXISTS (SELECT 1
                 FROM dbo.[IRWholesaler] 
                WHERE dbo.[IRWholesaler].[WholesalerID] = @WholesalerId
                  AND dbo.[IRWholesaler].[LanguageID] = dbo.[Language].[ID]
                  )
				SELECT @@ROWCOUNT			
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pLanguage_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pLanguage_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pLanguage_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Language table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pLanguage_Find
(

	@SearchUsingOR bit   = null ,

	@Id varchar (5)  = null ,

	@DisplayName varchar (50)  = null ,

	@DisplayOrder smallint   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [DisplayName]
	, [DisplayOrder]
    FROM
	[dbo].[Language]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [DisplayName]
	, [DisplayOrder]
    FROM
	[dbo].[Language]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the IRWholesaler table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_Get_List

AS


				
				SELECT
					[WholesalerID],
					[LanguageID],
					[IRCustomerID],
					[LocalDNIS],
					[LocalDialNumber],
					[LocalAccessType],
					[TollFreeDNIS],
					[TollFreeDialNumber],
					[TollFreeAccessType],
					[InstantReplayURL],
					[StorageDuration],
					[InstantReplayLoginURL]
				FROM
					[dbo].[IRWholesaler]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the IRWholesaler table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[WholesalerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [LanguageID]'
				SET @SQL = @SQL + ', [IRCustomerID]'
				SET @SQL = @SQL + ', [LocalDNIS]'
				SET @SQL = @SQL + ', [LocalDialNumber]'
				SET @SQL = @SQL + ', [LocalAccessType]'
				SET @SQL = @SQL + ', [TollFreeDNIS]'
				SET @SQL = @SQL + ', [TollFreeDialNumber]'
				SET @SQL = @SQL + ', [TollFreeAccessType]'
				SET @SQL = @SQL + ', [InstantReplayURL]'
				SET @SQL = @SQL + ', [StorageDuration]'
				SET @SQL = @SQL + ', [InstantReplayLoginURL]'
				SET @SQL = @SQL + ' FROM [dbo].[IRWholesaler]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [LanguageID],'
				SET @SQL = @SQL + ' [IRCustomerID],'
				SET @SQL = @SQL + ' [LocalDNIS],'
				SET @SQL = @SQL + ' [LocalDialNumber],'
				SET @SQL = @SQL + ' [LocalAccessType],'
				SET @SQL = @SQL + ' [TollFreeDNIS],'
				SET @SQL = @SQL + ' [TollFreeDialNumber],'
				SET @SQL = @SQL + ' [TollFreeAccessType],'
				SET @SQL = @SQL + ' [InstantReplayURL],'
				SET @SQL = @SQL + ' [StorageDuration],'
				SET @SQL = @SQL + ' [InstantReplayLoginURL]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[IRWholesaler]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the IRWholesaler table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_Insert
(

	@WholesalerId varchar (10)  ,

	@LanguageId varchar (5)  ,

	@IrCustomerId varchar (10)  ,

	@LocalDnis varchar (36)  ,

	@LocalDialNumber varchar (36)  ,

	@LocalAccessType int   ,

	@TollFreeDnis varchar (36)  ,

	@TollFreeDialNumber varchar (36)  ,

	@TollFreeAccessType int   ,

	@InstantReplayUrl varchar (100)  ,

	@StorageDuration smallint   ,

	@InstantReplayLoginUrl varchar (100)  
)
AS


					
				INSERT INTO [dbo].[IRWholesaler]
					(
					[WholesalerID]
					,[LanguageID]
					,[IRCustomerID]
					,[LocalDNIS]
					,[LocalDialNumber]
					,[LocalAccessType]
					,[TollFreeDNIS]
					,[TollFreeDialNumber]
					,[TollFreeAccessType]
					,[InstantReplayURL]
					,[StorageDuration]
					,[InstantReplayLoginURL]
					)
				VALUES
					(
					@WholesalerId
					,@LanguageId
					,@IrCustomerId
					,@LocalDnis
					,@LocalDialNumber
					,@LocalAccessType
					,@TollFreeDnis
					,@TollFreeDialNumber
					,@TollFreeAccessType
					,@InstantReplayUrl
					,@StorageDuration
					,@InstantReplayLoginUrl
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the IRWholesaler table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_Update
(

	@WholesalerId varchar (10)  ,

	@OriginalWholesalerId varchar (10)  ,

	@LanguageId varchar (5)  ,

	@OriginalLanguageId varchar (5)  ,

	@IrCustomerId varchar (10)  ,

	@LocalDnis varchar (36)  ,

	@LocalDialNumber varchar (36)  ,

	@LocalAccessType int   ,

	@TollFreeDnis varchar (36)  ,

	@TollFreeDialNumber varchar (36)  ,

	@TollFreeAccessType int   ,

	@InstantReplayUrl varchar (100)  ,

	@StorageDuration smallint   ,

	@InstantReplayLoginUrl varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[IRWholesaler]
				SET
					[WholesalerID] = @WholesalerId
					,[LanguageID] = @LanguageId
					,[IRCustomerID] = @IrCustomerId
					,[LocalDNIS] = @LocalDnis
					,[LocalDialNumber] = @LocalDialNumber
					,[LocalAccessType] = @LocalAccessType
					,[TollFreeDNIS] = @TollFreeDnis
					,[TollFreeDialNumber] = @TollFreeDialNumber
					,[TollFreeAccessType] = @TollFreeAccessType
					,[InstantReplayURL] = @InstantReplayUrl
					,[StorageDuration] = @StorageDuration
					,[InstantReplayLoginURL] = @InstantReplayLoginUrl
				WHERE
[WholesalerID] = @OriginalWholesalerId 
AND [LanguageID] = @OriginalLanguageId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the IRWholesaler table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_Delete
(

	@WholesalerId varchar (10)  ,

	@LanguageId varchar (5)  
)
AS


				DELETE FROM [dbo].[IRWholesaler] WITH (ROWLOCK) 
				WHERE
					[WholesalerID] = @WholesalerId
					AND [LanguageID] = @LanguageId
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the IRWholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[WholesalerID],
					[LanguageID],
					[IRCustomerID],
					[LocalDNIS],
					[LocalDialNumber],
					[LocalAccessType],
					[TollFreeDNIS],
					[TollFreeDialNumber],
					[TollFreeAccessType],
					[InstantReplayURL],
					[StorageDuration],
					[InstantReplayLoginURL]
				FROM
					[dbo].[IRWholesaler]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_GetByLanguageId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_GetByLanguageId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_GetByLanguageId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the IRWholesaler table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_GetByLanguageId
(

	@LanguageId varchar (5)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[WholesalerID],
					[LanguageID],
					[IRCustomerID],
					[LocalDNIS],
					[LocalDialNumber],
					[LocalAccessType],
					[TollFreeDNIS],
					[TollFreeDialNumber],
					[TollFreeAccessType],
					[InstantReplayURL],
					[StorageDuration],
					[InstantReplayLoginURL]
				FROM
					[dbo].[IRWholesaler]
				WHERE
					[LanguageID] = @LanguageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_GetByWholesalerIdLanguageId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_GetByWholesalerIdLanguageId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_GetByWholesalerIdLanguageId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the IRWholesaler table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_GetByWholesalerIdLanguageId
(

	@WholesalerId varchar (10)  ,

	@LanguageId varchar (5)  
)
AS


				SELECT
					[WholesalerID],
					[LanguageID],
					[IRCustomerID],
					[LocalDNIS],
					[LocalDialNumber],
					[LocalAccessType],
					[TollFreeDNIS],
					[TollFreeDialNumber],
					[TollFreeAccessType],
					[InstantReplayURL],
					[StorageDuration],
					[InstantReplayLoginURL]
				FROM
					[dbo].[IRWholesaler]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [LanguageID] = @LanguageId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pIRWholesaler_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pIRWholesaler_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pIRWholesaler_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the IRWholesaler table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pIRWholesaler_Find
(

	@SearchUsingOR bit   = null ,

	@WholesalerId varchar (10)  = null ,

	@LanguageId varchar (5)  = null ,

	@IrCustomerId varchar (10)  = null ,

	@LocalDnis varchar (36)  = null ,

	@LocalDialNumber varchar (36)  = null ,

	@LocalAccessType int   = null ,

	@TollFreeDnis varchar (36)  = null ,

	@TollFreeDialNumber varchar (36)  = null ,

	@TollFreeAccessType int   = null ,

	@InstantReplayUrl varchar (100)  = null ,

	@StorageDuration smallint   = null ,

	@InstantReplayLoginUrl varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [WholesalerID]
	, [LanguageID]
	, [IRCustomerID]
	, [LocalDNIS]
	, [LocalDialNumber]
	, [LocalAccessType]
	, [TollFreeDNIS]
	, [TollFreeDialNumber]
	, [TollFreeAccessType]
	, [InstantReplayURL]
	, [StorageDuration]
	, [InstantReplayLoginURL]
    FROM
	[dbo].[IRWholesaler]
    WHERE 
	 ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([LanguageID] = @LanguageId OR @LanguageId IS NULL)
	AND ([IRCustomerID] = @IrCustomerId OR @IrCustomerId IS NULL)
	AND ([LocalDNIS] = @LocalDnis OR @LocalDnis IS NULL)
	AND ([LocalDialNumber] = @LocalDialNumber OR @LocalDialNumber IS NULL)
	AND ([LocalAccessType] = @LocalAccessType OR @LocalAccessType IS NULL)
	AND ([TollFreeDNIS] = @TollFreeDnis OR @TollFreeDnis IS NULL)
	AND ([TollFreeDialNumber] = @TollFreeDialNumber OR @TollFreeDialNumber IS NULL)
	AND ([TollFreeAccessType] = @TollFreeAccessType OR @TollFreeAccessType IS NULL)
	AND ([InstantReplayURL] = @InstantReplayUrl OR @InstantReplayUrl IS NULL)
	AND ([StorageDuration] = @StorageDuration OR @StorageDuration IS NULL)
	AND ([InstantReplayLoginURL] = @InstantReplayLoginUrl OR @InstantReplayLoginUrl IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [WholesalerID]
	, [LanguageID]
	, [IRCustomerID]
	, [LocalDNIS]
	, [LocalDialNumber]
	, [LocalAccessType]
	, [TollFreeDNIS]
	, [TollFreeDialNumber]
	, [TollFreeAccessType]
	, [InstantReplayURL]
	, [StorageDuration]
	, [InstantReplayLoginURL]
    FROM
	[dbo].[IRWholesaler]
    WHERE 
	 ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([LanguageID] = @LanguageId AND @LanguageId is not null)
	OR ([IRCustomerID] = @IrCustomerId AND @IrCustomerId is not null)
	OR ([LocalDNIS] = @LocalDnis AND @LocalDnis is not null)
	OR ([LocalDialNumber] = @LocalDialNumber AND @LocalDialNumber is not null)
	OR ([LocalAccessType] = @LocalAccessType AND @LocalAccessType is not null)
	OR ([TollFreeDNIS] = @TollFreeDnis AND @TollFreeDnis is not null)
	OR ([TollFreeDialNumber] = @TollFreeDialNumber AND @TollFreeDialNumber is not null)
	OR ([TollFreeAccessType] = @TollFreeAccessType AND @TollFreeAccessType is not null)
	OR ([InstantReplayURL] = @InstantReplayUrl AND @InstantReplayUrl is not null)
	OR ([StorageDuration] = @StorageDuration AND @StorageDuration is not null)
	OR ([InstantReplayLoginURL] = @InstantReplayLoginUrl AND @InstantReplayLoginUrl is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the InvoiceSummary table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_Get_List

AS


				
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the InvoiceSummary table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [EndDate]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [InvoiceNumber]'
				SET @SQL = @SQL + ', [AmountOfLastBill]'
				SET @SQL = @SQL + ', [Payment1]'
				SET @SQL = @SQL + ', [TotalCredits]'
				SET @SQL = @SQL + ', [TotalLatePaymentCharges]'
				SET @SQL = @SQL + ', [BalForward]'
				SET @SQL = @SQL + ', [ProductCharges]'
				SET @SQL = @SQL + ', [MiscCharges]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [TotalCurrent]'
				SET @SQL = @SQL + ', [BalanceForward]'
				SET @SQL = @SQL + ', [InvoiceDate]'
				SET @SQL = @SQL + ', [DueDate]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [TotalFreeCredits]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [BPayCustomerRefNumber]'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceSummary]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [EndDate],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [InvoiceNumber],'
				SET @SQL = @SQL + ' [AmountOfLastBill],'
				SET @SQL = @SQL + ' [Payment1],'
				SET @SQL = @SQL + ' [TotalCredits],'
				SET @SQL = @SQL + ' [TotalLatePaymentCharges],'
				SET @SQL = @SQL + ' [BalForward],'
				SET @SQL = @SQL + ' [ProductCharges],'
				SET @SQL = @SQL + ' [MiscCharges],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [TotalCurrent],'
				SET @SQL = @SQL + ' [BalanceForward],'
				SET @SQL = @SQL + ' [InvoiceDate],'
				SET @SQL = @SQL + ' [DueDate],'
				SET @SQL = @SQL + ' [CurrencyID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [TotalFreeCredits],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [BPayCustomerRefNumber]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[InvoiceSummary]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the InvoiceSummary table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_Insert
(

	@Id int    OUTPUT,

	@StartDate datetime   ,

	@EndDate datetime   ,

	@CustomerId int   ,

	@PriCustomerNumber varchar (10)  ,

	@InvoiceNumber varchar (30)  ,

	@AmountOfLastBill decimal (10, 2)  ,

	@Payment1 decimal (10, 2)  ,

	@TotalCredits decimal (10, 2)  ,

	@TotalLatePaymentCharges decimal (10, 2)  ,

	@BalForward decimal (10, 2)  ,

	@ProductCharges decimal (10, 2)  ,

	@MiscCharges decimal (10, 2)  ,

	@LocalTaxAmount decimal (10, 2)  ,

	@FederalTaxAmount decimal (10, 2)  ,

	@TotalCurrent decimal (10, 2)  ,

	@BalanceForward decimal (10, 2)  ,

	@InvoiceDate datetime   ,

	@DueDate datetime   ,

	@CurrencyId char (3)  ,

	@WholesalerId varchar (10)  ,

	@TotalFreeCredits decimal (10, 2)  ,

	@Wholesaler_ProductId int   ,

	@BpayCustomerRefNumber varchar (30)  
)
AS


					
				INSERT INTO [dbo].[InvoiceSummary]
					(
					[StartDate]
					,[EndDate]
					,[CustomerID]
					,[PriCustomerNumber]
					,[InvoiceNumber]
					,[AmountOfLastBill]
					,[Payment1]
					,[TotalCredits]
					,[TotalLatePaymentCharges]
					,[BalForward]
					,[ProductCharges]
					,[MiscCharges]
					,[LocalTaxAmount]
					,[FederalTaxAmount]
					,[TotalCurrent]
					,[BalanceForward]
					,[InvoiceDate]
					,[DueDate]
					,[CurrencyID]
					,[WholesalerID]
					,[TotalFreeCredits]
					,[Wholesaler_ProductID]
					,[BPayCustomerRefNumber]
					)
				VALUES
					(
					@StartDate
					,@EndDate
					,@CustomerId
					,@PriCustomerNumber
					,@InvoiceNumber
					,@AmountOfLastBill
					,@Payment1
					,@TotalCredits
					,@TotalLatePaymentCharges
					,@BalForward
					,@ProductCharges
					,@MiscCharges
					,@LocalTaxAmount
					,@FederalTaxAmount
					,@TotalCurrent
					,@BalanceForward
					,@InvoiceDate
					,@DueDate
					,@CurrencyId
					,@WholesalerId
					,@TotalFreeCredits
					,@Wholesaler_ProductId
					,@BpayCustomerRefNumber
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the InvoiceSummary table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_Update
(

	@Id int   ,

	@StartDate datetime   ,

	@EndDate datetime   ,

	@CustomerId int   ,

	@PriCustomerNumber varchar (10)  ,

	@InvoiceNumber varchar (30)  ,

	@AmountOfLastBill decimal (10, 2)  ,

	@Payment1 decimal (10, 2)  ,

	@TotalCredits decimal (10, 2)  ,

	@TotalLatePaymentCharges decimal (10, 2)  ,

	@BalForward decimal (10, 2)  ,

	@ProductCharges decimal (10, 2)  ,

	@MiscCharges decimal (10, 2)  ,

	@LocalTaxAmount decimal (10, 2)  ,

	@FederalTaxAmount decimal (10, 2)  ,

	@TotalCurrent decimal (10, 2)  ,

	@BalanceForward decimal (10, 2)  ,

	@InvoiceDate datetime   ,

	@DueDate datetime   ,

	@CurrencyId char (3)  ,

	@WholesalerId varchar (10)  ,

	@TotalFreeCredits decimal (10, 2)  ,

	@Wholesaler_ProductId int   ,

	@BpayCustomerRefNumber varchar (30)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[InvoiceSummary]
				SET
					[StartDate] = @StartDate
					,[EndDate] = @EndDate
					,[CustomerID] = @CustomerId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[InvoiceNumber] = @InvoiceNumber
					,[AmountOfLastBill] = @AmountOfLastBill
					,[Payment1] = @Payment1
					,[TotalCredits] = @TotalCredits
					,[TotalLatePaymentCharges] = @TotalLatePaymentCharges
					,[BalForward] = @BalForward
					,[ProductCharges] = @ProductCharges
					,[MiscCharges] = @MiscCharges
					,[LocalTaxAmount] = @LocalTaxAmount
					,[FederalTaxAmount] = @FederalTaxAmount
					,[TotalCurrent] = @TotalCurrent
					,[BalanceForward] = @BalanceForward
					,[InvoiceDate] = @InvoiceDate
					,[DueDate] = @DueDate
					,[CurrencyID] = @CurrencyId
					,[WholesalerID] = @WholesalerId
					,[TotalFreeCredits] = @TotalFreeCredits
					,[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[BPayCustomerRefNumber] = @BpayCustomerRefNumber
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the InvoiceSummary table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[InvoiceSummary] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_GetByStartDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_GetByStartDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_GetByStartDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_GetByStartDate
(

	@StartDate datetime   
)
AS


				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[StartDate] = @StartDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_GetByEndDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_GetByEndDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_GetByEndDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_GetByEndDate
(

	@EndDate datetime   
)
AS


				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[EndDate] = @EndDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_GetByPriCustomerNumberWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_GetByPriCustomerNumberWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_GetByPriCustomerNumberWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_GetByPriCustomerNumberWholesalerId
(

	@PriCustomerNumber varchar (10)  ,

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[PriCustomerNumber] = @PriCustomerNumber
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_GetByInvoiceNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_GetByInvoiceNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_GetByInvoiceNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_GetByInvoiceNumber
(

	@InvoiceNumber varchar (30)  
)
AS


				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[InvoiceNumber] = @InvoiceNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the InvoiceSummary table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[StartDate],
					[EndDate],
					[CustomerID],
					[PriCustomerNumber],
					[InvoiceNumber],
					[AmountOfLastBill],
					[Payment1],
					[TotalCredits],
					[TotalLatePaymentCharges],
					[BalForward],
					[ProductCharges],
					[MiscCharges],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TotalCurrent],
					[BalanceForward],
					[InvoiceDate],
					[DueDate],
					[CurrencyID],
					[WholesalerID],
					[TotalFreeCredits],
					[Wholesaler_ProductID],
					[BPayCustomerRefNumber]
				FROM
					[dbo].[InvoiceSummary]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pInvoiceSummary_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pInvoiceSummary_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pInvoiceSummary_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the InvoiceSummary table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pInvoiceSummary_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@StartDate datetime   = null ,

	@EndDate datetime   = null ,

	@CustomerId int   = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@InvoiceNumber varchar (30)  = null ,

	@AmountOfLastBill decimal (10, 2)  = null ,

	@Payment1 decimal (10, 2)  = null ,

	@TotalCredits decimal (10, 2)  = null ,

	@TotalLatePaymentCharges decimal (10, 2)  = null ,

	@BalForward decimal (10, 2)  = null ,

	@ProductCharges decimal (10, 2)  = null ,

	@MiscCharges decimal (10, 2)  = null ,

	@LocalTaxAmount decimal (10, 2)  = null ,

	@FederalTaxAmount decimal (10, 2)  = null ,

	@TotalCurrent decimal (10, 2)  = null ,

	@BalanceForward decimal (10, 2)  = null ,

	@InvoiceDate datetime   = null ,

	@DueDate datetime   = null ,

	@CurrencyId char (3)  = null ,

	@WholesalerId varchar (10)  = null ,

	@TotalFreeCredits decimal (10, 2)  = null ,

	@Wholesaler_ProductId int   = null ,

	@BpayCustomerRefNumber varchar (30)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [StartDate]
	, [EndDate]
	, [CustomerID]
	, [PriCustomerNumber]
	, [InvoiceNumber]
	, [AmountOfLastBill]
	, [Payment1]
	, [TotalCredits]
	, [TotalLatePaymentCharges]
	, [BalForward]
	, [ProductCharges]
	, [MiscCharges]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TotalCurrent]
	, [BalanceForward]
	, [InvoiceDate]
	, [DueDate]
	, [CurrencyID]
	, [WholesalerID]
	, [TotalFreeCredits]
	, [Wholesaler_ProductID]
	, [BPayCustomerRefNumber]
    FROM
	[dbo].[InvoiceSummary]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([StartDate] = @StartDate OR @StartDate IS NULL)
	AND ([EndDate] = @EndDate OR @EndDate IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([InvoiceNumber] = @InvoiceNumber OR @InvoiceNumber IS NULL)
	AND ([AmountOfLastBill] = @AmountOfLastBill OR @AmountOfLastBill IS NULL)
	AND ([Payment1] = @Payment1 OR @Payment1 IS NULL)
	AND ([TotalCredits] = @TotalCredits OR @TotalCredits IS NULL)
	AND ([TotalLatePaymentCharges] = @TotalLatePaymentCharges OR @TotalLatePaymentCharges IS NULL)
	AND ([BalForward] = @BalForward OR @BalForward IS NULL)
	AND ([ProductCharges] = @ProductCharges OR @ProductCharges IS NULL)
	AND ([MiscCharges] = @MiscCharges OR @MiscCharges IS NULL)
	AND ([LocalTaxAmount] = @LocalTaxAmount OR @LocalTaxAmount IS NULL)
	AND ([FederalTaxAmount] = @FederalTaxAmount OR @FederalTaxAmount IS NULL)
	AND ([TotalCurrent] = @TotalCurrent OR @TotalCurrent IS NULL)
	AND ([BalanceForward] = @BalanceForward OR @BalanceForward IS NULL)
	AND ([InvoiceDate] = @InvoiceDate OR @InvoiceDate IS NULL)
	AND ([DueDate] = @DueDate OR @DueDate IS NULL)
	AND ([CurrencyID] = @CurrencyId OR @CurrencyId IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([TotalFreeCredits] = @TotalFreeCredits OR @TotalFreeCredits IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([BPayCustomerRefNumber] = @BpayCustomerRefNumber OR @BpayCustomerRefNumber IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [StartDate]
	, [EndDate]
	, [CustomerID]
	, [PriCustomerNumber]
	, [InvoiceNumber]
	, [AmountOfLastBill]
	, [Payment1]
	, [TotalCredits]
	, [TotalLatePaymentCharges]
	, [BalForward]
	, [ProductCharges]
	, [MiscCharges]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TotalCurrent]
	, [BalanceForward]
	, [InvoiceDate]
	, [DueDate]
	, [CurrencyID]
	, [WholesalerID]
	, [TotalFreeCredits]
	, [Wholesaler_ProductID]
	, [BPayCustomerRefNumber]
    FROM
	[dbo].[InvoiceSummary]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([StartDate] = @StartDate AND @StartDate is not null)
	OR ([EndDate] = @EndDate AND @EndDate is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([InvoiceNumber] = @InvoiceNumber AND @InvoiceNumber is not null)
	OR ([AmountOfLastBill] = @AmountOfLastBill AND @AmountOfLastBill is not null)
	OR ([Payment1] = @Payment1 AND @Payment1 is not null)
	OR ([TotalCredits] = @TotalCredits AND @TotalCredits is not null)
	OR ([TotalLatePaymentCharges] = @TotalLatePaymentCharges AND @TotalLatePaymentCharges is not null)
	OR ([BalForward] = @BalForward AND @BalForward is not null)
	OR ([ProductCharges] = @ProductCharges AND @ProductCharges is not null)
	OR ([MiscCharges] = @MiscCharges AND @MiscCharges is not null)
	OR ([LocalTaxAmount] = @LocalTaxAmount AND @LocalTaxAmount is not null)
	OR ([FederalTaxAmount] = @FederalTaxAmount AND @FederalTaxAmount is not null)
	OR ([TotalCurrent] = @TotalCurrent AND @TotalCurrent is not null)
	OR ([BalanceForward] = @BalanceForward AND @BalanceForward is not null)
	OR ([InvoiceDate] = @InvoiceDate AND @InvoiceDate is not null)
	OR ([DueDate] = @DueDate AND @DueDate is not null)
	OR ([CurrencyID] = @CurrencyId AND @CurrencyId is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([TotalFreeCredits] = @TotalFreeCredits AND @TotalFreeCredits is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([BPayCustomerRefNumber] = @BpayCustomerRefNumber AND @BpayCustomerRefNumber is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionTypeCategory_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionTypeCategory_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionTypeCategory_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ExtensionTypeCategory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionTypeCategory_Get_List

AS


				
				SELECT
					[id],
					[CategoryName]
				FROM
					[dbo].[ExtensionTypeCategory]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionTypeCategory_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionTypeCategory_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionTypeCategory_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ExtensionTypeCategory table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionTypeCategory_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [CategoryName]'
				SET @SQL = @SQL + ' FROM [dbo].[ExtensionTypeCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [CategoryName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ExtensionTypeCategory]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionTypeCategory_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionTypeCategory_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionTypeCategory_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ExtensionTypeCategory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionTypeCategory_Insert
(

	@Id int   ,

	@CategoryName varchar (50)  
)
AS


					
				INSERT INTO [dbo].[ExtensionTypeCategory]
					(
					[id]
					,[CategoryName]
					)
				VALUES
					(
					@Id
					,@CategoryName
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionTypeCategory_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionTypeCategory_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionTypeCategory_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ExtensionTypeCategory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionTypeCategory_Update
(

	@Id int   ,

	@OriginalId int   ,

	@CategoryName varchar (50)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ExtensionTypeCategory]
				SET
					[id] = @Id
					,[CategoryName] = @CategoryName
				WHERE
[id] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionTypeCategory_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionTypeCategory_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionTypeCategory_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ExtensionTypeCategory table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionTypeCategory_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ExtensionTypeCategory] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionTypeCategory_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionTypeCategory_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionTypeCategory_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionTypeCategory table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionTypeCategory_GetById
(

	@Id int   
)
AS


				SELECT
					[id],
					[CategoryName]
				FROM
					[dbo].[ExtensionTypeCategory]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionTypeCategory_GetByCategoryName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionTypeCategory_GetByCategoryName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionTypeCategory_GetByCategoryName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionTypeCategory table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionTypeCategory_GetByCategoryName
(

	@CategoryName varchar (50)  
)
AS


				SELECT
					[id],
					[CategoryName]
				FROM
					[dbo].[ExtensionTypeCategory]
				WHERE
					[CategoryName] = @CategoryName
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionTypeCategory_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionTypeCategory_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionTypeCategory_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ExtensionTypeCategory table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionTypeCategory_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CategoryName varchar (50)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [CategoryName]
    FROM
	[dbo].[ExtensionTypeCategory]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([CategoryName] = @CategoryName OR @CategoryName IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [CategoryName]
    FROM
	[dbo].[ExtensionTypeCategory]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([CategoryName] = @CategoryName AND @CategoryName is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ExtensionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_Get_List

AS


				
				SELECT
					[id],
					[Name],
					[DisplayName],
					[ExtensionTypeCategoryID]
				FROM
					[dbo].[ExtensionType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ExtensionType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [ExtensionTypeCategoryID]'
				SET @SQL = @SQL + ' FROM [dbo].[ExtensionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [ExtensionTypeCategoryID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ExtensionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ExtensionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@ExtensionTypeCategoryId int   
)
AS


					
				INSERT INTO [dbo].[ExtensionType]
					(
					[Name]
					,[DisplayName]
					,[ExtensionTypeCategoryID]
					)
				VALUES
					(
					@Name
					,@DisplayName
					,@ExtensionTypeCategoryId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ExtensionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@DisplayName varchar (50)  ,

	@ExtensionTypeCategoryId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ExtensionType]
				SET
					[Name] = @Name
					,[DisplayName] = @DisplayName
					,[ExtensionTypeCategoryID] = @ExtensionTypeCategoryId
				WHERE
[id] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ExtensionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ExtensionType] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_GetById
(

	@Id int   
)
AS


				SELECT
					[id],
					[Name],
					[DisplayName],
					[ExtensionTypeCategoryID]
				FROM
					[dbo].[ExtensionType]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_GetByName
(

	@Name varchar (50)  
)
AS


				SELECT
					[id],
					[Name],
					[DisplayName],
					[ExtensionTypeCategoryID]
				FROM
					[dbo].[ExtensionType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_GetByExtensionTypeCategoryId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_GetByExtensionTypeCategoryId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_GetByExtensionTypeCategoryId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ExtensionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_GetByExtensionTypeCategoryId
(

	@ExtensionTypeCategoryId int   
)
AS


				SELECT
					[id],
					[Name],
					[DisplayName],
					[ExtensionTypeCategoryID]
				FROM
					[dbo].[ExtensionType]
				WHERE
					[ExtensionTypeCategoryID] = @ExtensionTypeCategoryId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pExtensionType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pExtensionType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pExtensionType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ExtensionType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pExtensionType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@DisplayName varchar (50)  = null ,

	@ExtensionTypeCategoryId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [Name]
	, [DisplayName]
	, [ExtensionTypeCategoryID]
    FROM
	[dbo].[ExtensionType]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([ExtensionTypeCategoryID] = @ExtensionTypeCategoryId OR @ExtensionTypeCategoryId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [Name]
	, [DisplayName]
	, [ExtensionTypeCategoryID]
    FROM
	[dbo].[ExtensionType]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([ExtensionTypeCategoryID] = @ExtensionTypeCategoryId AND @ExtensionTypeCategoryId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the EventManager table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_Get_List

AS


				
				SELECT
					[id],
					[CustomerID],
					[UserID],
					[Description],
					[Enabled],
					[Created]
				FROM
					[dbo].[EventManager]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EventManager table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[id]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [Created]'
				SET @SQL = @SQL + ' FROM [dbo].[EventManager]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [id],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [Created]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[EventManager]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the EventManager table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_Insert
(

	@Id int    OUTPUT,

	@CustomerId int   ,

	@UserId int   ,

	@Description nvarchar (100)  ,

	@Enabled bit   ,

	@Created datetime   
)
AS


					
				INSERT INTO [dbo].[EventManager]
					(
					[CustomerID]
					,[UserID]
					,[Description]
					,[Enabled]
					,[Created]
					)
				VALUES
					(
					@CustomerId
					,@UserId
					,@Description
					,@Enabled
					,@Created
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the EventManager table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_Update
(

	@Id int   ,

	@CustomerId int   ,

	@UserId int   ,

	@Description nvarchar (100)  ,

	@Enabled bit   ,

	@Created datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[EventManager]
				SET
					[CustomerID] = @CustomerId
					,[UserID] = @UserId
					,[Description] = @Description
					,[Enabled] = @Enabled
					,[Created] = @Created
				WHERE
[id] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the EventManager table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[EventManager] WITH (ROWLOCK) 
				WHERE
					[id] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_GetByUserId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_GetByUserId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_GetByUserId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EventManager table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_GetByUserId
(

	@UserId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[id],
					[CustomerID],
					[UserID],
					[Description],
					[Enabled],
					[Created]
				FROM
					[dbo].[EventManager]
				WHERE
					[UserID] = @UserId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EventManager table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[id],
					[CustomerID],
					[UserID],
					[Description],
					[Enabled],
					[Created]
				FROM
					[dbo].[EventManager]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EventManager table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_GetById
(

	@Id int   
)
AS


				SELECT
					[id],
					[CustomerID],
					[UserID],
					[Description],
					[Enabled],
					[Created]
				FROM
					[dbo].[EventManager]
				WHERE
					[id] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEventManager_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEventManager_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEventManager_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the EventManager table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEventManager_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CustomerId int   = null ,

	@UserId int   = null ,

	@Description nvarchar (100)  = null ,

	@Enabled bit   = null ,

	@Created datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [id]
	, [CustomerID]
	, [UserID]
	, [Description]
	, [Enabled]
	, [Created]
    FROM
	[dbo].[EventManager]
    WHERE 
	 ([id] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([UserID] = @UserId OR @UserId IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([Created] = @Created OR @Created IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [id]
	, [CustomerID]
	, [UserID]
	, [Description]
	, [Enabled]
	, [Created]
    FROM
	[dbo].[EventManager]
    WHERE 
	 ([id] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([UserID] = @UserId AND @UserId is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([Created] = @Created AND @Created is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionImport_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionImport_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionImport_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerTransactionImport table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionImport_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TransactionDate],
					[TransactionAmount],
					[TransactionDescription],
					[CustomerTransactionTypeID],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ModifiedBy],
					[CreatedDate],
					[PostedToCustTrans],
					[PostedToCustTransDate],
					[ImportType],
					[ErrorCodesID],
					[ReferenceNumber],
					[UniqueConferenceID],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransactionImport]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionImport_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionImport_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionImport_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransactionImport table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionImport_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionAmount]'
				SET @SQL = @SQL + ', [TransactionDescription]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [WSTransactionAmount]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [PostedToCustTrans]'
				SET @SQL = @SQL + ', [PostedToCustTransDate]'
				SET @SQL = @SQL + ', [ImportType]'
				SET @SQL = @SQL + ', [ErrorCodesID]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [LocalTaxRate]'
				SET @SQL = @SQL + ', [FederalTaxRate]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransactionImport]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionAmount],'
				SET @SQL = @SQL + ' [TransactionDescription],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [WSTransactionAmount],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [PostedToCustTrans],'
				SET @SQL = @SQL + ' [PostedToCustTransDate],'
				SET @SQL = @SQL + ' [ImportType],'
				SET @SQL = @SQL + ' [ErrorCodesID],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [LocalTaxRate],'
				SET @SQL = @SQL + ' [FederalTaxRate],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransactionImport]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionImport_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionImport_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionImport_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerTransactionImport table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionImport_Insert
(

	@Id bigint    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@TransactionDate datetime   ,

	@TransactionAmount decimal (9, 2)  ,

	@TransactionDescription varchar (100)  ,

	@CustomerTransactionTypeId int   ,

	@Wholesaler_ProductId int   ,

	@ProductRateId int   ,

	@Quantity int   ,

	@SellRate decimal (9, 4)  ,

	@BuyRate decimal (9, 4)  ,

	@WsTransactionAmount decimal (9, 2)  ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   ,

	@PostedToCustTrans bit   ,

	@PostedToCustTransDate datetime   ,

	@ImportType varchar (100)  ,

	@ErrorCodesId int   ,

	@ReferenceNumber varchar (100)  ,

	@UniqueConferenceId varchar (50)  ,

	@LocalTaxRate decimal (9, 5)  ,

	@FederalTaxRate decimal (9, 5)  ,

	@LocalTaxAmount decimal (18, 7)  ,

	@FederalTaxAmount decimal (18, 7)  ,

	@ElapsedTimeSeconds int   
)
AS


					
				INSERT INTO [dbo].[CustomerTransactionImport]
					(
					[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[TransactionDate]
					,[TransactionAmount]
					,[TransactionDescription]
					,[CustomerTransactionTypeID]
					,[Wholesaler_ProductID]
					,[ProductRateID]
					,[Quantity]
					,[SellRate]
					,[BuyRate]
					,[WSTransactionAmount]
					,[ModifiedBy]
					,[CreatedDate]
					,[PostedToCustTrans]
					,[PostedToCustTransDate]
					,[ImportType]
					,[ErrorCodesID]
					,[ReferenceNumber]
					,[UniqueConferenceID]
					,[LocalTaxRate]
					,[FederalTaxRate]
					,[LocalTaxAmount]
					,[FederalTaxAmount]
					,[ElapsedTimeSeconds]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@TransactionDate
					,@TransactionAmount
					,@TransactionDescription
					,@CustomerTransactionTypeId
					,@Wholesaler_ProductId
					,@ProductRateId
					,@Quantity
					,@SellRate
					,@BuyRate
					,@WsTransactionAmount
					,@ModifiedBy
					,@CreatedDate
					,@PostedToCustTrans
					,@PostedToCustTransDate
					,@ImportType
					,@ErrorCodesId
					,@ReferenceNumber
					,@UniqueConferenceId
					,@LocalTaxRate
					,@FederalTaxRate
					,@LocalTaxAmount
					,@FederalTaxAmount
					,@ElapsedTimeSeconds
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionImport_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionImport_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionImport_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerTransactionImport table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionImport_Update
(

	@Id bigint   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@TransactionDate datetime   ,

	@TransactionAmount decimal (9, 2)  ,

	@TransactionDescription varchar (100)  ,

	@CustomerTransactionTypeId int   ,

	@Wholesaler_ProductId int   ,

	@ProductRateId int   ,

	@Quantity int   ,

	@SellRate decimal (9, 4)  ,

	@BuyRate decimal (9, 4)  ,

	@WsTransactionAmount decimal (9, 2)  ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   ,

	@PostedToCustTrans bit   ,

	@PostedToCustTransDate datetime   ,

	@ImportType varchar (100)  ,

	@ErrorCodesId int   ,

	@ReferenceNumber varchar (100)  ,

	@UniqueConferenceId varchar (50)  ,

	@LocalTaxRate decimal (9, 5)  ,

	@FederalTaxRate decimal (9, 5)  ,

	@LocalTaxAmount decimal (18, 7)  ,

	@FederalTaxAmount decimal (18, 7)  ,

	@ElapsedTimeSeconds int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerTransactionImport]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[TransactionDate] = @TransactionDate
					,[TransactionAmount] = @TransactionAmount
					,[TransactionDescription] = @TransactionDescription
					,[CustomerTransactionTypeID] = @CustomerTransactionTypeId
					,[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[ProductRateID] = @ProductRateId
					,[Quantity] = @Quantity
					,[SellRate] = @SellRate
					,[BuyRate] = @BuyRate
					,[WSTransactionAmount] = @WsTransactionAmount
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
					,[PostedToCustTrans] = @PostedToCustTrans
					,[PostedToCustTransDate] = @PostedToCustTransDate
					,[ImportType] = @ImportType
					,[ErrorCodesID] = @ErrorCodesId
					,[ReferenceNumber] = @ReferenceNumber
					,[UniqueConferenceID] = @UniqueConferenceId
					,[LocalTaxRate] = @LocalTaxRate
					,[FederalTaxRate] = @FederalTaxRate
					,[LocalTaxAmount] = @LocalTaxAmount
					,[FederalTaxAmount] = @FederalTaxAmount
					,[ElapsedTimeSeconds] = @ElapsedTimeSeconds
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionImport_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionImport_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionImport_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerTransactionImport table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionImport_Delete
(

	@Id bigint   
)
AS


				DELETE FROM [dbo].[CustomerTransactionImport] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionImport_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionImport_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionImport_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionImport table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionImport_GetById
(

	@Id bigint   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[TransactionDate],
					[TransactionAmount],
					[TransactionDescription],
					[CustomerTransactionTypeID],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ModifiedBy],
					[CreatedDate],
					[PostedToCustTrans],
					[PostedToCustTransDate],
					[ImportType],
					[ErrorCodesID],
					[ReferenceNumber],
					[UniqueConferenceID],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransactionImport]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionImport_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionImport_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionImport_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerTransactionImport table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionImport_Find
(

	@SearchUsingOR bit   = null ,

	@Id bigint   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@ModeratorId int   = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@SecCustomerNumber varchar (6)  = null ,

	@TransactionDate datetime   = null ,

	@TransactionAmount decimal (9, 2)  = null ,

	@TransactionDescription varchar (100)  = null ,

	@CustomerTransactionTypeId int   = null ,

	@Wholesaler_ProductId int   = null ,

	@ProductRateId int   = null ,

	@Quantity int   = null ,

	@SellRate decimal (9, 4)  = null ,

	@BuyRate decimal (9, 4)  = null ,

	@WsTransactionAmount decimal (9, 2)  = null ,

	@ModifiedBy varchar (50)  = null ,

	@CreatedDate datetime   = null ,

	@PostedToCustTrans bit   = null ,

	@PostedToCustTransDate datetime   = null ,

	@ImportType varchar (100)  = null ,

	@ErrorCodesId int   = null ,

	@ReferenceNumber varchar (100)  = null ,

	@UniqueConferenceId varchar (50)  = null ,

	@LocalTaxRate decimal (9, 5)  = null ,

	@FederalTaxRate decimal (9, 5)  = null ,

	@LocalTaxAmount decimal (18, 7)  = null ,

	@FederalTaxAmount decimal (18, 7)  = null ,

	@ElapsedTimeSeconds int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [TransactionDate]
	, [TransactionAmount]
	, [TransactionDescription]
	, [CustomerTransactionTypeID]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ModifiedBy]
	, [CreatedDate]
	, [PostedToCustTrans]
	, [PostedToCustTransDate]
	, [ImportType]
	, [ErrorCodesID]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[CustomerTransactionImport]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([TransactionDate] = @TransactionDate OR @TransactionDate IS NULL)
	AND ([TransactionAmount] = @TransactionAmount OR @TransactionAmount IS NULL)
	AND ([TransactionDescription] = @TransactionDescription OR @TransactionDescription IS NULL)
	AND ([CustomerTransactionTypeID] = @CustomerTransactionTypeId OR @CustomerTransactionTypeId IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([SellRate] = @SellRate OR @SellRate IS NULL)
	AND ([BuyRate] = @BuyRate OR @BuyRate IS NULL)
	AND ([WSTransactionAmount] = @WsTransactionAmount OR @WsTransactionAmount IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([PostedToCustTrans] = @PostedToCustTrans OR @PostedToCustTrans IS NULL)
	AND ([PostedToCustTransDate] = @PostedToCustTransDate OR @PostedToCustTransDate IS NULL)
	AND ([ImportType] = @ImportType OR @ImportType IS NULL)
	AND ([ErrorCodesID] = @ErrorCodesId OR @ErrorCodesId IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([LocalTaxRate] = @LocalTaxRate OR @LocalTaxRate IS NULL)
	AND ([FederalTaxRate] = @FederalTaxRate OR @FederalTaxRate IS NULL)
	AND ([LocalTaxAmount] = @LocalTaxAmount OR @LocalTaxAmount IS NULL)
	AND ([FederalTaxAmount] = @FederalTaxAmount OR @FederalTaxAmount IS NULL)
	AND ([ElapsedTimeSeconds] = @ElapsedTimeSeconds OR @ElapsedTimeSeconds IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [TransactionDate]
	, [TransactionAmount]
	, [TransactionDescription]
	, [CustomerTransactionTypeID]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ModifiedBy]
	, [CreatedDate]
	, [PostedToCustTrans]
	, [PostedToCustTransDate]
	, [ImportType]
	, [ErrorCodesID]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[CustomerTransactionImport]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([TransactionDate] = @TransactionDate AND @TransactionDate is not null)
	OR ([TransactionAmount] = @TransactionAmount AND @TransactionAmount is not null)
	OR ([TransactionDescription] = @TransactionDescription AND @TransactionDescription is not null)
	OR ([CustomerTransactionTypeID] = @CustomerTransactionTypeId AND @CustomerTransactionTypeId is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([SellRate] = @SellRate AND @SellRate is not null)
	OR ([BuyRate] = @BuyRate AND @BuyRate is not null)
	OR ([WSTransactionAmount] = @WsTransactionAmount AND @WsTransactionAmount is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([PostedToCustTrans] = @PostedToCustTrans AND @PostedToCustTrans is not null)
	OR ([PostedToCustTransDate] = @PostedToCustTransDate AND @PostedToCustTransDate is not null)
	OR ([ImportType] = @ImportType AND @ImportType is not null)
	OR ([ErrorCodesID] = @ErrorCodesId AND @ErrorCodesId is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([LocalTaxRate] = @LocalTaxRate AND @LocalTaxRate is not null)
	OR ([FederalTaxRate] = @FederalTaxRate AND @FederalTaxRate is not null)
	OR ([LocalTaxAmount] = @LocalTaxAmount AND @LocalTaxAmount is not null)
	OR ([FederalTaxAmount] = @FederalTaxAmount AND @FederalTaxAmount is not null)
	OR ([ElapsedTimeSeconds] = @ElapsedTimeSeconds AND @ElapsedTimeSeconds is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerReview_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerReview_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerReview_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerReview table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerReview_Get_List

AS


				
				SELECT
					[ID],
					[CompanyID],
					[GeneralSatisfaction],
					[AreasOfImprovement],
					[ProductDiscussed],
					[Referrals],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[CustomerReview]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerReview_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerReview_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerReview_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerReview table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerReview_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [GeneralSatisfaction]'
				SET @SQL = @SQL + ', [AreasOfImprovement]'
				SET @SQL = @SQL + ', [ProductDiscussed]'
				SET @SQL = @SQL + ', [Referrals]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerReview]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [GeneralSatisfaction],'
				SET @SQL = @SQL + ' [AreasOfImprovement],'
				SET @SQL = @SQL + ' [ProductDiscussed],'
				SET @SQL = @SQL + ' [Referrals],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerReview]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerReview_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerReview_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerReview_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerReview table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerReview_Insert
(

	@Id int   ,

	@CompanyId int   ,

	@GeneralSatisfaction varchar (30)  ,

	@AreasOfImprovement varchar (50)  ,

	@ProductDiscussed varchar (500)  ,

	@Referrals bit   ,

	@Notes text   ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   
)
AS


					
				INSERT INTO [dbo].[CustomerReview]
					(
					[ID]
					,[CompanyID]
					,[GeneralSatisfaction]
					,[AreasOfImprovement]
					,[ProductDiscussed]
					,[Referrals]
					,[Notes]
					,[ModifiedBy]
					,[CreatedDate]
					)
				VALUES
					(
					@Id
					,@CompanyId
					,@GeneralSatisfaction
					,@AreasOfImprovement
					,@ProductDiscussed
					,@Referrals
					,@Notes
					,@ModifiedBy
					,@CreatedDate
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerReview_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerReview_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerReview_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerReview table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerReview_Update
(

	@Id int   ,

	@OriginalId int   ,

	@CompanyId int   ,

	@GeneralSatisfaction varchar (30)  ,

	@AreasOfImprovement varchar (50)  ,

	@ProductDiscussed varchar (500)  ,

	@Referrals bit   ,

	@Notes text   ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerReview]
				SET
					[ID] = @Id
					,[CompanyID] = @CompanyId
					,[GeneralSatisfaction] = @GeneralSatisfaction
					,[AreasOfImprovement] = @AreasOfImprovement
					,[ProductDiscussed] = @ProductDiscussed
					,[Referrals] = @Referrals
					,[Notes] = @Notes
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerReview_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerReview_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerReview_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerReview table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerReview_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[CustomerReview] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerReview_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerReview_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerReview_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerReview table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerReview_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[CompanyID],
					[GeneralSatisfaction],
					[AreasOfImprovement],
					[ProductDiscussed],
					[Referrals],
					[Notes],
					[ModifiedBy],
					[CreatedDate]
				FROM
					[dbo].[CustomerReview]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerReview_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerReview_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerReview_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerReview table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerReview_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CompanyId int   = null ,

	@GeneralSatisfaction varchar (30)  = null ,

	@AreasOfImprovement varchar (50)  = null ,

	@ProductDiscussed varchar (500)  = null ,

	@Referrals bit   = null ,

	@Notes text   = null ,

	@ModifiedBy varchar (50)  = null ,

	@CreatedDate datetime   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CompanyID]
	, [GeneralSatisfaction]
	, [AreasOfImprovement]
	, [ProductDiscussed]
	, [Referrals]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
    FROM
	[dbo].[CustomerReview]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CompanyID] = @CompanyId OR @CompanyId IS NULL)
	AND ([GeneralSatisfaction] = @GeneralSatisfaction OR @GeneralSatisfaction IS NULL)
	AND ([AreasOfImprovement] = @AreasOfImprovement OR @AreasOfImprovement IS NULL)
	AND ([ProductDiscussed] = @ProductDiscussed OR @ProductDiscussed IS NULL)
	AND ([Referrals] = @Referrals OR @Referrals IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CompanyID]
	, [GeneralSatisfaction]
	, [AreasOfImprovement]
	, [ProductDiscussed]
	, [Referrals]
	, [Notes]
	, [ModifiedBy]
	, [CreatedDate]
    FROM
	[dbo].[CustomerReview]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CompanyID] = @CompanyId AND @CompanyId is not null)
	OR ([GeneralSatisfaction] = @GeneralSatisfaction AND @GeneralSatisfaction is not null)
	OR ([AreasOfImprovement] = @AreasOfImprovement AND @AreasOfImprovement is not null)
	OR ([ProductDiscussed] = @ProductDiscussed AND @ProductDiscussed is not null)
	OR ([Referrals] = @Referrals AND @Referrals is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerDocument table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerDocument table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [DocumentDate]'
				SET @SQL = @SQL + ', [DocumentTypeID]'
				SET @SQL = @SQL + ', [KBSize]'
				SET @SQL = @SQL + ', [DocumentDirectory]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [LanguageID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerDocument]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [DocumentDate],'
				SET @SQL = @SQL + ' [DocumentTypeID],'
				SET @SQL = @SQL + ' [KBSize],'
				SET @SQL = @SQL + ' [DocumentDirectory],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [LanguageID],'
				SET @SQL = @SQL + ' [Enabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerDocument]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerDocument table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@PriCustomerNumber varchar (10)  ,

	@DocumentDate datetime   ,

	@DocumentTypeId int   ,

	@KbSize int   ,

	@DocumentDirectory varchar (100)  ,

	@CreatedDate datetime   ,

	@Notes varchar (100)  ,

	@LanguageId varchar (5)  ,

	@Enabled bit   
)
AS


					
				INSERT INTO [dbo].[CustomerDocument]
					(
					[WholesalerID]
					,[CustomerID]
					,[PriCustomerNumber]
					,[DocumentDate]
					,[DocumentTypeID]
					,[KBSize]
					,[DocumentDirectory]
					,[CreatedDate]
					,[Notes]
					,[LanguageID]
					,[Enabled]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@PriCustomerNumber
					,@DocumentDate
					,@DocumentTypeId
					,@KbSize
					,@DocumentDirectory
					,@CreatedDate
					,@Notes
					,@LanguageId
					,@Enabled
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerDocument table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@PriCustomerNumber varchar (10)  ,

	@DocumentDate datetime   ,

	@DocumentTypeId int   ,

	@KbSize int   ,

	@DocumentDirectory varchar (100)  ,

	@CreatedDate datetime   ,

	@Notes varchar (100)  ,

	@LanguageId varchar (5)  ,

	@Enabled bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerDocument]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[DocumentDate] = @DocumentDate
					,[DocumentTypeID] = @DocumentTypeId
					,[KBSize] = @KbSize
					,[DocumentDirectory] = @DocumentDirectory
					,[CreatedDate] = @CreatedDate
					,[Notes] = @Notes
					,[LanguageID] = @LanguageId
					,[Enabled] = @Enabled
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerDocument table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[CustomerDocument] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_GetByDocumentTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_GetByDocumentTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_GetByDocumentTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_GetByDocumentTypeId
(

	@DocumentTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[DocumentTypeID] = @DocumentTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_GetByLanguageId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_GetByLanguageId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_GetByLanguageId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_GetByLanguageId
(

	@LanguageId varchar (5)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[LanguageID] = @LanguageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerDocument table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[DocumentDate],
					[DocumentTypeID],
					[KBSize],
					[DocumentDirectory],
					[CreatedDate],
					[Notes],
					[LanguageID],
					[Enabled]
				FROM
					[dbo].[CustomerDocument]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerDocument_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerDocument_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerDocument_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerDocument table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerDocument_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@DocumentDate datetime   = null ,

	@DocumentTypeId int   = null ,

	@KbSize int   = null ,

	@DocumentDirectory varchar (100)  = null ,

	@CreatedDate datetime   = null ,

	@Notes varchar (100)  = null ,

	@LanguageId varchar (5)  = null ,

	@Enabled bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PriCustomerNumber]
	, [DocumentDate]
	, [DocumentTypeID]
	, [KBSize]
	, [DocumentDirectory]
	, [CreatedDate]
	, [Notes]
	, [LanguageID]
	, [Enabled]
    FROM
	[dbo].[CustomerDocument]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([DocumentDate] = @DocumentDate OR @DocumentDate IS NULL)
	AND ([DocumentTypeID] = @DocumentTypeId OR @DocumentTypeId IS NULL)
	AND ([KBSize] = @KbSize OR @KbSize IS NULL)
	AND ([DocumentDirectory] = @DocumentDirectory OR @DocumentDirectory IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([Notes] = @Notes OR @Notes IS NULL)
	AND ([LanguageID] = @LanguageId OR @LanguageId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [PriCustomerNumber]
	, [DocumentDate]
	, [DocumentTypeID]
	, [KBSize]
	, [DocumentDirectory]
	, [CreatedDate]
	, [Notes]
	, [LanguageID]
	, [Enabled]
    FROM
	[dbo].[CustomerDocument]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([DocumentDate] = @DocumentDate AND @DocumentDate is not null)
	OR ([DocumentTypeID] = @DocumentTypeId AND @DocumentTypeId is not null)
	OR ([KBSize] = @KbSize AND @KbSize is not null)
	OR ([DocumentDirectory] = @DocumentDirectory AND @DocumentDirectory is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([Notes] = @Notes AND @Notes is not null)
	OR ([LanguageID] = @LanguageId AND @LanguageId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Customer_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_Get_List

AS


				
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Customer_Feature table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM [dbo].[Customer_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Customer_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Customer_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_Insert
(

	@Id int    OUTPUT,

	@CustomerId int   ,

	@FeatureId int   ,

	@FeatureOptionId int   ,

	@Enabled bit   ,

	@FeatureOptionValue varchar (100)  
)
AS


					
				INSERT INTO [dbo].[Customer_Feature]
					(
					[CustomerID]
					,[FeatureID]
					,[FeatureOptionID]
					,[Enabled]
					,[FeatureOptionValue]
					)
				VALUES
					(
					@CustomerId
					,@FeatureId
					,@FeatureOptionId
					,@Enabled
					,@FeatureOptionValue
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Customer_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_Update
(

	@Id int   ,

	@CustomerId int   ,

	@FeatureId int   ,

	@FeatureOptionId int   ,

	@Enabled bit   ,

	@FeatureOptionValue varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Customer_Feature]
				SET
					[CustomerID] = @CustomerId
					,[FeatureID] = @FeatureId
					,[FeatureOptionID] = @FeatureOptionId
					,[Enabled] = @Enabled
					,[FeatureOptionValue] = @FeatureOptionValue
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Customer_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Customer_Feature] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_GetByFeatureId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_GetByFeatureId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_GetByFeatureId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_GetByFeatureId
(

	@FeatureId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[FeatureID] = @FeatureId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_GetByFeatureOptionId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_GetByFeatureOptionId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_GetByFeatureOptionId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_GetByFeatureOptionId
(

	@FeatureOptionId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[FeatureOptionID] = @FeatureOptionId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_GetByFeatureIdCustomerIdFeatureOptionId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_GetByFeatureIdCustomerIdFeatureOptionId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_GetByFeatureIdCustomerIdFeatureOptionId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_GetByFeatureIdCustomerIdFeatureOptionId
(

	@FeatureId int   ,

	@CustomerId int   ,

	@FeatureOptionId int   
)
AS


				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[FeatureID] = @FeatureId
					AND [CustomerID] = @CustomerId
					AND [FeatureOptionID] = @FeatureOptionId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_GetByCustomerIdFeatureId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_GetByCustomerIdFeatureId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_GetByCustomerIdFeatureId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Customer_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_GetByCustomerIdFeatureId
(

	@CustomerId int   ,

	@FeatureId int   
)
AS


				SELECT
					[ID],
					[CustomerID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Customer_Feature]
				WHERE
					[CustomerID] = @CustomerId
					AND [FeatureID] = @FeatureId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomer_Feature_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomer_Feature_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomer_Feature_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Customer_Feature table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomer_Feature_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@CustomerId int   = null ,

	@FeatureId int   = null ,

	@FeatureOptionId int   = null ,

	@Enabled bit   = null ,

	@FeatureOptionValue varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Customer_Feature]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([FeatureID] = @FeatureId OR @FeatureId IS NULL)
	AND ([FeatureOptionID] = @FeatureOptionId OR @FeatureOptionId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([FeatureOptionValue] = @FeatureOptionValue OR @FeatureOptionValue IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [CustomerID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Customer_Feature]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([FeatureID] = @FeatureId AND @FeatureId is not null)
	OR ([FeatureOptionID] = @FeatureOptionId AND @FeatureOptionId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([FeatureOptionValue] = @FeatureOptionValue AND @FeatureOptionValue is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerTransactionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransactionType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [GLPostingTypeID]'
				SET @SQL = @SQL + ', [ActionValue]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ', [Visible]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransactionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [GLPostingTypeID],'
				SET @SQL = @SQL + ' [ActionValue],'
				SET @SQL = @SQL + ' [DisplayOrder],'
				SET @SQL = @SQL + ' [Visible]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransactionType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerTransactionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@Description varchar (200)  ,

	@DisplayName varchar (50)  ,

	@GlPostingTypeId int   ,

	@ActionValue int   ,

	@DisplayOrder int   ,

	@Visible bit   
)
AS


					
				INSERT INTO [dbo].[CustomerTransactionType]
					(
					[Name]
					,[Description]
					,[DisplayName]
					,[GLPostingTypeID]
					,[ActionValue]
					,[DisplayOrder]
					,[Visible]
					)
				VALUES
					(
					@Name
					,@Description
					,@DisplayName
					,@GlPostingTypeId
					,@ActionValue
					,@DisplayOrder
					,@Visible
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerTransactionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@Description varchar (200)  ,

	@DisplayName varchar (50)  ,

	@GlPostingTypeId int   ,

	@ActionValue int   ,

	@DisplayOrder int   ,

	@Visible bit   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerTransactionType]
				SET
					[Name] = @Name
					,[Description] = @Description
					,[DisplayName] = @DisplayName
					,[GLPostingTypeID] = @GlPostingTypeId
					,[ActionValue] = @ActionValue
					,[DisplayOrder] = @DisplayOrder
					,[Visible] = @Visible
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerTransactionType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[CustomerTransactionType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_GetByGlPostingTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_GetByGlPostingTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_GetByGlPostingTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionType table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_GetByGlPostingTypeId
(

	@GlPostingTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
				WHERE
					[GLPostingTypeID] = @GlPostingTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_GetByName
(

	@Name varchar (50)  
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_GetByActionValue procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_GetByActionValue') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_GetByActionValue
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransactionType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_GetByActionValue
(

	@ActionValue int   
)
AS


				SELECT
					[ID],
					[Name],
					[Description],
					[DisplayName],
					[GLPostingTypeID],
					[ActionValue],
					[DisplayOrder],
					[Visible]
				FROM
					[dbo].[CustomerTransactionType]
				WHERE
					[ActionValue] = @ActionValue
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransactionType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransactionType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransactionType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerTransactionType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransactionType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@Description varchar (200)  = null ,

	@DisplayName varchar (50)  = null ,

	@GlPostingTypeId int   = null ,

	@ActionValue int   = null ,

	@DisplayOrder int   = null ,

	@Visible bit   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayName]
	, [GLPostingTypeID]
	, [ActionValue]
	, [DisplayOrder]
	, [Visible]
    FROM
	[dbo].[CustomerTransactionType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([DisplayName] = @DisplayName OR @DisplayName IS NULL)
	AND ([GLPostingTypeID] = @GlPostingTypeId OR @GlPostingTypeId IS NULL)
	AND ([ActionValue] = @ActionValue OR @ActionValue IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
	AND ([Visible] = @Visible OR @Visible IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [Description]
	, [DisplayName]
	, [GLPostingTypeID]
	, [ActionValue]
	, [DisplayOrder]
	, [Visible]
    FROM
	[dbo].[CustomerTransactionType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([DisplayName] = @DisplayName AND @DisplayName is not null)
	OR ([GLPostingTypeID] = @GlPostingTypeId AND @GlPostingTypeId is not null)
	OR ([ActionValue] = @ActionValue AND @ActionValue is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	OR ([Visible] = @Visible AND @Visible is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Department table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Department table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ParentID]'
				SET @SQL = @SQL + ' FROM [dbo].[Department]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ParentID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Department]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Department table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@Name varchar (50)  ,

	@ParentId int   
)
AS


					
				INSERT INTO [dbo].[Department]
					(
					[WholesalerID]
					,[CustomerID]
					,[Name]
					,[ParentID]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@Name
					,@ParentId
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Department table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@Name varchar (50)  ,

	@ParentId int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Department]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[Name] = @Name
					,[ParentID] = @ParentId
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Department table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Department] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_GetByCustomerId
(

	@CustomerId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[CustomerID] = @CustomerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_GetByName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_GetByName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_GetByName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_GetByName
(

	@Name varchar (50)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_GetByParentId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_GetByParentId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_GetByParentId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_GetByParentId
(

	@ParentId int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[ParentID] = @ParentId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_GetByWholesalerIdCustomerIdName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_GetByWholesalerIdCustomerIdName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_GetByWholesalerIdCustomerIdName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Department table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_GetByWholesalerIdCustomerIdName
(

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@Name varchar (50)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[Name],
					[ParentID]
				FROM
					[dbo].[Department]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [CustomerID] = @CustomerId
					AND [Name] = @Name
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDepartment_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDepartment_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDepartment_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Department table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDepartment_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@Name varchar (50)  = null ,

	@ParentId int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [Name]
	, [ParentID]
    FROM
	[dbo].[Department]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ParentID] = @ParentId OR @ParentId IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [Name]
	, [ParentID]
    FROM
	[dbo].[Department]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ParentID] = @ParentId AND @ParentId is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pErrorCodes_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pErrorCodes_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pErrorCodes_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the ErrorCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pErrorCodes_Get_List

AS


				
				SELECT
					[ID],
					[Description]
				FROM
					[dbo].[ErrorCodes]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pErrorCodes_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pErrorCodes_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pErrorCodes_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the ErrorCodes table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pErrorCodes_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ' FROM [dbo].[ErrorCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Description]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[ErrorCodes]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pErrorCodes_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pErrorCodes_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pErrorCodes_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the ErrorCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pErrorCodes_Insert
(

	@Id int   ,

	@Description varchar (200)  
)
AS


					
				INSERT INTO [dbo].[ErrorCodes]
					(
					[ID]
					,[Description]
					)
				VALUES
					(
					@Id
					,@Description
					)
				
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pErrorCodes_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pErrorCodes_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pErrorCodes_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the ErrorCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pErrorCodes_Update
(

	@Id int   ,

	@OriginalId int   ,

	@Description varchar (200)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[ErrorCodes]
				SET
					[ID] = @Id
					,[Description] = @Description
				WHERE
[ID] = @OriginalId 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pErrorCodes_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pErrorCodes_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pErrorCodes_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the ErrorCodes table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pErrorCodes_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[ErrorCodes] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pErrorCodes_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pErrorCodes_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pErrorCodes_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the ErrorCodes table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pErrorCodes_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Description]
				FROM
					[dbo].[ErrorCodes]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pErrorCodes_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pErrorCodes_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pErrorCodes_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the ErrorCodes table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pErrorCodes_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Description varchar (200)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Description]
    FROM
	[dbo].[ErrorCodes]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Description]
    FROM
	[dbo].[ErrorCodes]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Description] = @Description AND @Description is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the EmailTemplate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EmailTemplate table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [SMTPServer]'
				SET @SQL = @SQL + ', [SMTPUserName]'
				SET @SQL = @SQL + ', [SMTPPassword]'
				SET @SQL = @SQL + ', [BaseFileDirectory]'
				SET @SQL = @SQL + ', [TemplateName]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [FileName]'
				SET @SQL = @SQL + ', [Subject]'
				SET @SQL = @SQL + ', [Sender]'
				SET @SQL = @SQL + ', [BCCList]'
				SET @SQL = @SQL + ', [CCList]'
				SET @SQL = @SQL + ', [SendToContact]'
				SET @SQL = @SQL + ', [SendToModerator]'
				SET @SQL = @SQL + ', [IncludeAttachment]'
				SET @SQL = @SQL + ', [AttachmentFileName]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [EmailTemplateContentTypeID]'
				SET @SQL = @SQL + ', [EmailTemplateGroupID]'
				SET @SQL = @SQL + ', [CallFlowID]'
				SET @SQL = @SQL + ', [LanguageID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [DisplayOrder]'
				SET @SQL = @SQL + ' FROM [dbo].[EmailTemplate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [SMTPServer],'
				SET @SQL = @SQL + ' [SMTPUserName],'
				SET @SQL = @SQL + ' [SMTPPassword],'
				SET @SQL = @SQL + ' [BaseFileDirectory],'
				SET @SQL = @SQL + ' [TemplateName],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [FileName],'
				SET @SQL = @SQL + ' [Subject],'
				SET @SQL = @SQL + ' [Sender],'
				SET @SQL = @SQL + ' [BCCList],'
				SET @SQL = @SQL + ' [CCList],'
				SET @SQL = @SQL + ' [SendToContact],'
				SET @SQL = @SQL + ' [SendToModerator],'
				SET @SQL = @SQL + ' [IncludeAttachment],'
				SET @SQL = @SQL + ' [AttachmentFileName],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [EmailTemplateContentTypeID],'
				SET @SQL = @SQL + ' [EmailTemplateGroupID],'
				SET @SQL = @SQL + ' [CallFlowID],'
				SET @SQL = @SQL + ' [LanguageID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [DisplayOrder]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[EmailTemplate]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the EmailTemplate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_Insert
(

	@Id int    OUTPUT,

	@WholesalerId varchar (10)  ,

	@SmtpServer varchar (50)  ,

	@SmtpUserName varchar (50)  ,

	@SmtpPassword varchar (50)  ,

	@BaseFileDirectory varchar (100)  ,

	@TemplateName varchar (50)  ,

	@Description varchar (200)  ,

	@FileName varchar (50)  ,

	@Subject varchar (100)  ,

	@Sender varchar (50)  ,

	@BccList varchar (200)  ,

	@CcList varchar (200)  ,

	@SendToContact bit   ,

	@SendToModerator bit   ,

	@IncludeAttachment bit   ,

	@AttachmentFileName varchar (50)  ,

	@PriCustomerNumber varchar (10)  ,

	@EmailTemplateContentTypeId int   ,

	@EmailTemplateGroupId int   ,

	@CallFlowId int   ,

	@LanguageId varchar (5)  ,

	@Enabled bit   ,

	@DisplayOrder int   
)
AS


					
				INSERT INTO [dbo].[EmailTemplate]
					(
					[WholesalerID]
					,[SMTPServer]
					,[SMTPUserName]
					,[SMTPPassword]
					,[BaseFileDirectory]
					,[TemplateName]
					,[Description]
					,[FileName]
					,[Subject]
					,[Sender]
					,[BCCList]
					,[CCList]
					,[SendToContact]
					,[SendToModerator]
					,[IncludeAttachment]
					,[AttachmentFileName]
					,[PriCustomerNumber]
					,[EmailTemplateContentTypeID]
					,[EmailTemplateGroupID]
					,[CallFlowID]
					,[LanguageID]
					,[Enabled]
					,[DisplayOrder]
					)
				VALUES
					(
					@WholesalerId
					,@SmtpServer
					,@SmtpUserName
					,@SmtpPassword
					,@BaseFileDirectory
					,@TemplateName
					,@Description
					,@FileName
					,@Subject
					,@Sender
					,@BccList
					,@CcList
					,@SendToContact
					,@SendToModerator
					,@IncludeAttachment
					,@AttachmentFileName
					,@PriCustomerNumber
					,@EmailTemplateContentTypeId
					,@EmailTemplateGroupId
					,@CallFlowId
					,@LanguageId
					,@Enabled
					,@DisplayOrder
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the EmailTemplate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_Update
(

	@Id int   ,

	@WholesalerId varchar (10)  ,

	@SmtpServer varchar (50)  ,

	@SmtpUserName varchar (50)  ,

	@SmtpPassword varchar (50)  ,

	@BaseFileDirectory varchar (100)  ,

	@TemplateName varchar (50)  ,

	@Description varchar (200)  ,

	@FileName varchar (50)  ,

	@Subject varchar (100)  ,

	@Sender varchar (50)  ,

	@BccList varchar (200)  ,

	@CcList varchar (200)  ,

	@SendToContact bit   ,

	@SendToModerator bit   ,

	@IncludeAttachment bit   ,

	@AttachmentFileName varchar (50)  ,

	@PriCustomerNumber varchar (10)  ,

	@EmailTemplateContentTypeId int   ,

	@EmailTemplateGroupId int   ,

	@CallFlowId int   ,

	@LanguageId varchar (5)  ,

	@Enabled bit   ,

	@DisplayOrder int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[EmailTemplate]
				SET
					[WholesalerID] = @WholesalerId
					,[SMTPServer] = @SmtpServer
					,[SMTPUserName] = @SmtpUserName
					,[SMTPPassword] = @SmtpPassword
					,[BaseFileDirectory] = @BaseFileDirectory
					,[TemplateName] = @TemplateName
					,[Description] = @Description
					,[FileName] = @FileName
					,[Subject] = @Subject
					,[Sender] = @Sender
					,[BCCList] = @BccList
					,[CCList] = @CcList
					,[SendToContact] = @SendToContact
					,[SendToModerator] = @SendToModerator
					,[IncludeAttachment] = @IncludeAttachment
					,[AttachmentFileName] = @AttachmentFileName
					,[PriCustomerNumber] = @PriCustomerNumber
					,[EmailTemplateContentTypeID] = @EmailTemplateContentTypeId
					,[EmailTemplateGroupID] = @EmailTemplateGroupId
					,[CallFlowID] = @CallFlowId
					,[LanguageID] = @LanguageId
					,[Enabled] = @Enabled
					,[DisplayOrder] = @DisplayOrder
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the EmailTemplate table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[EmailTemplate] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_GetByCallFlowId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_GetByCallFlowId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_GetByCallFlowId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_GetByCallFlowId
(

	@CallFlowId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[CallFlowID] = @CallFlowId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_GetByLanguageId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_GetByLanguageId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_GetByLanguageId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_GetByLanguageId
(

	@LanguageId varchar (5)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[LanguageID] = @LanguageId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_GetByWholesalerIdTemplateNamePriCustomerNumber procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_GetByWholesalerIdTemplateNamePriCustomerNumber') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_GetByWholesalerIdTemplateNamePriCustomerNumber
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_GetByWholesalerIdTemplateNamePriCustomerNumber
(

	@WholesalerId varchar (10)  ,

	@TemplateName varchar (50)  ,

	@PriCustomerNumber varchar (10)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [TemplateName] = @TemplateName
					AND [PriCustomerNumber] = @PriCustomerNumber
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_GetByWholesalerIdTemplateName procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_GetByWholesalerIdTemplateName') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_GetByWholesalerIdTemplateName
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailTemplate table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_GetByWholesalerIdTemplateName
(

	@WholesalerId varchar (10)  ,

	@TemplateName varchar (50)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[SMTPServer],
					[SMTPUserName],
					[SMTPPassword],
					[BaseFileDirectory],
					[TemplateName],
					[Description],
					[FileName],
					[Subject],
					[Sender],
					[BCCList],
					[CCList],
					[SendToContact],
					[SendToModerator],
					[IncludeAttachment],
					[AttachmentFileName],
					[PriCustomerNumber],
					[EmailTemplateContentTypeID],
					[EmailTemplateGroupID],
					[CallFlowID],
					[LanguageID],
					[Enabled],
					[DisplayOrder]
				FROM
					[dbo].[EmailTemplate]
				WHERE
					[WholesalerID] = @WholesalerId
					AND [TemplateName] = @TemplateName
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailTemplate_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailTemplate_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailTemplate_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the EmailTemplate table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailTemplate_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@WholesalerId varchar (10)  = null ,

	@SmtpServer varchar (50)  = null ,

	@SmtpUserName varchar (50)  = null ,

	@SmtpPassword varchar (50)  = null ,

	@BaseFileDirectory varchar (100)  = null ,

	@TemplateName varchar (50)  = null ,

	@Description varchar (200)  = null ,

	@FileName varchar (50)  = null ,

	@Subject varchar (100)  = null ,

	@Sender varchar (50)  = null ,

	@BccList varchar (200)  = null ,

	@CcList varchar (200)  = null ,

	@SendToContact bit   = null ,

	@SendToModerator bit   = null ,

	@IncludeAttachment bit   = null ,

	@AttachmentFileName varchar (50)  = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@EmailTemplateContentTypeId int   = null ,

	@EmailTemplateGroupId int   = null ,

	@CallFlowId int   = null ,

	@LanguageId varchar (5)  = null ,

	@Enabled bit   = null ,

	@DisplayOrder int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [SMTPServer]
	, [SMTPUserName]
	, [SMTPPassword]
	, [BaseFileDirectory]
	, [TemplateName]
	, [Description]
	, [FileName]
	, [Subject]
	, [Sender]
	, [BCCList]
	, [CCList]
	, [SendToContact]
	, [SendToModerator]
	, [IncludeAttachment]
	, [AttachmentFileName]
	, [PriCustomerNumber]
	, [EmailTemplateContentTypeID]
	, [EmailTemplateGroupID]
	, [CallFlowID]
	, [LanguageID]
	, [Enabled]
	, [DisplayOrder]
    FROM
	[dbo].[EmailTemplate]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([SMTPServer] = @SmtpServer OR @SmtpServer IS NULL)
	AND ([SMTPUserName] = @SmtpUserName OR @SmtpUserName IS NULL)
	AND ([SMTPPassword] = @SmtpPassword OR @SmtpPassword IS NULL)
	AND ([BaseFileDirectory] = @BaseFileDirectory OR @BaseFileDirectory IS NULL)
	AND ([TemplateName] = @TemplateName OR @TemplateName IS NULL)
	AND ([Description] = @Description OR @Description IS NULL)
	AND ([FileName] = @FileName OR @FileName IS NULL)
	AND ([Subject] = @Subject OR @Subject IS NULL)
	AND ([Sender] = @Sender OR @Sender IS NULL)
	AND ([BCCList] = @BccList OR @BccList IS NULL)
	AND ([CCList] = @CcList OR @CcList IS NULL)
	AND ([SendToContact] = @SendToContact OR @SendToContact IS NULL)
	AND ([SendToModerator] = @SendToModerator OR @SendToModerator IS NULL)
	AND ([IncludeAttachment] = @IncludeAttachment OR @IncludeAttachment IS NULL)
	AND ([AttachmentFileName] = @AttachmentFileName OR @AttachmentFileName IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([EmailTemplateContentTypeID] = @EmailTemplateContentTypeId OR @EmailTemplateContentTypeId IS NULL)
	AND ([EmailTemplateGroupID] = @EmailTemplateGroupId OR @EmailTemplateGroupId IS NULL)
	AND ([CallFlowID] = @CallFlowId OR @CallFlowId IS NULL)
	AND ([LanguageID] = @LanguageId OR @LanguageId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([DisplayOrder] = @DisplayOrder OR @DisplayOrder IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [SMTPServer]
	, [SMTPUserName]
	, [SMTPPassword]
	, [BaseFileDirectory]
	, [TemplateName]
	, [Description]
	, [FileName]
	, [Subject]
	, [Sender]
	, [BCCList]
	, [CCList]
	, [SendToContact]
	, [SendToModerator]
	, [IncludeAttachment]
	, [AttachmentFileName]
	, [PriCustomerNumber]
	, [EmailTemplateContentTypeID]
	, [EmailTemplateGroupID]
	, [CallFlowID]
	, [LanguageID]
	, [Enabled]
	, [DisplayOrder]
    FROM
	[dbo].[EmailTemplate]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([SMTPServer] = @SmtpServer AND @SmtpServer is not null)
	OR ([SMTPUserName] = @SmtpUserName AND @SmtpUserName is not null)
	OR ([SMTPPassword] = @SmtpPassword AND @SmtpPassword is not null)
	OR ([BaseFileDirectory] = @BaseFileDirectory AND @BaseFileDirectory is not null)
	OR ([TemplateName] = @TemplateName AND @TemplateName is not null)
	OR ([Description] = @Description AND @Description is not null)
	OR ([FileName] = @FileName AND @FileName is not null)
	OR ([Subject] = @Subject AND @Subject is not null)
	OR ([Sender] = @Sender AND @Sender is not null)
	OR ([BCCList] = @BccList AND @BccList is not null)
	OR ([CCList] = @CcList AND @CcList is not null)
	OR ([SendToContact] = @SendToContact AND @SendToContact is not null)
	OR ([SendToModerator] = @SendToModerator AND @SendToModerator is not null)
	OR ([IncludeAttachment] = @IncludeAttachment AND @IncludeAttachment is not null)
	OR ([AttachmentFileName] = @AttachmentFileName AND @AttachmentFileName is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([EmailTemplateContentTypeID] = @EmailTemplateContentTypeId AND @EmailTemplateContentTypeId is not null)
	OR ([EmailTemplateGroupID] = @EmailTemplateGroupId AND @EmailTemplateGroupId is not null)
	OR ([CallFlowID] = @CallFlowId AND @CallFlowId is not null)
	OR ([LanguageID] = @LanguageId AND @LanguageId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([DisplayOrder] = @DisplayOrder AND @DisplayOrder is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the EmailNotification table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_Get_List

AS


				
				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the EmailNotification table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [TemplateName]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [EmailSent]'
				SET @SQL = @SQL + ', [SentDate]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ErrorInfo]'
				SET @SQL = @SQL + ' FROM [dbo].[EmailNotification]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [TemplateName],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [EmailSent],'
				SET @SQL = @SQL + ' [SentDate],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ErrorInfo]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[EmailNotification]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the EmailNotification table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_Insert
(

	@Id int    OUTPUT,

	@TemplateName varchar (50)  ,

	@ModeratorId int   ,

	@Email varchar (100)  ,

	@EmailSent bit   ,

	@SentDate datetime   ,

	@CreatedDate datetime   ,

	@ErrorInfo varchar (MAX)  
)
AS


					
				INSERT INTO [dbo].[EmailNotification]
					(
					[TemplateName]
					,[ModeratorID]
					,[Email]
					,[EmailSent]
					,[SentDate]
					,[CreatedDate]
					,[ErrorInfo]
					)
				VALUES
					(
					@TemplateName
					,@ModeratorId
					,@Email
					,@EmailSent
					,@SentDate
					,@CreatedDate
					,@ErrorInfo
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the EmailNotification table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_Update
(

	@Id int   ,

	@TemplateName varchar (50)  ,

	@ModeratorId int   ,

	@Email varchar (100)  ,

	@EmailSent bit   ,

	@SentDate datetime   ,

	@CreatedDate datetime   ,

	@ErrorInfo varchar (MAX)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[EmailNotification]
				SET
					[TemplateName] = @TemplateName
					,[ModeratorID] = @ModeratorId
					,[Email] = @Email
					,[EmailSent] = @EmailSent
					,[SentDate] = @SentDate
					,[CreatedDate] = @CreatedDate
					,[ErrorInfo] = @ErrorInfo
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the EmailNotification table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[EmailNotification] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_GetByEmail procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_GetByEmail') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_GetByEmail
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_GetByEmail
(

	@Email varchar (100)  
)
AS


				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[Email] = @Email
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_GetByEmailSent procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_GetByEmailSent') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_GetByEmailSent
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_GetByEmailSent
(

	@EmailSent bit   
)
AS


				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[EmailSent] = @EmailSent
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_GetBySentDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_GetBySentDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_GetBySentDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_GetBySentDate
(

	@SentDate datetime   
)
AS


				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[SentDate] = @SentDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_GetByTemplateNameCreatedDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_GetByTemplateNameCreatedDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_GetByTemplateNameCreatedDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the EmailNotification table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_GetByTemplateNameCreatedDate
(

	@TemplateName varchar (50)  ,

	@CreatedDate datetime   
)
AS


				SELECT
					[ID],
					[TemplateName],
					[ModeratorID],
					[Email],
					[EmailSent],
					[SentDate],
					[CreatedDate],
					[ErrorInfo]
				FROM
					[dbo].[EmailNotification]
				WHERE
					[TemplateName] = @TemplateName
					AND [CreatedDate] = @CreatedDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pEmailNotification_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pEmailNotification_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pEmailNotification_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the EmailNotification table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pEmailNotification_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@TemplateName varchar (50)  = null ,

	@ModeratorId int   = null ,

	@Email varchar (100)  = null ,

	@EmailSent bit   = null ,

	@SentDate datetime   = null ,

	@CreatedDate datetime   = null ,

	@ErrorInfo varchar (MAX)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [TemplateName]
	, [ModeratorID]
	, [Email]
	, [EmailSent]
	, [SentDate]
	, [CreatedDate]
	, [ErrorInfo]
    FROM
	[dbo].[EmailNotification]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([TemplateName] = @TemplateName OR @TemplateName IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([Email] = @Email OR @Email IS NULL)
	AND ([EmailSent] = @EmailSent OR @EmailSent IS NULL)
	AND ([SentDate] = @SentDate OR @SentDate IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([ErrorInfo] = @ErrorInfo OR @ErrorInfo IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [TemplateName]
	, [ModeratorID]
	, [Email]
	, [EmailSent]
	, [SentDate]
	, [CreatedDate]
	, [ErrorInfo]
    FROM
	[dbo].[EmailNotification]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([TemplateName] = @TemplateName AND @TemplateName is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([Email] = @Email AND @Email is not null)
	OR ([EmailSent] = @EmailSent AND @EmailSent is not null)
	OR ([SentDate] = @SentDate AND @SentDate is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([ErrorInfo] = @ErrorInfo AND @ErrorInfo is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the CustomerTransaction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the CustomerTransaction table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeID]'
				SET @SQL = @SQL + ', [TransactionDescription]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionAmount]'
				SET @SQL = @SQL + ', [LocalTaxRate]'
				SET @SQL = @SQL + ', [FederalTaxRate]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [TransactionTotal]'
				SET @SQL = @SQL + ', [CustomerBalance]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [WSTransactionAmount]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [PostedDate]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [PostedToInvoice]'
				SET @SQL = @SQL + ', [PostedToInvoiceDate]'
				SET @SQL = @SQL + ', [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransaction]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeID],'
				SET @SQL = @SQL + ' [TransactionDescription],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionAmount],'
				SET @SQL = @SQL + ' [LocalTaxRate],'
				SET @SQL = @SQL + ' [FederalTaxRate],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [TransactionTotal],'
				SET @SQL = @SQL + ' [CustomerBalance],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [WSTransactionAmount],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [PostedDate],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [PostedToInvoice],'
				SET @SQL = @SQL + ' [PostedToInvoiceDate],'
				SET @SQL = @SQL + ' [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[CustomerTransaction]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the CustomerTransaction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_Insert
(

	@Id bigint    OUTPUT,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@CustomerTransactionTypeId int   ,

	@TransactionDescription varchar (100)  ,

	@TransactionDate datetime   ,

	@TransactionAmount decimal (9, 2)  ,

	@LocalTaxRate decimal (9, 5)  ,

	@FederalTaxRate decimal (9, 5)  ,

	@LocalTaxAmount decimal (18, 7)  ,

	@FederalTaxAmount decimal (18, 7)  ,

	@TransactionTotal decimal (9, 2)  ,

	@CustomerBalance decimal (9, 2)  ,

	@Wholesaler_ProductId int   ,

	@ProductRateId int   ,

	@Quantity int   ,

	@SellRate decimal (9, 4)  ,

	@BuyRate decimal (9, 4)  ,

	@WsTransactionAmount decimal (9, 2)  ,

	@ReferenceNumber varchar (100)  ,

	@UniqueConferenceId varchar (50)  ,

	@PostedDate datetime   ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   ,

	@PostedToInvoice bit   ,

	@PostedToInvoiceDate datetime   ,

	@ElapsedTimeSeconds int   
)
AS


					
				INSERT INTO [dbo].[CustomerTransaction]
					(
					[WholesalerID]
					,[CustomerID]
					,[ModeratorID]
					,[PriCustomerNumber]
					,[SecCustomerNumber]
					,[CustomerTransactionTypeID]
					,[TransactionDescription]
					,[TransactionDate]
					,[TransactionAmount]
					,[LocalTaxRate]
					,[FederalTaxRate]
					,[LocalTaxAmount]
					,[FederalTaxAmount]
					,[TransactionTotal]
					,[CustomerBalance]
					,[Wholesaler_ProductID]
					,[ProductRateID]
					,[Quantity]
					,[SellRate]
					,[BuyRate]
					,[WSTransactionAmount]
					,[ReferenceNumber]
					,[UniqueConferenceID]
					,[PostedDate]
					,[ModifiedBy]
					,[CreatedDate]
					,[PostedToInvoice]
					,[PostedToInvoiceDate]
					,[ElapsedTimeSeconds]
					)
				VALUES
					(
					@WholesalerId
					,@CustomerId
					,@ModeratorId
					,@PriCustomerNumber
					,@SecCustomerNumber
					,@CustomerTransactionTypeId
					,@TransactionDescription
					,@TransactionDate
					,@TransactionAmount
					,@LocalTaxRate
					,@FederalTaxRate
					,@LocalTaxAmount
					,@FederalTaxAmount
					,@TransactionTotal
					,@CustomerBalance
					,@Wholesaler_ProductId
					,@ProductRateId
					,@Quantity
					,@SellRate
					,@BuyRate
					,@WsTransactionAmount
					,@ReferenceNumber
					,@UniqueConferenceId
					,@PostedDate
					,@ModifiedBy
					,@CreatedDate
					,@PostedToInvoice
					,@PostedToInvoiceDate
					,@ElapsedTimeSeconds
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the CustomerTransaction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_Update
(

	@Id bigint   ,

	@WholesalerId varchar (10)  ,

	@CustomerId int   ,

	@ModeratorId int   ,

	@PriCustomerNumber varchar (10)  ,

	@SecCustomerNumber varchar (6)  ,

	@CustomerTransactionTypeId int   ,

	@TransactionDescription varchar (100)  ,

	@TransactionDate datetime   ,

	@TransactionAmount decimal (9, 2)  ,

	@LocalTaxRate decimal (9, 5)  ,

	@FederalTaxRate decimal (9, 5)  ,

	@LocalTaxAmount decimal (18, 7)  ,

	@FederalTaxAmount decimal (18, 7)  ,

	@TransactionTotal decimal (9, 2)  ,

	@CustomerBalance decimal (9, 2)  ,

	@Wholesaler_ProductId int   ,

	@ProductRateId int   ,

	@Quantity int   ,

	@SellRate decimal (9, 4)  ,

	@BuyRate decimal (9, 4)  ,

	@WsTransactionAmount decimal (9, 2)  ,

	@ReferenceNumber varchar (100)  ,

	@UniqueConferenceId varchar (50)  ,

	@PostedDate datetime   ,

	@ModifiedBy varchar (50)  ,

	@CreatedDate datetime   ,

	@PostedToInvoice bit   ,

	@PostedToInvoiceDate datetime   ,

	@ElapsedTimeSeconds int   
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[CustomerTransaction]
				SET
					[WholesalerID] = @WholesalerId
					,[CustomerID] = @CustomerId
					,[ModeratorID] = @ModeratorId
					,[PriCustomerNumber] = @PriCustomerNumber
					,[SecCustomerNumber] = @SecCustomerNumber
					,[CustomerTransactionTypeID] = @CustomerTransactionTypeId
					,[TransactionDescription] = @TransactionDescription
					,[TransactionDate] = @TransactionDate
					,[TransactionAmount] = @TransactionAmount
					,[LocalTaxRate] = @LocalTaxRate
					,[FederalTaxRate] = @FederalTaxRate
					,[LocalTaxAmount] = @LocalTaxAmount
					,[FederalTaxAmount] = @FederalTaxAmount
					,[TransactionTotal] = @TransactionTotal
					,[CustomerBalance] = @CustomerBalance
					,[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[ProductRateID] = @ProductRateId
					,[Quantity] = @Quantity
					,[SellRate] = @SellRate
					,[BuyRate] = @BuyRate
					,[WSTransactionAmount] = @WsTransactionAmount
					,[ReferenceNumber] = @ReferenceNumber
					,[UniqueConferenceID] = @UniqueConferenceId
					,[PostedDate] = @PostedDate
					,[ModifiedBy] = @ModifiedBy
					,[CreatedDate] = @CreatedDate
					,[PostedToInvoice] = @PostedToInvoice
					,[PostedToInvoiceDate] = @PostedToInvoiceDate
					,[ElapsedTimeSeconds] = @ElapsedTimeSeconds
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the CustomerTransaction table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_Delete
(

	@Id bigint   
)
AS


				DELETE FROM [dbo].[CustomerTransaction] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetByCustomerTransactionTypeId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetByCustomerTransactionTypeId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetByCustomerTransactionTypeId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetByCustomerTransactionTypeId
(

	@CustomerTransactionTypeId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[CustomerTransactionTypeID] = @CustomerTransactionTypeId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetByProductRateId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetByProductRateId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetByProductRateId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetByProductRateId
(

	@ProductRateId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[ProductRateID] = @ProductRateId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetByWholesaler_ProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetByWholesaler_ProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetByWholesaler_ProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetByWholesaler_ProductId
(

	@Wholesaler_ProductId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[Wholesaler_ProductID] = @Wholesaler_ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetByWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetByWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetByWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetByWholesalerId
(

	@WholesalerId varchar (10)  
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[WholesalerID] = @WholesalerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetByCustomerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetByCustomerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetByCustomerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetByCustomerId
(

	@CustomerId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[CustomerID] = @CustomerId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetById
(

	@Id bigint   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetByCustomerIdWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetByCustomerIdWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetByCustomerIdWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetByCustomerIdWholesalerId
(

	@CustomerId int   ,

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[CustomerID] = @CustomerId
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetByPriCustomerNumberWholesalerId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetByPriCustomerNumberWholesalerId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetByPriCustomerNumberWholesalerId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetByPriCustomerNumberWholesalerId
(

	@PriCustomerNumber varchar (10)  ,

	@WholesalerId varchar (10)  
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[PriCustomerNumber] = @PriCustomerNumber
					AND [WholesalerID] = @WholesalerId
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_GetByTransactionDate procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_GetByTransactionDate') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_GetByTransactionDate
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the CustomerTransaction table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_GetByTransactionDate
(

	@TransactionDate datetime   
)
AS


				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds]
				FROM
					[dbo].[CustomerTransaction]
				WHERE
					[TransactionDate] = @TransactionDate
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pCustomerTransaction_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pCustomerTransaction_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pCustomerTransaction_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the CustomerTransaction table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pCustomerTransaction_Find
(

	@SearchUsingOR bit   = null ,

	@Id bigint   = null ,

	@WholesalerId varchar (10)  = null ,

	@CustomerId int   = null ,

	@ModeratorId int   = null ,

	@PriCustomerNumber varchar (10)  = null ,

	@SecCustomerNumber varchar (6)  = null ,

	@CustomerTransactionTypeId int   = null ,

	@TransactionDescription varchar (100)  = null ,

	@TransactionDate datetime   = null ,

	@TransactionAmount decimal (9, 2)  = null ,

	@LocalTaxRate decimal (9, 5)  = null ,

	@FederalTaxRate decimal (9, 5)  = null ,

	@LocalTaxAmount decimal (18, 7)  = null ,

	@FederalTaxAmount decimal (18, 7)  = null ,

	@TransactionTotal decimal (9, 2)  = null ,

	@CustomerBalance decimal (9, 2)  = null ,

	@Wholesaler_ProductId int   = null ,

	@ProductRateId int   = null ,

	@Quantity int   = null ,

	@SellRate decimal (9, 4)  = null ,

	@BuyRate decimal (9, 4)  = null ,

	@WsTransactionAmount decimal (9, 2)  = null ,

	@ReferenceNumber varchar (100)  = null ,

	@UniqueConferenceId varchar (50)  = null ,

	@PostedDate datetime   = null ,

	@ModifiedBy varchar (50)  = null ,

	@CreatedDate datetime   = null ,

	@PostedToInvoice bit   = null ,

	@PostedToInvoiceDate datetime   = null ,

	@ElapsedTimeSeconds int   = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [CustomerTransactionTypeID]
	, [TransactionDescription]
	, [TransactionDate]
	, [TransactionAmount]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TransactionTotal]
	, [CustomerBalance]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [PostedDate]
	, [ModifiedBy]
	, [CreatedDate]
	, [PostedToInvoice]
	, [PostedToInvoiceDate]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[CustomerTransaction]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([WholesalerID] = @WholesalerId OR @WholesalerId IS NULL)
	AND ([CustomerID] = @CustomerId OR @CustomerId IS NULL)
	AND ([ModeratorID] = @ModeratorId OR @ModeratorId IS NULL)
	AND ([PriCustomerNumber] = @PriCustomerNumber OR @PriCustomerNumber IS NULL)
	AND ([SecCustomerNumber] = @SecCustomerNumber OR @SecCustomerNumber IS NULL)
	AND ([CustomerTransactionTypeID] = @CustomerTransactionTypeId OR @CustomerTransactionTypeId IS NULL)
	AND ([TransactionDescription] = @TransactionDescription OR @TransactionDescription IS NULL)
	AND ([TransactionDate] = @TransactionDate OR @TransactionDate IS NULL)
	AND ([TransactionAmount] = @TransactionAmount OR @TransactionAmount IS NULL)
	AND ([LocalTaxRate] = @LocalTaxRate OR @LocalTaxRate IS NULL)
	AND ([FederalTaxRate] = @FederalTaxRate OR @FederalTaxRate IS NULL)
	AND ([LocalTaxAmount] = @LocalTaxAmount OR @LocalTaxAmount IS NULL)
	AND ([FederalTaxAmount] = @FederalTaxAmount OR @FederalTaxAmount IS NULL)
	AND ([TransactionTotal] = @TransactionTotal OR @TransactionTotal IS NULL)
	AND ([CustomerBalance] = @CustomerBalance OR @CustomerBalance IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([ProductRateID] = @ProductRateId OR @ProductRateId IS NULL)
	AND ([Quantity] = @Quantity OR @Quantity IS NULL)
	AND ([SellRate] = @SellRate OR @SellRate IS NULL)
	AND ([BuyRate] = @BuyRate OR @BuyRate IS NULL)
	AND ([WSTransactionAmount] = @WsTransactionAmount OR @WsTransactionAmount IS NULL)
	AND ([ReferenceNumber] = @ReferenceNumber OR @ReferenceNumber IS NULL)
	AND ([UniqueConferenceID] = @UniqueConferenceId OR @UniqueConferenceId IS NULL)
	AND ([PostedDate] = @PostedDate OR @PostedDate IS NULL)
	AND ([ModifiedBy] = @ModifiedBy OR @ModifiedBy IS NULL)
	AND ([CreatedDate] = @CreatedDate OR @CreatedDate IS NULL)
	AND ([PostedToInvoice] = @PostedToInvoice OR @PostedToInvoice IS NULL)
	AND ([PostedToInvoiceDate] = @PostedToInvoiceDate OR @PostedToInvoiceDate IS NULL)
	AND ([ElapsedTimeSeconds] = @ElapsedTimeSeconds OR @ElapsedTimeSeconds IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [WholesalerID]
	, [CustomerID]
	, [ModeratorID]
	, [PriCustomerNumber]
	, [SecCustomerNumber]
	, [CustomerTransactionTypeID]
	, [TransactionDescription]
	, [TransactionDate]
	, [TransactionAmount]
	, [LocalTaxRate]
	, [FederalTaxRate]
	, [LocalTaxAmount]
	, [FederalTaxAmount]
	, [TransactionTotal]
	, [CustomerBalance]
	, [Wholesaler_ProductID]
	, [ProductRateID]
	, [Quantity]
	, [SellRate]
	, [BuyRate]
	, [WSTransactionAmount]
	, [ReferenceNumber]
	, [UniqueConferenceID]
	, [PostedDate]
	, [ModifiedBy]
	, [CreatedDate]
	, [PostedToInvoice]
	, [PostedToInvoiceDate]
	, [ElapsedTimeSeconds]
    FROM
	[dbo].[CustomerTransaction]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([WholesalerID] = @WholesalerId AND @WholesalerId is not null)
	OR ([CustomerID] = @CustomerId AND @CustomerId is not null)
	OR ([ModeratorID] = @ModeratorId AND @ModeratorId is not null)
	OR ([PriCustomerNumber] = @PriCustomerNumber AND @PriCustomerNumber is not null)
	OR ([SecCustomerNumber] = @SecCustomerNumber AND @SecCustomerNumber is not null)
	OR ([CustomerTransactionTypeID] = @CustomerTransactionTypeId AND @CustomerTransactionTypeId is not null)
	OR ([TransactionDescription] = @TransactionDescription AND @TransactionDescription is not null)
	OR ([TransactionDate] = @TransactionDate AND @TransactionDate is not null)
	OR ([TransactionAmount] = @TransactionAmount AND @TransactionAmount is not null)
	OR ([LocalTaxRate] = @LocalTaxRate AND @LocalTaxRate is not null)
	OR ([FederalTaxRate] = @FederalTaxRate AND @FederalTaxRate is not null)
	OR ([LocalTaxAmount] = @LocalTaxAmount AND @LocalTaxAmount is not null)
	OR ([FederalTaxAmount] = @FederalTaxAmount AND @FederalTaxAmount is not null)
	OR ([TransactionTotal] = @TransactionTotal AND @TransactionTotal is not null)
	OR ([CustomerBalance] = @CustomerBalance AND @CustomerBalance is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([ProductRateID] = @ProductRateId AND @ProductRateId is not null)
	OR ([Quantity] = @Quantity AND @Quantity is not null)
	OR ([SellRate] = @SellRate AND @SellRate is not null)
	OR ([BuyRate] = @BuyRate AND @BuyRate is not null)
	OR ([WSTransactionAmount] = @WsTransactionAmount AND @WsTransactionAmount is not null)
	OR ([ReferenceNumber] = @ReferenceNumber AND @ReferenceNumber is not null)
	OR ([UniqueConferenceID] = @UniqueConferenceId AND @UniqueConferenceId is not null)
	OR ([PostedDate] = @PostedDate AND @PostedDate is not null)
	OR ([ModifiedBy] = @ModifiedBy AND @ModifiedBy is not null)
	OR ([CreatedDate] = @CreatedDate AND @CreatedDate is not null)
	OR ([PostedToInvoice] = @PostedToInvoice AND @PostedToInvoice is not null)
	OR ([PostedToInvoiceDate] = @PostedToInvoiceDate AND @PostedToInvoiceDate is not null)
	OR ([ElapsedTimeSeconds] = @ElapsedTimeSeconds AND @ElapsedTimeSeconds is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDocumentType_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDocumentType_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDocumentType_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the DocumentType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDocumentType_Get_List

AS


				
				SELECT
					[ID],
					[Name],
					[ContentType]
				FROM
					[dbo].[DocumentType]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDocumentType_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDocumentType_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDocumentType_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the DocumentType table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDocumentType_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ContentType]'
				SET @SQL = @SQL + ' FROM [dbo].[DocumentType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ContentType]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[DocumentType]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDocumentType_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDocumentType_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDocumentType_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the DocumentType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDocumentType_Insert
(

	@Id int    OUTPUT,

	@Name varchar (50)  ,

	@ContentType varchar (30)  
)
AS


					
				INSERT INTO [dbo].[DocumentType]
					(
					[Name]
					,[ContentType]
					)
				VALUES
					(
					@Name
					,@ContentType
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDocumentType_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDocumentType_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDocumentType_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the DocumentType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDocumentType_Update
(

	@Id int   ,

	@Name varchar (50)  ,

	@ContentType varchar (30)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[DocumentType]
				SET
					[Name] = @Name
					,[ContentType] = @ContentType
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDocumentType_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDocumentType_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDocumentType_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the DocumentType table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDocumentType_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[DocumentType] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDocumentType_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDocumentType_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDocumentType_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the DocumentType table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDocumentType_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Name],
					[ContentType]
				FROM
					[dbo].[DocumentType]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pDocumentType_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pDocumentType_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pDocumentType_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the DocumentType table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pDocumentType_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Name varchar (50)  = null ,

	@ContentType varchar (30)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [ContentType]
    FROM
	[dbo].[DocumentType]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Name] = @Name OR @Name IS NULL)
	AND ([ContentType] = @ContentType OR @ContentType IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Name]
	, [ContentType]
    FROM
	[dbo].[DocumentType]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Name] = @Name AND @Name is not null)
	OR ([ContentType] = @ContentType AND @ContentType is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the Wholesaler_Product_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_Get_List

AS


				
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
					
				SELECT @@ROWCOUNT
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_GetPaged procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_GetPaged') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_GetPaged
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the Wholesaler_Product_Feature table passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_GetPaged
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN
				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler_Product_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [FeatureOptionValue]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ORDER BY ' + @OrderBy
				EXEC sp_executesql @SQL
				
				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[Wholesaler_Product_Feature]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
			
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_Insert procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_Insert') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_Insert
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Inserts a record into the Wholesaler_Product_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_Insert
(

	@Id int    OUTPUT,

	@Wholesaler_ProductId int   ,

	@FeatureId int   ,

	@FeatureOptionId int   ,

	@Enabled bit   ,

	@FeatureOptionValue varchar (100)  
)
AS


					
				INSERT INTO [dbo].[Wholesaler_Product_Feature]
					(
					[Wholesaler_ProductID]
					,[FeatureID]
					,[FeatureOptionID]
					,[Enabled]
					,[FeatureOptionValue]
					)
				VALUES
					(
					@Wholesaler_ProductId
					,@FeatureId
					,@FeatureOptionId
					,@Enabled
					,@FeatureOptionValue
					)
				
				-- Get the identity value
				SET @Id = SCOPE_IDENTITY()
									
							
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_Update procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_Update') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_Update
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Updates a record in the Wholesaler_Product_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_Update
(

	@Id int   ,

	@Wholesaler_ProductId int   ,

	@FeatureId int   ,

	@FeatureOptionId int   ,

	@Enabled bit   ,

	@FeatureOptionValue varchar (100)  
)
AS


				
				
				-- Modify the updatable columns
				UPDATE
					[dbo].[Wholesaler_Product_Feature]
				SET
					[Wholesaler_ProductID] = @Wholesaler_ProductId
					,[FeatureID] = @FeatureId
					,[FeatureOptionID] = @FeatureOptionId
					,[Enabled] = @Enabled
					,[FeatureOptionValue] = @FeatureOptionValue
				WHERE
[ID] = @Id 
				
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_Delete procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_Delete') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_Delete
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Deletes a record in the Wholesaler_Product_Feature table
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_Delete
(

	@Id int   
)
AS


				DELETE FROM [dbo].[Wholesaler_Product_Feature] WITH (ROWLOCK) 
				WHERE
					[ID] = @Id
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_GetByFeatureId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_GetByFeatureId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_GetByFeatureId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_GetByFeatureId
(

	@FeatureId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
				WHERE
					[FeatureID] = @FeatureId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_GetByFeatureOptionId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_GetByFeatureOptionId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_GetByFeatureOptionId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_GetByFeatureOptionId
(

	@FeatureOptionId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
				WHERE
					[FeatureOptionID] = @FeatureOptionId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_GetByWholesaler_ProductId procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_GetByWholesaler_ProductId') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_GetByWholesaler_ProductId
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product_Feature table through a foreign key
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_GetByWholesaler_ProductId
(

	@Wholesaler_ProductId int   
)
AS


				SET ANSI_NULLS OFF
				
				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
				WHERE
					[Wholesaler_ProductID] = @Wholesaler_ProductId
				
				SELECT @@ROWCOUNT
				SET ANSI_NULLS ON
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_GetById procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_GetById') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_GetById
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Select records from the Wholesaler_Product_Feature table through an index
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_GetById
(

	@Id int   
)
AS


				SELECT
					[ID],
					[Wholesaler_ProductID],
					[FeatureID],
					[FeatureOptionID],
					[Enabled],
					[FeatureOptionValue]
				FROM
					[dbo].[Wholesaler_Product_Feature]
				WHERE
					[ID] = @Id
				SELECT @@ROWCOUNT
					
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pWholesaler_Product_Feature_Find procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pWholesaler_Product_Feature_Find') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pWholesaler_Product_Feature_Find
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Finds records in the Wholesaler_Product_Feature table passing nullable parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pWholesaler_Product_Feature_Find
(

	@SearchUsingOR bit   = null ,

	@Id int   = null ,

	@Wholesaler_ProductId int   = null ,

	@FeatureId int   = null ,

	@FeatureOptionId int   = null ,

	@Enabled bit   = null ,

	@FeatureOptionValue varchar (100)  = null 
)
AS


				
  IF ISNULL(@SearchUsingOR, 0) <> 1
  BEGIN
    SELECT
	  [ID]
	, [Wholesaler_ProductID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Wholesaler_Product_Feature]
    WHERE 
	 ([ID] = @Id OR @Id IS NULL)
	AND ([Wholesaler_ProductID] = @Wholesaler_ProductId OR @Wholesaler_ProductId IS NULL)
	AND ([FeatureID] = @FeatureId OR @FeatureId IS NULL)
	AND ([FeatureOptionID] = @FeatureOptionId OR @FeatureOptionId IS NULL)
	AND ([Enabled] = @Enabled OR @Enabled IS NULL)
	AND ([FeatureOptionValue] = @FeatureOptionValue OR @FeatureOptionValue IS NULL)
						
  END
  ELSE
  BEGIN
    SELECT
	  [ID]
	, [Wholesaler_ProductID]
	, [FeatureID]
	, [FeatureOptionID]
	, [Enabled]
	, [FeatureOptionValue]
    FROM
	[dbo].[Wholesaler_Product_Feature]
    WHERE 
	 ([ID] = @Id AND @Id is not null)
	OR ([Wholesaler_ProductID] = @Wholesaler_ProductId AND @Wholesaler_ProductId is not null)
	OR ([FeatureID] = @FeatureId AND @FeatureId is not null)
	OR ([FeatureOptionID] = @FeatureOptionId AND @FeatureOptionId is not null)
	OR ([Enabled] = @Enabled AND @Enabled is not null)
	OR ([FeatureOptionValue] = @FeatureOptionValue AND @FeatureOptionValue is not null)
	SELECT @@ROWCOUNT			
  END
				

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_AccessType_ProductRates_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_AccessType_ProductRates_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_AccessType_ProductRates_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_AccessType_ProductRates view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_AccessType_ProductRates_Get_List

AS


				
				SELECT
					[ProductRateName],
					[ProductID],
					[ProductName],
					[ProductDefaultOption],
					[ProductTypeID],
					[ProductRateTypeID],
					[ProductTypeName],
					[ProductRateTypeName],
					[ProductDisplayOrder],
					[ProductRateDisplayName],
					[ProductRateDisplayOrder],
					[ProductTypeDisplayName],
					[ProductTypeDisplayOrder],
					[ProductRateTypeDisplayName],
					[ProductRateTypeDisplayOrder],
					[DDLDescription],
					[ProductRateDescription],
					[RatingTypeID],
					[RatingTypeDisplayName],
					[AccessTypeID],
					[ProductRateID],
					[AccessTypeName],
					[AccessTypeDisplayName],
					[AccessTypeValue],
					[AccessTypeBillable],
					[AccessTypeEnabled],
					[AccessType_ProductRateID],
					[ProductRateIntervalID],
					[ProductRateTaxableID],
					[ProductRateCountryID],
					[MinimumTimeBeforeChargedSec],
					[DDLDescription2]
				FROM
					[dbo].[vw_AccessType_ProductRates]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_AccessType_ProductRates_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_AccessType_ProductRates_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_AccessType_ProductRates_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_AccessType_ProductRates view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_AccessType_ProductRates_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductRateName]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductRateName]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ProductName]'
				SET @SQL = @SQL + ', [ProductDefaultOption]'
				SET @SQL = @SQL + ', [ProductTypeID]'
				SET @SQL = @SQL + ', [ProductRateTypeID]'
				SET @SQL = @SQL + ', [ProductTypeName]'
				SET @SQL = @SQL + ', [ProductRateTypeName]'
				SET @SQL = @SQL + ', [ProductDisplayOrder]'
				SET @SQL = @SQL + ', [ProductRateDisplayName]'
				SET @SQL = @SQL + ', [ProductRateDisplayOrder]'
				SET @SQL = @SQL + ', [ProductTypeDisplayName]'
				SET @SQL = @SQL + ', [ProductTypeDisplayOrder]'
				SET @SQL = @SQL + ', [ProductRateTypeDisplayName]'
				SET @SQL = @SQL + ', [ProductRateTypeDisplayOrder]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ', [ProductRateDescription]'
				SET @SQL = @SQL + ', [RatingTypeID]'
				SET @SQL = @SQL + ', [RatingTypeDisplayName]'
				SET @SQL = @SQL + ', [AccessTypeID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [AccessTypeName]'
				SET @SQL = @SQL + ', [AccessTypeDisplayName]'
				SET @SQL = @SQL + ', [AccessTypeValue]'
				SET @SQL = @SQL + ', [AccessTypeBillable]'
				SET @SQL = @SQL + ', [AccessTypeEnabled]'
				SET @SQL = @SQL + ', [AccessType_ProductRateID]'
				SET @SQL = @SQL + ', [ProductRateIntervalID]'
				SET @SQL = @SQL + ', [ProductRateTaxableID]'
				SET @SQL = @SQL + ', [ProductRateCountryID]'
				SET @SQL = @SQL + ', [MinimumTimeBeforeChargedSec]'
				SET @SQL = @SQL + ', [DDLDescription2]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_AccessType_ProductRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductRateName],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ProductName],'
				SET @SQL = @SQL + ' [ProductDefaultOption],'
				SET @SQL = @SQL + ' [ProductTypeID],'
				SET @SQL = @SQL + ' [ProductRateTypeID],'
				SET @SQL = @SQL + ' [ProductTypeName],'
				SET @SQL = @SQL + ' [ProductRateTypeName],'
				SET @SQL = @SQL + ' [ProductDisplayOrder],'
				SET @SQL = @SQL + ' [ProductRateDisplayName],'
				SET @SQL = @SQL + ' [ProductRateDisplayOrder],'
				SET @SQL = @SQL + ' [ProductTypeDisplayName],'
				SET @SQL = @SQL + ' [ProductTypeDisplayOrder],'
				SET @SQL = @SQL + ' [ProductRateTypeDisplayName],'
				SET @SQL = @SQL + ' [ProductRateTypeDisplayOrder],'
				SET @SQL = @SQL + ' [DDLDescription],'
				SET @SQL = @SQL + ' [ProductRateDescription],'
				SET @SQL = @SQL + ' [RatingTypeID],'
				SET @SQL = @SQL + ' [RatingTypeDisplayName],'
				SET @SQL = @SQL + ' [AccessTypeID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [AccessTypeName],'
				SET @SQL = @SQL + ' [AccessTypeDisplayName],'
				SET @SQL = @SQL + ' [AccessTypeValue],'
				SET @SQL = @SQL + ' [AccessTypeBillable],'
				SET @SQL = @SQL + ' [AccessTypeEnabled],'
				SET @SQL = @SQL + ' [AccessType_ProductRateID],'
				SET @SQL = @SQL + ' [ProductRateIntervalID],'
				SET @SQL = @SQL + ' [ProductRateTaxableID],'
				SET @SQL = @SQL + ' [ProductRateCountryID],'
				SET @SQL = @SQL + ' [MinimumTimeBeforeChargedSec],'
				SET @SQL = @SQL + ' [DDLDescription2]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_AccessType_ProductRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_ConferenceCallList_Unique_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_ConferenceCallList_Unique_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_ConferenceCallList_Unique_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_ConferenceCallList_Unique view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_ConferenceCallList_Unique_Get_List

AS


				
				SELECT
					[ModeratorID],
					[CustomerID],
					[WholesalerID],
					[ModeratorName],
					[ConferenceStartTime],
					[UniqueConferenceID],
					[NumberPeopleOnCall],
					[AuxiliaryConferenceID],
					[ReferenceNumber]
				FROM
					[dbo].[vw_ConferenceCallList_Unique]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_ConferenceCallList_Unique_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_ConferenceCallList_Unique_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_ConferenceCallList_Unique_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ConferenceCallList_Unique view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_ConferenceCallList_Unique_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ModeratorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [ConferenceStartTime]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [NumberPeopleOnCall]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ConferenceCallList_Unique]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [ConferenceStartTime],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [NumberPeopleOnCall],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [ReferenceNumber]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ConferenceCallList_Unique]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_ConferenceList_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_ConferenceList_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_ConferenceList_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_ConferenceList view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_ConferenceList_Get_List

AS


				
				SELECT
					[ID],
					[CompanyName],
					[AdminName],
					[ModeratorName],
					[ModeratorCode],
					[PassCode],
					[SeeVoghMeetingId],
					[Enabled],
					[LastWalletCardSentdate],
					[WholesalerID],
					[CustomerID],
					[CompanyID],
					[SalesPersonID],
					[SalesPerson],
					[UserID],
					[ConferenceName]
				FROM
					[dbo].[vw_ConferenceList]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_ConferenceList_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_ConferenceList_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_ConferenceList_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ConferenceList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_ConferenceList_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [AdminName]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [SeeVoghMeetingId]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [LastWalletCardSentdate]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [SalesPerson]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [ConferenceName]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ConferenceList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [AdminName],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [SeeVoghMeetingId],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [LastWalletCardSentdate],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [SalesPerson],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [ConferenceName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ConferenceList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_CustomerList_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_CustomerList_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_CustomerList_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_CustomerList view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_CustomerList_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[PriCustomerNumber],
					[Description],
					[ExternalCustomerNumber],
					[PrimaryContactName],
					[PrimaryContactPhoneNumber],
					[PrimaryContactEmailAddress],
					[PrimaryContactAddress1],
					[PrimaryContactAddress2],
					[PrimaryContactCity],
					[PrimaryContactCountry],
					[PrimaryContactRegion],
					[PrimaryContactPostalCode],
					[PrimaryContactFaxNumber],
					[BillingContactName],
					[BillingContactPhoneNumber],
					[BillingContactEmailAddress],
					[BillingContactAddress1],
					[BillingContactAddress2],
					[BillingContactCity],
					[BillingContactCountry],
					[BillingContactRegion],
					[BillingContactPostalCode],
					[BillingContactFaxNumber],
					[WebsiteURL],
					[SalesPersonID],
					[VerticalID],
					[CompanyID],
					[CurrencyID],
					[BillingPeriodCutoff],
					[TaxableID],
					[CreditCardNameOnCard],
					[CreditCardNumber],
					[CreditCardExp],
					[CreditCardVerCode],
					[CreditCardTypeName],
					[CreatedDate],
					[LastModified],
					[UniqueCustomerID],
					[Enabled],
					[UserID],
					[WebGroupID],
					[CompanyName],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[UserEnabled],
					[RoleID],
					[MustChangePassword],
					[CharityID],
					[WebMemberID],
					[DDLDescription],
					[SalesPerson],
					[SalesManagerID],
					[VerticalDescription]
				FROM
					[dbo].[vw_CustomerList]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_CustomerList_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_CustomerList_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_CustomerList_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_CustomerList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_CustomerList_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [ExternalCustomerNumber]'
				SET @SQL = @SQL + ', [PrimaryContactName]'
				SET @SQL = @SQL + ', [PrimaryContactPhoneNumber]'
				SET @SQL = @SQL + ', [PrimaryContactEmailAddress]'
				SET @SQL = @SQL + ', [PrimaryContactAddress1]'
				SET @SQL = @SQL + ', [PrimaryContactAddress2]'
				SET @SQL = @SQL + ', [PrimaryContactCity]'
				SET @SQL = @SQL + ', [PrimaryContactCountry]'
				SET @SQL = @SQL + ', [PrimaryContactRegion]'
				SET @SQL = @SQL + ', [PrimaryContactPostalCode]'
				SET @SQL = @SQL + ', [PrimaryContactFaxNumber]'
				SET @SQL = @SQL + ', [BillingContactName]'
				SET @SQL = @SQL + ', [BillingContactPhoneNumber]'
				SET @SQL = @SQL + ', [BillingContactEmailAddress]'
				SET @SQL = @SQL + ', [BillingContactAddress1]'
				SET @SQL = @SQL + ', [BillingContactAddress2]'
				SET @SQL = @SQL + ', [BillingContactCity]'
				SET @SQL = @SQL + ', [BillingContactCountry]'
				SET @SQL = @SQL + ', [BillingContactRegion]'
				SET @SQL = @SQL + ', [BillingContactPostalCode]'
				SET @SQL = @SQL + ', [BillingContactFaxNumber]'
				SET @SQL = @SQL + ', [WebsiteURL]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [VerticalID]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [CurrencyID]'
				SET @SQL = @SQL + ', [BillingPeriodCutoff]'
				SET @SQL = @SQL + ', [TaxableID]'
				SET @SQL = @SQL + ', [CreditCardNameOnCard]'
				SET @SQL = @SQL + ', [CreditCardNumber]'
				SET @SQL = @SQL + ', [CreditCardExp]'
				SET @SQL = @SQL + ', [CreditCardVerCode]'
				SET @SQL = @SQL + ', [CreditCardTypeName]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [UniqueCustomerID]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [WebGroupID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [UserEnabled]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [MustChangePassword]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [WebMemberID]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ', [SalesPerson]'
				SET @SQL = @SQL + ', [SalesManagerID]'
				SET @SQL = @SQL + ', [VerticalDescription]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_CustomerList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [ExternalCustomerNumber],'
				SET @SQL = @SQL + ' [PrimaryContactName],'
				SET @SQL = @SQL + ' [PrimaryContactPhoneNumber],'
				SET @SQL = @SQL + ' [PrimaryContactEmailAddress],'
				SET @SQL = @SQL + ' [PrimaryContactAddress1],'
				SET @SQL = @SQL + ' [PrimaryContactAddress2],'
				SET @SQL = @SQL + ' [PrimaryContactCity],'
				SET @SQL = @SQL + ' [PrimaryContactCountry],'
				SET @SQL = @SQL + ' [PrimaryContactRegion],'
				SET @SQL = @SQL + ' [PrimaryContactPostalCode],'
				SET @SQL = @SQL + ' [PrimaryContactFaxNumber],'
				SET @SQL = @SQL + ' [BillingContactName],'
				SET @SQL = @SQL + ' [BillingContactPhoneNumber],'
				SET @SQL = @SQL + ' [BillingContactEmailAddress],'
				SET @SQL = @SQL + ' [BillingContactAddress1],'
				SET @SQL = @SQL + ' [BillingContactAddress2],'
				SET @SQL = @SQL + ' [BillingContactCity],'
				SET @SQL = @SQL + ' [BillingContactCountry],'
				SET @SQL = @SQL + ' [BillingContactRegion],'
				SET @SQL = @SQL + ' [BillingContactPostalCode],'
				SET @SQL = @SQL + ' [BillingContactFaxNumber],'
				SET @SQL = @SQL + ' [WebsiteURL],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [VerticalID],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [CurrencyID],'
				SET @SQL = @SQL + ' [BillingPeriodCutoff],'
				SET @SQL = @SQL + ' [TaxableID],'
				SET @SQL = @SQL + ' [CreditCardNameOnCard],'
				SET @SQL = @SQL + ' [CreditCardNumber],'
				SET @SQL = @SQL + ' [CreditCardExp],'
				SET @SQL = @SQL + ' [CreditCardVerCode],'
				SET @SQL = @SQL + ' [CreditCardTypeName],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [UniqueCustomerID],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [WebGroupID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [UserEnabled],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [MustChangePassword],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [WebMemberID],'
				SET @SQL = @SQL + ' [DDLDescription],'
				SET @SQL = @SQL + ' [SalesPerson],'
				SET @SQL = @SQL + ' [SalesManagerID],'
				SET @SQL = @SQL + ' [VerticalDescription]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_CustomerList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_CustomerTransactionList_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_CustomerTransactionList_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_CustomerTransactionList_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_CustomerTransactionList view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_CustomerTransactionList_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[CustomerTransactionTypeID],
					[CustomerTransactionTypeDisplayName],
					[TransactionDescription],
					[TransactionDate],
					[TransactionAmount],
					[LocalTaxRate],
					[FederalTaxRate],
					[LocalTaxAmount],
					[FederalTaxAmount],
					[TransactionTotal],
					[CustomerBalance],
					[Wholesaler_ProductID],
					[ProductRateID],
					[Quantity],
					[SellRate],
					[BuyRate],
					[WSTransactionAmount],
					[ReferenceNumber],
					[UniqueConferenceID],
					[PostedDate],
					[ModifiedBy],
					[CreatedDate],
					[PostedToInvoice],
					[PostedToInvoiceDate],
					[ElapsedTimeSeconds],
					[ProductRateDisplayName],
					[Wholesaler_ProductName],
					[ModeratorName],
					[ConferenceName],
					[ModeratorConferenceName]
				FROM
					[dbo].[vw_CustomerTransactionList]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_CustomerTransactionList_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_CustomerTransactionList_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_CustomerTransactionList_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_CustomerTransactionList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_CustomerTransactionList_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeID]'
				SET @SQL = @SQL + ', [CustomerTransactionTypeDisplayName]'
				SET @SQL = @SQL + ', [TransactionDescription]'
				SET @SQL = @SQL + ', [TransactionDate]'
				SET @SQL = @SQL + ', [TransactionAmount]'
				SET @SQL = @SQL + ', [LocalTaxRate]'
				SET @SQL = @SQL + ', [FederalTaxRate]'
				SET @SQL = @SQL + ', [LocalTaxAmount]'
				SET @SQL = @SQL + ', [FederalTaxAmount]'
				SET @SQL = @SQL + ', [TransactionTotal]'
				SET @SQL = @SQL + ', [CustomerBalance]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [Quantity]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [WSTransactionAmount]'
				SET @SQL = @SQL + ', [ReferenceNumber]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [PostedDate]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [PostedToInvoice]'
				SET @SQL = @SQL + ', [PostedToInvoiceDate]'
				SET @SQL = @SQL + ', [ElapsedTimeSeconds]'
				SET @SQL = @SQL + ', [ProductRateDisplayName]'
				SET @SQL = @SQL + ', [Wholesaler_ProductName]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [ConferenceName]'
				SET @SQL = @SQL + ', [ModeratorConferenceName]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_CustomerTransactionList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeID],'
				SET @SQL = @SQL + ' [CustomerTransactionTypeDisplayName],'
				SET @SQL = @SQL + ' [TransactionDescription],'
				SET @SQL = @SQL + ' [TransactionDate],'
				SET @SQL = @SQL + ' [TransactionAmount],'
				SET @SQL = @SQL + ' [LocalTaxRate],'
				SET @SQL = @SQL + ' [FederalTaxRate],'
				SET @SQL = @SQL + ' [LocalTaxAmount],'
				SET @SQL = @SQL + ' [FederalTaxAmount],'
				SET @SQL = @SQL + ' [TransactionTotal],'
				SET @SQL = @SQL + ' [CustomerBalance],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [Quantity],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [WSTransactionAmount],'
				SET @SQL = @SQL + ' [ReferenceNumber],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [PostedDate],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [PostedToInvoice],'
				SET @SQL = @SQL + ' [PostedToInvoiceDate],'
				SET @SQL = @SQL + ' [ElapsedTimeSeconds],'
				SET @SQL = @SQL + ' [ProductRateDisplayName],'
				SET @SQL = @SQL + ' [Wholesaler_ProductName],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [ConferenceName],'
				SET @SQL = @SQL + ' [ModeratorConferenceName]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_CustomerTransactionList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_DefaultProductRates_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_DefaultProductRates_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_DefaultProductRates_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_DefaultProductRates view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_DefaultProductRates_Get_List

AS


				
				SELECT
					[ProductRateValueID],
					[ProductRateID],
					[SellRate],
					[SellRateCurrencyID],
					[BuyRate],
					[BuyRateCurrencyID],
					[StartDate],
					[DefaultOption],
					[ProductRateName],
					[ProductID],
					[ProductName],
					[ProductDefaultOption],
					[ProductTypeID],
					[ProductRateTypeID],
					[ProductTypeName],
					[ProductRateTypeName],
					[ProductDisplayOrder],
					[ProductRateDisplayName],
					[ProductRateDisplayOrder],
					[ProductTypeDisplayName],
					[ProductTypeDisplayOrder],
					[ProductRateTypeDisplayName],
					[ProductRateTypeDisplayOrder],
					[DDLDescription],
					[RatingTypeID],
					[DisplayName],
					[DDLDescription2]
				FROM
					[dbo].[vw_DefaultProductRates]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_DefaultProductRates_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_DefaultProductRates_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_DefaultProductRates_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_DefaultProductRates view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_DefaultProductRates_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ProductRateValueID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ProductRateValueID]'
				SET @SQL = @SQL + ', [ProductRateID]'
				SET @SQL = @SQL + ', [SellRate]'
				SET @SQL = @SQL + ', [SellRateCurrencyID]'
				SET @SQL = @SQL + ', [BuyRate]'
				SET @SQL = @SQL + ', [BuyRateCurrencyID]'
				SET @SQL = @SQL + ', [StartDate]'
				SET @SQL = @SQL + ', [DefaultOption]'
				SET @SQL = @SQL + ', [ProductRateName]'
				SET @SQL = @SQL + ', [ProductID]'
				SET @SQL = @SQL + ', [ProductName]'
				SET @SQL = @SQL + ', [ProductDefaultOption]'
				SET @SQL = @SQL + ', [ProductTypeID]'
				SET @SQL = @SQL + ', [ProductRateTypeID]'
				SET @SQL = @SQL + ', [ProductTypeName]'
				SET @SQL = @SQL + ', [ProductRateTypeName]'
				SET @SQL = @SQL + ', [ProductDisplayOrder]'
				SET @SQL = @SQL + ', [ProductRateDisplayName]'
				SET @SQL = @SQL + ', [ProductRateDisplayOrder]'
				SET @SQL = @SQL + ', [ProductTypeDisplayName]'
				SET @SQL = @SQL + ', [ProductTypeDisplayOrder]'
				SET @SQL = @SQL + ', [ProductRateTypeDisplayName]'
				SET @SQL = @SQL + ', [ProductRateTypeDisplayOrder]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ', [RatingTypeID]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [DDLDescription2]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_DefaultProductRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ProductRateValueID],'
				SET @SQL = @SQL + ' [ProductRateID],'
				SET @SQL = @SQL + ' [SellRate],'
				SET @SQL = @SQL + ' [SellRateCurrencyID],'
				SET @SQL = @SQL + ' [BuyRate],'
				SET @SQL = @SQL + ' [BuyRateCurrencyID],'
				SET @SQL = @SQL + ' [StartDate],'
				SET @SQL = @SQL + ' [DefaultOption],'
				SET @SQL = @SQL + ' [ProductRateName],'
				SET @SQL = @SQL + ' [ProductID],'
				SET @SQL = @SQL + ' [ProductName],'
				SET @SQL = @SQL + ' [ProductDefaultOption],'
				SET @SQL = @SQL + ' [ProductTypeID],'
				SET @SQL = @SQL + ' [ProductRateTypeID],'
				SET @SQL = @SQL + ' [ProductTypeName],'
				SET @SQL = @SQL + ' [ProductRateTypeName],'
				SET @SQL = @SQL + ' [ProductDisplayOrder],'
				SET @SQL = @SQL + ' [ProductRateDisplayName],'
				SET @SQL = @SQL + ' [ProductRateDisplayOrder],'
				SET @SQL = @SQL + ' [ProductTypeDisplayName],'
				SET @SQL = @SQL + ' [ProductTypeDisplayOrder],'
				SET @SQL = @SQL + ' [ProductRateTypeDisplayName],'
				SET @SQL = @SQL + ' [ProductRateTypeDisplayOrder],'
				SET @SQL = @SQL + ' [DDLDescription],'
				SET @SQL = @SQL + ' [RatingTypeID],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [DDLDescription2]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_DefaultProductRates]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_FeatureOptionsForCustomers_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_FeatureOptionsForCustomers_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_FeatureOptionsForCustomers_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_FeatureOptionsForCustomers view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_FeatureOptionsForCustomers_Get_List

AS


				
				SELECT
					[CustomerID],
					[WholesalerID],
					[PriCustomerNumber],
					[Customer_FeatureID],
					[Customer_FeatureCustomerID],
					[Customer_FeatureFeatureID],
					[Customer_FeatureFeatureOptionID],
					[Customer_FeatureEnabled],
					[Customer_FeatureFeatureOptionValue],
					[FeatureID],
					[FeatureProductID],
					[FeatureName],
					[FeatureDisplayName],
					[FeatureDescription],
					[FeatureDisplayNameAlt],
					[FeatureDescriptionAlt],
					[FeatureDefaultOption],
					[FeatureEnabled],
					[FeatureDisplayOrder],
					[FeatureDisplayOnlyToCustomer],
					[FeatureDisplayInAMPSite],
					[FeatureDisplayToCustomer],
					[FeatureDisplayToModerator],
					[FeatureOptionID],
					[FeatureOptionFeatureID],
					[FeatureOptionName],
					[FeatureOptionDisplayName],
					[FeatureOptionDescription],
					[FeatureOptionDisplayNameAlt],
					[FeatureOptionDescriptionAlt],
					[FeatureOptionValue],
					[FeatureOptionDisplayOrder],
					[FeatureOptionDefaultOption],
					[FeatureOptionEnabled],
					[FeatureOptionFeatureOptionTypeID],
					[FeatureOptionRegularExpression],
					[FeatureOptionTypeID],
					[FeatureOptionTypeName],
					[FeatureOptionTypeDescription],
					[FeatureOptionTypeDisplayOrder],
					[Wholesaler_ProductID],
					[Wholesaler_ProductProductID],
					[Wholesaler_ProductName],
					[Wholesaler_ProductDescription],
					[Wholesaler_ProductDisplayNameAlt],
					[Wholesaler_ProductDescriptionAlt],
					[Wholesaler_ProductDisplayOrder],
					[Wholesaler_ProductEnabled]
				FROM
					[dbo].[vw_FeatureOptionsForCustomers]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_FeatureOptionsForCustomers_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_FeatureOptionsForCustomers_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_FeatureOptionsForCustomers_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_FeatureOptionsForCustomers view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_FeatureOptionsForCustomers_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [Customer_FeatureID]'
				SET @SQL = @SQL + ', [Customer_FeatureCustomerID]'
				SET @SQL = @SQL + ', [Customer_FeatureFeatureID]'
				SET @SQL = @SQL + ', [Customer_FeatureFeatureOptionID]'
				SET @SQL = @SQL + ', [Customer_FeatureEnabled]'
				SET @SQL = @SQL + ', [Customer_FeatureFeatureOptionValue]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureProductID]'
				SET @SQL = @SQL + ', [FeatureName]'
				SET @SQL = @SQL + ', [FeatureDisplayName]'
				SET @SQL = @SQL + ', [FeatureDescription]'
				SET @SQL = @SQL + ', [FeatureDisplayNameAlt]'
				SET @SQL = @SQL + ', [FeatureDescriptionAlt]'
				SET @SQL = @SQL + ', [FeatureDefaultOption]'
				SET @SQL = @SQL + ', [FeatureEnabled]'
				SET @SQL = @SQL + ', [FeatureDisplayOrder]'
				SET @SQL = @SQL + ', [FeatureDisplayOnlyToCustomer]'
				SET @SQL = @SQL + ', [FeatureDisplayInAMPSite]'
				SET @SQL = @SQL + ', [FeatureDisplayToCustomer]'
				SET @SQL = @SQL + ', [FeatureDisplayToModerator]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [FeatureOptionFeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionName]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayName]'
				SET @SQL = @SQL + ', [FeatureOptionDescription]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayNameAlt]'
				SET @SQL = @SQL + ', [FeatureOptionDescriptionAlt]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayOrder]'
				SET @SQL = @SQL + ', [FeatureOptionDefaultOption]'
				SET @SQL = @SQL + ', [FeatureOptionEnabled]'
				SET @SQL = @SQL + ', [FeatureOptionFeatureOptionTypeID]'
				SET @SQL = @SQL + ', [FeatureOptionRegularExpression]'
				SET @SQL = @SQL + ', [FeatureOptionTypeID]'
				SET @SQL = @SQL + ', [FeatureOptionTypeName]'
				SET @SQL = @SQL + ', [FeatureOptionTypeDescription]'
				SET @SQL = @SQL + ', [FeatureOptionTypeDisplayOrder]'
				SET @SQL = @SQL + ', [Wholesaler_ProductID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductProductID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductName]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDescription]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDisplayNameAlt]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDescriptionAlt]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDisplayOrder]'
				SET @SQL = @SQL + ', [Wholesaler_ProductEnabled]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FeatureOptionsForCustomers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [Customer_FeatureID],'
				SET @SQL = @SQL + ' [Customer_FeatureCustomerID],'
				SET @SQL = @SQL + ' [Customer_FeatureFeatureID],'
				SET @SQL = @SQL + ' [Customer_FeatureFeatureOptionID],'
				SET @SQL = @SQL + ' [Customer_FeatureEnabled],'
				SET @SQL = @SQL + ' [Customer_FeatureFeatureOptionValue],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureProductID],'
				SET @SQL = @SQL + ' [FeatureName],'
				SET @SQL = @SQL + ' [FeatureDisplayName],'
				SET @SQL = @SQL + ' [FeatureDescription],'
				SET @SQL = @SQL + ' [FeatureDisplayNameAlt],'
				SET @SQL = @SQL + ' [FeatureDescriptionAlt],'
				SET @SQL = @SQL + ' [FeatureDefaultOption],'
				SET @SQL = @SQL + ' [FeatureEnabled],'
				SET @SQL = @SQL + ' [FeatureDisplayOrder],'
				SET @SQL = @SQL + ' [FeatureDisplayOnlyToCustomer],'
				SET @SQL = @SQL + ' [FeatureDisplayInAMPSite],'
				SET @SQL = @SQL + ' [FeatureDisplayToCustomer],'
				SET @SQL = @SQL + ' [FeatureDisplayToModerator],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [FeatureOptionFeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionName],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayName],'
				SET @SQL = @SQL + ' [FeatureOptionDescription],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayNameAlt],'
				SET @SQL = @SQL + ' [FeatureOptionDescriptionAlt],'
				SET @SQL = @SQL + ' [FeatureOptionValue],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayOrder],'
				SET @SQL = @SQL + ' [FeatureOptionDefaultOption],'
				SET @SQL = @SQL + ' [FeatureOptionEnabled],'
				SET @SQL = @SQL + ' [FeatureOptionFeatureOptionTypeID],'
				SET @SQL = @SQL + ' [FeatureOptionRegularExpression],'
				SET @SQL = @SQL + ' [FeatureOptionTypeID],'
				SET @SQL = @SQL + ' [FeatureOptionTypeName],'
				SET @SQL = @SQL + ' [FeatureOptionTypeDescription],'
				SET @SQL = @SQL + ' [FeatureOptionTypeDisplayOrder],'
				SET @SQL = @SQL + ' [Wholesaler_ProductID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductProductID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductName],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDescription],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDisplayNameAlt],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDescriptionAlt],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDisplayOrder],'
				SET @SQL = @SQL + ' [Wholesaler_ProductEnabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FeatureOptionsForCustomers]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_FeatureOptionsForModerators_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_FeatureOptionsForModerators_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_FeatureOptionsForModerators_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_FeatureOptionsForModerators view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_FeatureOptionsForModerators_Get_List

AS


				
				SELECT
					[ModeratorID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[Moderator_FeatureID],
					[Moderator_FeatureFeatureID],
					[Moderator_FeatureFeatureOptionID],
					[Moderator_FeatureEnabled],
					[Moderator_FeatureFeatureOptionValue],
					[FeatureID],
					[FeatureProductID],
					[FeatureName],
					[FeatureDisplayName],
					[FeatureDescription],
					[FeatureDisplayNameAlt],
					[FeatureDescriptionAlt],
					[FeatureDefaultOption],
					[FeatureEnabled],
					[FeatureDisplayOrder],
					[FeatureDisplayOnlyToCustomer],
					[FeatureDisplayInAMPSite],
					[FeatureDisplayToCustomer],
					[FeatureDisplayToModerator],
					[FeatureOptionID],
					[FeatureOptionFeatureID],
					[FeatureOptionName],
					[FeatureOptionDisplayName],
					[FeatureOptionDescription],
					[FeatureOptionDisplayNameAlt],
					[FeatureOptionDescriptionAlt],
					[FeatureOptionValue],
					[FeatureOptionDisplayOrder],
					[FeatureOptionDefaultOption],
					[FeatureOptionEnabled],
					[FeatureOptionFeatureOptionTypeID],
					[FeatureOptionRegularExpression],
					[FeatureOptionTypeID],
					[FeatureOptionTypeName],
					[FeatureOptionTypeDescription],
					[FeatureOptionTypeDisplayOrder],
					[Wholesaler_ProductProductID],
					[Wholesaler_ProductName],
					[Wholesaler_ProductDescription],
					[Wholesaler_ProductDisplayNameAlt],
					[Wholesaler_ProductDescriptionAlt],
					[Wholesaler_ProductDisplayOrder],
					[Wholesaler_ProductEnabled]
				FROM
					[dbo].[vw_FeatureOptionsForModerators]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_FeatureOptionsForModerators_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_FeatureOptionsForModerators_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_FeatureOptionsForModerators_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_FeatureOptionsForModerators view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_FeatureOptionsForModerators_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ModeratorID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [Moderator_FeatureID]'
				SET @SQL = @SQL + ', [Moderator_FeatureFeatureID]'
				SET @SQL = @SQL + ', [Moderator_FeatureFeatureOptionID]'
				SET @SQL = @SQL + ', [Moderator_FeatureEnabled]'
				SET @SQL = @SQL + ', [Moderator_FeatureFeatureOptionValue]'
				SET @SQL = @SQL + ', [FeatureID]'
				SET @SQL = @SQL + ', [FeatureProductID]'
				SET @SQL = @SQL + ', [FeatureName]'
				SET @SQL = @SQL + ', [FeatureDisplayName]'
				SET @SQL = @SQL + ', [FeatureDescription]'
				SET @SQL = @SQL + ', [FeatureDisplayNameAlt]'
				SET @SQL = @SQL + ', [FeatureDescriptionAlt]'
				SET @SQL = @SQL + ', [FeatureDefaultOption]'
				SET @SQL = @SQL + ', [FeatureEnabled]'
				SET @SQL = @SQL + ', [FeatureDisplayOrder]'
				SET @SQL = @SQL + ', [FeatureDisplayOnlyToCustomer]'
				SET @SQL = @SQL + ', [FeatureDisplayInAMPSite]'
				SET @SQL = @SQL + ', [FeatureDisplayToCustomer]'
				SET @SQL = @SQL + ', [FeatureDisplayToModerator]'
				SET @SQL = @SQL + ', [FeatureOptionID]'
				SET @SQL = @SQL + ', [FeatureOptionFeatureID]'
				SET @SQL = @SQL + ', [FeatureOptionName]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayName]'
				SET @SQL = @SQL + ', [FeatureOptionDescription]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayNameAlt]'
				SET @SQL = @SQL + ', [FeatureOptionDescriptionAlt]'
				SET @SQL = @SQL + ', [FeatureOptionValue]'
				SET @SQL = @SQL + ', [FeatureOptionDisplayOrder]'
				SET @SQL = @SQL + ', [FeatureOptionDefaultOption]'
				SET @SQL = @SQL + ', [FeatureOptionEnabled]'
				SET @SQL = @SQL + ', [FeatureOptionFeatureOptionTypeID]'
				SET @SQL = @SQL + ', [FeatureOptionRegularExpression]'
				SET @SQL = @SQL + ', [FeatureOptionTypeID]'
				SET @SQL = @SQL + ', [FeatureOptionTypeName]'
				SET @SQL = @SQL + ', [FeatureOptionTypeDescription]'
				SET @SQL = @SQL + ', [FeatureOptionTypeDisplayOrder]'
				SET @SQL = @SQL + ', [Wholesaler_ProductProductID]'
				SET @SQL = @SQL + ', [Wholesaler_ProductName]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDescription]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDisplayNameAlt]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDescriptionAlt]'
				SET @SQL = @SQL + ', [Wholesaler_ProductDisplayOrder]'
				SET @SQL = @SQL + ', [Wholesaler_ProductEnabled]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FeatureOptionsForModerators]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [Moderator_FeatureID],'
				SET @SQL = @SQL + ' [Moderator_FeatureFeatureID],'
				SET @SQL = @SQL + ' [Moderator_FeatureFeatureOptionID],'
				SET @SQL = @SQL + ' [Moderator_FeatureEnabled],'
				SET @SQL = @SQL + ' [Moderator_FeatureFeatureOptionValue],'
				SET @SQL = @SQL + ' [FeatureID],'
				SET @SQL = @SQL + ' [FeatureProductID],'
				SET @SQL = @SQL + ' [FeatureName],'
				SET @SQL = @SQL + ' [FeatureDisplayName],'
				SET @SQL = @SQL + ' [FeatureDescription],'
				SET @SQL = @SQL + ' [FeatureDisplayNameAlt],'
				SET @SQL = @SQL + ' [FeatureDescriptionAlt],'
				SET @SQL = @SQL + ' [FeatureDefaultOption],'
				SET @SQL = @SQL + ' [FeatureEnabled],'
				SET @SQL = @SQL + ' [FeatureDisplayOrder],'
				SET @SQL = @SQL + ' [FeatureDisplayOnlyToCustomer],'
				SET @SQL = @SQL + ' [FeatureDisplayInAMPSite],'
				SET @SQL = @SQL + ' [FeatureDisplayToCustomer],'
				SET @SQL = @SQL + ' [FeatureDisplayToModerator],'
				SET @SQL = @SQL + ' [FeatureOptionID],'
				SET @SQL = @SQL + ' [FeatureOptionFeatureID],'
				SET @SQL = @SQL + ' [FeatureOptionName],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayName],'
				SET @SQL = @SQL + ' [FeatureOptionDescription],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayNameAlt],'
				SET @SQL = @SQL + ' [FeatureOptionDescriptionAlt],'
				SET @SQL = @SQL + ' [FeatureOptionValue],'
				SET @SQL = @SQL + ' [FeatureOptionDisplayOrder],'
				SET @SQL = @SQL + ' [FeatureOptionDefaultOption],'
				SET @SQL = @SQL + ' [FeatureOptionEnabled],'
				SET @SQL = @SQL + ' [FeatureOptionFeatureOptionTypeID],'
				SET @SQL = @SQL + ' [FeatureOptionRegularExpression],'
				SET @SQL = @SQL + ' [FeatureOptionTypeID],'
				SET @SQL = @SQL + ' [FeatureOptionTypeName],'
				SET @SQL = @SQL + ' [FeatureOptionTypeDescription],'
				SET @SQL = @SQL + ' [FeatureOptionTypeDisplayOrder],'
				SET @SQL = @SQL + ' [Wholesaler_ProductProductID],'
				SET @SQL = @SQL + ' [Wholesaler_ProductName],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDescription],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDisplayNameAlt],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDescriptionAlt],'
				SET @SQL = @SQL + ' [Wholesaler_ProductDisplayOrder],'
				SET @SQL = @SQL + ' [Wholesaler_ProductEnabled]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_FeatureOptionsForModerators]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_ModeratorList_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_ModeratorList_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_ModeratorList_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_ModeratorList view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_ModeratorList_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[CustomerID],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[ExternalModeratorNumber],
					[ModeratorCode],
					[PassCode],
					[SeeVoghMeetingId],
					[Description],
					[DepartmentID],
					[ModifiedBy],
					[CreatedDate],
					[LastModified],
					[Enabled],
					[UniqueModeratorID],
					[UserID],
					[WebMeetingID],
					[DepartmentName],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[UserEnabled],
					[RoleID],
					[MustChangePassword],
					[CharityID],
					[WebMemberID],
					[DDLDescription]
				FROM
					[dbo].[vw_ModeratorList]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_ModeratorList_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_ModeratorList_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_ModeratorList_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ModeratorList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_ModeratorList_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [ExternalModeratorNumber]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [SeeVoghMeetingId]'
				SET @SQL = @SQL + ', [Description]'
				SET @SQL = @SQL + ', [DepartmentID]'
				SET @SQL = @SQL + ', [ModifiedBy]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [LastModified]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [UniqueModeratorID]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [WebMeetingID]'
				SET @SQL = @SQL + ', [DepartmentName]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [UserEnabled]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [MustChangePassword]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [WebMemberID]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ModeratorList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [ExternalModeratorNumber],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [SeeVoghMeetingId],'
				SET @SQL = @SQL + ' [Description],'
				SET @SQL = @SQL + ' [DepartmentID],'
				SET @SQL = @SQL + ' [ModifiedBy],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [LastModified],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [UniqueModeratorID],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [WebMeetingID],'
				SET @SQL = @SQL + ' [DepartmentName],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [UserEnabled],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [MustChangePassword],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [WebMemberID],'
				SET @SQL = @SQL + ' [DDLDescription]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ModeratorList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_ModeratorList_AdminSite_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_ModeratorList_AdminSite_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_ModeratorList_AdminSite_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_ModeratorList_AdminSite view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_ModeratorList_AdminSite_Get_List

AS


				
				SELECT
					[UserID],
					[CompanyName],
					[AdminName],
					[WebLoginName],
					[WebLoginPassword],
					[ModeratorName],
					[Email],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[Telephone],
					[RoleID],
					[CharityID],
					[CharityName],
					[SalesPerson],
					[SalesPersonID],
					[WholesalerID],
					[CustomerID],
					[AccountManagerID],
					[AccountManager],
					[DateProvisioned]
				FROM
					[dbo].[vw_ModeratorList_AdminSite]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_ModeratorList_AdminSite_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_ModeratorList_AdminSite_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_ModeratorList_AdminSite_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_ModeratorList_AdminSite view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_ModeratorList_AdminSite_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [CompanyName]'
				SET @SQL = @SQL + ', [AdminName]'
				SET @SQL = @SQL + ', [WebLoginName]'
				SET @SQL = @SQL + ', [WebLoginPassword]'
				SET @SQL = @SQL + ', [ModeratorName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Address1]'
				SET @SQL = @SQL + ', [Address2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [CharityName]'
				SET @SQL = @SQL + ', [SalesPerson]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [AccountManagerID]'
				SET @SQL = @SQL + ', [AccountManager]'
				SET @SQL = @SQL + ', [DateProvisioned]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ModeratorList_AdminSite]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [CompanyName],'
				SET @SQL = @SQL + ' [AdminName],'
				SET @SQL = @SQL + ' [WebLoginName],'
				SET @SQL = @SQL + ' [WebLoginPassword],'
				SET @SQL = @SQL + ' [ModeratorName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Address1],'
				SET @SQL = @SQL + ' [Address2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [CharityName],'
				SET @SQL = @SQL + ' [SalesPerson],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [AccountManagerID],'
				SET @SQL = @SQL + ' [AccountManager],'
				SET @SQL = @SQL + ' [DateProvisioned]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_ModeratorList_AdminSite]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_RecordingList_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_RecordingList_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_RecordingList_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_RecordingList view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_RecordingList_Get_List

AS


				
				SELECT
					[ID],
					[WholesalerID],
					[BridgeID],
					[RecordingStartTime],
					[RecordingEndTime],
					[ModeratorCode],
					[PassCode],
					[PriCustomerNumber],
					[SecCustomerNumber],
					[RecordingDirectory],
					[UniqueConferenceID],
					[ReplayCode],
					[CreatedDate],
					[ProcessFlag],
					[EmailSent],
					[RPFileNumber],
					[ModeratorID],
					[Notes],
					[Mp3Flag],
					[Mp3SizeInKB],
					[Enabled],
					[StorageDuration],
					[BillingDuration],
					[BillingID],
					[DurationSec],
					[AuxiliaryConferenceID],
					[MediaType],
					[HostedLinkExpiryDate],
					[ConferenceName],
					[Username],
					[DisplayName],
					[ExtendRecordingDate],
					[UserID],
					[HostedLinkType],
					[HostedLinkURL],
					[RecordingGuid]
				FROM
					[dbo].[vw_RecordingList]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_RecordingList_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_RecordingList_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_RecordingList_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_RecordingList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_RecordingList_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[ID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [ID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [BridgeID]'
				SET @SQL = @SQL + ', [RecordingStartTime]'
				SET @SQL = @SQL + ', [RecordingEndTime]'
				SET @SQL = @SQL + ', [ModeratorCode]'
				SET @SQL = @SQL + ', [PassCode]'
				SET @SQL = @SQL + ', [PriCustomerNumber]'
				SET @SQL = @SQL + ', [SecCustomerNumber]'
				SET @SQL = @SQL + ', [RecordingDirectory]'
				SET @SQL = @SQL + ', [UniqueConferenceID]'
				SET @SQL = @SQL + ', [ReplayCode]'
				SET @SQL = @SQL + ', [CreatedDate]'
				SET @SQL = @SQL + ', [ProcessFlag]'
				SET @SQL = @SQL + ', [EmailSent]'
				SET @SQL = @SQL + ', [RPFileNumber]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [Notes]'
				SET @SQL = @SQL + ', [Mp3Flag]'
				SET @SQL = @SQL + ', [Mp3SizeInKB]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [StorageDuration]'
				SET @SQL = @SQL + ', [BillingDuration]'
				SET @SQL = @SQL + ', [BillingID]'
				SET @SQL = @SQL + ', [DurationSec]'
				SET @SQL = @SQL + ', [AuxiliaryConferenceID]'
				SET @SQL = @SQL + ', [MediaType]'
				SET @SQL = @SQL + ', [HostedLinkExpiryDate]'
				SET @SQL = @SQL + ', [ConferenceName]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [ExtendRecordingDate]'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [HostedLinkType]'
				SET @SQL = @SQL + ', [HostedLinkURL]'
				SET @SQL = @SQL + ', [RecordingGuid]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_RecordingList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [ID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [BridgeID],'
				SET @SQL = @SQL + ' [RecordingStartTime],'
				SET @SQL = @SQL + ' [RecordingEndTime],'
				SET @SQL = @SQL + ' [ModeratorCode],'
				SET @SQL = @SQL + ' [PassCode],'
				SET @SQL = @SQL + ' [PriCustomerNumber],'
				SET @SQL = @SQL + ' [SecCustomerNumber],'
				SET @SQL = @SQL + ' [RecordingDirectory],'
				SET @SQL = @SQL + ' [UniqueConferenceID],'
				SET @SQL = @SQL + ' [ReplayCode],'
				SET @SQL = @SQL + ' [CreatedDate],'
				SET @SQL = @SQL + ' [ProcessFlag],'
				SET @SQL = @SQL + ' [EmailSent],'
				SET @SQL = @SQL + ' [RPFileNumber],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [Notes],'
				SET @SQL = @SQL + ' [Mp3Flag],'
				SET @SQL = @SQL + ' [Mp3SizeInKB],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [StorageDuration],'
				SET @SQL = @SQL + ' [BillingDuration],'
				SET @SQL = @SQL + ' [BillingID],'
				SET @SQL = @SQL + ' [DurationSec],'
				SET @SQL = @SQL + ' [AuxiliaryConferenceID],'
				SET @SQL = @SQL + ' [MediaType],'
				SET @SQL = @SQL + ' [HostedLinkExpiryDate],'
				SET @SQL = @SQL + ' [ConferenceName],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [ExtendRecordingDate],'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [HostedLinkType],'
				SET @SQL = @SQL + ' [HostedLinkURL],'
				SET @SQL = @SQL + ' [RecordingGuid]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_RecordingList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_SystemExtension_All_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_SystemExtension_All_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_SystemExtension_All_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_SystemExtension_All view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_SystemExtension_All_Get_List

AS


				
				SELECT
					[CustomerID],
					[SystemExtensionID],
					[ExtensionTypeID],
					[ExtensionTypeLabel],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit],
					[TableID],
					[ReferenceValue],
					[Name],
					[DisplayName],
					[CategoryName],
					[ExtensionTypeCategoryID],
					[SystemExtensionLabelID]
				FROM
					[dbo].[vw_SystemExtension_All]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_SystemExtension_All_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_SystemExtension_All_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_SystemExtension_All_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_All view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_SystemExtension_All_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [SystemExtensionID]'
				SET @SQL = @SQL + ', [ExtensionTypeID]'
				SET @SQL = @SQL + ', [ExtensionTypeLabel]'
				SET @SQL = @SQL + ', [CustomerCanView]'
				SET @SQL = @SQL + ', [ModeratorCanView]'
				SET @SQL = @SQL + ', [CustomerCanEdit]'
				SET @SQL = @SQL + ', [ModeratorCanEdit]'
				SET @SQL = @SQL + ', [TableID]'
				SET @SQL = @SQL + ', [ReferenceValue]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [CategoryName]'
				SET @SQL = @SQL + ', [ExtensionTypeCategoryID]'
				SET @SQL = @SQL + ', [SystemExtensionLabelID]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_All]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [SystemExtensionID],'
				SET @SQL = @SQL + ' [ExtensionTypeID],'
				SET @SQL = @SQL + ' [ExtensionTypeLabel],'
				SET @SQL = @SQL + ' [CustomerCanView],'
				SET @SQL = @SQL + ' [ModeratorCanView],'
				SET @SQL = @SQL + ' [CustomerCanEdit],'
				SET @SQL = @SQL + ' [ModeratorCanEdit],'
				SET @SQL = @SQL + ' [TableID],'
				SET @SQL = @SQL + ' [ReferenceValue],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [CategoryName],'
				SET @SQL = @SQL + ' [ExtensionTypeCategoryID],'
				SET @SQL = @SQL + ' [SystemExtensionLabelID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_All]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_SystemExtension_CustomerLabel_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_SystemExtension_CustomerLabel_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_SystemExtension_CustomerLabel_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_SystemExtension_CustomerLabel view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_SystemExtension_CustomerLabel_Get_List

AS


				
				SELECT
					[CustomerID],
					[Name],
					[ExtensionTypeLabel],
					[ExtensionTypeCategoryID],
					[ExtensionTypeID],
					[CustomerCanView],
					[ModeratorCanView],
					[CustomerCanEdit],
					[ModeratorCanEdit],
					[id]
				FROM
					[dbo].[vw_SystemExtension_CustomerLabel]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_SystemExtension_CustomerLabel_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_SystemExtension_CustomerLabel_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_SystemExtension_CustomerLabel_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_CustomerLabel view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_SystemExtension_CustomerLabel_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [Name]'
				SET @SQL = @SQL + ', [ExtensionTypeLabel]'
				SET @SQL = @SQL + ', [ExtensionTypeCategoryID]'
				SET @SQL = @SQL + ', [ExtensionTypeID]'
				SET @SQL = @SQL + ', [CustomerCanView]'
				SET @SQL = @SQL + ', [ModeratorCanView]'
				SET @SQL = @SQL + ', [CustomerCanEdit]'
				SET @SQL = @SQL + ', [ModeratorCanEdit]'
				SET @SQL = @SQL + ', [id]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_CustomerLabel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [Name],'
				SET @SQL = @SQL + ' [ExtensionTypeLabel],'
				SET @SQL = @SQL + ' [ExtensionTypeCategoryID],'
				SET @SQL = @SQL + ' [ExtensionTypeID],'
				SET @SQL = @SQL + ' [CustomerCanView],'
				SET @SQL = @SQL + ' [ModeratorCanView],'
				SET @SQL = @SQL + ' [CustomerCanEdit],'
				SET @SQL = @SQL + ' [ModeratorCanEdit],'
				SET @SQL = @SQL + ' [id]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_CustomerLabel]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_SystemExtension_Value_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_SystemExtension_Value_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_SystemExtension_Value_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_SystemExtension_Value view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_SystemExtension_Value_Get_List

AS


				
				SELECT
					[CustomerID],
					[ModeratorID],
					[EmployeeID],
					[CostCenter],
					[eZuceH323PIN],
					[eZuceMeetingID]
				FROM
					[dbo].[vw_SystemExtension_Value]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_SystemExtension_Value_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_SystemExtension_Value_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_SystemExtension_Value_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_SystemExtension_Value view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_SystemExtension_Value_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[CustomerID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [EmployeeID]'
				SET @SQL = @SQL + ', [CostCenter]'
				SET @SQL = @SQL + ', [eZuceH323PIN]'
				SET @SQL = @SQL + ', [eZuceMeetingID]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_Value]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [EmployeeID],'
				SET @SQL = @SQL + ' [CostCenter],'
				SET @SQL = @SQL + ' [eZuceH323PIN],'
				SET @SQL = @SQL + ' [eZuceMeetingID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_SystemExtension_Value]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_UserList_Get_List procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_UserList_Get_List') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_UserList_Get_List
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets all records from the vw_UserList view
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_UserList_Get_List

AS


				
				SELECT
					[UserID],
					[Username],
					[Password],
					[DisplayName],
					[Email],
					[Telephone],
					[Enabled],
					[CompanyID],
					[SalesPersonID],
					[RoleID],
					[MustChangePassword],
					[Address1],
					[Address2],
					[City],
					[Country],
					[Region],
					[PostalCode],
					[CharityID],
					[WebMemberID],
					[WholesalerID],
					[CustomerID],
					[ModeratorID],
					[DDLDescription],
					[RoleName],
					[CustomerSalesPersonID]
				FROM
					[dbo].[vw_UserList]
					
				SELECT @@ROWCOUNT			
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

	

-- Drop the dbo.pvw_UserList_Get procedure
IF EXISTS (SELECT * FROM dbo.sysobjects WHERE id = object_id(N'dbo.pvw_UserList_Get') AND OBJECTPROPERTY(id, N'IsProcedure') = 1)
DROP PROCEDURE dbo.pvw_UserList_Get
GO

/*
----------------------------------------------------------------------------------------------------

-- Created By:  ()
-- Purpose: Gets records from the vw_UserList view passing page index and page count parameters
----------------------------------------------------------------------------------------------------
*/


CREATE PROCEDURE dbo.pvw_UserList_Get
(

	@WhereClause varchar (2000)  ,

	@OrderBy varchar (2000)  ,

	@PageIndex int   ,

	@PageSize int   
)
AS


				
				BEGIN

				DECLARE @PageLowerBound int
				DECLARE @PageUpperBound int
				
				-- Set the page bounds
				SET @PageLowerBound = @PageSize * @PageIndex
				SET @PageUpperBound = @PageLowerBound + @PageSize

				IF (@OrderBy IS NULL OR LEN(@OrderBy) < 1)
				BEGIN
					-- default order by to first column
					SET @OrderBy = '[UserID]'
				END

				-- SQL Server 2005 Paging
				DECLARE @SQL AS nvarchar(4000)
				SET @SQL = 'WITH PageIndex AS ('
				SET @SQL = @SQL + ' SELECT'
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' TOP ' + CONVERT(nvarchar, @PageUpperBound)
				END
				SET @SQL = @SQL + ' ROW_NUMBER() OVER (ORDER BY ' + @OrderBy + ') as RowIndex'
				SET @SQL = @SQL + ', [UserID]'
				SET @SQL = @SQL + ', [Username]'
				SET @SQL = @SQL + ', [Password]'
				SET @SQL = @SQL + ', [DisplayName]'
				SET @SQL = @SQL + ', [Email]'
				SET @SQL = @SQL + ', [Telephone]'
				SET @SQL = @SQL + ', [Enabled]'
				SET @SQL = @SQL + ', [CompanyID]'
				SET @SQL = @SQL + ', [SalesPersonID]'
				SET @SQL = @SQL + ', [RoleID]'
				SET @SQL = @SQL + ', [MustChangePassword]'
				SET @SQL = @SQL + ', [Address1]'
				SET @SQL = @SQL + ', [Address2]'
				SET @SQL = @SQL + ', [City]'
				SET @SQL = @SQL + ', [Country]'
				SET @SQL = @SQL + ', [Region]'
				SET @SQL = @SQL + ', [PostalCode]'
				SET @SQL = @SQL + ', [CharityID]'
				SET @SQL = @SQL + ', [WebMemberID]'
				SET @SQL = @SQL + ', [WholesalerID]'
				SET @SQL = @SQL + ', [CustomerID]'
				SET @SQL = @SQL + ', [ModeratorID]'
				SET @SQL = @SQL + ', [DDLDescription]'
				SET @SQL = @SQL + ', [RoleName]'
				SET @SQL = @SQL + ', [CustomerSalesPersonID]'
				SET @SQL = @SQL + ' FROM [dbo].[vw_UserList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				SET @SQL = @SQL + ' ) SELECT'
				SET @SQL = @SQL + ' [UserID],'
				SET @SQL = @SQL + ' [Username],'
				SET @SQL = @SQL + ' [Password],'
				SET @SQL = @SQL + ' [DisplayName],'
				SET @SQL = @SQL + ' [Email],'
				SET @SQL = @SQL + ' [Telephone],'
				SET @SQL = @SQL + ' [Enabled],'
				SET @SQL = @SQL + ' [CompanyID],'
				SET @SQL = @SQL + ' [SalesPersonID],'
				SET @SQL = @SQL + ' [RoleID],'
				SET @SQL = @SQL + ' [MustChangePassword],'
				SET @SQL = @SQL + ' [Address1],'
				SET @SQL = @SQL + ' [Address2],'
				SET @SQL = @SQL + ' [City],'
				SET @SQL = @SQL + ' [Country],'
				SET @SQL = @SQL + ' [Region],'
				SET @SQL = @SQL + ' [PostalCode],'
				SET @SQL = @SQL + ' [CharityID],'
				SET @SQL = @SQL + ' [WebMemberID],'
				SET @SQL = @SQL + ' [WholesalerID],'
				SET @SQL = @SQL + ' [CustomerID],'
				SET @SQL = @SQL + ' [ModeratorID],'
				SET @SQL = @SQL + ' [DDLDescription],'
				SET @SQL = @SQL + ' [RoleName],'
				SET @SQL = @SQL + ' [CustomerSalesPersonID]'
				SET @SQL = @SQL + ' FROM PageIndex'
				SET @SQL = @SQL + ' WHERE RowIndex > ' + CONVERT(nvarchar, @PageLowerBound)
				IF @PageSize > 0
				BEGIN
					SET @SQL = @SQL + ' AND RowIndex <= ' + CONVERT(nvarchar, @PageUpperBound)
				END
				EXEC sp_executesql @SQL

				-- get row count
				SET @SQL = 'SELECT COUNT(*) AS TotalRowCount'
				SET @SQL = @SQL + ' FROM [dbo].[vw_UserList]'
				IF LEN(@WhereClause) > 0
				BEGIN
					SET @SQL = @SQL + ' WHERE ' + @WhereClause
				END
				EXEC sp_executesql @SQL
				
				END
			

GO
SET QUOTED_IDENTIFIER ON 
GO
SET ANSI_NULLS OFF 
GO

