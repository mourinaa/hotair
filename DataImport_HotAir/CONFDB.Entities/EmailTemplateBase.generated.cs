
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EmailTemplate.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'EmailTemplate' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class EmailTemplateBase : EntityBase, CONFDB.Entities.IEmailTemplate, IEntityId<EmailTemplateKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EmailTemplateEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EmailTemplateEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EmailTemplateEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EmailTemplate> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event EmailTemplateEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmailTemplateEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EmailTemplateBase"/> instance.
		///</summary>
		public EmailTemplateBase()
		{
			this.entityData = new EmailTemplateEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EmailTemplateBase"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_smtpServer"></param>
		///<param name="_smtpUserName"></param>
		///<param name="_smtpPassword"></param>
		///<param name="_baseFileDirectory"></param>
		///<param name="_templateName"></param>
		///<param name="_description"></param>
		///<param name="_fileName"></param>
		///<param name="_subject"></param>
		///<param name="_sender"></param>
		///<param name="_bccList"></param>
		///<param name="_ccList"></param>
		///<param name="_sendToContact"></param>
		///<param name="_sendToModerator"></param>
		///<param name="_includeAttachment"></param>
		///<param name="_attachmentFileName"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_emailTemplateContentTypeId"></param>
		///<param name="_emailTemplateGroupId"></param>
		///<param name="_callFlowId"></param>
		///<param name="_languageId"></param>
		///<param name="_enabled"></param>
		///<param name="_displayOrder"></param>
		public EmailTemplateBase(System.String _wholesalerId, System.String _smtpServer, 
			System.String _smtpUserName, System.String _smtpPassword, System.String _baseFileDirectory, 
			System.String _templateName, System.String _description, System.String _fileName, 
			System.String _subject, System.String _sender, System.String _bccList, System.String _ccList, 
			System.Boolean _sendToContact, System.Boolean _sendToModerator, System.Boolean _includeAttachment, 
			System.String _attachmentFileName, System.String _priCustomerNumber, System.Int32 _emailTemplateContentTypeId, 
			System.Int32 _emailTemplateGroupId, System.Int32? _callFlowId, System.String _languageId, 
			System.Boolean _enabled, System.Int32 _displayOrder)
		{
			this.entityData = new EmailTemplateEntityData();
			this.backupData = null;

			this.WholesalerId = _wholesalerId;
			this.SmtpServer = _smtpServer;
			this.SmtpUserName = _smtpUserName;
			this.SmtpPassword = _smtpPassword;
			this.BaseFileDirectory = _baseFileDirectory;
			this.TemplateName = _templateName;
			this.Description = _description;
			this.FileName = _fileName;
			this.Subject = _subject;
			this.Sender = _sender;
			this.BccList = _bccList;
			this.CcList = _ccList;
			this.SendToContact = _sendToContact;
			this.SendToModerator = _sendToModerator;
			this.IncludeAttachment = _includeAttachment;
			this.AttachmentFileName = _attachmentFileName;
			this.PriCustomerNumber = _priCustomerNumber;
			this.EmailTemplateContentTypeId = _emailTemplateContentTypeId;
			this.EmailTemplateGroupId = _emailTemplateGroupId;
			this.CallFlowId = _callFlowId;
			this.LanguageId = _languageId;
			this.Enabled = _enabled;
			this.DisplayOrder = _displayOrder;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EmailTemplate"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_smtpServer"></param>
		///<param name="_smtpUserName"></param>
		///<param name="_smtpPassword"></param>
		///<param name="_baseFileDirectory"></param>
		///<param name="_templateName"></param>
		///<param name="_description"></param>
		///<param name="_fileName"></param>
		///<param name="_subject"></param>
		///<param name="_sender"></param>
		///<param name="_bccList"></param>
		///<param name="_ccList"></param>
		///<param name="_sendToContact"></param>
		///<param name="_sendToModerator"></param>
		///<param name="_includeAttachment"></param>
		///<param name="_attachmentFileName"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_emailTemplateContentTypeId"></param>
		///<param name="_emailTemplateGroupId"></param>
		///<param name="_callFlowId"></param>
		///<param name="_languageId"></param>
		///<param name="_enabled"></param>
		///<param name="_displayOrder"></param>
		public static EmailTemplate CreateEmailTemplate(System.String _wholesalerId, System.String _smtpServer, 
			System.String _smtpUserName, System.String _smtpPassword, System.String _baseFileDirectory, 
			System.String _templateName, System.String _description, System.String _fileName, 
			System.String _subject, System.String _sender, System.String _bccList, System.String _ccList, 
			System.Boolean _sendToContact, System.Boolean _sendToModerator, System.Boolean _includeAttachment, 
			System.String _attachmentFileName, System.String _priCustomerNumber, System.Int32 _emailTemplateContentTypeId, 
			System.Int32 _emailTemplateGroupId, System.Int32? _callFlowId, System.String _languageId, 
			System.Boolean _enabled, System.Int32 _displayOrder)
		{
			EmailTemplate newEmailTemplate = new EmailTemplate();
			newEmailTemplate.WholesalerId = _wholesalerId;
			newEmailTemplate.SmtpServer = _smtpServer;
			newEmailTemplate.SmtpUserName = _smtpUserName;
			newEmailTemplate.SmtpPassword = _smtpPassword;
			newEmailTemplate.BaseFileDirectory = _baseFileDirectory;
			newEmailTemplate.TemplateName = _templateName;
			newEmailTemplate.Description = _description;
			newEmailTemplate.FileName = _fileName;
			newEmailTemplate.Subject = _subject;
			newEmailTemplate.Sender = _sender;
			newEmailTemplate.BccList = _bccList;
			newEmailTemplate.CcList = _ccList;
			newEmailTemplate.SendToContact = _sendToContact;
			newEmailTemplate.SendToModerator = _sendToModerator;
			newEmailTemplate.IncludeAttachment = _includeAttachment;
			newEmailTemplate.AttachmentFileName = _attachmentFileName;
			newEmailTemplate.PriCustomerNumber = _priCustomerNumber;
			newEmailTemplate.EmailTemplateContentTypeId = _emailTemplateContentTypeId;
			newEmailTemplate.EmailTemplateGroupId = _emailTemplateGroupId;
			newEmailTemplate.CallFlowId = _callFlowId;
			newEmailTemplate.LanguageId = _languageId;
			newEmailTemplate.Enabled = _enabled;
			newEmailTemplate.DisplayOrder = _displayOrder;
			return newEmailTemplate;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SmtpServer property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String SmtpServer
		{
			get
			{
				return this.entityData.SmtpServer; 
			}
			
			set
			{
				if (this.entityData.SmtpServer == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.SmtpServer, this.entityData.SmtpServer);
				this.entityData.SmtpServer = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.SmtpServer, this.entityData.SmtpServer);
				OnPropertyChanged("SmtpServer");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SmtpUserName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SmtpUserName
		{
			get
			{
				return this.entityData.SmtpUserName; 
			}
			
			set
			{
				if (this.entityData.SmtpUserName == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.SmtpUserName, this.entityData.SmtpUserName);
				this.entityData.SmtpUserName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.SmtpUserName, this.entityData.SmtpUserName);
				OnPropertyChanged("SmtpUserName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SmtpPassword property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SmtpPassword
		{
			get
			{
				return this.entityData.SmtpPassword; 
			}
			
			set
			{
				if (this.entityData.SmtpPassword == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.SmtpPassword, this.entityData.SmtpPassword);
				this.entityData.SmtpPassword = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.SmtpPassword, this.entityData.SmtpPassword);
				OnPropertyChanged("SmtpPassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BaseFileDirectory property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String BaseFileDirectory
		{
			get
			{
				return this.entityData.BaseFileDirectory; 
			}
			
			set
			{
				if (this.entityData.BaseFileDirectory == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.BaseFileDirectory, this.entityData.BaseFileDirectory);
				this.entityData.BaseFileDirectory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.BaseFileDirectory, this.entityData.BaseFileDirectory);
				OnPropertyChanged("BaseFileDirectory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TemplateName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String TemplateName
		{
			get
			{
				return this.entityData.TemplateName; 
			}
			
			set
			{
				if (this.entityData.TemplateName == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.TemplateName, this.entityData.TemplateName);
				this.entityData.TemplateName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.TemplateName, this.entityData.TemplateName);
				OnPropertyChanged("TemplateName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FileName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String FileName
		{
			get
			{
				return this.entityData.FileName; 
			}
			
			set
			{
				if (this.entityData.FileName == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.FileName, this.entityData.FileName);
				this.entityData.FileName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.FileName, this.entityData.FileName);
				OnPropertyChanged("FileName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Subject property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String Subject
		{
			get
			{
				return this.entityData.Subject; 
			}
			
			set
			{
				if (this.entityData.Subject == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.Subject, this.entityData.Subject);
				this.entityData.Subject = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.Subject, this.entityData.Subject);
				OnPropertyChanged("Subject");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Sender property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Sender
		{
			get
			{
				return this.entityData.Sender; 
			}
			
			set
			{
				if (this.entityData.Sender == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.Sender, this.entityData.Sender);
				this.entityData.Sender = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.Sender, this.entityData.Sender);
				OnPropertyChanged("Sender");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BccList property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String BccList
		{
			get
			{
				return this.entityData.BccList; 
			}
			
			set
			{
				if (this.entityData.BccList == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.BccList, this.entityData.BccList);
				this.entityData.BccList = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.BccList, this.entityData.BccList);
				OnPropertyChanged("BccList");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CcList property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String CcList
		{
			get
			{
				return this.entityData.CcList; 
			}
			
			set
			{
				if (this.entityData.CcList == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.CcList, this.entityData.CcList);
				this.entityData.CcList = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.CcList, this.entityData.CcList);
				OnPropertyChanged("CcList");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SendToContact property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean SendToContact
		{
			get
			{
				return this.entityData.SendToContact; 
			}
			
			set
			{
				if (this.entityData.SendToContact == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.SendToContact, this.entityData.SendToContact);
				this.entityData.SendToContact = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.SendToContact, this.entityData.SendToContact);
				OnPropertyChanged("SendToContact");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SendToModerator property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean SendToModerator
		{
			get
			{
				return this.entityData.SendToModerator; 
			}
			
			set
			{
				if (this.entityData.SendToModerator == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.SendToModerator, this.entityData.SendToModerator);
				this.entityData.SendToModerator = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.SendToModerator, this.entityData.SendToModerator);
				OnPropertyChanged("SendToModerator");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IncludeAttachment property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean IncludeAttachment
		{
			get
			{
				return this.entityData.IncludeAttachment; 
			}
			
			set
			{
				if (this.entityData.IncludeAttachment == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.IncludeAttachment, this.entityData.IncludeAttachment);
				this.entityData.IncludeAttachment = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.IncludeAttachment, this.entityData.IncludeAttachment);
				OnPropertyChanged("IncludeAttachment");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AttachmentFileName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String AttachmentFileName
		{
			get
			{
				return this.entityData.AttachmentFileName; 
			}
			
			set
			{
				if (this.entityData.AttachmentFileName == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.AttachmentFileName, this.entityData.AttachmentFileName);
				this.entityData.AttachmentFileName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.AttachmentFileName, this.entityData.AttachmentFileName);
				OnPropertyChanged("AttachmentFileName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this.entityData.PriCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.PriCustomerNumber == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				this.entityData.PriCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailTemplateContentTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EmailTemplateContentTypeId
		{
			get
			{
				return this.entityData.EmailTemplateContentTypeId; 
			}
			
			set
			{
				if (this.entityData.EmailTemplateContentTypeId == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.EmailTemplateContentTypeId, this.entityData.EmailTemplateContentTypeId);
				this.entityData.EmailTemplateContentTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.EmailTemplateContentTypeId, this.entityData.EmailTemplateContentTypeId);
				OnPropertyChanged("EmailTemplateContentTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailTemplateGroupId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 EmailTemplateGroupId
		{
			get
			{
				return this.entityData.EmailTemplateGroupId; 
			}
			
			set
			{
				if (this.entityData.EmailTemplateGroupId == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.EmailTemplateGroupId, this.entityData.EmailTemplateGroupId);
				this.entityData.EmailTemplateGroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.EmailTemplateGroupId, this.entityData.EmailTemplateGroupId);
				OnPropertyChanged("EmailTemplateGroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CallFlowId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCallFlowIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CallFlowId
		{
			get
			{
				return this.entityData.CallFlowId; 
			}
			
			set
			{
				if (this.entityData.CallFlowId == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.CallFlowId, this.entityData.CallFlowId);
				this.entityData.CallFlowId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.CallFlowId, this.entityData.CallFlowId);
				OnPropertyChanged("CallFlowId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LanguageId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 5)]
		public virtual System.String LanguageId
		{
			get
			{
				return this.entityData.LanguageId; 
			}
			
			set
			{
				if (this.entityData.LanguageId == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.LanguageId, this.entityData.LanguageId);
				this.entityData.LanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.LanguageId, this.entityData.LanguageId);
				OnPropertyChanged("LanguageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Enabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Enabled
		{
			get
			{
				return this.entityData.Enabled; 
			}
			
			set
			{
				if (this.entityData.Enabled == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.Enabled, this.entityData.Enabled);
				this.entityData.Enabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.Enabled, this.entityData.Enabled);
				OnPropertyChanged("Enabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
				OnColumnChanging(EmailTemplateColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailTemplateColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="CallFlow"/>.
		/// </summary>
		/// <value>The source CallFlow for CallFlowId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CallFlow CallFlowIdSource
      	{
            get { return entityData.CallFlowIdSource; }
            set { entityData.CallFlowIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return entityData.WholesalerIdSource; }
            set { entityData.WholesalerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Language"/>.
		/// </summary>
		/// <value>The source Language for LanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Language LanguageIdSource
      	{
            get { return entityData.LanguageIdSource; }
            set { entityData.LanguageIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("SmtpServer", "Smtp Server"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SmtpServer", "Smtp Server", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SmtpUserName", "Smtp User Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SmtpPassword", "Smtp Password", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("BaseFileDirectory", "Base File Directory"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BaseFileDirectory", "Base File Directory", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("TemplateName", "Template Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TemplateName", "Template Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Description", "Description", 200));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("FileName", "File Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("FileName", "File Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Subject", "Subject"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Subject", "Subject", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Sender", "Sender"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Sender", "Sender", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BccList", "Bcc List", 200));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CcList", "Cc List", 200));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("AttachmentFileName", "Attachment File Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PriCustomerNumber", "Pri Customer Number", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("LanguageId", "Language Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("LanguageId", "Language Id", 5));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "EmailTemplate"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WholesalerID", "SMTPServer", "SMTPUserName", "SMTPPassword", "BaseFileDirectory", "TemplateName", "Description", "FileName", "Subject", "Sender", "BCCList", "CCList", "SendToContact", "SendToModerator", "IncludeAttachment", "AttachmentFileName", "PriCustomerNumber", "EmailTemplateContentTypeID", "EmailTemplateGroupID", "CallFlowID", "LanguageID", "Enabled", "DisplayOrder"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EmailTemplateEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EmailTemplate) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EmailTemplate>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EmailTemplate);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EmailTemplate Entity 
		///</summary>
		public virtual EmailTemplate Copy()
		{
			//shallow copy entity
			EmailTemplate copy = new EmailTemplate();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.WholesalerId = this.WholesalerId;
			copy.SmtpServer = this.SmtpServer;
			copy.SmtpUserName = this.SmtpUserName;
			copy.SmtpPassword = this.SmtpPassword;
			copy.BaseFileDirectory = this.BaseFileDirectory;
			copy.TemplateName = this.TemplateName;
			copy.Description = this.Description;
			copy.FileName = this.FileName;
			copy.Subject = this.Subject;
			copy.Sender = this.Sender;
			copy.BccList = this.BccList;
			copy.CcList = this.CcList;
			copy.SendToContact = this.SendToContact;
			copy.SendToModerator = this.SendToModerator;
			copy.IncludeAttachment = this.IncludeAttachment;
			copy.AttachmentFileName = this.AttachmentFileName;
			copy.PriCustomerNumber = this.PriCustomerNumber;
			copy.EmailTemplateContentTypeId = this.EmailTemplateContentTypeId;
			copy.EmailTemplateGroupId = this.EmailTemplateGroupId;
			copy.CallFlowId = this.CallFlowId;
			copy.LanguageId = this.LanguageId;
			copy.Enabled = this.Enabled;
			copy.DisplayOrder = this.DisplayOrder;
			
			copy.CallFlowIdSource = MakeCopyOf(this.CallFlowIdSource) as CallFlow;
			copy.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			copy.LanguageIdSource = MakeCopyOf(this.LanguageIdSource) as Language;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed EmailTemplate Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EmailTemplate DeepCopy()
		{
			return EntityHelper.Clone<EmailTemplate>(this as EmailTemplate);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EmailTemplateEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EmailTemplateEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EmailTemplateColumn column)
		{
			switch(column)
			{
					case EmailTemplateColumn.Id:
					return entityData.Id != _originalData.Id;
					case EmailTemplateColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case EmailTemplateColumn.SmtpServer:
					return entityData.SmtpServer != _originalData.SmtpServer;
					case EmailTemplateColumn.SmtpUserName:
					return entityData.SmtpUserName != _originalData.SmtpUserName;
					case EmailTemplateColumn.SmtpPassword:
					return entityData.SmtpPassword != _originalData.SmtpPassword;
					case EmailTemplateColumn.BaseFileDirectory:
					return entityData.BaseFileDirectory != _originalData.BaseFileDirectory;
					case EmailTemplateColumn.TemplateName:
					return entityData.TemplateName != _originalData.TemplateName;
					case EmailTemplateColumn.Description:
					return entityData.Description != _originalData.Description;
					case EmailTemplateColumn.FileName:
					return entityData.FileName != _originalData.FileName;
					case EmailTemplateColumn.Subject:
					return entityData.Subject != _originalData.Subject;
					case EmailTemplateColumn.Sender:
					return entityData.Sender != _originalData.Sender;
					case EmailTemplateColumn.BccList:
					return entityData.BccList != _originalData.BccList;
					case EmailTemplateColumn.CcList:
					return entityData.CcList != _originalData.CcList;
					case EmailTemplateColumn.SendToContact:
					return entityData.SendToContact != _originalData.SendToContact;
					case EmailTemplateColumn.SendToModerator:
					return entityData.SendToModerator != _originalData.SendToModerator;
					case EmailTemplateColumn.IncludeAttachment:
					return entityData.IncludeAttachment != _originalData.IncludeAttachment;
					case EmailTemplateColumn.AttachmentFileName:
					return entityData.AttachmentFileName != _originalData.AttachmentFileName;
					case EmailTemplateColumn.PriCustomerNumber:
					return entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
					case EmailTemplateColumn.EmailTemplateContentTypeId:
					return entityData.EmailTemplateContentTypeId != _originalData.EmailTemplateContentTypeId;
					case EmailTemplateColumn.EmailTemplateGroupId:
					return entityData.EmailTemplateGroupId != _originalData.EmailTemplateGroupId;
					case EmailTemplateColumn.CallFlowId:
					return entityData.CallFlowId != _originalData.CallFlowId;
					case EmailTemplateColumn.LanguageId:
					return entityData.LanguageId != _originalData.LanguageId;
					case EmailTemplateColumn.Enabled:
					return entityData.Enabled != _originalData.Enabled;
					case EmailTemplateColumn.DisplayOrder:
					return entityData.DisplayOrder != _originalData.DisplayOrder;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.SmtpServer != _originalData.SmtpServer;
			result = result || entityData.SmtpUserName != _originalData.SmtpUserName;
			result = result || entityData.SmtpPassword != _originalData.SmtpPassword;
			result = result || entityData.BaseFileDirectory != _originalData.BaseFileDirectory;
			result = result || entityData.TemplateName != _originalData.TemplateName;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.FileName != _originalData.FileName;
			result = result || entityData.Subject != _originalData.Subject;
			result = result || entityData.Sender != _originalData.Sender;
			result = result || entityData.BccList != _originalData.BccList;
			result = result || entityData.CcList != _originalData.CcList;
			result = result || entityData.SendToContact != _originalData.SendToContact;
			result = result || entityData.SendToModerator != _originalData.SendToModerator;
			result = result || entityData.IncludeAttachment != _originalData.IncludeAttachment;
			result = result || entityData.AttachmentFileName != _originalData.AttachmentFileName;
			result = result || entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
			result = result || entityData.EmailTemplateContentTypeId != _originalData.EmailTemplateContentTypeId;
			result = result || entityData.EmailTemplateGroupId != _originalData.EmailTemplateGroupId;
			result = result || entityData.CallFlowId != _originalData.CallFlowId;
			result = result || entityData.LanguageId != _originalData.LanguageId;
			result = result || entityData.Enabled != _originalData.Enabled;
			result = result || entityData.DisplayOrder != _originalData.DisplayOrder;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EmailTemplateBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is EmailTemplateBase)
				return Equals(this, (EmailTemplateBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EmailTemplateBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					this.SmtpServer.GetHashCode() ^ 
					((this.SmtpUserName == null) ? string.Empty : this.SmtpUserName.ToString()).GetHashCode() ^ 
					((this.SmtpPassword == null) ? string.Empty : this.SmtpPassword.ToString()).GetHashCode() ^ 
					this.BaseFileDirectory.GetHashCode() ^ 
					this.TemplateName.GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					this.FileName.GetHashCode() ^ 
					this.Subject.GetHashCode() ^ 
					this.Sender.GetHashCode() ^ 
					((this.BccList == null) ? string.Empty : this.BccList.ToString()).GetHashCode() ^ 
					((this.CcList == null) ? string.Empty : this.CcList.ToString()).GetHashCode() ^ 
					this.SendToContact.GetHashCode() ^ 
					this.SendToModerator.GetHashCode() ^ 
					this.IncludeAttachment.GetHashCode() ^ 
					((this.AttachmentFileName == null) ? string.Empty : this.AttachmentFileName.ToString()).GetHashCode() ^ 
					((this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString()).GetHashCode() ^ 
					this.EmailTemplateContentTypeId.GetHashCode() ^ 
					this.EmailTemplateGroupId.GetHashCode() ^ 
					((this.CallFlowId == null) ? string.Empty : this.CallFlowId.ToString()).GetHashCode() ^ 
					this.LanguageId.GetHashCode() ^ 
					this.Enabled.GetHashCode() ^ 
					this.DisplayOrder.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EmailTemplateBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EmailTemplateBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="EmailTemplateBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="EmailTemplateBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EmailTemplateBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(EmailTemplateBase Object1, EmailTemplateBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.SmtpServer != Object2.SmtpServer)
				equal = false;
			if ( Object1.SmtpUserName != null && Object2.SmtpUserName != null )
			{
				if (Object1.SmtpUserName != Object2.SmtpUserName)
					equal = false;
			}
			else if (Object1.SmtpUserName == null ^ Object2.SmtpUserName == null )
			{
				equal = false;
			}
			if ( Object1.SmtpPassword != null && Object2.SmtpPassword != null )
			{
				if (Object1.SmtpPassword != Object2.SmtpPassword)
					equal = false;
			}
			else if (Object1.SmtpPassword == null ^ Object2.SmtpPassword == null )
			{
				equal = false;
			}
			if (Object1.BaseFileDirectory != Object2.BaseFileDirectory)
				equal = false;
			if (Object1.TemplateName != Object2.TemplateName)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if (Object1.FileName != Object2.FileName)
				equal = false;
			if (Object1.Subject != Object2.Subject)
				equal = false;
			if (Object1.Sender != Object2.Sender)
				equal = false;
			if ( Object1.BccList != null && Object2.BccList != null )
			{
				if (Object1.BccList != Object2.BccList)
					equal = false;
			}
			else if (Object1.BccList == null ^ Object2.BccList == null )
			{
				equal = false;
			}
			if ( Object1.CcList != null && Object2.CcList != null )
			{
				if (Object1.CcList != Object2.CcList)
					equal = false;
			}
			else if (Object1.CcList == null ^ Object2.CcList == null )
			{
				equal = false;
			}
			if (Object1.SendToContact != Object2.SendToContact)
				equal = false;
			if (Object1.SendToModerator != Object2.SendToModerator)
				equal = false;
			if (Object1.IncludeAttachment != Object2.IncludeAttachment)
				equal = false;
			if ( Object1.AttachmentFileName != null && Object2.AttachmentFileName != null )
			{
				if (Object1.AttachmentFileName != Object2.AttachmentFileName)
					equal = false;
			}
			else if (Object1.AttachmentFileName == null ^ Object2.AttachmentFileName == null )
			{
				equal = false;
			}
			if ( Object1.PriCustomerNumber != null && Object2.PriCustomerNumber != null )
			{
				if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
					equal = false;
			}
			else if (Object1.PriCustomerNumber == null ^ Object2.PriCustomerNumber == null )
			{
				equal = false;
			}
			if (Object1.EmailTemplateContentTypeId != Object2.EmailTemplateContentTypeId)
				equal = false;
			if (Object1.EmailTemplateGroupId != Object2.EmailTemplateGroupId)
				equal = false;
			if ( Object1.CallFlowId != null && Object2.CallFlowId != null )
			{
				if (Object1.CallFlowId != Object2.CallFlowId)
					equal = false;
			}
			else if (Object1.CallFlowId == null ^ Object2.CallFlowId == null )
			{
				equal = false;
			}
			if (Object1.LanguageId != Object2.LanguageId)
				equal = false;
			if (Object1.Enabled != Object2.Enabled)
				equal = false;
			if (Object1.DisplayOrder != Object2.DisplayOrder)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EmailTemplateBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EmailTemplateComparer GetComparer()
        {
            return new EmailTemplateComparer();
        }
        */

        // Comparer delegates back to EmailTemplate
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EmailTemplate rhs, EmailTemplateColumn which)
        {
            switch (which)
            {
            	
            	
            	case EmailTemplateColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.SmtpServer:
            		return this.SmtpServer.CompareTo(rhs.SmtpServer);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.SmtpUserName:
            		return this.SmtpUserName.CompareTo(rhs.SmtpUserName);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.SmtpPassword:
            		return this.SmtpPassword.CompareTo(rhs.SmtpPassword);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.BaseFileDirectory:
            		return this.BaseFileDirectory.CompareTo(rhs.BaseFileDirectory);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.TemplateName:
            		return this.TemplateName.CompareTo(rhs.TemplateName);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.FileName:
            		return this.FileName.CompareTo(rhs.FileName);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.Subject:
            		return this.Subject.CompareTo(rhs.Subject);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.Sender:
            		return this.Sender.CompareTo(rhs.Sender);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.BccList:
            		return this.BccList.CompareTo(rhs.BccList);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.CcList:
            		return this.CcList.CompareTo(rhs.CcList);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.SendToContact:
            		return this.SendToContact.CompareTo(rhs.SendToContact);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.SendToModerator:
            		return this.SendToModerator.CompareTo(rhs.SendToModerator);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.IncludeAttachment:
            		return this.IncludeAttachment.CompareTo(rhs.IncludeAttachment);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.AttachmentFileName:
            		return this.AttachmentFileName.CompareTo(rhs.AttachmentFileName);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.PriCustomerNumber:
            		return this.PriCustomerNumber.CompareTo(rhs.PriCustomerNumber);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.EmailTemplateContentTypeId:
            		return this.EmailTemplateContentTypeId.CompareTo(rhs.EmailTemplateContentTypeId);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.EmailTemplateGroupId:
            		return this.EmailTemplateGroupId.CompareTo(rhs.EmailTemplateGroupId);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.CallFlowId:
            		return this.CallFlowId.Value.CompareTo(rhs.CallFlowId.Value);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.LanguageId:
            		return this.LanguageId.CompareTo(rhs.LanguageId);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.Enabled:
            		return this.Enabled.CompareTo(rhs.Enabled);
            		
            		                 
            	
            	
            	case EmailTemplateColumn.DisplayOrder:
            		return this.DisplayOrder.CompareTo(rhs.DisplayOrder);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EmailTemplateKey> Members
		
		// member variable for the EntityId property
		private EmailTemplateKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EmailTemplateKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EmailTemplateKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EmailTemplate")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{25}{24}- Id: {0}{24}- WholesalerId: {1}{24}- SmtpServer: {2}{24}- SmtpUserName: {3}{24}- SmtpPassword: {4}{24}- BaseFileDirectory: {5}{24}- TemplateName: {6}{24}- Description: {7}{24}- FileName: {8}{24}- Subject: {9}{24}- Sender: {10}{24}- BccList: {11}{24}- CcList: {12}{24}- SendToContact: {13}{24}- SendToModerator: {14}{24}- IncludeAttachment: {15}{24}- AttachmentFileName: {16}{24}- PriCustomerNumber: {17}{24}- EmailTemplateContentTypeId: {18}{24}- EmailTemplateGroupId: {19}{24}- CallFlowId: {20}{24}- LanguageId: {21}{24}- Enabled: {22}{24}- DisplayOrder: {23}{24}", 
				this.Id,
				this.WholesalerId,
				this.SmtpServer,
				(this.SmtpUserName == null) ? string.Empty : this.SmtpUserName.ToString(),
				(this.SmtpPassword == null) ? string.Empty : this.SmtpPassword.ToString(),
				this.BaseFileDirectory,
				this.TemplateName,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				this.FileName,
				this.Subject,
				this.Sender,
				(this.BccList == null) ? string.Empty : this.BccList.ToString(),
				(this.CcList == null) ? string.Empty : this.CcList.ToString(),
				this.SendToContact,
				this.SendToModerator,
				this.IncludeAttachment,
				(this.AttachmentFileName == null) ? string.Empty : this.AttachmentFileName.ToString(),
				(this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString(),
				this.EmailTemplateContentTypeId,
				this.EmailTemplateGroupId,
				(this.CallFlowId == null) ? string.Empty : this.CallFlowId.ToString(),
				this.LanguageId,
				this.Enabled,
				this.DisplayOrder,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'EmailTemplate' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EmailTemplateEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "EmailTemplate"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// SMTPServer : 
		/// </summary>
		public System.String		  SmtpServer = string.Empty;
		
		/// <summary>
		/// SMTPUserName : 
		/// </summary>
		public System.String		  SmtpUserName = null;
		
		/// <summary>
		/// SMTPPassword : 
		/// </summary>
		public System.String		  SmtpPassword = null;
		
		/// <summary>
		/// BaseFileDirectory : 
		/// </summary>
		public System.String		  BaseFileDirectory = string.Empty;
		
		/// <summary>
		/// TemplateName : 
		/// </summary>
		public System.String		  TemplateName = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// FileName : 
		/// </summary>
		public System.String		  FileName = string.Empty;
		
		/// <summary>
		/// Subject : 
		/// </summary>
		public System.String		  Subject = string.Empty;
		
		/// <summary>
		/// Sender : 
		/// </summary>
		public System.String		  Sender = string.Empty;
		
		/// <summary>
		/// BCCList : 
		/// </summary>
		public System.String		  BccList = null;
		
		/// <summary>
		/// CCList : 
		/// </summary>
		public System.String		  CcList = null;
		
		/// <summary>
		/// SendToContact : 
		/// </summary>
		public System.Boolean		  SendToContact = false;
		
		/// <summary>
		/// SendToModerator : 
		/// </summary>
		public System.Boolean		  SendToModerator = false;
		
		/// <summary>
		/// IncludeAttachment : 
		/// </summary>
		public System.Boolean		  IncludeAttachment = false;
		
		/// <summary>
		/// AttachmentFileName : 
		/// </summary>
		public System.String		  AttachmentFileName = null;
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		public System.String		  PriCustomerNumber = null;
		
		/// <summary>
		/// EmailTemplateContentTypeID : 
		/// </summary>
		public System.Int32		  EmailTemplateContentTypeId = (int)0;
		
		/// <summary>
		/// EmailTemplateGroupID : 
		/// </summary>
		public System.Int32		  EmailTemplateGroupId = (int)0;
		
		/// <summary>
		/// CallFlowID : 
		/// </summary>
		public System.Int32?		  CallFlowId = null;
		
		/// <summary>
		/// LanguageID : 
		/// </summary>
		public System.String		  LanguageId = string.Empty;
		
		/// <summary>
		/// Enabled : 
		/// </summary>
		public System.Boolean		  Enabled = false;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Int32		  DisplayOrder = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private CallFlow _callFlowIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CallFlow"/>.
		/// </summary>
		/// <value>The source CallFlow for CallFlowId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual CallFlow CallFlowIdSource
      	{
            get { return this._callFlowIdSource; }
            set { this._callFlowIdSource = value; }
      	}
		private Wholesaler _wholesalerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return this._wholesalerIdSource; }
            set { this._wholesalerIdSource = value; }
      	}
		private Language _languageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Language"/>.
		/// </summary>
		/// <value>The source Language for LanguageId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Language LanguageIdSource
      	{
            get { return this._languageIdSource; }
            set { this._languageIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EmailTemplateEntityData _tmp = new EmailTemplateEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.SmtpServer = this.SmtpServer;
			_tmp.SmtpUserName = this.SmtpUserName;
			_tmp.SmtpPassword = this.SmtpPassword;
			_tmp.BaseFileDirectory = this.BaseFileDirectory;
			_tmp.TemplateName = this.TemplateName;
			_tmp.Description = this.Description;
			_tmp.FileName = this.FileName;
			_tmp.Subject = this.Subject;
			_tmp.Sender = this.Sender;
			_tmp.BccList = this.BccList;
			_tmp.CcList = this.CcList;
			_tmp.SendToContact = this.SendToContact;
			_tmp.SendToModerator = this.SendToModerator;
			_tmp.IncludeAttachment = this.IncludeAttachment;
			_tmp.AttachmentFileName = this.AttachmentFileName;
			_tmp.PriCustomerNumber = this.PriCustomerNumber;
			_tmp.EmailTemplateContentTypeId = this.EmailTemplateContentTypeId;
			_tmp.EmailTemplateGroupId = this.EmailTemplateGroupId;
			_tmp.CallFlowId = this.CallFlowId;
			_tmp.LanguageId = this.LanguageId;
			_tmp.Enabled = this.Enabled;
			_tmp.DisplayOrder = this.DisplayOrder;
			
			#region Source Parent Composite Entities
			if (this.CallFlowIdSource != null)
				_tmp.CallFlowIdSource = MakeCopyOf(this.CallFlowIdSource) as CallFlow;
			if (this.WholesalerIdSource != null)
				_tmp.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			if (this.LanguageIdSource != null)
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource) as Language;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailTemplateColumn"/> which has raised the event.</param>
		public void OnColumnChanging(EmailTemplateColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailTemplateColumn"/> which has raised the event.</param>
		public void OnColumnChanged(EmailTemplateColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailTemplateColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(EmailTemplateColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EmailTemplateEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EmailTemplateEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailTemplateColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(EmailTemplateColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EmailTemplateEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EmailTemplateEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EmailTemplateEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EmailTemplate"/> object.
	/// </remarks>
	public class EmailTemplateEventArgs : System.EventArgs
	{
		private EmailTemplateColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EmailTemplateEventArgs class.
		///</summary>
		public EmailTemplateEventArgs(EmailTemplateColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EmailTemplateEventArgs class.
		///</summary>
		public EmailTemplateEventArgs(EmailTemplateColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EmailTemplateColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EmailTemplateColumn" />
		public EmailTemplateColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EmailTemplate related events.
	///</summary>
	public delegate void EmailTemplateEventHandler(object sender, EmailTemplateEventArgs e);
	
	#region EmailTemplateComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EmailTemplateComparer : System.Collections.Generic.IComparer<EmailTemplate>
	{
		EmailTemplateColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EmailTemplateComparer"/> class.
        /// </summary>
		public EmailTemplateComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EmailTemplateComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EmailTemplateComparer(EmailTemplateColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EmailTemplate"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EmailTemplate"/> to compare.</param>
        /// <param name="b">The second <c>EmailTemplate</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EmailTemplate a, EmailTemplate b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EmailTemplate entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EmailTemplate a, EmailTemplate b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EmailTemplateColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EmailTemplateKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EmailTemplate"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EmailTemplateKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EmailTemplateKey class.
		/// </summary>
		public EmailTemplateKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EmailTemplateKey class.
		/// </summary>
		public EmailTemplateKey(EmailTemplateBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EmailTemplateKey class.
		/// </summary>
		public EmailTemplateKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EmailTemplateBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EmailTemplateBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EmailTemplateColumn Enum
	
	/// <summary>
	/// Enumerate the EmailTemplate columns.
	/// </summary>
	[Serializable]
	public enum EmailTemplateColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// SmtpServer : 
		/// </summary>
		[EnumTextValue("SMTPServer")]
		[ColumnEnum("SMTPServer", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		SmtpServer = 3,
		/// <summary>
		/// SmtpUserName : 
		/// </summary>
		[EnumTextValue("SMTPUserName")]
		[ColumnEnum("SMTPUserName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		SmtpUserName = 4,
		/// <summary>
		/// SmtpPassword : 
		/// </summary>
		[EnumTextValue("SMTPPassword")]
		[ColumnEnum("SMTPPassword", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		SmtpPassword = 5,
		/// <summary>
		/// BaseFileDirectory : 
		/// </summary>
		[EnumTextValue("BaseFileDirectory")]
		[ColumnEnum("BaseFileDirectory", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		BaseFileDirectory = 6,
		/// <summary>
		/// TemplateName : 
		/// </summary>
		[EnumTextValue("TemplateName")]
		[ColumnEnum("TemplateName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		TemplateName = 7,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		Description = 8,
		/// <summary>
		/// FileName : 
		/// </summary>
		[EnumTextValue("FileName")]
		[ColumnEnum("FileName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		FileName = 9,
		/// <summary>
		/// Subject : 
		/// </summary>
		[EnumTextValue("Subject")]
		[ColumnEnum("Subject", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		Subject = 10,
		/// <summary>
		/// Sender : 
		/// </summary>
		[EnumTextValue("Sender")]
		[ColumnEnum("Sender", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Sender = 11,
		/// <summary>
		/// BccList : 
		/// </summary>
		[EnumTextValue("BCCList")]
		[ColumnEnum("BCCList", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		BccList = 12,
		/// <summary>
		/// CcList : 
		/// </summary>
		[EnumTextValue("CCList")]
		[ColumnEnum("CCList", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		CcList = 13,
		/// <summary>
		/// SendToContact : 
		/// </summary>
		[EnumTextValue("SendToContact")]
		[ColumnEnum("SendToContact", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		SendToContact = 14,
		/// <summary>
		/// SendToModerator : 
		/// </summary>
		[EnumTextValue("SendToModerator")]
		[ColumnEnum("SendToModerator", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		SendToModerator = 15,
		/// <summary>
		/// IncludeAttachment : 
		/// </summary>
		[EnumTextValue("IncludeAttachment")]
		[ColumnEnum("IncludeAttachment", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		IncludeAttachment = 16,
		/// <summary>
		/// AttachmentFileName : 
		/// </summary>
		[EnumTextValue("AttachmentFileName")]
		[ColumnEnum("AttachmentFileName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		AttachmentFileName = 17,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		PriCustomerNumber = 18,
		/// <summary>
		/// EmailTemplateContentTypeId : 
		/// </summary>
		[EnumTextValue("EmailTemplateContentTypeID")]
		[ColumnEnum("EmailTemplateContentTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmailTemplateContentTypeId = 19,
		/// <summary>
		/// EmailTemplateGroupId : 
		/// </summary>
		[EnumTextValue("EmailTemplateGroupID")]
		[ColumnEnum("EmailTemplateGroupID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		EmailTemplateGroupId = 20,
		/// <summary>
		/// CallFlowId : 
		/// </summary>
		[EnumTextValue("CallFlowID")]
		[ColumnEnum("CallFlowID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CallFlowId = 21,
		/// <summary>
		/// LanguageId : 
		/// </summary>
		[EnumTextValue("LanguageID")]
		[ColumnEnum("LanguageID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 5)]
		LanguageId = 22,
		/// <summary>
		/// Enabled : 
		/// </summary>
		[EnumTextValue("Enabled")]
		[ColumnEnum("Enabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Enabled = 23,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DisplayOrder = 24
	}//End enum

	#endregion EmailTemplateColumn Enum

} // end namespace
