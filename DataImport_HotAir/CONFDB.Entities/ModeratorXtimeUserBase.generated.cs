
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ModeratorXtimeUser.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'ModeratorXTimeUser' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class ModeratorXtimeUserBase : EntityBase, CONFDB.Entities.IModeratorXtimeUser, IEntityId<ModeratorXtimeUserKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ModeratorXtimeUserEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ModeratorXtimeUserEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ModeratorXtimeUserEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ModeratorXtimeUser> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ModeratorXtimeUserEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ModeratorXtimeUserEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ModeratorXtimeUserBase"/> instance.
		///</summary>
		public ModeratorXtimeUserBase()
		{
			this.entityData = new ModeratorXtimeUserEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ModeratorXtimeUserBase"/> instance.
		///</summary>
		///<param name="_moderatorId"></param>
		///<param name="_firstCallDate"></param>
		///<param name="_firstCallProductId"></param>
		///<param name="_firstCallNotes"></param>
		///<param name="_thirdCallDate"></param>
		///<param name="_thirdCallProductId"></param>
		///<param name="_thirdCallNotes"></param>
		///<param name="_secondCallDate"></param>
		///<param name="_userId"></param>
		public ModeratorXtimeUserBase(System.Int32 _moderatorId, System.DateTime? _firstCallDate, 
			System.Int32? _firstCallProductId, System.String _firstCallNotes, System.DateTime? _thirdCallDate, 
			System.Int32? _thirdCallProductId, System.String _thirdCallNotes, System.DateTime? _secondCallDate, 
			System.Int32? _userId)
		{
			this.entityData = new ModeratorXtimeUserEntityData();
			this.backupData = null;

			this.ModeratorId = _moderatorId;
			this.FirstCallDate = _firstCallDate;
			this.FirstCallProductId = _firstCallProductId;
			this.FirstCallNotes = _firstCallNotes;
			this.ThirdCallDate = _thirdCallDate;
			this.ThirdCallProductId = _thirdCallProductId;
			this.ThirdCallNotes = _thirdCallNotes;
			this.SecondCallDate = _secondCallDate;
			this.UserId = _userId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ModeratorXtimeUser"/> instance.
		///</summary>
		///<param name="_moderatorId"></param>
		///<param name="_firstCallDate"></param>
		///<param name="_firstCallProductId"></param>
		///<param name="_firstCallNotes"></param>
		///<param name="_thirdCallDate"></param>
		///<param name="_thirdCallProductId"></param>
		///<param name="_thirdCallNotes"></param>
		///<param name="_secondCallDate"></param>
		///<param name="_userId"></param>
		public static ModeratorXtimeUser CreateModeratorXtimeUser(System.Int32 _moderatorId, System.DateTime? _firstCallDate, 
			System.Int32? _firstCallProductId, System.String _firstCallNotes, System.DateTime? _thirdCallDate, 
			System.Int32? _thirdCallProductId, System.String _thirdCallNotes, System.DateTime? _secondCallDate, 
			System.Int32? _userId)
		{
			ModeratorXtimeUser newModeratorXtimeUser = new ModeratorXtimeUser();
			newModeratorXtimeUser.ModeratorId = _moderatorId;
			newModeratorXtimeUser.FirstCallDate = _firstCallDate;
			newModeratorXtimeUser.FirstCallProductId = _firstCallProductId;
			newModeratorXtimeUser.FirstCallNotes = _firstCallNotes;
			newModeratorXtimeUser.ThirdCallDate = _thirdCallDate;
			newModeratorXtimeUser.ThirdCallProductId = _thirdCallProductId;
			newModeratorXtimeUser.ThirdCallNotes = _thirdCallNotes;
			newModeratorXtimeUser.SecondCallDate = _secondCallDate;
			newModeratorXtimeUser.UserId = _userId;
			return newModeratorXtimeUser;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				this.EntityId.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ModeratorID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ModeratorID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalModeratorId
		{
			get { return this.entityData.OriginalModeratorId; }
			set { this.entityData.OriginalModeratorId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the FirstCallDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsFirstCallDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? FirstCallDate
		{
			get
			{
				return this.entityData.FirstCallDate; 
			}
			
			set
			{
				if (this.entityData.FirstCallDate == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.FirstCallDate, this.entityData.FirstCallDate);
				this.entityData.FirstCallDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.FirstCallDate, this.entityData.FirstCallDate);
				OnPropertyChanged("FirstCallDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstCallProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsFirstCallProductIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? FirstCallProductId
		{
			get
			{
				return this.entityData.FirstCallProductId; 
			}
			
			set
			{
				if (this.entityData.FirstCallProductId == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.FirstCallProductId, this.entityData.FirstCallProductId);
				this.entityData.FirstCallProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.FirstCallProductId, this.entityData.FirstCallProductId);
				OnPropertyChanged("FirstCallProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FirstCallNotes property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 128)]
		public virtual System.String FirstCallNotes
		{
			get
			{
				return this.entityData.FirstCallNotes; 
			}
			
			set
			{
				if (this.entityData.FirstCallNotes == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.FirstCallNotes, this.entityData.FirstCallNotes);
				this.entityData.FirstCallNotes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.FirstCallNotes, this.entityData.FirstCallNotes);
				OnPropertyChanged("FirstCallNotes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThirdCallDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsThirdCallDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ThirdCallDate
		{
			get
			{
				return this.entityData.ThirdCallDate; 
			}
			
			set
			{
				if (this.entityData.ThirdCallDate == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.ThirdCallDate, this.entityData.ThirdCallDate);
				this.entityData.ThirdCallDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.ThirdCallDate, this.entityData.ThirdCallDate);
				OnPropertyChanged("ThirdCallDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThirdCallProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsThirdCallProductIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ThirdCallProductId
		{
			get
			{
				return this.entityData.ThirdCallProductId; 
			}
			
			set
			{
				if (this.entityData.ThirdCallProductId == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.ThirdCallProductId, this.entityData.ThirdCallProductId);
				this.entityData.ThirdCallProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.ThirdCallProductId, this.entityData.ThirdCallProductId);
				OnPropertyChanged("ThirdCallProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ThirdCallNotes property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 128)]
		public virtual System.String ThirdCallNotes
		{
			get
			{
				return this.entityData.ThirdCallNotes; 
			}
			
			set
			{
				if (this.entityData.ThirdCallNotes == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.ThirdCallNotes, this.entityData.ThirdCallNotes);
				this.entityData.ThirdCallNotes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.ThirdCallNotes, this.entityData.ThirdCallNotes);
				OnPropertyChanged("ThirdCallNotes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecondCallDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSecondCallDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? SecondCallDate
		{
			get
			{
				return this.entityData.SecondCallDate; 
			}
			
			set
			{
				if (this.entityData.SecondCallDate == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.SecondCallDate, this.entityData.SecondCallDate);
				this.entityData.SecondCallDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.SecondCallDate, this.entityData.SecondCallDate);
				OnPropertyChanged("SecondCallDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(ModeratorXtimeUserColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorXtimeUserColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("FirstCallNotes", "First Call Notes", 128));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ThirdCallNotes", "Third Call Notes", 128));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ModeratorXTimeUser"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ModeratorID", "FirstCallDate", "FirstCallProductID", "FirstCallNotes", "ThirdCallDate", "ThirdCallProductID", "ThirdCallNotes", "SecondCallDate", "UserID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ModeratorXtimeUserEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ModeratorXtimeUser) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ModeratorXtimeUser>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ModeratorXtimeUser);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ModeratorXtimeUser Entity 
		///</summary>
		public virtual ModeratorXtimeUser Copy()
		{
			//shallow copy entity
			ModeratorXtimeUser copy = new ModeratorXtimeUser();
			copy.SuppressEntityEvents = true;
			copy.ModeratorId = this.ModeratorId;
			copy.OriginalModeratorId = this.OriginalModeratorId;
			copy.FirstCallDate = this.FirstCallDate;
			copy.FirstCallProductId = this.FirstCallProductId;
			copy.FirstCallNotes = this.FirstCallNotes;
			copy.ThirdCallDate = this.ThirdCallDate;
			copy.ThirdCallProductId = this.ThirdCallProductId;
			copy.ThirdCallNotes = this.ThirdCallNotes;
			copy.SecondCallDate = this.SecondCallDate;
			copy.UserId = this.UserId;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ModeratorXtimeUser Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ModeratorXtimeUser DeepCopy()
		{
			return EntityHelper.Clone<ModeratorXtimeUser>(this as ModeratorXtimeUser);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ModeratorXtimeUserEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ModeratorXtimeUserEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ModeratorXtimeUserColumn column)
		{
			switch(column)
			{
					case ModeratorXtimeUserColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case ModeratorXtimeUserColumn.FirstCallDate:
					return entityData.FirstCallDate != _originalData.FirstCallDate;
					case ModeratorXtimeUserColumn.FirstCallProductId:
					return entityData.FirstCallProductId != _originalData.FirstCallProductId;
					case ModeratorXtimeUserColumn.FirstCallNotes:
					return entityData.FirstCallNotes != _originalData.FirstCallNotes;
					case ModeratorXtimeUserColumn.ThirdCallDate:
					return entityData.ThirdCallDate != _originalData.ThirdCallDate;
					case ModeratorXtimeUserColumn.ThirdCallProductId:
					return entityData.ThirdCallProductId != _originalData.ThirdCallProductId;
					case ModeratorXtimeUserColumn.ThirdCallNotes:
					return entityData.ThirdCallNotes != _originalData.ThirdCallNotes;
					case ModeratorXtimeUserColumn.SecondCallDate:
					return entityData.SecondCallDate != _originalData.SecondCallDate;
					case ModeratorXtimeUserColumn.UserId:
					return entityData.UserId != _originalData.UserId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.FirstCallDate != _originalData.FirstCallDate;
			result = result || entityData.FirstCallProductId != _originalData.FirstCallProductId;
			result = result || entityData.FirstCallNotes != _originalData.FirstCallNotes;
			result = result || entityData.ThirdCallDate != _originalData.ThirdCallDate;
			result = result || entityData.ThirdCallProductId != _originalData.ThirdCallProductId;
			result = result || entityData.ThirdCallNotes != _originalData.ThirdCallNotes;
			result = result || entityData.SecondCallDate != _originalData.SecondCallDate;
			result = result || entityData.UserId != _originalData.UserId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ModeratorXtimeUserBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is ModeratorXtimeUserBase)
				return Equals(this, (ModeratorXtimeUserBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ModeratorXtimeUserBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.ModeratorId.GetHashCode() ^ 
					((this.FirstCallDate == null) ? string.Empty : this.FirstCallDate.ToString()).GetHashCode() ^ 
					((this.FirstCallProductId == null) ? string.Empty : this.FirstCallProductId.ToString()).GetHashCode() ^ 
					((this.FirstCallNotes == null) ? string.Empty : this.FirstCallNotes.ToString()).GetHashCode() ^ 
					((this.ThirdCallDate == null) ? string.Empty : this.ThirdCallDate.ToString()).GetHashCode() ^ 
					((this.ThirdCallProductId == null) ? string.Empty : this.ThirdCallProductId.ToString()).GetHashCode() ^ 
					((this.ThirdCallNotes == null) ? string.Empty : this.ThirdCallNotes.ToString()).GetHashCode() ^ 
					((this.SecondCallDate == null) ? string.Empty : this.SecondCallDate.ToString()).GetHashCode() ^ 
					((this.UserId == null) ? string.Empty : this.UserId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ModeratorXtimeUserBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ModeratorXtimeUserBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ModeratorXtimeUserBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ModeratorXtimeUserBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ModeratorXtimeUserBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ModeratorXtimeUserBase Object1, ModeratorXtimeUserBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.ModeratorId != Object2.ModeratorId)
				equal = false;
			if ( Object1.FirstCallDate != null && Object2.FirstCallDate != null )
			{
				if (Object1.FirstCallDate != Object2.FirstCallDate)
					equal = false;
			}
			else if (Object1.FirstCallDate == null ^ Object2.FirstCallDate == null )
			{
				equal = false;
			}
			if ( Object1.FirstCallProductId != null && Object2.FirstCallProductId != null )
			{
				if (Object1.FirstCallProductId != Object2.FirstCallProductId)
					equal = false;
			}
			else if (Object1.FirstCallProductId == null ^ Object2.FirstCallProductId == null )
			{
				equal = false;
			}
			if ( Object1.FirstCallNotes != null && Object2.FirstCallNotes != null )
			{
				if (Object1.FirstCallNotes != Object2.FirstCallNotes)
					equal = false;
			}
			else if (Object1.FirstCallNotes == null ^ Object2.FirstCallNotes == null )
			{
				equal = false;
			}
			if ( Object1.ThirdCallDate != null && Object2.ThirdCallDate != null )
			{
				if (Object1.ThirdCallDate != Object2.ThirdCallDate)
					equal = false;
			}
			else if (Object1.ThirdCallDate == null ^ Object2.ThirdCallDate == null )
			{
				equal = false;
			}
			if ( Object1.ThirdCallProductId != null && Object2.ThirdCallProductId != null )
			{
				if (Object1.ThirdCallProductId != Object2.ThirdCallProductId)
					equal = false;
			}
			else if (Object1.ThirdCallProductId == null ^ Object2.ThirdCallProductId == null )
			{
				equal = false;
			}
			if ( Object1.ThirdCallNotes != null && Object2.ThirdCallNotes != null )
			{
				if (Object1.ThirdCallNotes != Object2.ThirdCallNotes)
					equal = false;
			}
			else if (Object1.ThirdCallNotes == null ^ Object2.ThirdCallNotes == null )
			{
				equal = false;
			}
			if ( Object1.SecondCallDate != null && Object2.SecondCallDate != null )
			{
				if (Object1.SecondCallDate != Object2.SecondCallDate)
					equal = false;
			}
			else if (Object1.SecondCallDate == null ^ Object2.SecondCallDate == null )
			{
				equal = false;
			}
			if ( Object1.UserId != null && Object2.UserId != null )
			{
				if (Object1.UserId != Object2.UserId)
					equal = false;
			}
			else if (Object1.UserId == null ^ Object2.UserId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ModeratorXtimeUserBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ModeratorXtimeUserComparer GetComparer()
        {
            return new ModeratorXtimeUserComparer();
        }
        */

        // Comparer delegates back to ModeratorXtimeUser
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ModeratorXtimeUser rhs, ModeratorXtimeUserColumn which)
        {
            switch (which)
            {
            	
            	
            	case ModeratorXtimeUserColumn.ModeratorId:
            		return this.ModeratorId.CompareTo(rhs.ModeratorId);
            		
            		                 
            	
            	
            	case ModeratorXtimeUserColumn.FirstCallDate:
            		return this.FirstCallDate.Value.CompareTo(rhs.FirstCallDate.Value);
            		
            		                 
            	
            	
            	case ModeratorXtimeUserColumn.FirstCallProductId:
            		return this.FirstCallProductId.Value.CompareTo(rhs.FirstCallProductId.Value);
            		
            		                 
            	
            	
            	case ModeratorXtimeUserColumn.FirstCallNotes:
            		return this.FirstCallNotes.CompareTo(rhs.FirstCallNotes);
            		
            		                 
            	
            	
            	case ModeratorXtimeUserColumn.ThirdCallDate:
            		return this.ThirdCallDate.Value.CompareTo(rhs.ThirdCallDate.Value);
            		
            		                 
            	
            	
            	case ModeratorXtimeUserColumn.ThirdCallProductId:
            		return this.ThirdCallProductId.Value.CompareTo(rhs.ThirdCallProductId.Value);
            		
            		                 
            	
            	
            	case ModeratorXtimeUserColumn.ThirdCallNotes:
            		return this.ThirdCallNotes.CompareTo(rhs.ThirdCallNotes);
            		
            		                 
            	
            	
            	case ModeratorXtimeUserColumn.SecondCallDate:
            		return this.SecondCallDate.Value.CompareTo(rhs.SecondCallDate.Value);
            		
            		                 
            	
            	
            	case ModeratorXtimeUserColumn.UserId:
            		return this.UserId.Value.CompareTo(rhs.UserId.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ModeratorXtimeUserKey> Members
		
		// member variable for the EntityId property
		private ModeratorXtimeUserKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ModeratorXtimeUserKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ModeratorXtimeUserKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ModeratorXtimeUser")
					.Append("|").Append( this.ModeratorId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- ModeratorId: {0}{9}- FirstCallDate: {1}{9}- FirstCallProductId: {2}{9}- FirstCallNotes: {3}{9}- ThirdCallDate: {4}{9}- ThirdCallProductId: {5}{9}- ThirdCallNotes: {6}{9}- SecondCallDate: {7}{9}- UserId: {8}{9}", 
				this.ModeratorId,
				(this.FirstCallDate == null) ? string.Empty : this.FirstCallDate.ToString(),
				(this.FirstCallProductId == null) ? string.Empty : this.FirstCallProductId.ToString(),
				(this.FirstCallNotes == null) ? string.Empty : this.FirstCallNotes.ToString(),
				(this.ThirdCallDate == null) ? string.Empty : this.ThirdCallDate.ToString(),
				(this.ThirdCallProductId == null) ? string.Empty : this.ThirdCallProductId.ToString(),
				(this.ThirdCallNotes == null) ? string.Empty : this.ThirdCallNotes.ToString(),
				(this.SecondCallDate == null) ? string.Empty : this.SecondCallDate.ToString(),
				(this.UserId == null) ? string.Empty : this.UserId.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ModeratorXTimeUser' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ModeratorXtimeUserEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ModeratorID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ModeratorXTimeUser"</remarks>
			public System.Int32 ModeratorId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalModeratorId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// FirstCallDate : 
		/// </summary>
		public System.DateTime?		  FirstCallDate = null;
		
		/// <summary>
		/// FirstCallProductID : 
		/// </summary>
		public System.Int32?		  FirstCallProductId = null;
		
		/// <summary>
		/// FirstCallNotes : 
		/// </summary>
		public System.String		  FirstCallNotes = null;
		
		/// <summary>
		/// ThirdCallDate : 
		/// </summary>
		public System.DateTime?		  ThirdCallDate = null;
		
		/// <summary>
		/// ThirdCallProductID : 
		/// </summary>
		public System.Int32?		  ThirdCallProductId = null;
		
		/// <summary>
		/// ThirdCallNotes : 
		/// </summary>
		public System.String		  ThirdCallNotes = null;
		
		/// <summary>
		/// SecondCallDate : 
		/// </summary>
		public System.DateTime?		  SecondCallDate = null;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Int32?		  UserId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ModeratorXtimeUserEntityData _tmp = new ModeratorXtimeUserEntityData();
						
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.OriginalModeratorId = this.OriginalModeratorId;
			
			_tmp.FirstCallDate = this.FirstCallDate;
			_tmp.FirstCallProductId = this.FirstCallProductId;
			_tmp.FirstCallNotes = this.FirstCallNotes;
			_tmp.ThirdCallDate = this.ThirdCallDate;
			_tmp.ThirdCallProductId = this.ThirdCallProductId;
			_tmp.ThirdCallNotes = this.ThirdCallNotes;
			_tmp.SecondCallDate = this.SecondCallDate;
			_tmp.UserId = this.UserId;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ModeratorXtimeUserColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ModeratorXtimeUserColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ModeratorXtimeUserColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ModeratorXtimeUserColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ModeratorXtimeUserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ModeratorXtimeUserColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ModeratorXtimeUserEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ModeratorXtimeUserEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ModeratorXtimeUserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ModeratorXtimeUserColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ModeratorXtimeUserEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ModeratorXtimeUserEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ModeratorXtimeUserEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ModeratorXtimeUser"/> object.
	/// </remarks>
	public class ModeratorXtimeUserEventArgs : System.EventArgs
	{
		private ModeratorXtimeUserColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ModeratorXtimeUserEventArgs class.
		///</summary>
		public ModeratorXtimeUserEventArgs(ModeratorXtimeUserColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ModeratorXtimeUserEventArgs class.
		///</summary>
		public ModeratorXtimeUserEventArgs(ModeratorXtimeUserColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ModeratorXtimeUserColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ModeratorXtimeUserColumn" />
		public ModeratorXtimeUserColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ModeratorXtimeUser related events.
	///</summary>
	public delegate void ModeratorXtimeUserEventHandler(object sender, ModeratorXtimeUserEventArgs e);
	
	#region ModeratorXtimeUserComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ModeratorXtimeUserComparer : System.Collections.Generic.IComparer<ModeratorXtimeUser>
	{
		ModeratorXtimeUserColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ModeratorXtimeUserComparer"/> class.
        /// </summary>
		public ModeratorXtimeUserComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ModeratorXtimeUserComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ModeratorXtimeUserComparer(ModeratorXtimeUserColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ModeratorXtimeUser"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ModeratorXtimeUser"/> to compare.</param>
        /// <param name="b">The second <c>ModeratorXtimeUser</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ModeratorXtimeUser a, ModeratorXtimeUser b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ModeratorXtimeUser entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ModeratorXtimeUser a, ModeratorXtimeUser b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ModeratorXtimeUserColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ModeratorXtimeUserKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ModeratorXtimeUser"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ModeratorXtimeUserKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ModeratorXtimeUserKey class.
		/// </summary>
		public ModeratorXtimeUserKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ModeratorXtimeUserKey class.
		/// </summary>
		public ModeratorXtimeUserKey(ModeratorXtimeUserBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.ModeratorId = entity.ModeratorId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ModeratorXtimeUserKey class.
		/// </summary>
		public ModeratorXtimeUserKey(System.Int32 _moderatorId)
		{
			#region Init Properties

			this.ModeratorId = _moderatorId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ModeratorXtimeUserBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ModeratorXtimeUserBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the ModeratorId property
		private System.Int32 _moderatorId;
		
		/// <summary>
		/// Gets or sets the ModeratorId property.
		/// </summary>
		public System.Int32 ModeratorId
		{
			get { return _moderatorId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ModeratorId = value;
				
				_moderatorId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				ModeratorId = ( values["ModeratorId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ModeratorId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("ModeratorId", ModeratorId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("ModeratorId: {0}{1}",
								ModeratorId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ModeratorXtimeUserColumn Enum
	
	/// <summary>
	/// Enumerate the ModeratorXtimeUser columns.
	/// </summary>
	[Serializable]
	public enum ModeratorXtimeUserColumn : int
	{
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		ModeratorId = 1,
		/// <summary>
		/// FirstCallDate : 
		/// </summary>
		[EnumTextValue("FirstCallDate")]
		[ColumnEnum("FirstCallDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		FirstCallDate = 2,
		/// <summary>
		/// FirstCallProductId : 
		/// </summary>
		[EnumTextValue("FirstCallProductID")]
		[ColumnEnum("FirstCallProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		FirstCallProductId = 3,
		/// <summary>
		/// FirstCallNotes : 
		/// </summary>
		[EnumTextValue("FirstCallNotes")]
		[ColumnEnum("FirstCallNotes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 128)]
		FirstCallNotes = 4,
		/// <summary>
		/// ThirdCallDate : 
		/// </summary>
		[EnumTextValue("ThirdCallDate")]
		[ColumnEnum("ThirdCallDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ThirdCallDate = 5,
		/// <summary>
		/// ThirdCallProductId : 
		/// </summary>
		[EnumTextValue("ThirdCallProductID")]
		[ColumnEnum("ThirdCallProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ThirdCallProductId = 6,
		/// <summary>
		/// ThirdCallNotes : 
		/// </summary>
		[EnumTextValue("ThirdCallNotes")]
		[ColumnEnum("ThirdCallNotes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 128)]
		ThirdCallNotes = 7,
		/// <summary>
		/// SecondCallDate : 
		/// </summary>
		[EnumTextValue("SecondCallDate")]
		[ColumnEnum("SecondCallDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		SecondCallDate = 8,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserId = 9
	}//End enum

	#endregion ModeratorXtimeUserColumn Enum

} // end namespace
