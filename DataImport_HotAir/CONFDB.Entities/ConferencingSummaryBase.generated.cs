
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ConferencingSummary.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'ConferencingSummary' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class ConferencingSummaryBase : EntityBase, CONFDB.Entities.IConferencingSummary, IEntityId<ConferencingSummaryKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ConferencingSummaryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ConferencingSummaryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ConferencingSummaryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ConferencingSummary> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ConferencingSummaryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ConferencingSummaryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ConferencingSummaryBase"/> instance.
		///</summary>
		public ConferencingSummaryBase()
		{
			this.entityData = new ConferencingSummaryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ConferencingSummaryBase"/> instance.
		///</summary>
		///<param name="_billedDate"></param>
		///<param name="_productId"></param>
		///<param name="_currency"></param>
		///<param name="_localSeconds"></param>
		///<param name="_ldSeconds"></param>
		///<param name="_totalBridge"></param>
		///<param name="_totalLd"></param>
		///<param name="_totalMiscellaneous"></param>
		public ConferencingSummaryBase(System.DateTime _billedDate, System.Int32 _productId, 
			System.String _currency, System.Int32 _localSeconds, System.Int32 _ldSeconds, 
			System.Decimal? _totalBridge, System.Decimal? _totalLd, System.Decimal? _totalMiscellaneous)
		{
			this.entityData = new ConferencingSummaryEntityData();
			this.backupData = null;

			this.BilledDate = _billedDate;
			this.ProductId = _productId;
			this.Currency = _currency;
			this.LocalSeconds = _localSeconds;
			this.LdSeconds = _ldSeconds;
			this.TotalBridge = _totalBridge;
			this.TotalLd = _totalLd;
			this.TotalMiscellaneous = _totalMiscellaneous;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ConferencingSummary"/> instance.
		///</summary>
		///<param name="_billedDate"></param>
		///<param name="_productId"></param>
		///<param name="_currency"></param>
		///<param name="_localSeconds"></param>
		///<param name="_ldSeconds"></param>
		///<param name="_totalBridge"></param>
		///<param name="_totalLd"></param>
		///<param name="_totalMiscellaneous"></param>
		public static ConferencingSummary CreateConferencingSummary(System.DateTime _billedDate, System.Int32 _productId, 
			System.String _currency, System.Int32 _localSeconds, System.Int32 _ldSeconds, 
			System.Decimal? _totalBridge, System.Decimal? _totalLd, System.Decimal? _totalMiscellaneous)
		{
			ConferencingSummary newConferencingSummary = new ConferencingSummary();
			newConferencingSummary.BilledDate = _billedDate;
			newConferencingSummary.ProductId = _productId;
			newConferencingSummary.Currency = _currency;
			newConferencingSummary.LocalSeconds = _localSeconds;
			newConferencingSummary.LdSeconds = _ldSeconds;
			newConferencingSummary.TotalBridge = _totalBridge;
			newConferencingSummary.TotalLd = _totalLd;
			newConferencingSummary.TotalMiscellaneous = _totalMiscellaneous;
			return newConferencingSummary;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the BilledDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.DateTime BilledDate
		{
			get
			{
				return this.entityData.BilledDate; 
			}
			
			set
			{
				if (this.entityData.BilledDate == value)
					return;
					
				OnColumnChanging(ConferencingSummaryColumn.BilledDate, this.entityData.BilledDate);
				this.entityData.BilledDate = value;
				this.EntityId.BilledDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConferencingSummaryColumn.BilledDate, this.entityData.BilledDate);
				OnPropertyChanged("BilledDate");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the BilledDate property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the BilledDate property.</remarks>
		/// <value>This type is datetime</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.DateTime OriginalBilledDate
		{
			get { return this.entityData.OriginalBilledDate; }
			set { this.entityData.OriginalBilledDate = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 ProductId
		{
			get
			{
				return this.entityData.ProductId; 
			}
			
			set
			{
				if (this.entityData.ProductId == value)
					return;
					
				OnColumnChanging(ConferencingSummaryColumn.ProductId, this.entityData.ProductId);
				this.entityData.ProductId = value;
				this.EntityId.ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConferencingSummaryColumn.ProductId, this.entityData.ProductId);
				OnPropertyChanged("ProductId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ProductID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ProductID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalProductId
		{
			get { return this.entityData.OriginalProductId; }
			set { this.entityData.OriginalProductId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Currency property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 3)]
		public virtual System.String Currency
		{
			get
			{
				return this.entityData.Currency; 
			}
			
			set
			{
				if (this.entityData.Currency == value)
					return;
					
				OnColumnChanging(ConferencingSummaryColumn.Currency, this.entityData.Currency);
				this.entityData.Currency = value;
				this.EntityId.Currency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConferencingSummaryColumn.Currency, this.entityData.Currency);
				OnPropertyChanged("Currency");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the Currency property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the Currency property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalCurrency
		{
			get { return this.entityData.OriginalCurrency; }
			set { this.entityData.OriginalCurrency = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the LocalSeconds property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LocalSeconds
		{
			get
			{
				return this.entityData.LocalSeconds; 
			}
			
			set
			{
				if (this.entityData.LocalSeconds == value)
					return;
					
				OnColumnChanging(ConferencingSummaryColumn.LocalSeconds, this.entityData.LocalSeconds);
				this.entityData.LocalSeconds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConferencingSummaryColumn.LocalSeconds, this.entityData.LocalSeconds);
				OnPropertyChanged("LocalSeconds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LdSeconds property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LdSeconds
		{
			get
			{
				return this.entityData.LdSeconds; 
			}
			
			set
			{
				if (this.entityData.LdSeconds == value)
					return;
					
				OnColumnChanging(ConferencingSummaryColumn.LdSeconds, this.entityData.LdSeconds);
				this.entityData.LdSeconds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConferencingSummaryColumn.LdSeconds, this.entityData.LdSeconds);
				OnPropertyChanged("LdSeconds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalBridge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalBridgeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalBridge
		{
			get
			{
				return this.entityData.TotalBridge; 
			}
			
			set
			{
				if (this.entityData.TotalBridge == value)
					return;
					
				OnColumnChanging(ConferencingSummaryColumn.TotalBridge, this.entityData.TotalBridge);
				this.entityData.TotalBridge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConferencingSummaryColumn.TotalBridge, this.entityData.TotalBridge);
				OnPropertyChanged("TotalBridge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalLd property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalLdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalLd
		{
			get
			{
				return this.entityData.TotalLd; 
			}
			
			set
			{
				if (this.entityData.TotalLd == value)
					return;
					
				OnColumnChanging(ConferencingSummaryColumn.TotalLd, this.entityData.TotalLd);
				this.entityData.TotalLd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConferencingSummaryColumn.TotalLd, this.entityData.TotalLd);
				OnPropertyChanged("TotalLd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalMiscellaneous property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalMiscellaneousNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalMiscellaneous
		{
			get
			{
				return this.entityData.TotalMiscellaneous; 
			}
			
			set
			{
				if (this.entityData.TotalMiscellaneous == value)
					return;
					
				OnColumnChanging(ConferencingSummaryColumn.TotalMiscellaneous, this.entityData.TotalMiscellaneous);
				this.entityData.TotalMiscellaneous = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ConferencingSummaryColumn.TotalMiscellaneous, this.entityData.TotalMiscellaneous);
				OnPropertyChanged("TotalMiscellaneous");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Currency", "Currency"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Currency", "Currency", 3));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ConferencingSummary"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"BilledDate", "ProductID", "Currency", "LocalSeconds", "LDSeconds", "TotalBridge", "TotalLD", "TotalMiscellaneous"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ConferencingSummaryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ConferencingSummary) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ConferencingSummary>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ConferencingSummary);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ConferencingSummary Entity 
		///</summary>
		public virtual ConferencingSummary Copy()
		{
			//shallow copy entity
			ConferencingSummary copy = new ConferencingSummary();
			copy.SuppressEntityEvents = true;
			copy.BilledDate = this.BilledDate;
			copy.OriginalBilledDate = this.OriginalBilledDate;
			copy.ProductId = this.ProductId;
			copy.OriginalProductId = this.OriginalProductId;
			copy.Currency = this.Currency;
			copy.OriginalCurrency = this.OriginalCurrency;
			copy.LocalSeconds = this.LocalSeconds;
			copy.LdSeconds = this.LdSeconds;
			copy.TotalBridge = this.TotalBridge;
			copy.TotalLd = this.TotalLd;
			copy.TotalMiscellaneous = this.TotalMiscellaneous;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ConferencingSummary Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ConferencingSummary DeepCopy()
		{
			return EntityHelper.Clone<ConferencingSummary>(this as ConferencingSummary);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ConferencingSummaryEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ConferencingSummaryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ConferencingSummaryColumn column)
		{
			switch(column)
			{
					case ConferencingSummaryColumn.BilledDate:
					return entityData.BilledDate != _originalData.BilledDate;
					case ConferencingSummaryColumn.ProductId:
					return entityData.ProductId != _originalData.ProductId;
					case ConferencingSummaryColumn.Currency:
					return entityData.Currency != _originalData.Currency;
					case ConferencingSummaryColumn.LocalSeconds:
					return entityData.LocalSeconds != _originalData.LocalSeconds;
					case ConferencingSummaryColumn.LdSeconds:
					return entityData.LdSeconds != _originalData.LdSeconds;
					case ConferencingSummaryColumn.TotalBridge:
					return entityData.TotalBridge != _originalData.TotalBridge;
					case ConferencingSummaryColumn.TotalLd:
					return entityData.TotalLd != _originalData.TotalLd;
					case ConferencingSummaryColumn.TotalMiscellaneous:
					return entityData.TotalMiscellaneous != _originalData.TotalMiscellaneous;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.BilledDate != _originalData.BilledDate;
			result = result || entityData.ProductId != _originalData.ProductId;
			result = result || entityData.Currency != _originalData.Currency;
			result = result || entityData.LocalSeconds != _originalData.LocalSeconds;
			result = result || entityData.LdSeconds != _originalData.LdSeconds;
			result = result || entityData.TotalBridge != _originalData.TotalBridge;
			result = result || entityData.TotalLd != _originalData.TotalLd;
			result = result || entityData.TotalMiscellaneous != _originalData.TotalMiscellaneous;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ConferencingSummaryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is ConferencingSummaryBase)
				return Equals(this, (ConferencingSummaryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ConferencingSummaryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.BilledDate.GetHashCode() ^ 
					this.ProductId.GetHashCode() ^ 
					this.Currency.GetHashCode() ^ 
					this.LocalSeconds.GetHashCode() ^ 
					this.LdSeconds.GetHashCode() ^ 
					((this.TotalBridge == null) ? string.Empty : this.TotalBridge.ToString()).GetHashCode() ^ 
					((this.TotalLd == null) ? string.Empty : this.TotalLd.ToString()).GetHashCode() ^ 
					((this.TotalMiscellaneous == null) ? string.Empty : this.TotalMiscellaneous.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ConferencingSummaryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ConferencingSummaryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ConferencingSummaryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ConferencingSummaryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ConferencingSummaryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ConferencingSummaryBase Object1, ConferencingSummaryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.BilledDate != Object2.BilledDate)
				equal = false;
			if (Object1.ProductId != Object2.ProductId)
				equal = false;
			if (Object1.Currency != Object2.Currency)
				equal = false;
			if (Object1.LocalSeconds != Object2.LocalSeconds)
				equal = false;
			if (Object1.LdSeconds != Object2.LdSeconds)
				equal = false;
			if ( Object1.TotalBridge != null && Object2.TotalBridge != null )
			{
				if (Object1.TotalBridge != Object2.TotalBridge)
					equal = false;
			}
			else if (Object1.TotalBridge == null ^ Object2.TotalBridge == null )
			{
				equal = false;
			}
			if ( Object1.TotalLd != null && Object2.TotalLd != null )
			{
				if (Object1.TotalLd != Object2.TotalLd)
					equal = false;
			}
			else if (Object1.TotalLd == null ^ Object2.TotalLd == null )
			{
				equal = false;
			}
			if ( Object1.TotalMiscellaneous != null && Object2.TotalMiscellaneous != null )
			{
				if (Object1.TotalMiscellaneous != Object2.TotalMiscellaneous)
					equal = false;
			}
			else if (Object1.TotalMiscellaneous == null ^ Object2.TotalMiscellaneous == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ConferencingSummaryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ConferencingSummaryComparer GetComparer()
        {
            return new ConferencingSummaryComparer();
        }
        */

        // Comparer delegates back to ConferencingSummary
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ConferencingSummary rhs, ConferencingSummaryColumn which)
        {
            switch (which)
            {
            	
            	
            	case ConferencingSummaryColumn.BilledDate:
            		return this.BilledDate.CompareTo(rhs.BilledDate);
            		
            		                 
            	
            	
            	case ConferencingSummaryColumn.ProductId:
            		return this.ProductId.CompareTo(rhs.ProductId);
            		
            		                 
            	
            	
            	case ConferencingSummaryColumn.Currency:
            		return this.Currency.CompareTo(rhs.Currency);
            		
            		                 
            	
            	
            	case ConferencingSummaryColumn.LocalSeconds:
            		return this.LocalSeconds.CompareTo(rhs.LocalSeconds);
            		
            		                 
            	
            	
            	case ConferencingSummaryColumn.LdSeconds:
            		return this.LdSeconds.CompareTo(rhs.LdSeconds);
            		
            		                 
            	
            	
            	case ConferencingSummaryColumn.TotalBridge:
            		return this.TotalBridge.Value.CompareTo(rhs.TotalBridge.Value);
            		
            		                 
            	
            	
            	case ConferencingSummaryColumn.TotalLd:
            		return this.TotalLd.Value.CompareTo(rhs.TotalLd.Value);
            		
            		                 
            	
            	
            	case ConferencingSummaryColumn.TotalMiscellaneous:
            		return this.TotalMiscellaneous.Value.CompareTo(rhs.TotalMiscellaneous.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ConferencingSummaryKey> Members
		
		// member variable for the EntityId property
		private ConferencingSummaryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ConferencingSummaryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ConferencingSummaryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ConferencingSummary")
					.Append("|").Append( this.BilledDate.ToString())
					.Append("|").Append( this.ProductId.ToString())
					.Append("|").Append( this.Currency.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- BilledDate: {0}{8}- ProductId: {1}{8}- Currency: {2}{8}- LocalSeconds: {3}{8}- LdSeconds: {4}{8}- TotalBridge: {5}{8}- TotalLd: {6}{8}- TotalMiscellaneous: {7}{8}", 
				this.BilledDate,
				this.ProductId,
				this.Currency,
				this.LocalSeconds,
				this.LdSeconds,
				(this.TotalBridge == null) ? string.Empty : this.TotalBridge.ToString(),
				(this.TotalLd == null) ? string.Empty : this.TotalLd.ToString(),
				(this.TotalMiscellaneous == null) ? string.Empty : this.TotalMiscellaneous.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ConferencingSummary' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ConferencingSummaryEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// BilledDate : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ConferencingSummary"</remarks>
			public System.DateTime BilledDate;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.DateTime OriginalBilledDate;
			
			/// <summary>			
			/// ProductID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ConferencingSummary"</remarks>
			public System.Int32 ProductId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalProductId;
			
			/// <summary>			
			/// Currency : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ConferencingSummary"</remarks>
			public System.String Currency;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalCurrency;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// LocalSeconds : 
		/// </summary>
		public System.Int32		  LocalSeconds = (int)0;
		
		/// <summary>
		/// LDSeconds : 
		/// </summary>
		public System.Int32		  LdSeconds = (int)0;
		
		/// <summary>
		/// TotalBridge : 
		/// </summary>
		public System.Decimal?		  TotalBridge = null;
		
		/// <summary>
		/// TotalLD : 
		/// </summary>
		public System.Decimal?		  TotalLd = null;
		
		/// <summary>
		/// TotalMiscellaneous : 
		/// </summary>
		public System.Decimal?		  TotalMiscellaneous = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ConferencingSummaryEntityData _tmp = new ConferencingSummaryEntityData();
						
			_tmp.BilledDate = this.BilledDate;
			_tmp.OriginalBilledDate = this.OriginalBilledDate;
			_tmp.ProductId = this.ProductId;
			_tmp.OriginalProductId = this.OriginalProductId;
			_tmp.Currency = this.Currency;
			_tmp.OriginalCurrency = this.OriginalCurrency;
			
			_tmp.LocalSeconds = this.LocalSeconds;
			_tmp.LdSeconds = this.LdSeconds;
			_tmp.TotalBridge = this.TotalBridge;
			_tmp.TotalLd = this.TotalLd;
			_tmp.TotalMiscellaneous = this.TotalMiscellaneous;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ConferencingSummaryColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ConferencingSummaryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ConferencingSummaryColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ConferencingSummaryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ConferencingSummaryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ConferencingSummaryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ConferencingSummaryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ConferencingSummaryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ConferencingSummaryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ConferencingSummaryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ConferencingSummaryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ConferencingSummaryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ConferencingSummaryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ConferencingSummary"/> object.
	/// </remarks>
	public class ConferencingSummaryEventArgs : System.EventArgs
	{
		private ConferencingSummaryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ConferencingSummaryEventArgs class.
		///</summary>
		public ConferencingSummaryEventArgs(ConferencingSummaryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ConferencingSummaryEventArgs class.
		///</summary>
		public ConferencingSummaryEventArgs(ConferencingSummaryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ConferencingSummaryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ConferencingSummaryColumn" />
		public ConferencingSummaryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ConferencingSummary related events.
	///</summary>
	public delegate void ConferencingSummaryEventHandler(object sender, ConferencingSummaryEventArgs e);
	
	#region ConferencingSummaryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ConferencingSummaryComparer : System.Collections.Generic.IComparer<ConferencingSummary>
	{
		ConferencingSummaryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ConferencingSummaryComparer"/> class.
        /// </summary>
		public ConferencingSummaryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ConferencingSummaryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ConferencingSummaryComparer(ConferencingSummaryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ConferencingSummary"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ConferencingSummary"/> to compare.</param>
        /// <param name="b">The second <c>ConferencingSummary</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ConferencingSummary a, ConferencingSummary b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ConferencingSummary entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ConferencingSummary a, ConferencingSummary b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ConferencingSummaryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ConferencingSummaryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ConferencingSummary"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ConferencingSummaryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ConferencingSummaryKey class.
		/// </summary>
		public ConferencingSummaryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ConferencingSummaryKey class.
		/// </summary>
		public ConferencingSummaryKey(ConferencingSummaryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.BilledDate = entity.BilledDate;
				this.ProductId = entity.ProductId;
				this.Currency = entity.Currency;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ConferencingSummaryKey class.
		/// </summary>
		public ConferencingSummaryKey(System.DateTime _billedDate, System.Int32 _productId, System.String _currency)
		{
			#region Init Properties

			this.BilledDate = _billedDate;
			this.ProductId = _productId;
			this.Currency = _currency;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ConferencingSummaryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ConferencingSummaryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the BilledDate property
		private System.DateTime _billedDate;
		
		/// <summary>
		/// Gets or sets the BilledDate property.
		/// </summary>
		public System.DateTime BilledDate
		{
			get { return _billedDate; }
			set
			{
				if ( this.Entity != null )
					this.Entity.BilledDate = value;
				
				_billedDate = value;
			}
		}
		
		// member variable for the ProductId property
		private System.Int32 _productId;
		
		/// <summary>
		/// Gets or sets the ProductId property.
		/// </summary>
		public System.Int32 ProductId
		{
			get { return _productId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ProductId = value;
				
				_productId = value;
			}
		}
		
		// member variable for the Currency property
		private System.String _currency;
		
		/// <summary>
		/// Gets or sets the Currency property.
		/// </summary>
		public System.String Currency
		{
			get { return _currency; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Currency = value;
				
				_currency = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				BilledDate = ( values["BilledDate"] != null ) ? (System.DateTime) EntityUtil.ChangeType(values["BilledDate"], typeof(System.DateTime)) : DateTime.MinValue;
				ProductId = ( values["ProductId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProductId"], typeof(System.Int32)) : (int)0;
				Currency = ( values["Currency"] != null ) ? (System.String) EntityUtil.ChangeType(values["Currency"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("BilledDate", BilledDate);
			values.Add("ProductId", ProductId);
			values.Add("Currency", Currency);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("BilledDate: {0}{3}ProductId: {1}{3}Currency: {2}{3}",
								BilledDate,
								ProductId,
								Currency,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ConferencingSummaryColumn Enum
	
	/// <summary>
	/// Enumerate the ConferencingSummary columns.
	/// </summary>
	[Serializable]
	public enum ConferencingSummaryColumn : int
	{
		/// <summary>
		/// BilledDate : 
		/// </summary>
		[EnumTextValue("BilledDate")]
		[ColumnEnum("BilledDate", typeof(System.DateTime), System.Data.DbType.DateTime, true, false, false)]
		BilledDate = 1,
		/// <summary>
		/// ProductId : 
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		ProductId = 2,
		/// <summary>
		/// Currency : 
		/// </summary>
		[EnumTextValue("Currency")]
		[ColumnEnum("Currency", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 3)]
		Currency = 3,
		/// <summary>
		/// LocalSeconds : 
		/// </summary>
		[EnumTextValue("LocalSeconds")]
		[ColumnEnum("LocalSeconds", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LocalSeconds = 4,
		/// <summary>
		/// LdSeconds : 
		/// </summary>
		[EnumTextValue("LDSeconds")]
		[ColumnEnum("LDSeconds", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LdSeconds = 5,
		/// <summary>
		/// TotalBridge : 
		/// </summary>
		[EnumTextValue("TotalBridge")]
		[ColumnEnum("TotalBridge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalBridge = 6,
		/// <summary>
		/// TotalLd : 
		/// </summary>
		[EnumTextValue("TotalLD")]
		[ColumnEnum("TotalLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalLd = 7,
		/// <summary>
		/// TotalMiscellaneous : 
		/// </summary>
		[EnumTextValue("TotalMiscellaneous")]
		[ColumnEnum("TotalMiscellaneous", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalMiscellaneous = 8
	}//End enum

	#endregion ConferencingSummaryColumn Enum

} // end namespace
