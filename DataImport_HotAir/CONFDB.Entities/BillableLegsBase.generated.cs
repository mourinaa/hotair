
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file BillableLegs.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'BillableLegs' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class BillableLegsBase : EntityBase, CONFDB.Entities.IBillableLegs, IEntityId<BillableLegsKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private BillableLegsEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private BillableLegsEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private BillableLegsEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<BillableLegs> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event BillableLegsEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event BillableLegsEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="BillableLegsBase"/> instance.
		///</summary>
		public BillableLegsBase()
		{
			this.entityData = new BillableLegsEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="BillableLegsBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_conferenceId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_moderatorName"></param>
		///<param name="_moderator"></param>
		///<param name="_externalCustomerNumber"></param>
		///<param name="_externalModeratorNumber"></param>
		///<param name="_referenceNumber"></param>
		///<param name="_startTime"></param>
		///<param name="_endTime"></param>
		///<param name="_elapsedTime"></param>
		///<param name="_bridgeId"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_dnis"></param>
		///<param name="_dialNumber"></param>
		///<param name="_ani"></param>
		///<param name="_participantName"></param>
		///<param name="_destination"></param>
		///<param name="_accessTypeId"></param>
		///<param name="_connectProductRateId"></param>
		///<param name="_bridgeProductRateId"></param>
		///<param name="_ldProductRateId"></param>
		///<param name="_productRateTaxableValue"></param>
		///<param name="_customerTaxableValue"></param>
		///<param name="_wsTaxableValue"></param>
		///<param name="_retailConnectCharge"></param>
		///<param name="_retailBridgeRate"></param>
		///<param name="_retailLdRate"></param>
		///<param name="_retailCurrency"></param>
		///<param name="_retailBillingInterval"></param>
		///<param name="_retailTotalConnectCharge"></param>
		///<param name="_retailTotalBridge"></param>
		///<param name="_retailTotalLd"></param>
		///<param name="_retailTotal"></param>
		///<param name="_retailLocalTaxRate"></param>
		///<param name="_retailFederalTaxRate"></param>
		///<param name="_retailLocalTax"></param>
		///<param name="_retailFederalTax"></param>
		///<param name="_retailTotalTax"></param>
		///<param name="_wsConnectCharge"></param>
		///<param name="_wsBridgeRate"></param>
		///<param name="_wsldRate"></param>
		///<param name="_wsCurrency"></param>
		///<param name="_wsBillingInterval"></param>
		///<param name="_wsTotalConnectCharge"></param>
		///<param name="_wsTotalBridge"></param>
		///<param name="_wsTotalLd"></param>
		///<param name="_wsTotal"></param>
		///<param name="_wsLocalTaxRate"></param>
		///<param name="_wsFederalTaxRate"></param>
		///<param name="_wsLocalTax"></param>
		///<param name="_wsFederalTax"></param>
		///<param name="_wsTotalTax"></param>
		///<param name="_billingStatus"></param>
		///<param name="_billedDate"></param>
		///<param name="_processedDate"></param>
		///<param name="_ratedToZero"></param>
		///<param name="_productName"></param>
		///<param name="_productNameAlt"></param>
		public BillableLegsBase(System.Guid _id, System.String _conferenceId, System.Int32 _moderatorId, 
			System.String _wholesalerId, System.String _moderatorCode, System.String _passCode, System.String _moderatorName, 
			System.Int32 _moderator, System.String _externalCustomerNumber, System.String _externalModeratorNumber, 
			System.String _referenceNumber, System.DateTime _startTime, System.DateTime _endTime, 
			System.Int32 _elapsedTime, System.Int16 _bridgeId, System.String _uniqueConferenceId, 
			System.String _auxiliaryConferenceId, System.String _dnis, System.String _dialNumber, 
			System.String _ani, System.String _participantName, System.String _destination, System.Int32 _accessTypeId, 
			System.Int32 _connectProductRateId, System.Int32 _bridgeProductRateId, System.Int32 _ldProductRateId, 
			System.Int32 _productRateTaxableValue, System.Int32 _customerTaxableValue, System.Int32 _wsTaxableValue, 
			System.Decimal? _retailConnectCharge, System.Decimal? _retailBridgeRate, System.Decimal? _retailLdRate, 
			System.String _retailCurrency, System.Int32 _retailBillingInterval, System.Decimal? _retailTotalConnectCharge, 
			System.Decimal? _retailTotalBridge, System.Decimal? _retailTotalLd, System.Decimal? _retailTotal, 
			System.Decimal? _retailLocalTaxRate, System.Decimal? _retailFederalTaxRate, System.Decimal? _retailLocalTax, 
			System.Decimal? _retailFederalTax, System.Decimal? _retailTotalTax, System.Decimal? _wsConnectCharge, 
			System.Decimal? _wsBridgeRate, System.Decimal? _wsldRate, System.String _wsCurrency, 
			System.Int32 _wsBillingInterval, System.Decimal? _wsTotalConnectCharge, System.Decimal? _wsTotalBridge, 
			System.Decimal? _wsTotalLd, System.Decimal? _wsTotal, System.Decimal? _wsLocalTaxRate, 
			System.Decimal? _wsFederalTaxRate, System.Decimal? _wsLocalTax, System.Decimal? _wsFederalTax, 
			System.Decimal? _wsTotalTax, System.Int16? _billingStatus, System.DateTime? _billedDate, 
			System.DateTime? _processedDate, System.Boolean? _ratedToZero, System.String _productName, 
			System.String _productNameAlt)
		{
			this.entityData = new BillableLegsEntityData();
			this.backupData = null;

			this.Id = _id;
			this.ConferenceId = _conferenceId;
			this.ModeratorId = _moderatorId;
			this.WholesalerId = _wholesalerId;
			this.ModeratorCode = _moderatorCode;
			this.PassCode = _passCode;
			this.ModeratorName = _moderatorName;
			this.Moderator = _moderator;
			this.ExternalCustomerNumber = _externalCustomerNumber;
			this.ExternalModeratorNumber = _externalModeratorNumber;
			this.ReferenceNumber = _referenceNumber;
			this.StartTime = _startTime;
			this.EndTime = _endTime;
			this.ElapsedTime = _elapsedTime;
			this.BridgeId = _bridgeId;
			this.UniqueConferenceId = _uniqueConferenceId;
			this.AuxiliaryConferenceId = _auxiliaryConferenceId;
			this.Dnis = _dnis;
			this.DialNumber = _dialNumber;
			this.Ani = _ani;
			this.ParticipantName = _participantName;
			this.Destination = _destination;
			this.AccessTypeId = _accessTypeId;
			this.ConnectProductRateId = _connectProductRateId;
			this.BridgeProductRateId = _bridgeProductRateId;
			this.LdProductRateId = _ldProductRateId;
			this.ProductRateTaxableValue = _productRateTaxableValue;
			this.CustomerTaxableValue = _customerTaxableValue;
			this.WsTaxableValue = _wsTaxableValue;
			this.RetailConnectCharge = _retailConnectCharge;
			this.RetailBridgeRate = _retailBridgeRate;
			this.RetailLdRate = _retailLdRate;
			this.RetailCurrency = _retailCurrency;
			this.RetailBillingInterval = _retailBillingInterval;
			this.RetailTotalConnectCharge = _retailTotalConnectCharge;
			this.RetailTotalBridge = _retailTotalBridge;
			this.RetailTotalLd = _retailTotalLd;
			this.RetailTotal = _retailTotal;
			this.RetailLocalTaxRate = _retailLocalTaxRate;
			this.RetailFederalTaxRate = _retailFederalTaxRate;
			this.RetailLocalTax = _retailLocalTax;
			this.RetailFederalTax = _retailFederalTax;
			this.RetailTotalTax = _retailTotalTax;
			this.WsConnectCharge = _wsConnectCharge;
			this.WsBridgeRate = _wsBridgeRate;
			this.WsldRate = _wsldRate;
			this.WsCurrency = _wsCurrency;
			this.WsBillingInterval = _wsBillingInterval;
			this.WsTotalConnectCharge = _wsTotalConnectCharge;
			this.WsTotalBridge = _wsTotalBridge;
			this.WsTotalLd = _wsTotalLd;
			this.WsTotal = _wsTotal;
			this.WsLocalTaxRate = _wsLocalTaxRate;
			this.WsFederalTaxRate = _wsFederalTaxRate;
			this.WsLocalTax = _wsLocalTax;
			this.WsFederalTax = _wsFederalTax;
			this.WsTotalTax = _wsTotalTax;
			this.BillingStatus = _billingStatus;
			this.BilledDate = _billedDate;
			this.ProcessedDate = _processedDate;
			this.RatedToZero = _ratedToZero;
			this.ProductName = _productName;
			this.ProductNameAlt = _productNameAlt;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="BillableLegs"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_conferenceId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_moderatorName"></param>
		///<param name="_moderator"></param>
		///<param name="_externalCustomerNumber"></param>
		///<param name="_externalModeratorNumber"></param>
		///<param name="_referenceNumber"></param>
		///<param name="_startTime"></param>
		///<param name="_endTime"></param>
		///<param name="_elapsedTime"></param>
		///<param name="_bridgeId"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_dnis"></param>
		///<param name="_dialNumber"></param>
		///<param name="_ani"></param>
		///<param name="_participantName"></param>
		///<param name="_destination"></param>
		///<param name="_accessTypeId"></param>
		///<param name="_connectProductRateId"></param>
		///<param name="_bridgeProductRateId"></param>
		///<param name="_ldProductRateId"></param>
		///<param name="_productRateTaxableValue"></param>
		///<param name="_customerTaxableValue"></param>
		///<param name="_wsTaxableValue"></param>
		///<param name="_retailConnectCharge"></param>
		///<param name="_retailBridgeRate"></param>
		///<param name="_retailLdRate"></param>
		///<param name="_retailCurrency"></param>
		///<param name="_retailBillingInterval"></param>
		///<param name="_retailTotalConnectCharge"></param>
		///<param name="_retailTotalBridge"></param>
		///<param name="_retailTotalLd"></param>
		///<param name="_retailTotal"></param>
		///<param name="_retailLocalTaxRate"></param>
		///<param name="_retailFederalTaxRate"></param>
		///<param name="_retailLocalTax"></param>
		///<param name="_retailFederalTax"></param>
		///<param name="_retailTotalTax"></param>
		///<param name="_wsConnectCharge"></param>
		///<param name="_wsBridgeRate"></param>
		///<param name="_wsldRate"></param>
		///<param name="_wsCurrency"></param>
		///<param name="_wsBillingInterval"></param>
		///<param name="_wsTotalConnectCharge"></param>
		///<param name="_wsTotalBridge"></param>
		///<param name="_wsTotalLd"></param>
		///<param name="_wsTotal"></param>
		///<param name="_wsLocalTaxRate"></param>
		///<param name="_wsFederalTaxRate"></param>
		///<param name="_wsLocalTax"></param>
		///<param name="_wsFederalTax"></param>
		///<param name="_wsTotalTax"></param>
		///<param name="_billingStatus"></param>
		///<param name="_billedDate"></param>
		///<param name="_processedDate"></param>
		///<param name="_ratedToZero"></param>
		///<param name="_productName"></param>
		///<param name="_productNameAlt"></param>
		public static BillableLegs CreateBillableLegs(System.Guid _id, System.String _conferenceId, System.Int32 _moderatorId, 
			System.String _wholesalerId, System.String _moderatorCode, System.String _passCode, System.String _moderatorName, 
			System.Int32 _moderator, System.String _externalCustomerNumber, System.String _externalModeratorNumber, 
			System.String _referenceNumber, System.DateTime _startTime, System.DateTime _endTime, 
			System.Int32 _elapsedTime, System.Int16 _bridgeId, System.String _uniqueConferenceId, 
			System.String _auxiliaryConferenceId, System.String _dnis, System.String _dialNumber, 
			System.String _ani, System.String _participantName, System.String _destination, System.Int32 _accessTypeId, 
			System.Int32 _connectProductRateId, System.Int32 _bridgeProductRateId, System.Int32 _ldProductRateId, 
			System.Int32 _productRateTaxableValue, System.Int32 _customerTaxableValue, System.Int32 _wsTaxableValue, 
			System.Decimal? _retailConnectCharge, System.Decimal? _retailBridgeRate, System.Decimal? _retailLdRate, 
			System.String _retailCurrency, System.Int32 _retailBillingInterval, System.Decimal? _retailTotalConnectCharge, 
			System.Decimal? _retailTotalBridge, System.Decimal? _retailTotalLd, System.Decimal? _retailTotal, 
			System.Decimal? _retailLocalTaxRate, System.Decimal? _retailFederalTaxRate, System.Decimal? _retailLocalTax, 
			System.Decimal? _retailFederalTax, System.Decimal? _retailTotalTax, System.Decimal? _wsConnectCharge, 
			System.Decimal? _wsBridgeRate, System.Decimal? _wsldRate, System.String _wsCurrency, 
			System.Int32 _wsBillingInterval, System.Decimal? _wsTotalConnectCharge, System.Decimal? _wsTotalBridge, 
			System.Decimal? _wsTotalLd, System.Decimal? _wsTotal, System.Decimal? _wsLocalTaxRate, 
			System.Decimal? _wsFederalTaxRate, System.Decimal? _wsLocalTax, System.Decimal? _wsFederalTax, 
			System.Decimal? _wsTotalTax, System.Int16? _billingStatus, System.DateTime? _billedDate, 
			System.DateTime? _processedDate, System.Boolean? _ratedToZero, System.String _productName, 
			System.String _productNameAlt)
		{
			BillableLegs newBillableLegs = new BillableLegs();
			newBillableLegs.Id = _id;
			newBillableLegs.ConferenceId = _conferenceId;
			newBillableLegs.ModeratorId = _moderatorId;
			newBillableLegs.WholesalerId = _wholesalerId;
			newBillableLegs.ModeratorCode = _moderatorCode;
			newBillableLegs.PassCode = _passCode;
			newBillableLegs.ModeratorName = _moderatorName;
			newBillableLegs.Moderator = _moderator;
			newBillableLegs.ExternalCustomerNumber = _externalCustomerNumber;
			newBillableLegs.ExternalModeratorNumber = _externalModeratorNumber;
			newBillableLegs.ReferenceNumber = _referenceNumber;
			newBillableLegs.StartTime = _startTime;
			newBillableLegs.EndTime = _endTime;
			newBillableLegs.ElapsedTime = _elapsedTime;
			newBillableLegs.BridgeId = _bridgeId;
			newBillableLegs.UniqueConferenceId = _uniqueConferenceId;
			newBillableLegs.AuxiliaryConferenceId = _auxiliaryConferenceId;
			newBillableLegs.Dnis = _dnis;
			newBillableLegs.DialNumber = _dialNumber;
			newBillableLegs.Ani = _ani;
			newBillableLegs.ParticipantName = _participantName;
			newBillableLegs.Destination = _destination;
			newBillableLegs.AccessTypeId = _accessTypeId;
			newBillableLegs.ConnectProductRateId = _connectProductRateId;
			newBillableLegs.BridgeProductRateId = _bridgeProductRateId;
			newBillableLegs.LdProductRateId = _ldProductRateId;
			newBillableLegs.ProductRateTaxableValue = _productRateTaxableValue;
			newBillableLegs.CustomerTaxableValue = _customerTaxableValue;
			newBillableLegs.WsTaxableValue = _wsTaxableValue;
			newBillableLegs.RetailConnectCharge = _retailConnectCharge;
			newBillableLegs.RetailBridgeRate = _retailBridgeRate;
			newBillableLegs.RetailLdRate = _retailLdRate;
			newBillableLegs.RetailCurrency = _retailCurrency;
			newBillableLegs.RetailBillingInterval = _retailBillingInterval;
			newBillableLegs.RetailTotalConnectCharge = _retailTotalConnectCharge;
			newBillableLegs.RetailTotalBridge = _retailTotalBridge;
			newBillableLegs.RetailTotalLd = _retailTotalLd;
			newBillableLegs.RetailTotal = _retailTotal;
			newBillableLegs.RetailLocalTaxRate = _retailLocalTaxRate;
			newBillableLegs.RetailFederalTaxRate = _retailFederalTaxRate;
			newBillableLegs.RetailLocalTax = _retailLocalTax;
			newBillableLegs.RetailFederalTax = _retailFederalTax;
			newBillableLegs.RetailTotalTax = _retailTotalTax;
			newBillableLegs.WsConnectCharge = _wsConnectCharge;
			newBillableLegs.WsBridgeRate = _wsBridgeRate;
			newBillableLegs.WsldRate = _wsldRate;
			newBillableLegs.WsCurrency = _wsCurrency;
			newBillableLegs.WsBillingInterval = _wsBillingInterval;
			newBillableLegs.WsTotalConnectCharge = _wsTotalConnectCharge;
			newBillableLegs.WsTotalBridge = _wsTotalBridge;
			newBillableLegs.WsTotalLd = _wsTotalLd;
			newBillableLegs.WsTotal = _wsTotal;
			newBillableLegs.WsLocalTaxRate = _wsLocalTaxRate;
			newBillableLegs.WsFederalTaxRate = _wsFederalTaxRate;
			newBillableLegs.WsLocalTax = _wsLocalTax;
			newBillableLegs.WsFederalTax = _wsFederalTax;
			newBillableLegs.WsTotalTax = _wsTotalTax;
			newBillableLegs.BillingStatus = _billingStatus;
			newBillableLegs.BilledDate = _billedDate;
			newBillableLegs.ProcessedDate = _processedDate;
			newBillableLegs.RatedToZero = _ratedToZero;
			newBillableLegs.ProductName = _productName;
			newBillableLegs.ProductNameAlt = _productNameAlt;
			return newBillableLegs;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Guid Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID property.</remarks>
		/// <value>This type is uniqueidentifier</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Guid OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String ConferenceId
		{
			get
			{
				return this.entityData.ConferenceId; 
			}
			
			set
			{
				if (this.entityData.ConferenceId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ConferenceId, this.entityData.ConferenceId);
				this.entityData.ConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ConferenceId, this.entityData.ConferenceId);
				OnPropertyChanged("ConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String ModeratorCode
		{
			get
			{
				return this.entityData.ModeratorCode; 
			}
			
			set
			{
				if (this.entityData.ModeratorCode == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ModeratorCode, this.entityData.ModeratorCode);
				this.entityData.ModeratorCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ModeratorCode, this.entityData.ModeratorCode);
				OnPropertyChanged("ModeratorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String PassCode
		{
			get
			{
				return this.entityData.PassCode; 
			}
			
			set
			{
				if (this.entityData.PassCode == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.PassCode, this.entityData.PassCode);
				this.entityData.PassCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.PassCode, this.entityData.PassCode);
				OnPropertyChanged("PassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ModeratorName
		{
			get
			{
				return this.entityData.ModeratorName; 
			}
			
			set
			{
				if (this.entityData.ModeratorName == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ModeratorName, this.entityData.ModeratorName);
				this.entityData.ModeratorName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ModeratorName, this.entityData.ModeratorName);
				OnPropertyChanged("ModeratorName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Moderator property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Moderator
		{
			get
			{
				return this.entityData.Moderator; 
			}
			
			set
			{
				if (this.entityData.Moderator == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.Moderator, this.entityData.Moderator);
				this.entityData.Moderator = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.Moderator, this.entityData.Moderator);
				OnPropertyChanged("Moderator");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ExternalCustomerNumber
		{
			get
			{
				return this.entityData.ExternalCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.ExternalCustomerNumber == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ExternalCustomerNumber, this.entityData.ExternalCustomerNumber);
				this.entityData.ExternalCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ExternalCustomerNumber, this.entityData.ExternalCustomerNumber);
				OnPropertyChanged("ExternalCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalModeratorNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ExternalModeratorNumber
		{
			get
			{
				return this.entityData.ExternalModeratorNumber; 
			}
			
			set
			{
				if (this.entityData.ExternalModeratorNumber == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ExternalModeratorNumber, this.entityData.ExternalModeratorNumber);
				this.entityData.ExternalModeratorNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ExternalModeratorNumber, this.entityData.ExternalModeratorNumber);
				OnPropertyChanged("ExternalModeratorNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReferenceNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ReferenceNumber
		{
			get
			{
				return this.entityData.ReferenceNumber; 
			}
			
			set
			{
				if (this.entityData.ReferenceNumber == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ReferenceNumber, this.entityData.ReferenceNumber);
				this.entityData.ReferenceNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ReferenceNumber, this.entityData.ReferenceNumber);
				OnPropertyChanged("ReferenceNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StartTime
		{
			get
			{
				return this.entityData.StartTime; 
			}
			
			set
			{
				if (this.entityData.StartTime == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.StartTime, this.entityData.StartTime);
				this.entityData.StartTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.StartTime, this.entityData.StartTime);
				OnPropertyChanged("StartTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EndTime
		{
			get
			{
				return this.entityData.EndTime; 
			}
			
			set
			{
				if (this.entityData.EndTime == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.EndTime, this.entityData.EndTime);
				this.entityData.EndTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.EndTime, this.entityData.EndTime);
				OnPropertyChanged("EndTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ElapsedTime property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ElapsedTime
		{
			get
			{
				return this.entityData.ElapsedTime; 
			}
			
			set
			{
				if (this.entityData.ElapsedTime == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ElapsedTime, this.entityData.ElapsedTime);
				this.entityData.ElapsedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ElapsedTime, this.entityData.ElapsedTime);
				OnPropertyChanged("ElapsedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BridgeId property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int16 BridgeId
		{
			get
			{
				return this.entityData.BridgeId; 
			}
			
			set
			{
				if (this.entityData.BridgeId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.BridgeId, this.entityData.BridgeId);
				this.entityData.BridgeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.BridgeId, this.entityData.BridgeId);
				OnPropertyChanged("BridgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String UniqueConferenceId
		{
			get
			{
				return this.entityData.UniqueConferenceId; 
			}
			
			set
			{
				if (this.entityData.UniqueConferenceId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				this.entityData.UniqueConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				OnPropertyChanged("UniqueConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuxiliaryConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String AuxiliaryConferenceId
		{
			get
			{
				return this.entityData.AuxiliaryConferenceId; 
			}
			
			set
			{
				if (this.entityData.AuxiliaryConferenceId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.AuxiliaryConferenceId, this.entityData.AuxiliaryConferenceId);
				this.entityData.AuxiliaryConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.AuxiliaryConferenceId, this.entityData.AuxiliaryConferenceId);
				OnPropertyChanged("AuxiliaryConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Dnis property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Dnis
		{
			get
			{
				return this.entityData.Dnis; 
			}
			
			set
			{
				if (this.entityData.Dnis == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.Dnis, this.entityData.Dnis);
				this.entityData.Dnis = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.Dnis, this.entityData.Dnis);
				OnPropertyChanged("Dnis");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DialNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DialNumber
		{
			get
			{
				return this.entityData.DialNumber; 
			}
			
			set
			{
				if (this.entityData.DialNumber == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.DialNumber, this.entityData.DialNumber);
				this.entityData.DialNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.DialNumber, this.entityData.DialNumber);
				OnPropertyChanged("DialNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ani property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 36)]
		public virtual System.String Ani
		{
			get
			{
				return this.entityData.Ani; 
			}
			
			set
			{
				if (this.entityData.Ani == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.Ani, this.entityData.Ani);
				this.entityData.Ani = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.Ani, this.entityData.Ani);
				OnPropertyChanged("Ani");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParticipantName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ParticipantName
		{
			get
			{
				return this.entityData.ParticipantName; 
			}
			
			set
			{
				if (this.entityData.ParticipantName == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ParticipantName, this.entityData.ParticipantName);
				this.entityData.ParticipantName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ParticipantName, this.entityData.ParticipantName);
				OnPropertyChanged("ParticipantName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Destination property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Destination
		{
			get
			{
				return this.entityData.Destination; 
			}
			
			set
			{
				if (this.entityData.Destination == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.Destination, this.entityData.Destination);
				this.entityData.Destination = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.Destination, this.entityData.Destination);
				OnPropertyChanged("Destination");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccessTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AccessTypeId
		{
			get
			{
				return this.entityData.AccessTypeId; 
			}
			
			set
			{
				if (this.entityData.AccessTypeId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.AccessTypeId, this.entityData.AccessTypeId);
				this.entityData.AccessTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.AccessTypeId, this.entityData.AccessTypeId);
				OnPropertyChanged("AccessTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConnectProductRateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ConnectProductRateId
		{
			get
			{
				return this.entityData.ConnectProductRateId; 
			}
			
			set
			{
				if (this.entityData.ConnectProductRateId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ConnectProductRateId, this.entityData.ConnectProductRateId);
				this.entityData.ConnectProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ConnectProductRateId, this.entityData.ConnectProductRateId);
				OnPropertyChanged("ConnectProductRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BridgeProductRateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 BridgeProductRateId
		{
			get
			{
				return this.entityData.BridgeProductRateId; 
			}
			
			set
			{
				if (this.entityData.BridgeProductRateId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.BridgeProductRateId, this.entityData.BridgeProductRateId);
				this.entityData.BridgeProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.BridgeProductRateId, this.entityData.BridgeProductRateId);
				OnPropertyChanged("BridgeProductRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LdProductRateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LdProductRateId
		{
			get
			{
				return this.entityData.LdProductRateId; 
			}
			
			set
			{
				if (this.entityData.LdProductRateId == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.LdProductRateId, this.entityData.LdProductRateId);
				this.entityData.LdProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.LdProductRateId, this.entityData.LdProductRateId);
				OnPropertyChanged("LdProductRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductRateTaxableValue property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProductRateTaxableValue
		{
			get
			{
				return this.entityData.ProductRateTaxableValue; 
			}
			
			set
			{
				if (this.entityData.ProductRateTaxableValue == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ProductRateTaxableValue, this.entityData.ProductRateTaxableValue);
				this.entityData.ProductRateTaxableValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ProductRateTaxableValue, this.entityData.ProductRateTaxableValue);
				OnPropertyChanged("ProductRateTaxableValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerTaxableValue property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerTaxableValue
		{
			get
			{
				return this.entityData.CustomerTaxableValue; 
			}
			
			set
			{
				if (this.entityData.CustomerTaxableValue == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.CustomerTaxableValue, this.entityData.CustomerTaxableValue);
				this.entityData.CustomerTaxableValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.CustomerTaxableValue, this.entityData.CustomerTaxableValue);
				OnPropertyChanged("CustomerTaxableValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTaxableValue property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 WsTaxableValue
		{
			get
			{
				return this.entityData.WsTaxableValue; 
			}
			
			set
			{
				if (this.entityData.WsTaxableValue == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsTaxableValue, this.entityData.WsTaxableValue);
				this.entityData.WsTaxableValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsTaxableValue, this.entityData.WsTaxableValue);
				OnPropertyChanged("WsTaxableValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailConnectCharge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailConnectChargeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailConnectCharge
		{
			get
			{
				return this.entityData.RetailConnectCharge; 
			}
			
			set
			{
				if (this.entityData.RetailConnectCharge == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailConnectCharge, this.entityData.RetailConnectCharge);
				this.entityData.RetailConnectCharge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailConnectCharge, this.entityData.RetailConnectCharge);
				OnPropertyChanged("RetailConnectCharge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailBridgeRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailBridgeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailBridgeRate
		{
			get
			{
				return this.entityData.RetailBridgeRate; 
			}
			
			set
			{
				if (this.entityData.RetailBridgeRate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailBridgeRate, this.entityData.RetailBridgeRate);
				this.entityData.RetailBridgeRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailBridgeRate, this.entityData.RetailBridgeRate);
				OnPropertyChanged("RetailBridgeRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailLdRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailLdRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailLdRate
		{
			get
			{
				return this.entityData.RetailLdRate; 
			}
			
			set
			{
				if (this.entityData.RetailLdRate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailLdRate, this.entityData.RetailLdRate);
				this.entityData.RetailLdRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailLdRate, this.entityData.RetailLdRate);
				OnPropertyChanged("RetailLdRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailCurrency property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String RetailCurrency
		{
			get
			{
				return this.entityData.RetailCurrency; 
			}
			
			set
			{
				if (this.entityData.RetailCurrency == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailCurrency, this.entityData.RetailCurrency);
				this.entityData.RetailCurrency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailCurrency, this.entityData.RetailCurrency);
				OnPropertyChanged("RetailCurrency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailBillingInterval property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 RetailBillingInterval
		{
			get
			{
				return this.entityData.RetailBillingInterval; 
			}
			
			set
			{
				if (this.entityData.RetailBillingInterval == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailBillingInterval, this.entityData.RetailBillingInterval);
				this.entityData.RetailBillingInterval = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailBillingInterval, this.entityData.RetailBillingInterval);
				OnPropertyChanged("RetailBillingInterval");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalConnectCharge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalConnectChargeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalConnectCharge
		{
			get
			{
				return this.entityData.RetailTotalConnectCharge; 
			}
			
			set
			{
				if (this.entityData.RetailTotalConnectCharge == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailTotalConnectCharge, this.entityData.RetailTotalConnectCharge);
				this.entityData.RetailTotalConnectCharge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailTotalConnectCharge, this.entityData.RetailTotalConnectCharge);
				OnPropertyChanged("RetailTotalConnectCharge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalBridge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalBridgeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalBridge
		{
			get
			{
				return this.entityData.RetailTotalBridge; 
			}
			
			set
			{
				if (this.entityData.RetailTotalBridge == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailTotalBridge, this.entityData.RetailTotalBridge);
				this.entityData.RetailTotalBridge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailTotalBridge, this.entityData.RetailTotalBridge);
				OnPropertyChanged("RetailTotalBridge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalLd property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalLdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalLd
		{
			get
			{
				return this.entityData.RetailTotalLd; 
			}
			
			set
			{
				if (this.entityData.RetailTotalLd == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailTotalLd, this.entityData.RetailTotalLd);
				this.entityData.RetailTotalLd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailTotalLd, this.entityData.RetailTotalLd);
				OnPropertyChanged("RetailTotalLd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotal property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotal
		{
			get
			{
				return this.entityData.RetailTotal; 
			}
			
			set
			{
				if (this.entityData.RetailTotal == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailTotal, this.entityData.RetailTotal);
				this.entityData.RetailTotal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailTotal, this.entityData.RetailTotal);
				OnPropertyChanged("RetailTotal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailLocalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailLocalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailLocalTaxRate
		{
			get
			{
				return this.entityData.RetailLocalTaxRate; 
			}
			
			set
			{
				if (this.entityData.RetailLocalTaxRate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailLocalTaxRate, this.entityData.RetailLocalTaxRate);
				this.entityData.RetailLocalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailLocalTaxRate, this.entityData.RetailLocalTaxRate);
				OnPropertyChanged("RetailLocalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailFederalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailFederalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailFederalTaxRate
		{
			get
			{
				return this.entityData.RetailFederalTaxRate; 
			}
			
			set
			{
				if (this.entityData.RetailFederalTaxRate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailFederalTaxRate, this.entityData.RetailFederalTaxRate);
				this.entityData.RetailFederalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailFederalTaxRate, this.entityData.RetailFederalTaxRate);
				OnPropertyChanged("RetailFederalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailLocalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailLocalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailLocalTax
		{
			get
			{
				return this.entityData.RetailLocalTax; 
			}
			
			set
			{
				if (this.entityData.RetailLocalTax == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailLocalTax, this.entityData.RetailLocalTax);
				this.entityData.RetailLocalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailLocalTax, this.entityData.RetailLocalTax);
				OnPropertyChanged("RetailLocalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailFederalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailFederalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailFederalTax
		{
			get
			{
				return this.entityData.RetailFederalTax; 
			}
			
			set
			{
				if (this.entityData.RetailFederalTax == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailFederalTax, this.entityData.RetailFederalTax);
				this.entityData.RetailFederalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailFederalTax, this.entityData.RetailFederalTax);
				OnPropertyChanged("RetailFederalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalTax
		{
			get
			{
				return this.entityData.RetailTotalTax; 
			}
			
			set
			{
				if (this.entityData.RetailTotalTax == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RetailTotalTax, this.entityData.RetailTotalTax);
				this.entityData.RetailTotalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RetailTotalTax, this.entityData.RetailTotalTax);
				OnPropertyChanged("RetailTotalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsConnectCharge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsConnectChargeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsConnectCharge
		{
			get
			{
				return this.entityData.WsConnectCharge; 
			}
			
			set
			{
				if (this.entityData.WsConnectCharge == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsConnectCharge, this.entityData.WsConnectCharge);
				this.entityData.WsConnectCharge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsConnectCharge, this.entityData.WsConnectCharge);
				OnPropertyChanged("WsConnectCharge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsBridgeRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsBridgeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsBridgeRate
		{
			get
			{
				return this.entityData.WsBridgeRate; 
			}
			
			set
			{
				if (this.entityData.WsBridgeRate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsBridgeRate, this.entityData.WsBridgeRate);
				this.entityData.WsBridgeRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsBridgeRate, this.entityData.WsBridgeRate);
				OnPropertyChanged("WsBridgeRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsldRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsldRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsldRate
		{
			get
			{
				return this.entityData.WsldRate; 
			}
			
			set
			{
				if (this.entityData.WsldRate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsldRate, this.entityData.WsldRate);
				this.entityData.WsldRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsldRate, this.entityData.WsldRate);
				OnPropertyChanged("WsldRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsCurrency property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String WsCurrency
		{
			get
			{
				return this.entityData.WsCurrency; 
			}
			
			set
			{
				if (this.entityData.WsCurrency == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsCurrency, this.entityData.WsCurrency);
				this.entityData.WsCurrency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsCurrency, this.entityData.WsCurrency);
				OnPropertyChanged("WsCurrency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsBillingInterval property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 WsBillingInterval
		{
			get
			{
				return this.entityData.WsBillingInterval; 
			}
			
			set
			{
				if (this.entityData.WsBillingInterval == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsBillingInterval, this.entityData.WsBillingInterval);
				this.entityData.WsBillingInterval = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsBillingInterval, this.entityData.WsBillingInterval);
				OnPropertyChanged("WsBillingInterval");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotalConnectCharge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalConnectChargeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotalConnectCharge
		{
			get
			{
				return this.entityData.WsTotalConnectCharge; 
			}
			
			set
			{
				if (this.entityData.WsTotalConnectCharge == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsTotalConnectCharge, this.entityData.WsTotalConnectCharge);
				this.entityData.WsTotalConnectCharge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsTotalConnectCharge, this.entityData.WsTotalConnectCharge);
				OnPropertyChanged("WsTotalConnectCharge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotalBridge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalBridgeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotalBridge
		{
			get
			{
				return this.entityData.WsTotalBridge; 
			}
			
			set
			{
				if (this.entityData.WsTotalBridge == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsTotalBridge, this.entityData.WsTotalBridge);
				this.entityData.WsTotalBridge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsTotalBridge, this.entityData.WsTotalBridge);
				OnPropertyChanged("WsTotalBridge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotalLd property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalLdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotalLd
		{
			get
			{
				return this.entityData.WsTotalLd; 
			}
			
			set
			{
				if (this.entityData.WsTotalLd == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsTotalLd, this.entityData.WsTotalLd);
				this.entityData.WsTotalLd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsTotalLd, this.entityData.WsTotalLd);
				OnPropertyChanged("WsTotalLd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotal property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotal
		{
			get
			{
				return this.entityData.WsTotal; 
			}
			
			set
			{
				if (this.entityData.WsTotal == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsTotal, this.entityData.WsTotal);
				this.entityData.WsTotal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsTotal, this.entityData.WsTotal);
				OnPropertyChanged("WsTotal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsLocalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsLocalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsLocalTaxRate
		{
			get
			{
				return this.entityData.WsLocalTaxRate; 
			}
			
			set
			{
				if (this.entityData.WsLocalTaxRate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsLocalTaxRate, this.entityData.WsLocalTaxRate);
				this.entityData.WsLocalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsLocalTaxRate, this.entityData.WsLocalTaxRate);
				OnPropertyChanged("WsLocalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsFederalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsFederalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsFederalTaxRate
		{
			get
			{
				return this.entityData.WsFederalTaxRate; 
			}
			
			set
			{
				if (this.entityData.WsFederalTaxRate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsFederalTaxRate, this.entityData.WsFederalTaxRate);
				this.entityData.WsFederalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsFederalTaxRate, this.entityData.WsFederalTaxRate);
				OnPropertyChanged("WsFederalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsLocalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsLocalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsLocalTax
		{
			get
			{
				return this.entityData.WsLocalTax; 
			}
			
			set
			{
				if (this.entityData.WsLocalTax == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsLocalTax, this.entityData.WsLocalTax);
				this.entityData.WsLocalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsLocalTax, this.entityData.WsLocalTax);
				OnPropertyChanged("WsLocalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsFederalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsFederalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsFederalTax
		{
			get
			{
				return this.entityData.WsFederalTax; 
			}
			
			set
			{
				if (this.entityData.WsFederalTax == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsFederalTax, this.entityData.WsFederalTax);
				this.entityData.WsFederalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsFederalTax, this.entityData.WsFederalTax);
				OnPropertyChanged("WsFederalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotalTax
		{
			get
			{
				return this.entityData.WsTotalTax; 
			}
			
			set
			{
				if (this.entityData.WsTotalTax == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.WsTotalTax, this.entityData.WsTotalTax);
				this.entityData.WsTotalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.WsTotalTax, this.entityData.WsTotalTax);
				OnPropertyChanged("WsTotalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingStatus property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsBillingStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? BillingStatus
		{
			get
			{
				return this.entityData.BillingStatus; 
			}
			
			set
			{
				if (this.entityData.BillingStatus == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.BillingStatus, this.entityData.BillingStatus);
				this.entityData.BillingStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.BillingStatus, this.entityData.BillingStatus);
				OnPropertyChanged("BillingStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BilledDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBilledDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BilledDate
		{
			get
			{
				return this.entityData.BilledDate; 
			}
			
			set
			{
				if (this.entityData.BilledDate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.BilledDate, this.entityData.BilledDate);
				this.entityData.BilledDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.BilledDate, this.entityData.BilledDate);
				OnPropertyChanged("BilledDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProcessedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsProcessedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ProcessedDate
		{
			get
			{
				return this.entityData.ProcessedDate; 
			}
			
			set
			{
				if (this.entityData.ProcessedDate == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ProcessedDate, this.entityData.ProcessedDate);
				this.entityData.ProcessedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ProcessedDate, this.entityData.ProcessedDate);
				OnPropertyChanged("ProcessedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RatedToZero property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsRatedToZeroNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? RatedToZero
		{
			get
			{
				return this.entityData.RatedToZero; 
			}
			
			set
			{
				if (this.entityData.RatedToZero == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.RatedToZero, this.entityData.RatedToZero);
				this.entityData.RatedToZero = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.RatedToZero, this.entityData.RatedToZero);
				OnPropertyChanged("RatedToZero");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ProductName
		{
			get
			{
				return this.entityData.ProductName; 
			}
			
			set
			{
				if (this.entityData.ProductName == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ProductName, this.entityData.ProductName);
				this.entityData.ProductName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ProductName, this.entityData.ProductName);
				OnPropertyChanged("ProductName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductNameAlt property. 
		///		
		/// </summary>
		/// <value>This type is nvarchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ProductNameAlt
		{
			get
			{
				return this.entityData.ProductNameAlt; 
			}
			
			set
			{
				if (this.entityData.ProductNameAlt == value)
					return;
					
				OnColumnChanging(BillableLegsColumn.ProductNameAlt, this.entityData.ProductNameAlt);
				this.entityData.ProductNameAlt = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(BillableLegsColumn.ProductNameAlt, this.entityData.ProductNameAlt);
				OnPropertyChanged("ProductNameAlt");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("ConferenceId", "Conference Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ConferenceId", "Conference Id", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("ModeratorCode", "Moderator Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModeratorCode", "Moderator Code", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PassCode", "Pass Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PassCode", "Pass Code", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModeratorName", "Moderator Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExternalCustomerNumber", "External Customer Number", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExternalModeratorNumber", "External Moderator Number", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ReferenceNumber", "Reference Number", 255));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("UniqueConferenceId", "Unique Conference Id", 40));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("AuxiliaryConferenceId", "Auxiliary Conference Id", 40));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Dnis", "Dnis", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DialNumber", "Dial Number", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Ani", "Ani", 36));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ParticipantName", "Participant Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Destination", "Destination", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RetailCurrency", "Retail Currency", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WsCurrency", "Ws Currency", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ProductName", "Product Name", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ProductNameAlt", "Product Name Alt", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "BillableLegs"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "ConferenceID", "ModeratorID", "WholesalerID", "ModeratorCode", "PassCode", "ModeratorName", "Moderator", "ExternalCustomerNumber", "ExternalModeratorNumber", "ReferenceNumber", "StartTime", "EndTime", "ElapsedTime", "BridgeID", "UniqueConferenceID", "AuxiliaryConferenceID", "DNIS", "DialNumber", "ANI", "ParticipantName", "Destination", "AccessTypeID", "ConnectProductRateID", "BridgeProductRateID", "LDProductRateID", "ProductRateTaxableValue", "CustomerTaxableValue", "WSTaxableValue", "RetailConnectCharge", "RetailBridgeRate", "RetailLDRate", "RetailCurrency", "RetailBillingInterval", "RetailTotalConnectCharge", "RetailTotalBridge", "RetailTotalLD", "RetailTotal", "RetailLocalTaxRate", "RetailFederalTaxRate", "RetailLocalTax", "RetailFederalTax", "RetailTotalTax", "WSConnectCharge", "WSBridgeRate", "WSLDRate", "WSCurrency", "WSBillingInterval", "WSTotalConnectCharge", "WSTotalBridge", "WSTotalLD", "WSTotal", "WSLocalTaxRate", "WSFederalTaxRate", "WSLocalTax", "WSFederalTax", "WSTotalTax", "BillingStatus", "BilledDate", "ProcessedDate", "RatedToZero", "ProductName", "ProductNameAlt"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as BillableLegsEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (BillableLegs) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<BillableLegs>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as BillableLegs);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed BillableLegs Entity 
		///</summary>
		public virtual BillableLegs Copy()
		{
			//shallow copy entity
			BillableLegs copy = new BillableLegs();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.OriginalId = this.OriginalId;
			copy.ConferenceId = this.ConferenceId;
			copy.ModeratorId = this.ModeratorId;
			copy.WholesalerId = this.WholesalerId;
			copy.ModeratorCode = this.ModeratorCode;
			copy.PassCode = this.PassCode;
			copy.ModeratorName = this.ModeratorName;
			copy.Moderator = this.Moderator;
			copy.ExternalCustomerNumber = this.ExternalCustomerNumber;
			copy.ExternalModeratorNumber = this.ExternalModeratorNumber;
			copy.ReferenceNumber = this.ReferenceNumber;
			copy.StartTime = this.StartTime;
			copy.EndTime = this.EndTime;
			copy.ElapsedTime = this.ElapsedTime;
			copy.BridgeId = this.BridgeId;
			copy.UniqueConferenceId = this.UniqueConferenceId;
			copy.AuxiliaryConferenceId = this.AuxiliaryConferenceId;
			copy.Dnis = this.Dnis;
			copy.DialNumber = this.DialNumber;
			copy.Ani = this.Ani;
			copy.ParticipantName = this.ParticipantName;
			copy.Destination = this.Destination;
			copy.AccessTypeId = this.AccessTypeId;
			copy.ConnectProductRateId = this.ConnectProductRateId;
			copy.BridgeProductRateId = this.BridgeProductRateId;
			copy.LdProductRateId = this.LdProductRateId;
			copy.ProductRateTaxableValue = this.ProductRateTaxableValue;
			copy.CustomerTaxableValue = this.CustomerTaxableValue;
			copy.WsTaxableValue = this.WsTaxableValue;
			copy.RetailConnectCharge = this.RetailConnectCharge;
			copy.RetailBridgeRate = this.RetailBridgeRate;
			copy.RetailLdRate = this.RetailLdRate;
			copy.RetailCurrency = this.RetailCurrency;
			copy.RetailBillingInterval = this.RetailBillingInterval;
			copy.RetailTotalConnectCharge = this.RetailTotalConnectCharge;
			copy.RetailTotalBridge = this.RetailTotalBridge;
			copy.RetailTotalLd = this.RetailTotalLd;
			copy.RetailTotal = this.RetailTotal;
			copy.RetailLocalTaxRate = this.RetailLocalTaxRate;
			copy.RetailFederalTaxRate = this.RetailFederalTaxRate;
			copy.RetailLocalTax = this.RetailLocalTax;
			copy.RetailFederalTax = this.RetailFederalTax;
			copy.RetailTotalTax = this.RetailTotalTax;
			copy.WsConnectCharge = this.WsConnectCharge;
			copy.WsBridgeRate = this.WsBridgeRate;
			copy.WsldRate = this.WsldRate;
			copy.WsCurrency = this.WsCurrency;
			copy.WsBillingInterval = this.WsBillingInterval;
			copy.WsTotalConnectCharge = this.WsTotalConnectCharge;
			copy.WsTotalBridge = this.WsTotalBridge;
			copy.WsTotalLd = this.WsTotalLd;
			copy.WsTotal = this.WsTotal;
			copy.WsLocalTaxRate = this.WsLocalTaxRate;
			copy.WsFederalTaxRate = this.WsFederalTaxRate;
			copy.WsLocalTax = this.WsLocalTax;
			copy.WsFederalTax = this.WsFederalTax;
			copy.WsTotalTax = this.WsTotalTax;
			copy.BillingStatus = this.BillingStatus;
			copy.BilledDate = this.BilledDate;
			copy.ProcessedDate = this.ProcessedDate;
			copy.RatedToZero = this.RatedToZero;
			copy.ProductName = this.ProductName;
			copy.ProductNameAlt = this.ProductNameAlt;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed BillableLegs Entity which is a deep copy of the current entity.
		///</summary>
		public virtual BillableLegs DeepCopy()
		{
			return EntityHelper.Clone<BillableLegs>(this as BillableLegs);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as BillableLegsEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as BillableLegsEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(BillableLegsColumn column)
		{
			switch(column)
			{
					case BillableLegsColumn.Id:
					return entityData.Id != _originalData.Id;
					case BillableLegsColumn.ConferenceId:
					return entityData.ConferenceId != _originalData.ConferenceId;
					case BillableLegsColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case BillableLegsColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case BillableLegsColumn.ModeratorCode:
					return entityData.ModeratorCode != _originalData.ModeratorCode;
					case BillableLegsColumn.PassCode:
					return entityData.PassCode != _originalData.PassCode;
					case BillableLegsColumn.ModeratorName:
					return entityData.ModeratorName != _originalData.ModeratorName;
					case BillableLegsColumn.Moderator:
					return entityData.Moderator != _originalData.Moderator;
					case BillableLegsColumn.ExternalCustomerNumber:
					return entityData.ExternalCustomerNumber != _originalData.ExternalCustomerNumber;
					case BillableLegsColumn.ExternalModeratorNumber:
					return entityData.ExternalModeratorNumber != _originalData.ExternalModeratorNumber;
					case BillableLegsColumn.ReferenceNumber:
					return entityData.ReferenceNumber != _originalData.ReferenceNumber;
					case BillableLegsColumn.StartTime:
					return entityData.StartTime != _originalData.StartTime;
					case BillableLegsColumn.EndTime:
					return entityData.EndTime != _originalData.EndTime;
					case BillableLegsColumn.ElapsedTime:
					return entityData.ElapsedTime != _originalData.ElapsedTime;
					case BillableLegsColumn.BridgeId:
					return entityData.BridgeId != _originalData.BridgeId;
					case BillableLegsColumn.UniqueConferenceId:
					return entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
					case BillableLegsColumn.AuxiliaryConferenceId:
					return entityData.AuxiliaryConferenceId != _originalData.AuxiliaryConferenceId;
					case BillableLegsColumn.Dnis:
					return entityData.Dnis != _originalData.Dnis;
					case BillableLegsColumn.DialNumber:
					return entityData.DialNumber != _originalData.DialNumber;
					case BillableLegsColumn.Ani:
					return entityData.Ani != _originalData.Ani;
					case BillableLegsColumn.ParticipantName:
					return entityData.ParticipantName != _originalData.ParticipantName;
					case BillableLegsColumn.Destination:
					return entityData.Destination != _originalData.Destination;
					case BillableLegsColumn.AccessTypeId:
					return entityData.AccessTypeId != _originalData.AccessTypeId;
					case BillableLegsColumn.ConnectProductRateId:
					return entityData.ConnectProductRateId != _originalData.ConnectProductRateId;
					case BillableLegsColumn.BridgeProductRateId:
					return entityData.BridgeProductRateId != _originalData.BridgeProductRateId;
					case BillableLegsColumn.LdProductRateId:
					return entityData.LdProductRateId != _originalData.LdProductRateId;
					case BillableLegsColumn.ProductRateTaxableValue:
					return entityData.ProductRateTaxableValue != _originalData.ProductRateTaxableValue;
					case BillableLegsColumn.CustomerTaxableValue:
					return entityData.CustomerTaxableValue != _originalData.CustomerTaxableValue;
					case BillableLegsColumn.WsTaxableValue:
					return entityData.WsTaxableValue != _originalData.WsTaxableValue;
					case BillableLegsColumn.RetailConnectCharge:
					return entityData.RetailConnectCharge != _originalData.RetailConnectCharge;
					case BillableLegsColumn.RetailBridgeRate:
					return entityData.RetailBridgeRate != _originalData.RetailBridgeRate;
					case BillableLegsColumn.RetailLdRate:
					return entityData.RetailLdRate != _originalData.RetailLdRate;
					case BillableLegsColumn.RetailCurrency:
					return entityData.RetailCurrency != _originalData.RetailCurrency;
					case BillableLegsColumn.RetailBillingInterval:
					return entityData.RetailBillingInterval != _originalData.RetailBillingInterval;
					case BillableLegsColumn.RetailTotalConnectCharge:
					return entityData.RetailTotalConnectCharge != _originalData.RetailTotalConnectCharge;
					case BillableLegsColumn.RetailTotalBridge:
					return entityData.RetailTotalBridge != _originalData.RetailTotalBridge;
					case BillableLegsColumn.RetailTotalLd:
					return entityData.RetailTotalLd != _originalData.RetailTotalLd;
					case BillableLegsColumn.RetailTotal:
					return entityData.RetailTotal != _originalData.RetailTotal;
					case BillableLegsColumn.RetailLocalTaxRate:
					return entityData.RetailLocalTaxRate != _originalData.RetailLocalTaxRate;
					case BillableLegsColumn.RetailFederalTaxRate:
					return entityData.RetailFederalTaxRate != _originalData.RetailFederalTaxRate;
					case BillableLegsColumn.RetailLocalTax:
					return entityData.RetailLocalTax != _originalData.RetailLocalTax;
					case BillableLegsColumn.RetailFederalTax:
					return entityData.RetailFederalTax != _originalData.RetailFederalTax;
					case BillableLegsColumn.RetailTotalTax:
					return entityData.RetailTotalTax != _originalData.RetailTotalTax;
					case BillableLegsColumn.WsConnectCharge:
					return entityData.WsConnectCharge != _originalData.WsConnectCharge;
					case BillableLegsColumn.WsBridgeRate:
					return entityData.WsBridgeRate != _originalData.WsBridgeRate;
					case BillableLegsColumn.WsldRate:
					return entityData.WsldRate != _originalData.WsldRate;
					case BillableLegsColumn.WsCurrency:
					return entityData.WsCurrency != _originalData.WsCurrency;
					case BillableLegsColumn.WsBillingInterval:
					return entityData.WsBillingInterval != _originalData.WsBillingInterval;
					case BillableLegsColumn.WsTotalConnectCharge:
					return entityData.WsTotalConnectCharge != _originalData.WsTotalConnectCharge;
					case BillableLegsColumn.WsTotalBridge:
					return entityData.WsTotalBridge != _originalData.WsTotalBridge;
					case BillableLegsColumn.WsTotalLd:
					return entityData.WsTotalLd != _originalData.WsTotalLd;
					case BillableLegsColumn.WsTotal:
					return entityData.WsTotal != _originalData.WsTotal;
					case BillableLegsColumn.WsLocalTaxRate:
					return entityData.WsLocalTaxRate != _originalData.WsLocalTaxRate;
					case BillableLegsColumn.WsFederalTaxRate:
					return entityData.WsFederalTaxRate != _originalData.WsFederalTaxRate;
					case BillableLegsColumn.WsLocalTax:
					return entityData.WsLocalTax != _originalData.WsLocalTax;
					case BillableLegsColumn.WsFederalTax:
					return entityData.WsFederalTax != _originalData.WsFederalTax;
					case BillableLegsColumn.WsTotalTax:
					return entityData.WsTotalTax != _originalData.WsTotalTax;
					case BillableLegsColumn.BillingStatus:
					return entityData.BillingStatus != _originalData.BillingStatus;
					case BillableLegsColumn.BilledDate:
					return entityData.BilledDate != _originalData.BilledDate;
					case BillableLegsColumn.ProcessedDate:
					return entityData.ProcessedDate != _originalData.ProcessedDate;
					case BillableLegsColumn.RatedToZero:
					return entityData.RatedToZero != _originalData.RatedToZero;
					case BillableLegsColumn.ProductName:
					return entityData.ProductName != _originalData.ProductName;
					case BillableLegsColumn.ProductNameAlt:
					return entityData.ProductNameAlt != _originalData.ProductNameAlt;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.ConferenceId != _originalData.ConferenceId;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.ModeratorCode != _originalData.ModeratorCode;
			result = result || entityData.PassCode != _originalData.PassCode;
			result = result || entityData.ModeratorName != _originalData.ModeratorName;
			result = result || entityData.Moderator != _originalData.Moderator;
			result = result || entityData.ExternalCustomerNumber != _originalData.ExternalCustomerNumber;
			result = result || entityData.ExternalModeratorNumber != _originalData.ExternalModeratorNumber;
			result = result || entityData.ReferenceNumber != _originalData.ReferenceNumber;
			result = result || entityData.StartTime != _originalData.StartTime;
			result = result || entityData.EndTime != _originalData.EndTime;
			result = result || entityData.ElapsedTime != _originalData.ElapsedTime;
			result = result || entityData.BridgeId != _originalData.BridgeId;
			result = result || entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
			result = result || entityData.AuxiliaryConferenceId != _originalData.AuxiliaryConferenceId;
			result = result || entityData.Dnis != _originalData.Dnis;
			result = result || entityData.DialNumber != _originalData.DialNumber;
			result = result || entityData.Ani != _originalData.Ani;
			result = result || entityData.ParticipantName != _originalData.ParticipantName;
			result = result || entityData.Destination != _originalData.Destination;
			result = result || entityData.AccessTypeId != _originalData.AccessTypeId;
			result = result || entityData.ConnectProductRateId != _originalData.ConnectProductRateId;
			result = result || entityData.BridgeProductRateId != _originalData.BridgeProductRateId;
			result = result || entityData.LdProductRateId != _originalData.LdProductRateId;
			result = result || entityData.ProductRateTaxableValue != _originalData.ProductRateTaxableValue;
			result = result || entityData.CustomerTaxableValue != _originalData.CustomerTaxableValue;
			result = result || entityData.WsTaxableValue != _originalData.WsTaxableValue;
			result = result || entityData.RetailConnectCharge != _originalData.RetailConnectCharge;
			result = result || entityData.RetailBridgeRate != _originalData.RetailBridgeRate;
			result = result || entityData.RetailLdRate != _originalData.RetailLdRate;
			result = result || entityData.RetailCurrency != _originalData.RetailCurrency;
			result = result || entityData.RetailBillingInterval != _originalData.RetailBillingInterval;
			result = result || entityData.RetailTotalConnectCharge != _originalData.RetailTotalConnectCharge;
			result = result || entityData.RetailTotalBridge != _originalData.RetailTotalBridge;
			result = result || entityData.RetailTotalLd != _originalData.RetailTotalLd;
			result = result || entityData.RetailTotal != _originalData.RetailTotal;
			result = result || entityData.RetailLocalTaxRate != _originalData.RetailLocalTaxRate;
			result = result || entityData.RetailFederalTaxRate != _originalData.RetailFederalTaxRate;
			result = result || entityData.RetailLocalTax != _originalData.RetailLocalTax;
			result = result || entityData.RetailFederalTax != _originalData.RetailFederalTax;
			result = result || entityData.RetailTotalTax != _originalData.RetailTotalTax;
			result = result || entityData.WsConnectCharge != _originalData.WsConnectCharge;
			result = result || entityData.WsBridgeRate != _originalData.WsBridgeRate;
			result = result || entityData.WsldRate != _originalData.WsldRate;
			result = result || entityData.WsCurrency != _originalData.WsCurrency;
			result = result || entityData.WsBillingInterval != _originalData.WsBillingInterval;
			result = result || entityData.WsTotalConnectCharge != _originalData.WsTotalConnectCharge;
			result = result || entityData.WsTotalBridge != _originalData.WsTotalBridge;
			result = result || entityData.WsTotalLd != _originalData.WsTotalLd;
			result = result || entityData.WsTotal != _originalData.WsTotal;
			result = result || entityData.WsLocalTaxRate != _originalData.WsLocalTaxRate;
			result = result || entityData.WsFederalTaxRate != _originalData.WsFederalTaxRate;
			result = result || entityData.WsLocalTax != _originalData.WsLocalTax;
			result = result || entityData.WsFederalTax != _originalData.WsFederalTax;
			result = result || entityData.WsTotalTax != _originalData.WsTotalTax;
			result = result || entityData.BillingStatus != _originalData.BillingStatus;
			result = result || entityData.BilledDate != _originalData.BilledDate;
			result = result || entityData.ProcessedDate != _originalData.ProcessedDate;
			result = result || entityData.RatedToZero != _originalData.RatedToZero;
			result = result || entityData.ProductName != _originalData.ProductName;
			result = result || entityData.ProductNameAlt != _originalData.ProductNameAlt;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="BillableLegsBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is BillableLegsBase)
				return Equals(this, (BillableLegsBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="BillableLegsBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.ConferenceId.GetHashCode() ^ 
					this.ModeratorId.GetHashCode() ^ 
					((this.WholesalerId == null) ? string.Empty : this.WholesalerId.ToString()).GetHashCode() ^ 
					this.ModeratorCode.GetHashCode() ^ 
					this.PassCode.GetHashCode() ^ 
					((this.ModeratorName == null) ? string.Empty : this.ModeratorName.ToString()).GetHashCode() ^ 
					this.Moderator.GetHashCode() ^ 
					((this.ExternalCustomerNumber == null) ? string.Empty : this.ExternalCustomerNumber.ToString()).GetHashCode() ^ 
					((this.ExternalModeratorNumber == null) ? string.Empty : this.ExternalModeratorNumber.ToString()).GetHashCode() ^ 
					((this.ReferenceNumber == null) ? string.Empty : this.ReferenceNumber.ToString()).GetHashCode() ^ 
					this.StartTime.GetHashCode() ^ 
					this.EndTime.GetHashCode() ^ 
					this.ElapsedTime.GetHashCode() ^ 
					this.BridgeId.GetHashCode() ^ 
					((this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString()).GetHashCode() ^ 
					((this.AuxiliaryConferenceId == null) ? string.Empty : this.AuxiliaryConferenceId.ToString()).GetHashCode() ^ 
					((this.Dnis == null) ? string.Empty : this.Dnis.ToString()).GetHashCode() ^ 
					((this.DialNumber == null) ? string.Empty : this.DialNumber.ToString()).GetHashCode() ^ 
					((this.Ani == null) ? string.Empty : this.Ani.ToString()).GetHashCode() ^ 
					((this.ParticipantName == null) ? string.Empty : this.ParticipantName.ToString()).GetHashCode() ^ 
					((this.Destination == null) ? string.Empty : this.Destination.ToString()).GetHashCode() ^ 
					this.AccessTypeId.GetHashCode() ^ 
					this.ConnectProductRateId.GetHashCode() ^ 
					this.BridgeProductRateId.GetHashCode() ^ 
					this.LdProductRateId.GetHashCode() ^ 
					this.ProductRateTaxableValue.GetHashCode() ^ 
					this.CustomerTaxableValue.GetHashCode() ^ 
					this.WsTaxableValue.GetHashCode() ^ 
					((this.RetailConnectCharge == null) ? string.Empty : this.RetailConnectCharge.ToString()).GetHashCode() ^ 
					((this.RetailBridgeRate == null) ? string.Empty : this.RetailBridgeRate.ToString()).GetHashCode() ^ 
					((this.RetailLdRate == null) ? string.Empty : this.RetailLdRate.ToString()).GetHashCode() ^ 
					((this.RetailCurrency == null) ? string.Empty : this.RetailCurrency.ToString()).GetHashCode() ^ 
					this.RetailBillingInterval.GetHashCode() ^ 
					((this.RetailTotalConnectCharge == null) ? string.Empty : this.RetailTotalConnectCharge.ToString()).GetHashCode() ^ 
					((this.RetailTotalBridge == null) ? string.Empty : this.RetailTotalBridge.ToString()).GetHashCode() ^ 
					((this.RetailTotalLd == null) ? string.Empty : this.RetailTotalLd.ToString()).GetHashCode() ^ 
					((this.RetailTotal == null) ? string.Empty : this.RetailTotal.ToString()).GetHashCode() ^ 
					((this.RetailLocalTaxRate == null) ? string.Empty : this.RetailLocalTaxRate.ToString()).GetHashCode() ^ 
					((this.RetailFederalTaxRate == null) ? string.Empty : this.RetailFederalTaxRate.ToString()).GetHashCode() ^ 
					((this.RetailLocalTax == null) ? string.Empty : this.RetailLocalTax.ToString()).GetHashCode() ^ 
					((this.RetailFederalTax == null) ? string.Empty : this.RetailFederalTax.ToString()).GetHashCode() ^ 
					((this.RetailTotalTax == null) ? string.Empty : this.RetailTotalTax.ToString()).GetHashCode() ^ 
					((this.WsConnectCharge == null) ? string.Empty : this.WsConnectCharge.ToString()).GetHashCode() ^ 
					((this.WsBridgeRate == null) ? string.Empty : this.WsBridgeRate.ToString()).GetHashCode() ^ 
					((this.WsldRate == null) ? string.Empty : this.WsldRate.ToString()).GetHashCode() ^ 
					((this.WsCurrency == null) ? string.Empty : this.WsCurrency.ToString()).GetHashCode() ^ 
					this.WsBillingInterval.GetHashCode() ^ 
					((this.WsTotalConnectCharge == null) ? string.Empty : this.WsTotalConnectCharge.ToString()).GetHashCode() ^ 
					((this.WsTotalBridge == null) ? string.Empty : this.WsTotalBridge.ToString()).GetHashCode() ^ 
					((this.WsTotalLd == null) ? string.Empty : this.WsTotalLd.ToString()).GetHashCode() ^ 
					((this.WsTotal == null) ? string.Empty : this.WsTotal.ToString()).GetHashCode() ^ 
					((this.WsLocalTaxRate == null) ? string.Empty : this.WsLocalTaxRate.ToString()).GetHashCode() ^ 
					((this.WsFederalTaxRate == null) ? string.Empty : this.WsFederalTaxRate.ToString()).GetHashCode() ^ 
					((this.WsLocalTax == null) ? string.Empty : this.WsLocalTax.ToString()).GetHashCode() ^ 
					((this.WsFederalTax == null) ? string.Empty : this.WsFederalTax.ToString()).GetHashCode() ^ 
					((this.WsTotalTax == null) ? string.Empty : this.WsTotalTax.ToString()).GetHashCode() ^ 
					((this.BillingStatus == null) ? string.Empty : this.BillingStatus.ToString()).GetHashCode() ^ 
					((this.BilledDate == null) ? string.Empty : this.BilledDate.ToString()).GetHashCode() ^ 
					((this.ProcessedDate == null) ? string.Empty : this.ProcessedDate.ToString()).GetHashCode() ^ 
					((this.RatedToZero == null) ? string.Empty : this.RatedToZero.ToString()).GetHashCode() ^ 
					((this.ProductName == null) ? string.Empty : this.ProductName.ToString()).GetHashCode() ^ 
					((this.ProductNameAlt == null) ? string.Empty : this.ProductNameAlt.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="BillableLegsBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(BillableLegsBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="BillableLegsBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="BillableLegsBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="BillableLegsBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(BillableLegsBase Object1, BillableLegsBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.ConferenceId != Object2.ConferenceId)
				equal = false;
			if (Object1.ModeratorId != Object2.ModeratorId)
				equal = false;
			if ( Object1.WholesalerId != null && Object2.WholesalerId != null )
			{
				if (Object1.WholesalerId != Object2.WholesalerId)
					equal = false;
			}
			else if (Object1.WholesalerId == null ^ Object2.WholesalerId == null )
			{
				equal = false;
			}
			if (Object1.ModeratorCode != Object2.ModeratorCode)
				equal = false;
			if (Object1.PassCode != Object2.PassCode)
				equal = false;
			if ( Object1.ModeratorName != null && Object2.ModeratorName != null )
			{
				if (Object1.ModeratorName != Object2.ModeratorName)
					equal = false;
			}
			else if (Object1.ModeratorName == null ^ Object2.ModeratorName == null )
			{
				equal = false;
			}
			if (Object1.Moderator != Object2.Moderator)
				equal = false;
			if ( Object1.ExternalCustomerNumber != null && Object2.ExternalCustomerNumber != null )
			{
				if (Object1.ExternalCustomerNumber != Object2.ExternalCustomerNumber)
					equal = false;
			}
			else if (Object1.ExternalCustomerNumber == null ^ Object2.ExternalCustomerNumber == null )
			{
				equal = false;
			}
			if ( Object1.ExternalModeratorNumber != null && Object2.ExternalModeratorNumber != null )
			{
				if (Object1.ExternalModeratorNumber != Object2.ExternalModeratorNumber)
					equal = false;
			}
			else if (Object1.ExternalModeratorNumber == null ^ Object2.ExternalModeratorNumber == null )
			{
				equal = false;
			}
			if ( Object1.ReferenceNumber != null && Object2.ReferenceNumber != null )
			{
				if (Object1.ReferenceNumber != Object2.ReferenceNumber)
					equal = false;
			}
			else if (Object1.ReferenceNumber == null ^ Object2.ReferenceNumber == null )
			{
				equal = false;
			}
			if (Object1.StartTime != Object2.StartTime)
				equal = false;
			if (Object1.EndTime != Object2.EndTime)
				equal = false;
			if (Object1.ElapsedTime != Object2.ElapsedTime)
				equal = false;
			if (Object1.BridgeId != Object2.BridgeId)
				equal = false;
			if ( Object1.UniqueConferenceId != null && Object2.UniqueConferenceId != null )
			{
				if (Object1.UniqueConferenceId != Object2.UniqueConferenceId)
					equal = false;
			}
			else if (Object1.UniqueConferenceId == null ^ Object2.UniqueConferenceId == null )
			{
				equal = false;
			}
			if ( Object1.AuxiliaryConferenceId != null && Object2.AuxiliaryConferenceId != null )
			{
				if (Object1.AuxiliaryConferenceId != Object2.AuxiliaryConferenceId)
					equal = false;
			}
			else if (Object1.AuxiliaryConferenceId == null ^ Object2.AuxiliaryConferenceId == null )
			{
				equal = false;
			}
			if ( Object1.Dnis != null && Object2.Dnis != null )
			{
				if (Object1.Dnis != Object2.Dnis)
					equal = false;
			}
			else if (Object1.Dnis == null ^ Object2.Dnis == null )
			{
				equal = false;
			}
			if ( Object1.DialNumber != null && Object2.DialNumber != null )
			{
				if (Object1.DialNumber != Object2.DialNumber)
					equal = false;
			}
			else if (Object1.DialNumber == null ^ Object2.DialNumber == null )
			{
				equal = false;
			}
			if ( Object1.Ani != null && Object2.Ani != null )
			{
				if (Object1.Ani != Object2.Ani)
					equal = false;
			}
			else if (Object1.Ani == null ^ Object2.Ani == null )
			{
				equal = false;
			}
			if ( Object1.ParticipantName != null && Object2.ParticipantName != null )
			{
				if (Object1.ParticipantName != Object2.ParticipantName)
					equal = false;
			}
			else if (Object1.ParticipantName == null ^ Object2.ParticipantName == null )
			{
				equal = false;
			}
			if ( Object1.Destination != null && Object2.Destination != null )
			{
				if (Object1.Destination != Object2.Destination)
					equal = false;
			}
			else if (Object1.Destination == null ^ Object2.Destination == null )
			{
				equal = false;
			}
			if (Object1.AccessTypeId != Object2.AccessTypeId)
				equal = false;
			if (Object1.ConnectProductRateId != Object2.ConnectProductRateId)
				equal = false;
			if (Object1.BridgeProductRateId != Object2.BridgeProductRateId)
				equal = false;
			if (Object1.LdProductRateId != Object2.LdProductRateId)
				equal = false;
			if (Object1.ProductRateTaxableValue != Object2.ProductRateTaxableValue)
				equal = false;
			if (Object1.CustomerTaxableValue != Object2.CustomerTaxableValue)
				equal = false;
			if (Object1.WsTaxableValue != Object2.WsTaxableValue)
				equal = false;
			if ( Object1.RetailConnectCharge != null && Object2.RetailConnectCharge != null )
			{
				if (Object1.RetailConnectCharge != Object2.RetailConnectCharge)
					equal = false;
			}
			else if (Object1.RetailConnectCharge == null ^ Object2.RetailConnectCharge == null )
			{
				equal = false;
			}
			if ( Object1.RetailBridgeRate != null && Object2.RetailBridgeRate != null )
			{
				if (Object1.RetailBridgeRate != Object2.RetailBridgeRate)
					equal = false;
			}
			else if (Object1.RetailBridgeRate == null ^ Object2.RetailBridgeRate == null )
			{
				equal = false;
			}
			if ( Object1.RetailLdRate != null && Object2.RetailLdRate != null )
			{
				if (Object1.RetailLdRate != Object2.RetailLdRate)
					equal = false;
			}
			else if (Object1.RetailLdRate == null ^ Object2.RetailLdRate == null )
			{
				equal = false;
			}
			if ( Object1.RetailCurrency != null && Object2.RetailCurrency != null )
			{
				if (Object1.RetailCurrency != Object2.RetailCurrency)
					equal = false;
			}
			else if (Object1.RetailCurrency == null ^ Object2.RetailCurrency == null )
			{
				equal = false;
			}
			if (Object1.RetailBillingInterval != Object2.RetailBillingInterval)
				equal = false;
			if ( Object1.RetailTotalConnectCharge != null && Object2.RetailTotalConnectCharge != null )
			{
				if (Object1.RetailTotalConnectCharge != Object2.RetailTotalConnectCharge)
					equal = false;
			}
			else if (Object1.RetailTotalConnectCharge == null ^ Object2.RetailTotalConnectCharge == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotalBridge != null && Object2.RetailTotalBridge != null )
			{
				if (Object1.RetailTotalBridge != Object2.RetailTotalBridge)
					equal = false;
			}
			else if (Object1.RetailTotalBridge == null ^ Object2.RetailTotalBridge == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotalLd != null && Object2.RetailTotalLd != null )
			{
				if (Object1.RetailTotalLd != Object2.RetailTotalLd)
					equal = false;
			}
			else if (Object1.RetailTotalLd == null ^ Object2.RetailTotalLd == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotal != null && Object2.RetailTotal != null )
			{
				if (Object1.RetailTotal != Object2.RetailTotal)
					equal = false;
			}
			else if (Object1.RetailTotal == null ^ Object2.RetailTotal == null )
			{
				equal = false;
			}
			if ( Object1.RetailLocalTaxRate != null && Object2.RetailLocalTaxRate != null )
			{
				if (Object1.RetailLocalTaxRate != Object2.RetailLocalTaxRate)
					equal = false;
			}
			else if (Object1.RetailLocalTaxRate == null ^ Object2.RetailLocalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.RetailFederalTaxRate != null && Object2.RetailFederalTaxRate != null )
			{
				if (Object1.RetailFederalTaxRate != Object2.RetailFederalTaxRate)
					equal = false;
			}
			else if (Object1.RetailFederalTaxRate == null ^ Object2.RetailFederalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.RetailLocalTax != null && Object2.RetailLocalTax != null )
			{
				if (Object1.RetailLocalTax != Object2.RetailLocalTax)
					equal = false;
			}
			else if (Object1.RetailLocalTax == null ^ Object2.RetailLocalTax == null )
			{
				equal = false;
			}
			if ( Object1.RetailFederalTax != null && Object2.RetailFederalTax != null )
			{
				if (Object1.RetailFederalTax != Object2.RetailFederalTax)
					equal = false;
			}
			else if (Object1.RetailFederalTax == null ^ Object2.RetailFederalTax == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotalTax != null && Object2.RetailTotalTax != null )
			{
				if (Object1.RetailTotalTax != Object2.RetailTotalTax)
					equal = false;
			}
			else if (Object1.RetailTotalTax == null ^ Object2.RetailTotalTax == null )
			{
				equal = false;
			}
			if ( Object1.WsConnectCharge != null && Object2.WsConnectCharge != null )
			{
				if (Object1.WsConnectCharge != Object2.WsConnectCharge)
					equal = false;
			}
			else if (Object1.WsConnectCharge == null ^ Object2.WsConnectCharge == null )
			{
				equal = false;
			}
			if ( Object1.WsBridgeRate != null && Object2.WsBridgeRate != null )
			{
				if (Object1.WsBridgeRate != Object2.WsBridgeRate)
					equal = false;
			}
			else if (Object1.WsBridgeRate == null ^ Object2.WsBridgeRate == null )
			{
				equal = false;
			}
			if ( Object1.WsldRate != null && Object2.WsldRate != null )
			{
				if (Object1.WsldRate != Object2.WsldRate)
					equal = false;
			}
			else if (Object1.WsldRate == null ^ Object2.WsldRate == null )
			{
				equal = false;
			}
			if ( Object1.WsCurrency != null && Object2.WsCurrency != null )
			{
				if (Object1.WsCurrency != Object2.WsCurrency)
					equal = false;
			}
			else if (Object1.WsCurrency == null ^ Object2.WsCurrency == null )
			{
				equal = false;
			}
			if (Object1.WsBillingInterval != Object2.WsBillingInterval)
				equal = false;
			if ( Object1.WsTotalConnectCharge != null && Object2.WsTotalConnectCharge != null )
			{
				if (Object1.WsTotalConnectCharge != Object2.WsTotalConnectCharge)
					equal = false;
			}
			else if (Object1.WsTotalConnectCharge == null ^ Object2.WsTotalConnectCharge == null )
			{
				equal = false;
			}
			if ( Object1.WsTotalBridge != null && Object2.WsTotalBridge != null )
			{
				if (Object1.WsTotalBridge != Object2.WsTotalBridge)
					equal = false;
			}
			else if (Object1.WsTotalBridge == null ^ Object2.WsTotalBridge == null )
			{
				equal = false;
			}
			if ( Object1.WsTotalLd != null && Object2.WsTotalLd != null )
			{
				if (Object1.WsTotalLd != Object2.WsTotalLd)
					equal = false;
			}
			else if (Object1.WsTotalLd == null ^ Object2.WsTotalLd == null )
			{
				equal = false;
			}
			if ( Object1.WsTotal != null && Object2.WsTotal != null )
			{
				if (Object1.WsTotal != Object2.WsTotal)
					equal = false;
			}
			else if (Object1.WsTotal == null ^ Object2.WsTotal == null )
			{
				equal = false;
			}
			if ( Object1.WsLocalTaxRate != null && Object2.WsLocalTaxRate != null )
			{
				if (Object1.WsLocalTaxRate != Object2.WsLocalTaxRate)
					equal = false;
			}
			else if (Object1.WsLocalTaxRate == null ^ Object2.WsLocalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.WsFederalTaxRate != null && Object2.WsFederalTaxRate != null )
			{
				if (Object1.WsFederalTaxRate != Object2.WsFederalTaxRate)
					equal = false;
			}
			else if (Object1.WsFederalTaxRate == null ^ Object2.WsFederalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.WsLocalTax != null && Object2.WsLocalTax != null )
			{
				if (Object1.WsLocalTax != Object2.WsLocalTax)
					equal = false;
			}
			else if (Object1.WsLocalTax == null ^ Object2.WsLocalTax == null )
			{
				equal = false;
			}
			if ( Object1.WsFederalTax != null && Object2.WsFederalTax != null )
			{
				if (Object1.WsFederalTax != Object2.WsFederalTax)
					equal = false;
			}
			else if (Object1.WsFederalTax == null ^ Object2.WsFederalTax == null )
			{
				equal = false;
			}
			if ( Object1.WsTotalTax != null && Object2.WsTotalTax != null )
			{
				if (Object1.WsTotalTax != Object2.WsTotalTax)
					equal = false;
			}
			else if (Object1.WsTotalTax == null ^ Object2.WsTotalTax == null )
			{
				equal = false;
			}
			if ( Object1.BillingStatus != null && Object2.BillingStatus != null )
			{
				if (Object1.BillingStatus != Object2.BillingStatus)
					equal = false;
			}
			else if (Object1.BillingStatus == null ^ Object2.BillingStatus == null )
			{
				equal = false;
			}
			if ( Object1.BilledDate != null && Object2.BilledDate != null )
			{
				if (Object1.BilledDate != Object2.BilledDate)
					equal = false;
			}
			else if (Object1.BilledDate == null ^ Object2.BilledDate == null )
			{
				equal = false;
			}
			if ( Object1.ProcessedDate != null && Object2.ProcessedDate != null )
			{
				if (Object1.ProcessedDate != Object2.ProcessedDate)
					equal = false;
			}
			else if (Object1.ProcessedDate == null ^ Object2.ProcessedDate == null )
			{
				equal = false;
			}
			if ( Object1.RatedToZero != null && Object2.RatedToZero != null )
			{
				if (Object1.RatedToZero != Object2.RatedToZero)
					equal = false;
			}
			else if (Object1.RatedToZero == null ^ Object2.RatedToZero == null )
			{
				equal = false;
			}
			if ( Object1.ProductName != null && Object2.ProductName != null )
			{
				if (Object1.ProductName != Object2.ProductName)
					equal = false;
			}
			else if (Object1.ProductName == null ^ Object2.ProductName == null )
			{
				equal = false;
			}
			if ( Object1.ProductNameAlt != null && Object2.ProductNameAlt != null )
			{
				if (Object1.ProductNameAlt != Object2.ProductNameAlt)
					equal = false;
			}
			else if (Object1.ProductNameAlt == null ^ Object2.ProductNameAlt == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((BillableLegsBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static BillableLegsComparer GetComparer()
        {
            return new BillableLegsComparer();
        }
        */

        // Comparer delegates back to BillableLegs
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(BillableLegs rhs, BillableLegsColumn which)
        {
            switch (which)
            {
            	
            	
            	case BillableLegsColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ConferenceId:
            		return this.ConferenceId.CompareTo(rhs.ConferenceId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ModeratorId:
            		return this.ModeratorId.CompareTo(rhs.ModeratorId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ModeratorCode:
            		return this.ModeratorCode.CompareTo(rhs.ModeratorCode);
            		
            		                 
            	
            	
            	case BillableLegsColumn.PassCode:
            		return this.PassCode.CompareTo(rhs.PassCode);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ModeratorName:
            		return this.ModeratorName.CompareTo(rhs.ModeratorName);
            		
            		                 
            	
            	
            	case BillableLegsColumn.Moderator:
            		return this.Moderator.CompareTo(rhs.Moderator);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ExternalCustomerNumber:
            		return this.ExternalCustomerNumber.CompareTo(rhs.ExternalCustomerNumber);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ExternalModeratorNumber:
            		return this.ExternalModeratorNumber.CompareTo(rhs.ExternalModeratorNumber);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ReferenceNumber:
            		return this.ReferenceNumber.CompareTo(rhs.ReferenceNumber);
            		
            		                 
            	
            	
            	case BillableLegsColumn.StartTime:
            		return this.StartTime.CompareTo(rhs.StartTime);
            		
            		                 
            	
            	
            	case BillableLegsColumn.EndTime:
            		return this.EndTime.CompareTo(rhs.EndTime);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ElapsedTime:
            		return this.ElapsedTime.CompareTo(rhs.ElapsedTime);
            		
            		                 
            	
            	
            	case BillableLegsColumn.BridgeId:
            		return this.BridgeId.CompareTo(rhs.BridgeId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.UniqueConferenceId:
            		return this.UniqueConferenceId.CompareTo(rhs.UniqueConferenceId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.AuxiliaryConferenceId:
            		return this.AuxiliaryConferenceId.CompareTo(rhs.AuxiliaryConferenceId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.Dnis:
            		return this.Dnis.CompareTo(rhs.Dnis);
            		
            		                 
            	
            	
            	case BillableLegsColumn.DialNumber:
            		return this.DialNumber.CompareTo(rhs.DialNumber);
            		
            		                 
            	
            	
            	case BillableLegsColumn.Ani:
            		return this.Ani.CompareTo(rhs.Ani);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ParticipantName:
            		return this.ParticipantName.CompareTo(rhs.ParticipantName);
            		
            		                 
            	
            	
            	case BillableLegsColumn.Destination:
            		return this.Destination.CompareTo(rhs.Destination);
            		
            		                 
            	
            	
            	case BillableLegsColumn.AccessTypeId:
            		return this.AccessTypeId.CompareTo(rhs.AccessTypeId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ConnectProductRateId:
            		return this.ConnectProductRateId.CompareTo(rhs.ConnectProductRateId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.BridgeProductRateId:
            		return this.BridgeProductRateId.CompareTo(rhs.BridgeProductRateId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.LdProductRateId:
            		return this.LdProductRateId.CompareTo(rhs.LdProductRateId);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ProductRateTaxableValue:
            		return this.ProductRateTaxableValue.CompareTo(rhs.ProductRateTaxableValue);
            		
            		                 
            	
            	
            	case BillableLegsColumn.CustomerTaxableValue:
            		return this.CustomerTaxableValue.CompareTo(rhs.CustomerTaxableValue);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsTaxableValue:
            		return this.WsTaxableValue.CompareTo(rhs.WsTaxableValue);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailConnectCharge:
            		return this.RetailConnectCharge.Value.CompareTo(rhs.RetailConnectCharge.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailBridgeRate:
            		return this.RetailBridgeRate.Value.CompareTo(rhs.RetailBridgeRate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailLdRate:
            		return this.RetailLdRate.Value.CompareTo(rhs.RetailLdRate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailCurrency:
            		return this.RetailCurrency.CompareTo(rhs.RetailCurrency);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailBillingInterval:
            		return this.RetailBillingInterval.CompareTo(rhs.RetailBillingInterval);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailTotalConnectCharge:
            		return this.RetailTotalConnectCharge.Value.CompareTo(rhs.RetailTotalConnectCharge.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailTotalBridge:
            		return this.RetailTotalBridge.Value.CompareTo(rhs.RetailTotalBridge.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailTotalLd:
            		return this.RetailTotalLd.Value.CompareTo(rhs.RetailTotalLd.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailTotal:
            		return this.RetailTotal.Value.CompareTo(rhs.RetailTotal.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailLocalTaxRate:
            		return this.RetailLocalTaxRate.Value.CompareTo(rhs.RetailLocalTaxRate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailFederalTaxRate:
            		return this.RetailFederalTaxRate.Value.CompareTo(rhs.RetailFederalTaxRate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailLocalTax:
            		return this.RetailLocalTax.Value.CompareTo(rhs.RetailLocalTax.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailFederalTax:
            		return this.RetailFederalTax.Value.CompareTo(rhs.RetailFederalTax.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RetailTotalTax:
            		return this.RetailTotalTax.Value.CompareTo(rhs.RetailTotalTax.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsConnectCharge:
            		return this.WsConnectCharge.Value.CompareTo(rhs.WsConnectCharge.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsBridgeRate:
            		return this.WsBridgeRate.Value.CompareTo(rhs.WsBridgeRate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsldRate:
            		return this.WsldRate.Value.CompareTo(rhs.WsldRate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsCurrency:
            		return this.WsCurrency.CompareTo(rhs.WsCurrency);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsBillingInterval:
            		return this.WsBillingInterval.CompareTo(rhs.WsBillingInterval);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsTotalConnectCharge:
            		return this.WsTotalConnectCharge.Value.CompareTo(rhs.WsTotalConnectCharge.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsTotalBridge:
            		return this.WsTotalBridge.Value.CompareTo(rhs.WsTotalBridge.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsTotalLd:
            		return this.WsTotalLd.Value.CompareTo(rhs.WsTotalLd.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsTotal:
            		return this.WsTotal.Value.CompareTo(rhs.WsTotal.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsLocalTaxRate:
            		return this.WsLocalTaxRate.Value.CompareTo(rhs.WsLocalTaxRate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsFederalTaxRate:
            		return this.WsFederalTaxRate.Value.CompareTo(rhs.WsFederalTaxRate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsLocalTax:
            		return this.WsLocalTax.Value.CompareTo(rhs.WsLocalTax.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsFederalTax:
            		return this.WsFederalTax.Value.CompareTo(rhs.WsFederalTax.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.WsTotalTax:
            		return this.WsTotalTax.Value.CompareTo(rhs.WsTotalTax.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.BillingStatus:
            		return this.BillingStatus.Value.CompareTo(rhs.BillingStatus.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.BilledDate:
            		return this.BilledDate.Value.CompareTo(rhs.BilledDate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ProcessedDate:
            		return this.ProcessedDate.Value.CompareTo(rhs.ProcessedDate.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.RatedToZero:
            		return this.RatedToZero.Value.CompareTo(rhs.RatedToZero.Value);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ProductName:
            		return this.ProductName.CompareTo(rhs.ProductName);
            		
            		                 
            	
            	
            	case BillableLegsColumn.ProductNameAlt:
            		return this.ProductNameAlt.CompareTo(rhs.ProductNameAlt);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<BillableLegsKey> Members
		
		// member variable for the EntityId property
		private BillableLegsKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual BillableLegsKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new BillableLegsKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("BillableLegs")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{64}{63}- Id: {0}{63}- ConferenceId: {1}{63}- ModeratorId: {2}{63}- WholesalerId: {3}{63}- ModeratorCode: {4}{63}- PassCode: {5}{63}- ModeratorName: {6}{63}- Moderator: {7}{63}- ExternalCustomerNumber: {8}{63}- ExternalModeratorNumber: {9}{63}- ReferenceNumber: {10}{63}- StartTime: {11}{63}- EndTime: {12}{63}- ElapsedTime: {13}{63}- BridgeId: {14}{63}- UniqueConferenceId: {15}{63}- AuxiliaryConferenceId: {16}{63}- Dnis: {17}{63}- DialNumber: {18}{63}- Ani: {19}{63}- ParticipantName: {20}{63}- Destination: {21}{63}- AccessTypeId: {22}{63}- ConnectProductRateId: {23}{63}- BridgeProductRateId: {24}{63}- LdProductRateId: {25}{63}- ProductRateTaxableValue: {26}{63}- CustomerTaxableValue: {27}{63}- WsTaxableValue: {28}{63}- RetailConnectCharge: {29}{63}- RetailBridgeRate: {30}{63}- RetailLdRate: {31}{63}- RetailCurrency: {32}{63}- RetailBillingInterval: {33}{63}- RetailTotalConnectCharge: {34}{63}- RetailTotalBridge: {35}{63}- RetailTotalLd: {36}{63}- RetailTotal: {37}{63}- RetailLocalTaxRate: {38}{63}- RetailFederalTaxRate: {39}{63}- RetailLocalTax: {40}{63}- RetailFederalTax: {41}{63}- RetailTotalTax: {42}{63}- WsConnectCharge: {43}{63}- WsBridgeRate: {44}{63}- WsldRate: {45}{63}- WsCurrency: {46}{63}- WsBillingInterval: {47}{63}- WsTotalConnectCharge: {48}{63}- WsTotalBridge: {49}{63}- WsTotalLd: {50}{63}- WsTotal: {51}{63}- WsLocalTaxRate: {52}{63}- WsFederalTaxRate: {53}{63}- WsLocalTax: {54}{63}- WsFederalTax: {55}{63}- WsTotalTax: {56}{63}- BillingStatus: {57}{63}- BilledDate: {58}{63}- ProcessedDate: {59}{63}- RatedToZero: {60}{63}- ProductName: {61}{63}- ProductNameAlt: {62}{63}", 
				this.Id,
				this.ConferenceId,
				this.ModeratorId,
				(this.WholesalerId == null) ? string.Empty : this.WholesalerId.ToString(),
				this.ModeratorCode,
				this.PassCode,
				(this.ModeratorName == null) ? string.Empty : this.ModeratorName.ToString(),
				this.Moderator,
				(this.ExternalCustomerNumber == null) ? string.Empty : this.ExternalCustomerNumber.ToString(),
				(this.ExternalModeratorNumber == null) ? string.Empty : this.ExternalModeratorNumber.ToString(),
				(this.ReferenceNumber == null) ? string.Empty : this.ReferenceNumber.ToString(),
				this.StartTime,
				this.EndTime,
				this.ElapsedTime,
				this.BridgeId,
				(this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString(),
				(this.AuxiliaryConferenceId == null) ? string.Empty : this.AuxiliaryConferenceId.ToString(),
				(this.Dnis == null) ? string.Empty : this.Dnis.ToString(),
				(this.DialNumber == null) ? string.Empty : this.DialNumber.ToString(),
				(this.Ani == null) ? string.Empty : this.Ani.ToString(),
				(this.ParticipantName == null) ? string.Empty : this.ParticipantName.ToString(),
				(this.Destination == null) ? string.Empty : this.Destination.ToString(),
				this.AccessTypeId,
				this.ConnectProductRateId,
				this.BridgeProductRateId,
				this.LdProductRateId,
				this.ProductRateTaxableValue,
				this.CustomerTaxableValue,
				this.WsTaxableValue,
				(this.RetailConnectCharge == null) ? string.Empty : this.RetailConnectCharge.ToString(),
				(this.RetailBridgeRate == null) ? string.Empty : this.RetailBridgeRate.ToString(),
				(this.RetailLdRate == null) ? string.Empty : this.RetailLdRate.ToString(),
				(this.RetailCurrency == null) ? string.Empty : this.RetailCurrency.ToString(),
				this.RetailBillingInterval,
				(this.RetailTotalConnectCharge == null) ? string.Empty : this.RetailTotalConnectCharge.ToString(),
				(this.RetailTotalBridge == null) ? string.Empty : this.RetailTotalBridge.ToString(),
				(this.RetailTotalLd == null) ? string.Empty : this.RetailTotalLd.ToString(),
				(this.RetailTotal == null) ? string.Empty : this.RetailTotal.ToString(),
				(this.RetailLocalTaxRate == null) ? string.Empty : this.RetailLocalTaxRate.ToString(),
				(this.RetailFederalTaxRate == null) ? string.Empty : this.RetailFederalTaxRate.ToString(),
				(this.RetailLocalTax == null) ? string.Empty : this.RetailLocalTax.ToString(),
				(this.RetailFederalTax == null) ? string.Empty : this.RetailFederalTax.ToString(),
				(this.RetailTotalTax == null) ? string.Empty : this.RetailTotalTax.ToString(),
				(this.WsConnectCharge == null) ? string.Empty : this.WsConnectCharge.ToString(),
				(this.WsBridgeRate == null) ? string.Empty : this.WsBridgeRate.ToString(),
				(this.WsldRate == null) ? string.Empty : this.WsldRate.ToString(),
				(this.WsCurrency == null) ? string.Empty : this.WsCurrency.ToString(),
				this.WsBillingInterval,
				(this.WsTotalConnectCharge == null) ? string.Empty : this.WsTotalConnectCharge.ToString(),
				(this.WsTotalBridge == null) ? string.Empty : this.WsTotalBridge.ToString(),
				(this.WsTotalLd == null) ? string.Empty : this.WsTotalLd.ToString(),
				(this.WsTotal == null) ? string.Empty : this.WsTotal.ToString(),
				(this.WsLocalTaxRate == null) ? string.Empty : this.WsLocalTaxRate.ToString(),
				(this.WsFederalTaxRate == null) ? string.Empty : this.WsFederalTaxRate.ToString(),
				(this.WsLocalTax == null) ? string.Empty : this.WsLocalTax.ToString(),
				(this.WsFederalTax == null) ? string.Empty : this.WsFederalTax.ToString(),
				(this.WsTotalTax == null) ? string.Empty : this.WsTotalTax.ToString(),
				(this.BillingStatus == null) ? string.Empty : this.BillingStatus.ToString(),
				(this.BilledDate == null) ? string.Empty : this.BilledDate.ToString(),
				(this.ProcessedDate == null) ? string.Empty : this.ProcessedDate.ToString(),
				(this.RatedToZero == null) ? string.Empty : this.RatedToZero.ToString(),
				(this.ProductName == null) ? string.Empty : this.ProductName.ToString(),
				(this.ProductNameAlt == null) ? string.Empty : this.ProductNameAlt.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'BillableLegs' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class BillableLegsEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "BillableLegs"</remarks>
			public System.Guid Id;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Guid OriginalId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ConferenceID : 
		/// </summary>
		public System.String		  ConferenceId = string.Empty;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32		  ModeratorId = (int)0;
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = null;
		
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		public System.String		  ModeratorCode = string.Empty;
		
		/// <summary>
		/// PassCode : 
		/// </summary>
		public System.String		  PassCode = string.Empty;
		
		/// <summary>
		/// ModeratorName : 
		/// </summary>
		public System.String		  ModeratorName = null;
		
		/// <summary>
		/// Moderator : 
		/// </summary>
		public System.Int32		  Moderator = (int)0;
		
		/// <summary>
		/// ExternalCustomerNumber : 
		/// </summary>
		public System.String		  ExternalCustomerNumber = null;
		
		/// <summary>
		/// ExternalModeratorNumber : 
		/// </summary>
		public System.String		  ExternalModeratorNumber = null;
		
		/// <summary>
		/// ReferenceNumber : 
		/// </summary>
		public System.String		  ReferenceNumber = null;
		
		/// <summary>
		/// StartTime : 
		/// </summary>
		public System.DateTime		  StartTime = DateTime.MinValue;
		
		/// <summary>
		/// EndTime : 
		/// </summary>
		public System.DateTime		  EndTime = DateTime.MinValue;
		
		/// <summary>
		/// ElapsedTime : 
		/// </summary>
		public System.Int32		  ElapsedTime = (int)0;
		
		/// <summary>
		/// BridgeID : 
		/// </summary>
		public System.Int16		  BridgeId = (short)0;
		
		/// <summary>
		/// UniqueConferenceID : 
		/// </summary>
		public System.String		  UniqueConferenceId = null;
		
		/// <summary>
		/// AuxiliaryConferenceID : 
		/// </summary>
		public System.String		  AuxiliaryConferenceId = null;
		
		/// <summary>
		/// DNIS : 
		/// </summary>
		public System.String		  Dnis = null;
		
		/// <summary>
		/// DialNumber : 
		/// </summary>
		public System.String		  DialNumber = null;
		
		/// <summary>
		/// ANI : 
		/// </summary>
		public System.String		  Ani = null;
		
		/// <summary>
		/// ParticipantName : 
		/// </summary>
		public System.String		  ParticipantName = null;
		
		/// <summary>
		/// Destination : 
		/// </summary>
		public System.String		  Destination = null;
		
		/// <summary>
		/// AccessTypeID : 
		/// </summary>
		public System.Int32		  AccessTypeId = (int)0;
		
		/// <summary>
		/// ConnectProductRateID : 
		/// </summary>
		public System.Int32		  ConnectProductRateId = (int)0;
		
		/// <summary>
		/// BridgeProductRateID : 
		/// </summary>
		public System.Int32		  BridgeProductRateId = (int)0;
		
		/// <summary>
		/// LDProductRateID : 
		/// </summary>
		public System.Int32		  LdProductRateId = (int)0;
		
		/// <summary>
		/// ProductRateTaxableValue : 
		/// </summary>
		public System.Int32		  ProductRateTaxableValue = (int)0;
		
		/// <summary>
		/// CustomerTaxableValue : 
		/// </summary>
		public System.Int32		  CustomerTaxableValue = (int)0;
		
		/// <summary>
		/// WSTaxableValue : 
		/// </summary>
		public System.Int32		  WsTaxableValue = (int)0;
		
		/// <summary>
		/// RetailConnectCharge : 
		/// </summary>
		public System.Decimal?		  RetailConnectCharge = null;
		
		/// <summary>
		/// RetailBridgeRate : 
		/// </summary>
		public System.Decimal?		  RetailBridgeRate = null;
		
		/// <summary>
		/// RetailLDRate : 
		/// </summary>
		public System.Decimal?		  RetailLdRate = null;
		
		/// <summary>
		/// RetailCurrency : 
		/// </summary>
		public System.String		  RetailCurrency = null;
		
		/// <summary>
		/// RetailBillingInterval : 
		/// </summary>
		public System.Int32		  RetailBillingInterval = (int)0;
		
		/// <summary>
		/// RetailTotalConnectCharge : 
		/// </summary>
		public System.Decimal?		  RetailTotalConnectCharge = null;
		
		/// <summary>
		/// RetailTotalBridge : 
		/// </summary>
		public System.Decimal?		  RetailTotalBridge = null;
		
		/// <summary>
		/// RetailTotalLD : 
		/// </summary>
		public System.Decimal?		  RetailTotalLd = null;
		
		/// <summary>
		/// RetailTotal : 
		/// </summary>
		public System.Decimal?		  RetailTotal = null;
		
		/// <summary>
		/// RetailLocalTaxRate : 
		/// </summary>
		public System.Decimal?		  RetailLocalTaxRate = null;
		
		/// <summary>
		/// RetailFederalTaxRate : 
		/// </summary>
		public System.Decimal?		  RetailFederalTaxRate = null;
		
		/// <summary>
		/// RetailLocalTax : 
		/// </summary>
		public System.Decimal?		  RetailLocalTax = null;
		
		/// <summary>
		/// RetailFederalTax : 
		/// </summary>
		public System.Decimal?		  RetailFederalTax = null;
		
		/// <summary>
		/// RetailTotalTax : 
		/// </summary>
		public System.Decimal?		  RetailTotalTax = null;
		
		/// <summary>
		/// WSConnectCharge : 
		/// </summary>
		public System.Decimal?		  WsConnectCharge = null;
		
		/// <summary>
		/// WSBridgeRate : 
		/// </summary>
		public System.Decimal?		  WsBridgeRate = null;
		
		/// <summary>
		/// WSLDRate : 
		/// </summary>
		public System.Decimal?		  WsldRate = null;
		
		/// <summary>
		/// WSCurrency : 
		/// </summary>
		public System.String		  WsCurrency = null;
		
		/// <summary>
		/// WSBillingInterval : 
		/// </summary>
		public System.Int32		  WsBillingInterval = (int)0;
		
		/// <summary>
		/// WSTotalConnectCharge : 
		/// </summary>
		public System.Decimal?		  WsTotalConnectCharge = null;
		
		/// <summary>
		/// WSTotalBridge : 
		/// </summary>
		public System.Decimal?		  WsTotalBridge = null;
		
		/// <summary>
		/// WSTotalLD : 
		/// </summary>
		public System.Decimal?		  WsTotalLd = null;
		
		/// <summary>
		/// WSTotal : 
		/// </summary>
		public System.Decimal?		  WsTotal = null;
		
		/// <summary>
		/// WSLocalTaxRate : 
		/// </summary>
		public System.Decimal?		  WsLocalTaxRate = null;
		
		/// <summary>
		/// WSFederalTaxRate : 
		/// </summary>
		public System.Decimal?		  WsFederalTaxRate = null;
		
		/// <summary>
		/// WSLocalTax : 
		/// </summary>
		public System.Decimal?		  WsLocalTax = null;
		
		/// <summary>
		/// WSFederalTax : 
		/// </summary>
		public System.Decimal?		  WsFederalTax = null;
		
		/// <summary>
		/// WSTotalTax : 
		/// </summary>
		public System.Decimal?		  WsTotalTax = null;
		
		/// <summary>
		/// BillingStatus : 
		/// </summary>
		public System.Int16?		  BillingStatus = null;
		
		/// <summary>
		/// BilledDate : 
		/// </summary>
		public System.DateTime?		  BilledDate = null;
		
		/// <summary>
		/// ProcessedDate : 
		/// </summary>
		public System.DateTime?		  ProcessedDate = null;
		
		/// <summary>
		/// RatedToZero : 
		/// </summary>
		public System.Boolean?		  RatedToZero = null;
		
		/// <summary>
		/// ProductName : 
		/// </summary>
		public System.String		  ProductName = null;
		
		/// <summary>
		/// ProductNameAlt : 
		/// </summary>
		public System.String		  ProductNameAlt = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			BillableLegsEntityData _tmp = new BillableLegsEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.ConferenceId = this.ConferenceId;
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.ModeratorCode = this.ModeratorCode;
			_tmp.PassCode = this.PassCode;
			_tmp.ModeratorName = this.ModeratorName;
			_tmp.Moderator = this.Moderator;
			_tmp.ExternalCustomerNumber = this.ExternalCustomerNumber;
			_tmp.ExternalModeratorNumber = this.ExternalModeratorNumber;
			_tmp.ReferenceNumber = this.ReferenceNumber;
			_tmp.StartTime = this.StartTime;
			_tmp.EndTime = this.EndTime;
			_tmp.ElapsedTime = this.ElapsedTime;
			_tmp.BridgeId = this.BridgeId;
			_tmp.UniqueConferenceId = this.UniqueConferenceId;
			_tmp.AuxiliaryConferenceId = this.AuxiliaryConferenceId;
			_tmp.Dnis = this.Dnis;
			_tmp.DialNumber = this.DialNumber;
			_tmp.Ani = this.Ani;
			_tmp.ParticipantName = this.ParticipantName;
			_tmp.Destination = this.Destination;
			_tmp.AccessTypeId = this.AccessTypeId;
			_tmp.ConnectProductRateId = this.ConnectProductRateId;
			_tmp.BridgeProductRateId = this.BridgeProductRateId;
			_tmp.LdProductRateId = this.LdProductRateId;
			_tmp.ProductRateTaxableValue = this.ProductRateTaxableValue;
			_tmp.CustomerTaxableValue = this.CustomerTaxableValue;
			_tmp.WsTaxableValue = this.WsTaxableValue;
			_tmp.RetailConnectCharge = this.RetailConnectCharge;
			_tmp.RetailBridgeRate = this.RetailBridgeRate;
			_tmp.RetailLdRate = this.RetailLdRate;
			_tmp.RetailCurrency = this.RetailCurrency;
			_tmp.RetailBillingInterval = this.RetailBillingInterval;
			_tmp.RetailTotalConnectCharge = this.RetailTotalConnectCharge;
			_tmp.RetailTotalBridge = this.RetailTotalBridge;
			_tmp.RetailTotalLd = this.RetailTotalLd;
			_tmp.RetailTotal = this.RetailTotal;
			_tmp.RetailLocalTaxRate = this.RetailLocalTaxRate;
			_tmp.RetailFederalTaxRate = this.RetailFederalTaxRate;
			_tmp.RetailLocalTax = this.RetailLocalTax;
			_tmp.RetailFederalTax = this.RetailFederalTax;
			_tmp.RetailTotalTax = this.RetailTotalTax;
			_tmp.WsConnectCharge = this.WsConnectCharge;
			_tmp.WsBridgeRate = this.WsBridgeRate;
			_tmp.WsldRate = this.WsldRate;
			_tmp.WsCurrency = this.WsCurrency;
			_tmp.WsBillingInterval = this.WsBillingInterval;
			_tmp.WsTotalConnectCharge = this.WsTotalConnectCharge;
			_tmp.WsTotalBridge = this.WsTotalBridge;
			_tmp.WsTotalLd = this.WsTotalLd;
			_tmp.WsTotal = this.WsTotal;
			_tmp.WsLocalTaxRate = this.WsLocalTaxRate;
			_tmp.WsFederalTaxRate = this.WsFederalTaxRate;
			_tmp.WsLocalTax = this.WsLocalTax;
			_tmp.WsFederalTax = this.WsFederalTax;
			_tmp.WsTotalTax = this.WsTotalTax;
			_tmp.BillingStatus = this.BillingStatus;
			_tmp.BilledDate = this.BilledDate;
			_tmp.ProcessedDate = this.ProcessedDate;
			_tmp.RatedToZero = this.RatedToZero;
			_tmp.ProductName = this.ProductName;
			_tmp.ProductNameAlt = this.ProductNameAlt;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BillableLegsColumn"/> which has raised the event.</param>
		public void OnColumnChanging(BillableLegsColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BillableLegsColumn"/> which has raised the event.</param>
		public void OnColumnChanged(BillableLegsColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BillableLegsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(BillableLegsColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				BillableLegsEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new BillableLegsEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="BillableLegsColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(BillableLegsColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				BillableLegsEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new BillableLegsEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region BillableLegsEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="BillableLegs"/> object.
	/// </remarks>
	public class BillableLegsEventArgs : System.EventArgs
	{
		private BillableLegsColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the BillableLegsEventArgs class.
		///</summary>
		public BillableLegsEventArgs(BillableLegsColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the BillableLegsEventArgs class.
		///</summary>
		public BillableLegsEventArgs(BillableLegsColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The BillableLegsColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="BillableLegsColumn" />
		public BillableLegsColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all BillableLegs related events.
	///</summary>
	public delegate void BillableLegsEventHandler(object sender, BillableLegsEventArgs e);
	
	#region BillableLegsComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class BillableLegsComparer : System.Collections.Generic.IComparer<BillableLegs>
	{
		BillableLegsColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:BillableLegsComparer"/> class.
        /// </summary>
		public BillableLegsComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:BillableLegsComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public BillableLegsComparer(BillableLegsColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="BillableLegs"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="BillableLegs"/> to compare.</param>
        /// <param name="b">The second <c>BillableLegs</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(BillableLegs a, BillableLegs b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(BillableLegs entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(BillableLegs a, BillableLegs b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public BillableLegsColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region BillableLegsKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="BillableLegs"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class BillableLegsKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the BillableLegsKey class.
		/// </summary>
		public BillableLegsKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the BillableLegsKey class.
		/// </summary>
		public BillableLegsKey(BillableLegsBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the BillableLegsKey class.
		/// </summary>
		public BillableLegsKey(System.Guid _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private BillableLegsBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public BillableLegsBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Guid _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Guid Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Guid) EntityUtil.ChangeType(values["Id"], typeof(System.Guid)) : Guid.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region BillableLegsColumn Enum
	
	/// <summary>
	/// Enumerate the BillableLegs columns.
	/// </summary>
	[Serializable]
	public enum BillableLegsColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Guid), System.Data.DbType.Guid, true, false, false)]
		Id = 1,
		/// <summary>
		/// ConferenceId : 
		/// </summary>
		[EnumTextValue("ConferenceID")]
		[ColumnEnum("ConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		ConferenceId = 2,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ModeratorId = 3,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		WholesalerId = 4,
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		[EnumTextValue("ModeratorCode")]
		[ColumnEnum("ModeratorCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		ModeratorCode = 5,
		/// <summary>
		/// PassCode : 
		/// </summary>
		[EnumTextValue("PassCode")]
		[ColumnEnum("PassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		PassCode = 6,
		/// <summary>
		/// ModeratorName : 
		/// </summary>
		[EnumTextValue("ModeratorName")]
		[ColumnEnum("ModeratorName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ModeratorName = 7,
		/// <summary>
		/// Moderator : 
		/// </summary>
		[EnumTextValue("Moderator")]
		[ColumnEnum("Moderator", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Moderator = 8,
		/// <summary>
		/// ExternalCustomerNumber : 
		/// </summary>
		[EnumTextValue("ExternalCustomerNumber")]
		[ColumnEnum("ExternalCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ExternalCustomerNumber = 9,
		/// <summary>
		/// ExternalModeratorNumber : 
		/// </summary>
		[EnumTextValue("ExternalModeratorNumber")]
		[ColumnEnum("ExternalModeratorNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ExternalModeratorNumber = 10,
		/// <summary>
		/// ReferenceNumber : 
		/// </summary>
		[EnumTextValue("ReferenceNumber")]
		[ColumnEnum("ReferenceNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ReferenceNumber = 11,
		/// <summary>
		/// StartTime : 
		/// </summary>
		[EnumTextValue("StartTime")]
		[ColumnEnum("StartTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartTime = 12,
		/// <summary>
		/// EndTime : 
		/// </summary>
		[EnumTextValue("EndTime")]
		[ColumnEnum("EndTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EndTime = 13,
		/// <summary>
		/// ElapsedTime : 
		/// </summary>
		[EnumTextValue("ElapsedTime")]
		[ColumnEnum("ElapsedTime", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ElapsedTime = 14,
		/// <summary>
		/// BridgeId : 
		/// </summary>
		[EnumTextValue("BridgeID")]
		[ColumnEnum("BridgeID", typeof(System.Int16), System.Data.DbType.Int16, false, false, false)]
		BridgeId = 15,
		/// <summary>
		/// UniqueConferenceId : 
		/// </summary>
		[EnumTextValue("UniqueConferenceID")]
		[ColumnEnum("UniqueConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		UniqueConferenceId = 16,
		/// <summary>
		/// AuxiliaryConferenceId : 
		/// </summary>
		[EnumTextValue("AuxiliaryConferenceID")]
		[ColumnEnum("AuxiliaryConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		AuxiliaryConferenceId = 17,
		/// <summary>
		/// Dnis : 
		/// </summary>
		[EnumTextValue("DNIS")]
		[ColumnEnum("DNIS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Dnis = 18,
		/// <summary>
		/// DialNumber : 
		/// </summary>
		[EnumTextValue("DialNumber")]
		[ColumnEnum("DialNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		DialNumber = 19,
		/// <summary>
		/// Ani : 
		/// </summary>
		[EnumTextValue("ANI")]
		[ColumnEnum("ANI", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 36)]
		Ani = 20,
		/// <summary>
		/// ParticipantName : 
		/// </summary>
		[EnumTextValue("ParticipantName")]
		[ColumnEnum("ParticipantName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ParticipantName = 21,
		/// <summary>
		/// Destination : 
		/// </summary>
		[EnumTextValue("Destination")]
		[ColumnEnum("Destination", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Destination = 22,
		/// <summary>
		/// AccessTypeId : 
		/// </summary>
		[EnumTextValue("AccessTypeID")]
		[ColumnEnum("AccessTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AccessTypeId = 23,
		/// <summary>
		/// ConnectProductRateId : 
		/// </summary>
		[EnumTextValue("ConnectProductRateID")]
		[ColumnEnum("ConnectProductRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ConnectProductRateId = 24,
		/// <summary>
		/// BridgeProductRateId : 
		/// </summary>
		[EnumTextValue("BridgeProductRateID")]
		[ColumnEnum("BridgeProductRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		BridgeProductRateId = 25,
		/// <summary>
		/// LdProductRateId : 
		/// </summary>
		[EnumTextValue("LDProductRateID")]
		[ColumnEnum("LDProductRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LdProductRateId = 26,
		/// <summary>
		/// ProductRateTaxableValue : 
		/// </summary>
		[EnumTextValue("ProductRateTaxableValue")]
		[ColumnEnum("ProductRateTaxableValue", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductRateTaxableValue = 27,
		/// <summary>
		/// CustomerTaxableValue : 
		/// </summary>
		[EnumTextValue("CustomerTaxableValue")]
		[ColumnEnum("CustomerTaxableValue", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerTaxableValue = 28,
		/// <summary>
		/// WsTaxableValue : 
		/// </summary>
		[EnumTextValue("WSTaxableValue")]
		[ColumnEnum("WSTaxableValue", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		WsTaxableValue = 29,
		/// <summary>
		/// RetailConnectCharge : 
		/// </summary>
		[EnumTextValue("RetailConnectCharge")]
		[ColumnEnum("RetailConnectCharge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailConnectCharge = 30,
		/// <summary>
		/// RetailBridgeRate : 
		/// </summary>
		[EnumTextValue("RetailBridgeRate")]
		[ColumnEnum("RetailBridgeRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailBridgeRate = 31,
		/// <summary>
		/// RetailLdRate : 
		/// </summary>
		[EnumTextValue("RetailLDRate")]
		[ColumnEnum("RetailLDRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailLdRate = 32,
		/// <summary>
		/// RetailCurrency : 
		/// </summary>
		[EnumTextValue("RetailCurrency")]
		[ColumnEnum("RetailCurrency", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 3)]
		RetailCurrency = 33,
		/// <summary>
		/// RetailBillingInterval : 
		/// </summary>
		[EnumTextValue("RetailBillingInterval")]
		[ColumnEnum("RetailBillingInterval", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		RetailBillingInterval = 34,
		/// <summary>
		/// RetailTotalConnectCharge : 
		/// </summary>
		[EnumTextValue("RetailTotalConnectCharge")]
		[ColumnEnum("RetailTotalConnectCharge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalConnectCharge = 35,
		/// <summary>
		/// RetailTotalBridge : 
		/// </summary>
		[EnumTextValue("RetailTotalBridge")]
		[ColumnEnum("RetailTotalBridge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalBridge = 36,
		/// <summary>
		/// RetailTotalLd : 
		/// </summary>
		[EnumTextValue("RetailTotalLD")]
		[ColumnEnum("RetailTotalLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalLd = 37,
		/// <summary>
		/// RetailTotal : 
		/// </summary>
		[EnumTextValue("RetailTotal")]
		[ColumnEnum("RetailTotal", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotal = 38,
		/// <summary>
		/// RetailLocalTaxRate : 
		/// </summary>
		[EnumTextValue("RetailLocalTaxRate")]
		[ColumnEnum("RetailLocalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailLocalTaxRate = 39,
		/// <summary>
		/// RetailFederalTaxRate : 
		/// </summary>
		[EnumTextValue("RetailFederalTaxRate")]
		[ColumnEnum("RetailFederalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailFederalTaxRate = 40,
		/// <summary>
		/// RetailLocalTax : 
		/// </summary>
		[EnumTextValue("RetailLocalTax")]
		[ColumnEnum("RetailLocalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailLocalTax = 41,
		/// <summary>
		/// RetailFederalTax : 
		/// </summary>
		[EnumTextValue("RetailFederalTax")]
		[ColumnEnum("RetailFederalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailFederalTax = 42,
		/// <summary>
		/// RetailTotalTax : 
		/// </summary>
		[EnumTextValue("RetailTotalTax")]
		[ColumnEnum("RetailTotalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalTax = 43,
		/// <summary>
		/// WsConnectCharge : 
		/// </summary>
		[EnumTextValue("WSConnectCharge")]
		[ColumnEnum("WSConnectCharge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsConnectCharge = 44,
		/// <summary>
		/// WsBridgeRate : 
		/// </summary>
		[EnumTextValue("WSBridgeRate")]
		[ColumnEnum("WSBridgeRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsBridgeRate = 45,
		/// <summary>
		/// WsldRate : 
		/// </summary>
		[EnumTextValue("WSLDRate")]
		[ColumnEnum("WSLDRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsldRate = 46,
		/// <summary>
		/// WsCurrency : 
		/// </summary>
		[EnumTextValue("WSCurrency")]
		[ColumnEnum("WSCurrency", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 3)]
		WsCurrency = 47,
		/// <summary>
		/// WsBillingInterval : 
		/// </summary>
		[EnumTextValue("WSBillingInterval")]
		[ColumnEnum("WSBillingInterval", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		WsBillingInterval = 48,
		/// <summary>
		/// WsTotalConnectCharge : 
		/// </summary>
		[EnumTextValue("WSTotalConnectCharge")]
		[ColumnEnum("WSTotalConnectCharge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotalConnectCharge = 49,
		/// <summary>
		/// WsTotalBridge : 
		/// </summary>
		[EnumTextValue("WSTotalBridge")]
		[ColumnEnum("WSTotalBridge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotalBridge = 50,
		/// <summary>
		/// WsTotalLd : 
		/// </summary>
		[EnumTextValue("WSTotalLD")]
		[ColumnEnum("WSTotalLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotalLd = 51,
		/// <summary>
		/// WsTotal : 
		/// </summary>
		[EnumTextValue("WSTotal")]
		[ColumnEnum("WSTotal", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotal = 52,
		/// <summary>
		/// WsLocalTaxRate : 
		/// </summary>
		[EnumTextValue("WSLocalTaxRate")]
		[ColumnEnum("WSLocalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsLocalTaxRate = 53,
		/// <summary>
		/// WsFederalTaxRate : 
		/// </summary>
		[EnumTextValue("WSFederalTaxRate")]
		[ColumnEnum("WSFederalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsFederalTaxRate = 54,
		/// <summary>
		/// WsLocalTax : 
		/// </summary>
		[EnumTextValue("WSLocalTax")]
		[ColumnEnum("WSLocalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsLocalTax = 55,
		/// <summary>
		/// WsFederalTax : 
		/// </summary>
		[EnumTextValue("WSFederalTax")]
		[ColumnEnum("WSFederalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsFederalTax = 56,
		/// <summary>
		/// WsTotalTax : 
		/// </summary>
		[EnumTextValue("WSTotalTax")]
		[ColumnEnum("WSTotalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotalTax = 57,
		/// <summary>
		/// BillingStatus : 
		/// </summary>
		[EnumTextValue("BillingStatus")]
		[ColumnEnum("BillingStatus", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		BillingStatus = 58,
		/// <summary>
		/// BilledDate : 
		/// </summary>
		[EnumTextValue("BilledDate")]
		[ColumnEnum("BilledDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BilledDate = 59,
		/// <summary>
		/// ProcessedDate : 
		/// </summary>
		[EnumTextValue("ProcessedDate")]
		[ColumnEnum("ProcessedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ProcessedDate = 60,
		/// <summary>
		/// RatedToZero : 
		/// </summary>
		[EnumTextValue("RatedToZero")]
		[ColumnEnum("RatedToZero", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		RatedToZero = 61,
		/// <summary>
		/// ProductName : 
		/// </summary>
		[EnumTextValue("ProductName")]
		[ColumnEnum("ProductName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ProductName = 62,
		/// <summary>
		/// ProductNameAlt : 
		/// </summary>
		[EnumTextValue("ProductNameAlt")]
		[ColumnEnum("ProductNameAlt", typeof(System.String), System.Data.DbType.String, false, false, true, 100)]
		ProductNameAlt = 63
	}//End enum

	#endregion BillableLegsColumn Enum

} // end namespace
