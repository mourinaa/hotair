
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CustomerTransaction.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'CustomerTransaction' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class CustomerTransactionBase : EntityBase, CONFDB.Entities.ICustomerTransaction, IEntityId<CustomerTransactionKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomerTransactionEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomerTransactionEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomerTransactionEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CustomerTransaction> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CustomerTransactionEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomerTransactionEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomerTransactionBase"/> instance.
		///</summary>
		public CustomerTransactionBase()
		{
			this.entityData = new CustomerTransactionEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomerTransactionBase"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_customerTransactionTypeId"></param>
		///<param name="_transactionDescription"></param>
		///<param name="_transactionDate"></param>
		///<param name="_transactionAmount"></param>
		///<param name="_localTaxRate"></param>
		///<param name="_federalTaxRate"></param>
		///<param name="_localTaxAmount">Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.</param>
		///<param name="_federalTaxAmount">Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.</param>
		///<param name="_transactionTotal">The total amount of the transaction including taxes.</param>
		///<param name="_customerBalance">Customers Balance = Cust.Bal + (+/-TransactionTotal)</param>
		///<param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
		///<param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
		///<param name="_quantity">Optional: Only used if ProductRateID is set. Used to store the number of items for the specific charge.</param>
		///<param name="_sellRate">Optional: Used when ProductRateID is set and stores the price of the item as the time of purchase. Avoids issues if rates or charges change in the future.</param>
		///<param name="_buyRate">Used to track WS costs</param>
		///<param name="_wsTransactionAmount">Used to track WS costs</param>
		///<param name="_referenceNumber">Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.</param>
		///<param name="_uniqueConferenceId">Optional: Used to link the transaction to a specific conference.</param>
		///<param name="_postedDate"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_createdDate"></param>
		///<param name="_postedToInvoice"></param>
		///<param name="_postedToInvoiceDate"></param>
		///<param name="_elapsedTimeSeconds">Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.</param>
		public CustomerTransactionBase(System.String _wholesalerId, System.Int32 _customerId, 
			System.Int32? _moderatorId, System.String _priCustomerNumber, System.String _secCustomerNumber, 
			System.Int32 _customerTransactionTypeId, System.String _transactionDescription, System.DateTime _transactionDate, 
			System.Decimal? _transactionAmount, System.Decimal? _localTaxRate, System.Decimal? _federalTaxRate, 
			System.Decimal? _localTaxAmount, System.Decimal? _federalTaxAmount, System.Decimal? _transactionTotal, 
			System.Decimal? _customerBalance, System.Int32? _wholesaler_ProductId, System.Int32? _productRateId, 
			System.Int32? _quantity, System.Decimal? _sellRate, System.Decimal? _buyRate, 
			System.Decimal? _wsTransactionAmount, System.String _referenceNumber, System.String _uniqueConferenceId, 
			System.DateTime _postedDate, System.String _modifiedBy, System.DateTime? _createdDate, 
			System.Boolean? _postedToInvoice, System.DateTime? _postedToInvoiceDate, System.Int32? _elapsedTimeSeconds)
		{
			this.entityData = new CustomerTransactionEntityData();
			this.backupData = null;

			this.WholesalerId = _wholesalerId;
			this.CustomerId = _customerId;
			this.ModeratorId = _moderatorId;
			this.PriCustomerNumber = _priCustomerNumber;
			this.SecCustomerNumber = _secCustomerNumber;
			this.CustomerTransactionTypeId = _customerTransactionTypeId;
			this.TransactionDescription = _transactionDescription;
			this.TransactionDate = _transactionDate;
			this.TransactionAmount = _transactionAmount;
			this.LocalTaxRate = _localTaxRate;
			this.FederalTaxRate = _federalTaxRate;
			this.LocalTaxAmount = _localTaxAmount;
			this.FederalTaxAmount = _federalTaxAmount;
			this.TransactionTotal = _transactionTotal;
			this.CustomerBalance = _customerBalance;
			this.Wholesaler_ProductId = _wholesaler_ProductId;
			this.ProductRateId = _productRateId;
			this.Quantity = _quantity;
			this.SellRate = _sellRate;
			this.BuyRate = _buyRate;
			this.WsTransactionAmount = _wsTransactionAmount;
			this.ReferenceNumber = _referenceNumber;
			this.UniqueConferenceId = _uniqueConferenceId;
			this.PostedDate = _postedDate;
			this.ModifiedBy = _modifiedBy;
			this.CreatedDate = _createdDate;
			this.PostedToInvoice = _postedToInvoice;
			this.PostedToInvoiceDate = _postedToInvoiceDate;
			this.ElapsedTimeSeconds = _elapsedTimeSeconds;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CustomerTransaction"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_customerTransactionTypeId"></param>
		///<param name="_transactionDescription"></param>
		///<param name="_transactionDate"></param>
		///<param name="_transactionAmount"></param>
		///<param name="_localTaxRate"></param>
		///<param name="_federalTaxRate"></param>
		///<param name="_localTaxAmount">Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.</param>
		///<param name="_federalTaxAmount">Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.</param>
		///<param name="_transactionTotal">The total amount of the transaction including taxes.</param>
		///<param name="_customerBalance">Customers Balance = Cust.Bal + (+/-TransactionTotal)</param>
		///<param name="_wholesaler_ProductId">Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.</param>
		///<param name="_productRateId">Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.</param>
		///<param name="_quantity">Optional: Only used if ProductRateID is set. Used to store the number of items for the specific charge.</param>
		///<param name="_sellRate">Optional: Used when ProductRateID is set and stores the price of the item as the time of purchase. Avoids issues if rates or charges change in the future.</param>
		///<param name="_buyRate">Used to track WS costs</param>
		///<param name="_wsTransactionAmount">Used to track WS costs</param>
		///<param name="_referenceNumber">Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.</param>
		///<param name="_uniqueConferenceId">Optional: Used to link the transaction to a specific conference.</param>
		///<param name="_postedDate"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_createdDate"></param>
		///<param name="_postedToInvoice"></param>
		///<param name="_postedToInvoiceDate"></param>
		///<param name="_elapsedTimeSeconds">Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.</param>
		public static CustomerTransaction CreateCustomerTransaction(System.String _wholesalerId, System.Int32 _customerId, 
			System.Int32? _moderatorId, System.String _priCustomerNumber, System.String _secCustomerNumber, 
			System.Int32 _customerTransactionTypeId, System.String _transactionDescription, System.DateTime _transactionDate, 
			System.Decimal? _transactionAmount, System.Decimal? _localTaxRate, System.Decimal? _federalTaxRate, 
			System.Decimal? _localTaxAmount, System.Decimal? _federalTaxAmount, System.Decimal? _transactionTotal, 
			System.Decimal? _customerBalance, System.Int32? _wholesaler_ProductId, System.Int32? _productRateId, 
			System.Int32? _quantity, System.Decimal? _sellRate, System.Decimal? _buyRate, 
			System.Decimal? _wsTransactionAmount, System.String _referenceNumber, System.String _uniqueConferenceId, 
			System.DateTime _postedDate, System.String _modifiedBy, System.DateTime? _createdDate, 
			System.Boolean? _postedToInvoice, System.DateTime? _postedToInvoiceDate, System.Int32? _elapsedTimeSeconds)
		{
			CustomerTransaction newCustomerTransaction = new CustomerTransaction();
			newCustomerTransaction.WholesalerId = _wholesalerId;
			newCustomerTransaction.CustomerId = _customerId;
			newCustomerTransaction.ModeratorId = _moderatorId;
			newCustomerTransaction.PriCustomerNumber = _priCustomerNumber;
			newCustomerTransaction.SecCustomerNumber = _secCustomerNumber;
			newCustomerTransaction.CustomerTransactionTypeId = _customerTransactionTypeId;
			newCustomerTransaction.TransactionDescription = _transactionDescription;
			newCustomerTransaction.TransactionDate = _transactionDate;
			newCustomerTransaction.TransactionAmount = _transactionAmount;
			newCustomerTransaction.LocalTaxRate = _localTaxRate;
			newCustomerTransaction.FederalTaxRate = _federalTaxRate;
			newCustomerTransaction.LocalTaxAmount = _localTaxAmount;
			newCustomerTransaction.FederalTaxAmount = _federalTaxAmount;
			newCustomerTransaction.TransactionTotal = _transactionTotal;
			newCustomerTransaction.CustomerBalance = _customerBalance;
			newCustomerTransaction.Wholesaler_ProductId = _wholesaler_ProductId;
			newCustomerTransaction.ProductRateId = _productRateId;
			newCustomerTransaction.Quantity = _quantity;
			newCustomerTransaction.SellRate = _sellRate;
			newCustomerTransaction.BuyRate = _buyRate;
			newCustomerTransaction.WsTransactionAmount = _wsTransactionAmount;
			newCustomerTransaction.ReferenceNumber = _referenceNumber;
			newCustomerTransaction.UniqueConferenceId = _uniqueConferenceId;
			newCustomerTransaction.PostedDate = _postedDate;
			newCustomerTransaction.ModifiedBy = _modifiedBy;
			newCustomerTransaction.CreatedDate = _createdDate;
			newCustomerTransaction.PostedToInvoice = _postedToInvoice;
			newCustomerTransaction.PostedToInvoiceDate = _postedToInvoiceDate;
			newCustomerTransaction.ElapsedTimeSeconds = _elapsedTimeSeconds;
			return newCustomerTransaction;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsModeratorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this.entityData.PriCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.PriCustomerNumber == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				this.entityData.PriCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String SecCustomerNumber
		{
			get
			{
				return this.entityData.SecCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.SecCustomerNumber == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				this.entityData.SecCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				OnPropertyChanged("SecCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerTransactionTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerTransactionTypeId
		{
			get
			{
				return this.entityData.CustomerTransactionTypeId; 
			}
			
			set
			{
				if (this.entityData.CustomerTransactionTypeId == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.CustomerTransactionTypeId, this.entityData.CustomerTransactionTypeId);
				this.entityData.CustomerTransactionTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.CustomerTransactionTypeId, this.entityData.CustomerTransactionTypeId);
				OnPropertyChanged("CustomerTransactionTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TransactionDescription
		{
			get
			{
				return this.entityData.TransactionDescription; 
			}
			
			set
			{
				if (this.entityData.TransactionDescription == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.TransactionDescription, this.entityData.TransactionDescription);
				this.entityData.TransactionDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.TransactionDescription, this.entityData.TransactionDescription);
				OnPropertyChanged("TransactionDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime TransactionDate
		{
			get
			{
				return this.entityData.TransactionDate; 
			}
			
			set
			{
				if (this.entityData.TransactionDate == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.TransactionDate, this.entityData.TransactionDate);
				this.entityData.TransactionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.TransactionDate, this.entityData.TransactionDate);
				OnPropertyChanged("TransactionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionAmount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransactionAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransactionAmount
		{
			get
			{
				return this.entityData.TransactionAmount; 
			}
			
			set
			{
				if (this.entityData.TransactionAmount == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.TransactionAmount, this.entityData.TransactionAmount);
				this.entityData.TransactionAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.TransactionAmount, this.entityData.TransactionAmount);
				OnPropertyChanged("TransactionAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLocalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LocalTaxRate
		{
			get
			{
				return this.entityData.LocalTaxRate; 
			}
			
			set
			{
				if (this.entityData.LocalTaxRate == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.LocalTaxRate, this.entityData.LocalTaxRate);
				this.entityData.LocalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.LocalTaxRate, this.entityData.LocalTaxRate);
				OnPropertyChanged("LocalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FederalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFederalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FederalTaxRate
		{
			get
			{
				return this.entityData.FederalTaxRate; 
			}
			
			set
			{
				if (this.entityData.FederalTaxRate == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.FederalTaxRate, this.entityData.FederalTaxRate);
				this.entityData.FederalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.FederalTaxRate, this.entityData.FederalTaxRate);
				OnPropertyChanged("FederalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalTaxAmount property. 
		///		Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLocalTaxAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LocalTaxAmount
		{
			get
			{
				return this.entityData.LocalTaxAmount; 
			}
			
			set
			{
				if (this.entityData.LocalTaxAmount == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.LocalTaxAmount, this.entityData.LocalTaxAmount);
				this.entityData.LocalTaxAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.LocalTaxAmount, this.entityData.LocalTaxAmount);
				OnPropertyChanged("LocalTaxAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FederalTaxAmount property. 
		///		Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFederalTaxAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FederalTaxAmount
		{
			get
			{
				return this.entityData.FederalTaxAmount; 
			}
			
			set
			{
				if (this.entityData.FederalTaxAmount == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.FederalTaxAmount, this.entityData.FederalTaxAmount);
				this.entityData.FederalTaxAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.FederalTaxAmount, this.entityData.FederalTaxAmount);
				OnPropertyChanged("FederalTaxAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionTotal property. 
		///		The total amount of the transaction including taxes.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTransactionTotalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("The total amount of the transaction including taxes."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TransactionTotal
		{
			get
			{
				return this.entityData.TransactionTotal; 
			}
			
			set
			{
				if (this.entityData.TransactionTotal == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.TransactionTotal, this.entityData.TransactionTotal);
				this.entityData.TransactionTotal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.TransactionTotal, this.entityData.TransactionTotal);
				OnPropertyChanged("TransactionTotal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerBalance property. 
		///		Customers Balance = Cust.Bal + (+/-TransactionTotal)
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCustomerBalanceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Customers Balance = Cust.Bal + (+/-TransactionTotal)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CustomerBalance
		{
			get
			{
				return this.entityData.CustomerBalance; 
			}
			
			set
			{
				if (this.entityData.CustomerBalance == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.CustomerBalance, this.entityData.CustomerBalance);
				this.entityData.CustomerBalance = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.CustomerBalance, this.entityData.CustomerBalance);
				OnPropertyChanged("CustomerBalance");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Wholesaler_ProductId property. 
		///		Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWholesaler_ProductIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Wholesaler_ProductId
		{
			get
			{
				return this.entityData.Wholesaler_ProductId; 
			}
			
			set
			{
				if (this.entityData.Wholesaler_ProductId == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.Wholesaler_ProductId, this.entityData.Wholesaler_ProductId);
				this.entityData.Wholesaler_ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.Wholesaler_ProductId, this.entityData.Wholesaler_ProductId);
				OnPropertyChanged("Wholesaler_ProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductRateId property. 
		///		Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProductRateIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProductRateId
		{
			get
			{
				return this.entityData.ProductRateId; 
			}
			
			set
			{
				if (this.entityData.ProductRateId == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.ProductRateId, this.entityData.ProductRateId);
				this.entityData.ProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.ProductRateId, this.entityData.ProductRateId);
				OnPropertyChanged("ProductRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quantity property. 
		///		Optional: Only used if ProductRateID is set. Used to store the number of items for the specific charge.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Optional: Only used if ProductRateID is set. Used to store the number of items for the specific charge."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Quantity
		{
			get
			{
				return this.entityData.Quantity; 
			}
			
			set
			{
				if (this.entityData.Quantity == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.Quantity, this.entityData.Quantity);
				this.entityData.Quantity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.Quantity, this.entityData.Quantity);
				OnPropertyChanged("Quantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellRate property. 
		///		Optional: Used when ProductRateID is set and stores the price of the item as the time of purchase. Avoids issues if rates or charges change in the future.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSellRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Optional: Used when ProductRateID is set and stores the price of the item as the time of purchase. Avoids issues if rates or charges change in the future."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SellRate
		{
			get
			{
				return this.entityData.SellRate; 
			}
			
			set
			{
				if (this.entityData.SellRate == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.SellRate, this.entityData.SellRate);
				this.entityData.SellRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.SellRate, this.entityData.SellRate);
				OnPropertyChanged("SellRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BuyRate property. 
		///		Used to track WS costs
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBuyRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to track WS costs"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BuyRate
		{
			get
			{
				return this.entityData.BuyRate; 
			}
			
			set
			{
				if (this.entityData.BuyRate == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.BuyRate, this.entityData.BuyRate);
				this.entityData.BuyRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.BuyRate, this.entityData.BuyRate);
				OnPropertyChanged("BuyRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTransactionAmount property. 
		///		Used to track WS costs
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTransactionAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to track WS costs"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTransactionAmount
		{
			get
			{
				return this.entityData.WsTransactionAmount; 
			}
			
			set
			{
				if (this.entityData.WsTransactionAmount == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.WsTransactionAmount, this.entityData.WsTransactionAmount);
				this.entityData.WsTransactionAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.WsTransactionAmount, this.entityData.WsTransactionAmount);
				OnPropertyChanged("WsTransactionAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReferenceNumber property. 
		///		Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ReferenceNumber
		{
			get
			{
				return this.entityData.ReferenceNumber; 
			}
			
			set
			{
				if (this.entityData.ReferenceNumber == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.ReferenceNumber, this.entityData.ReferenceNumber);
				this.entityData.ReferenceNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.ReferenceNumber, this.entityData.ReferenceNumber);
				OnPropertyChanged("ReferenceNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueConferenceId property. 
		///		Optional: Used to link the transaction to a specific conference.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Optional: Used to link the transaction to a specific conference."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String UniqueConferenceId
		{
			get
			{
				return this.entityData.UniqueConferenceId; 
			}
			
			set
			{
				if (this.entityData.UniqueConferenceId == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				this.entityData.UniqueConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				OnPropertyChanged("UniqueConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime PostedDate
		{
			get
			{
				return this.entityData.PostedDate; 
			}
			
			set
			{
				if (this.entityData.PostedDate == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.PostedDate, this.entityData.PostedDate);
				this.entityData.PostedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.PostedDate, this.entityData.PostedDate);
				OnPropertyChanged("PostedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ModifiedBy
		{
			get
			{
				return this.entityData.ModifiedBy; 
			}
			
			set
			{
				if (this.entityData.ModifiedBy == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.ModifiedBy, this.entityData.ModifiedBy);
				this.entityData.ModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.ModifiedBy, this.entityData.ModifiedBy);
				OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.Now. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostedToInvoice property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsPostedToInvoiceNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? PostedToInvoice
		{
			get
			{
				return this.entityData.PostedToInvoice; 
			}
			
			set
			{
				if (this.entityData.PostedToInvoice == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.PostedToInvoice, this.entityData.PostedToInvoice);
				this.entityData.PostedToInvoice = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.PostedToInvoice, this.entityData.PostedToInvoice);
				OnPropertyChanged("PostedToInvoice");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostedToInvoiceDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPostedToInvoiceDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PostedToInvoiceDate
		{
			get
			{
				return this.entityData.PostedToInvoiceDate; 
			}
			
			set
			{
				if (this.entityData.PostedToInvoiceDate == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.PostedToInvoiceDate, this.entityData.PostedToInvoiceDate);
				this.entityData.PostedToInvoiceDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.PostedToInvoiceDate, this.entityData.PostedToInvoiceDate);
				OnPropertyChanged("PostedToInvoiceDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ElapsedTimeSeconds property. 
		///		Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsElapsedTimeSecondsNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ElapsedTimeSeconds
		{
			get
			{
				return this.entityData.ElapsedTimeSeconds; 
			}
			
			set
			{
				if (this.entityData.ElapsedTimeSeconds == value)
					return;
					
				OnColumnChanging(CustomerTransactionColumn.ElapsedTimeSeconds, this.entityData.ElapsedTimeSeconds);
				this.entityData.ElapsedTimeSeconds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionColumn.ElapsedTimeSeconds, this.entityData.ElapsedTimeSeconds);
				OnPropertyChanged("ElapsedTimeSeconds");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="CustomerTransactionType"/>.
		/// </summary>
		/// <value>The source CustomerTransactionType for CustomerTransactionTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CustomerTransactionType CustomerTransactionTypeIdSource
      	{
            get { return entityData.CustomerTransactionTypeIdSource; }
            set { entityData.CustomerTransactionTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProductRate"/>.
		/// </summary>
		/// <value>The source ProductRate for ProductRateId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProductRate ProductRateIdSource
      	{
            get { return entityData.ProductRateIdSource; }
            set { entityData.ProductRateIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler_Product"/>.
		/// </summary>
		/// <value>The source Wholesaler_Product for Wholesaler_ProductId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler_Product Wholesaler_ProductIdSource
      	{
            get { return entityData.Wholesaler_ProductIdSource; }
            set { entityData.Wholesaler_ProductIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return entityData.WholesalerIdSource; }
            set { entityData.WholesalerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customer CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PriCustomerNumber", "Pri Customer Number", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SecCustomerNumber", "Sec Customer Number", 6));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TransactionDescription", "Transaction Description", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ReferenceNumber", "Reference Number", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("UniqueConferenceId", "Unique Conference Id", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModifiedBy", "Modified By", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CustomerTransaction"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WholesalerID", "CustomerID", "ModeratorID", "PriCustomerNumber", "SecCustomerNumber", "CustomerTransactionTypeID", "TransactionDescription", "TransactionDate", "TransactionAmount", "LocalTaxRate", "FederalTaxRate", "LocalTaxAmount", "FederalTaxAmount", "TransactionTotal", "CustomerBalance", "Wholesaler_ProductID", "ProductRateID", "Quantity", "SellRate", "BuyRate", "WSTransactionAmount", "ReferenceNumber", "UniqueConferenceID", "PostedDate", "ModifiedBy", "CreatedDate", "PostedToInvoice", "PostedToInvoiceDate", "ElapsedTimeSeconds"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomerTransactionEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CustomerTransaction) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CustomerTransaction>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CustomerTransaction);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CustomerTransaction Entity 
		///</summary>
		public virtual CustomerTransaction Copy()
		{
			//shallow copy entity
			CustomerTransaction copy = new CustomerTransaction();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.WholesalerId = this.WholesalerId;
			copy.CustomerId = this.CustomerId;
			copy.ModeratorId = this.ModeratorId;
			copy.PriCustomerNumber = this.PriCustomerNumber;
			copy.SecCustomerNumber = this.SecCustomerNumber;
			copy.CustomerTransactionTypeId = this.CustomerTransactionTypeId;
			copy.TransactionDescription = this.TransactionDescription;
			copy.TransactionDate = this.TransactionDate;
			copy.TransactionAmount = this.TransactionAmount;
			copy.LocalTaxRate = this.LocalTaxRate;
			copy.FederalTaxRate = this.FederalTaxRate;
			copy.LocalTaxAmount = this.LocalTaxAmount;
			copy.FederalTaxAmount = this.FederalTaxAmount;
			copy.TransactionTotal = this.TransactionTotal;
			copy.CustomerBalance = this.CustomerBalance;
			copy.Wholesaler_ProductId = this.Wholesaler_ProductId;
			copy.ProductRateId = this.ProductRateId;
			copy.Quantity = this.Quantity;
			copy.SellRate = this.SellRate;
			copy.BuyRate = this.BuyRate;
			copy.WsTransactionAmount = this.WsTransactionAmount;
			copy.ReferenceNumber = this.ReferenceNumber;
			copy.UniqueConferenceId = this.UniqueConferenceId;
			copy.PostedDate = this.PostedDate;
			copy.ModifiedBy = this.ModifiedBy;
			copy.CreatedDate = this.CreatedDate;
			copy.PostedToInvoice = this.PostedToInvoice;
			copy.PostedToInvoiceDate = this.PostedToInvoiceDate;
			copy.ElapsedTimeSeconds = this.ElapsedTimeSeconds;
			
			copy.CustomerTransactionTypeIdSource = MakeCopyOf(this.CustomerTransactionTypeIdSource) as CustomerTransactionType;
			copy.ProductRateIdSource = MakeCopyOf(this.ProductRateIdSource) as ProductRate;
			copy.Wholesaler_ProductIdSource = MakeCopyOf(this.Wholesaler_ProductIdSource) as Wholesaler_Product;
			copy.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed CustomerTransaction Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CustomerTransaction DeepCopy()
		{
			return EntityHelper.Clone<CustomerTransaction>(this as CustomerTransaction);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomerTransactionEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomerTransactionEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomerTransactionColumn column)
		{
			switch(column)
			{
					case CustomerTransactionColumn.Id:
					return entityData.Id != _originalData.Id;
					case CustomerTransactionColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case CustomerTransactionColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case CustomerTransactionColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case CustomerTransactionColumn.PriCustomerNumber:
					return entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
					case CustomerTransactionColumn.SecCustomerNumber:
					return entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
					case CustomerTransactionColumn.CustomerTransactionTypeId:
					return entityData.CustomerTransactionTypeId != _originalData.CustomerTransactionTypeId;
					case CustomerTransactionColumn.TransactionDescription:
					return entityData.TransactionDescription != _originalData.TransactionDescription;
					case CustomerTransactionColumn.TransactionDate:
					return entityData.TransactionDate != _originalData.TransactionDate;
					case CustomerTransactionColumn.TransactionAmount:
					return entityData.TransactionAmount != _originalData.TransactionAmount;
					case CustomerTransactionColumn.LocalTaxRate:
					return entityData.LocalTaxRate != _originalData.LocalTaxRate;
					case CustomerTransactionColumn.FederalTaxRate:
					return entityData.FederalTaxRate != _originalData.FederalTaxRate;
					case CustomerTransactionColumn.LocalTaxAmount:
					return entityData.LocalTaxAmount != _originalData.LocalTaxAmount;
					case CustomerTransactionColumn.FederalTaxAmount:
					return entityData.FederalTaxAmount != _originalData.FederalTaxAmount;
					case CustomerTransactionColumn.TransactionTotal:
					return entityData.TransactionTotal != _originalData.TransactionTotal;
					case CustomerTransactionColumn.CustomerBalance:
					return entityData.CustomerBalance != _originalData.CustomerBalance;
					case CustomerTransactionColumn.Wholesaler_ProductId:
					return entityData.Wholesaler_ProductId != _originalData.Wholesaler_ProductId;
					case CustomerTransactionColumn.ProductRateId:
					return entityData.ProductRateId != _originalData.ProductRateId;
					case CustomerTransactionColumn.Quantity:
					return entityData.Quantity != _originalData.Quantity;
					case CustomerTransactionColumn.SellRate:
					return entityData.SellRate != _originalData.SellRate;
					case CustomerTransactionColumn.BuyRate:
					return entityData.BuyRate != _originalData.BuyRate;
					case CustomerTransactionColumn.WsTransactionAmount:
					return entityData.WsTransactionAmount != _originalData.WsTransactionAmount;
					case CustomerTransactionColumn.ReferenceNumber:
					return entityData.ReferenceNumber != _originalData.ReferenceNumber;
					case CustomerTransactionColumn.UniqueConferenceId:
					return entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
					case CustomerTransactionColumn.PostedDate:
					return entityData.PostedDate != _originalData.PostedDate;
					case CustomerTransactionColumn.ModifiedBy:
					return entityData.ModifiedBy != _originalData.ModifiedBy;
					case CustomerTransactionColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case CustomerTransactionColumn.PostedToInvoice:
					return entityData.PostedToInvoice != _originalData.PostedToInvoice;
					case CustomerTransactionColumn.PostedToInvoiceDate:
					return entityData.PostedToInvoiceDate != _originalData.PostedToInvoiceDate;
					case CustomerTransactionColumn.ElapsedTimeSeconds:
					return entityData.ElapsedTimeSeconds != _originalData.ElapsedTimeSeconds;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
			result = result || entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
			result = result || entityData.CustomerTransactionTypeId != _originalData.CustomerTransactionTypeId;
			result = result || entityData.TransactionDescription != _originalData.TransactionDescription;
			result = result || entityData.TransactionDate != _originalData.TransactionDate;
			result = result || entityData.TransactionAmount != _originalData.TransactionAmount;
			result = result || entityData.LocalTaxRate != _originalData.LocalTaxRate;
			result = result || entityData.FederalTaxRate != _originalData.FederalTaxRate;
			result = result || entityData.LocalTaxAmount != _originalData.LocalTaxAmount;
			result = result || entityData.FederalTaxAmount != _originalData.FederalTaxAmount;
			result = result || entityData.TransactionTotal != _originalData.TransactionTotal;
			result = result || entityData.CustomerBalance != _originalData.CustomerBalance;
			result = result || entityData.Wholesaler_ProductId != _originalData.Wholesaler_ProductId;
			result = result || entityData.ProductRateId != _originalData.ProductRateId;
			result = result || entityData.Quantity != _originalData.Quantity;
			result = result || entityData.SellRate != _originalData.SellRate;
			result = result || entityData.BuyRate != _originalData.BuyRate;
			result = result || entityData.WsTransactionAmount != _originalData.WsTransactionAmount;
			result = result || entityData.ReferenceNumber != _originalData.ReferenceNumber;
			result = result || entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
			result = result || entityData.PostedDate != _originalData.PostedDate;
			result = result || entityData.ModifiedBy != _originalData.ModifiedBy;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.PostedToInvoice != _originalData.PostedToInvoice;
			result = result || entityData.PostedToInvoiceDate != _originalData.PostedToInvoiceDate;
			result = result || entityData.ElapsedTimeSeconds != _originalData.ElapsedTimeSeconds;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomerTransactionBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is CustomerTransactionBase)
				return Equals(this, (CustomerTransactionBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomerTransactionBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					this.CustomerId.GetHashCode() ^ 
					((this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString()).GetHashCode() ^ 
					((this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString()).GetHashCode() ^ 
					((this.SecCustomerNumber == null) ? string.Empty : this.SecCustomerNumber.ToString()).GetHashCode() ^ 
					this.CustomerTransactionTypeId.GetHashCode() ^ 
					((this.TransactionDescription == null) ? string.Empty : this.TransactionDescription.ToString()).GetHashCode() ^ 
					this.TransactionDate.GetHashCode() ^ 
					((this.TransactionAmount == null) ? string.Empty : this.TransactionAmount.ToString()).GetHashCode() ^ 
					((this.LocalTaxRate == null) ? string.Empty : this.LocalTaxRate.ToString()).GetHashCode() ^ 
					((this.FederalTaxRate == null) ? string.Empty : this.FederalTaxRate.ToString()).GetHashCode() ^ 
					((this.LocalTaxAmount == null) ? string.Empty : this.LocalTaxAmount.ToString()).GetHashCode() ^ 
					((this.FederalTaxAmount == null) ? string.Empty : this.FederalTaxAmount.ToString()).GetHashCode() ^ 
					((this.TransactionTotal == null) ? string.Empty : this.TransactionTotal.ToString()).GetHashCode() ^ 
					((this.CustomerBalance == null) ? string.Empty : this.CustomerBalance.ToString()).GetHashCode() ^ 
					((this.Wholesaler_ProductId == null) ? string.Empty : this.Wholesaler_ProductId.ToString()).GetHashCode() ^ 
					((this.ProductRateId == null) ? string.Empty : this.ProductRateId.ToString()).GetHashCode() ^ 
					((this.Quantity == null) ? string.Empty : this.Quantity.ToString()).GetHashCode() ^ 
					((this.SellRate == null) ? string.Empty : this.SellRate.ToString()).GetHashCode() ^ 
					((this.BuyRate == null) ? string.Empty : this.BuyRate.ToString()).GetHashCode() ^ 
					((this.WsTransactionAmount == null) ? string.Empty : this.WsTransactionAmount.ToString()).GetHashCode() ^ 
					((this.ReferenceNumber == null) ? string.Empty : this.ReferenceNumber.ToString()).GetHashCode() ^ 
					((this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString()).GetHashCode() ^ 
					this.PostedDate.GetHashCode() ^ 
					((this.ModifiedBy == null) ? string.Empty : this.ModifiedBy.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.PostedToInvoice == null) ? string.Empty : this.PostedToInvoice.ToString()).GetHashCode() ^ 
					((this.PostedToInvoiceDate == null) ? string.Empty : this.PostedToInvoiceDate.ToString()).GetHashCode() ^ 
					((this.ElapsedTimeSeconds == null) ? string.Empty : this.ElapsedTimeSeconds.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomerTransactionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomerTransactionBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CustomerTransactionBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CustomerTransactionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomerTransactionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CustomerTransactionBase Object1, CustomerTransactionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if ( Object1.ModeratorId != null && Object2.ModeratorId != null )
			{
				if (Object1.ModeratorId != Object2.ModeratorId)
					equal = false;
			}
			else if (Object1.ModeratorId == null ^ Object2.ModeratorId == null )
			{
				equal = false;
			}
			if ( Object1.PriCustomerNumber != null && Object2.PriCustomerNumber != null )
			{
				if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
					equal = false;
			}
			else if (Object1.PriCustomerNumber == null ^ Object2.PriCustomerNumber == null )
			{
				equal = false;
			}
			if ( Object1.SecCustomerNumber != null && Object2.SecCustomerNumber != null )
			{
				if (Object1.SecCustomerNumber != Object2.SecCustomerNumber)
					equal = false;
			}
			else if (Object1.SecCustomerNumber == null ^ Object2.SecCustomerNumber == null )
			{
				equal = false;
			}
			if (Object1.CustomerTransactionTypeId != Object2.CustomerTransactionTypeId)
				equal = false;
			if ( Object1.TransactionDescription != null && Object2.TransactionDescription != null )
			{
				if (Object1.TransactionDescription != Object2.TransactionDescription)
					equal = false;
			}
			else if (Object1.TransactionDescription == null ^ Object2.TransactionDescription == null )
			{
				equal = false;
			}
			if (Object1.TransactionDate != Object2.TransactionDate)
				equal = false;
			if ( Object1.TransactionAmount != null && Object2.TransactionAmount != null )
			{
				if (Object1.TransactionAmount != Object2.TransactionAmount)
					equal = false;
			}
			else if (Object1.TransactionAmount == null ^ Object2.TransactionAmount == null )
			{
				equal = false;
			}
			if ( Object1.LocalTaxRate != null && Object2.LocalTaxRate != null )
			{
				if (Object1.LocalTaxRate != Object2.LocalTaxRate)
					equal = false;
			}
			else if (Object1.LocalTaxRate == null ^ Object2.LocalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.FederalTaxRate != null && Object2.FederalTaxRate != null )
			{
				if (Object1.FederalTaxRate != Object2.FederalTaxRate)
					equal = false;
			}
			else if (Object1.FederalTaxRate == null ^ Object2.FederalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.LocalTaxAmount != null && Object2.LocalTaxAmount != null )
			{
				if (Object1.LocalTaxAmount != Object2.LocalTaxAmount)
					equal = false;
			}
			else if (Object1.LocalTaxAmount == null ^ Object2.LocalTaxAmount == null )
			{
				equal = false;
			}
			if ( Object1.FederalTaxAmount != null && Object2.FederalTaxAmount != null )
			{
				if (Object1.FederalTaxAmount != Object2.FederalTaxAmount)
					equal = false;
			}
			else if (Object1.FederalTaxAmount == null ^ Object2.FederalTaxAmount == null )
			{
				equal = false;
			}
			if ( Object1.TransactionTotal != null && Object2.TransactionTotal != null )
			{
				if (Object1.TransactionTotal != Object2.TransactionTotal)
					equal = false;
			}
			else if (Object1.TransactionTotal == null ^ Object2.TransactionTotal == null )
			{
				equal = false;
			}
			if ( Object1.CustomerBalance != null && Object2.CustomerBalance != null )
			{
				if (Object1.CustomerBalance != Object2.CustomerBalance)
					equal = false;
			}
			else if (Object1.CustomerBalance == null ^ Object2.CustomerBalance == null )
			{
				equal = false;
			}
			if ( Object1.Wholesaler_ProductId != null && Object2.Wholesaler_ProductId != null )
			{
				if (Object1.Wholesaler_ProductId != Object2.Wholesaler_ProductId)
					equal = false;
			}
			else if (Object1.Wholesaler_ProductId == null ^ Object2.Wholesaler_ProductId == null )
			{
				equal = false;
			}
			if ( Object1.ProductRateId != null && Object2.ProductRateId != null )
			{
				if (Object1.ProductRateId != Object2.ProductRateId)
					equal = false;
			}
			else if (Object1.ProductRateId == null ^ Object2.ProductRateId == null )
			{
				equal = false;
			}
			if ( Object1.Quantity != null && Object2.Quantity != null )
			{
				if (Object1.Quantity != Object2.Quantity)
					equal = false;
			}
			else if (Object1.Quantity == null ^ Object2.Quantity == null )
			{
				equal = false;
			}
			if ( Object1.SellRate != null && Object2.SellRate != null )
			{
				if (Object1.SellRate != Object2.SellRate)
					equal = false;
			}
			else if (Object1.SellRate == null ^ Object2.SellRate == null )
			{
				equal = false;
			}
			if ( Object1.BuyRate != null && Object2.BuyRate != null )
			{
				if (Object1.BuyRate != Object2.BuyRate)
					equal = false;
			}
			else if (Object1.BuyRate == null ^ Object2.BuyRate == null )
			{
				equal = false;
			}
			if ( Object1.WsTransactionAmount != null && Object2.WsTransactionAmount != null )
			{
				if (Object1.WsTransactionAmount != Object2.WsTransactionAmount)
					equal = false;
			}
			else if (Object1.WsTransactionAmount == null ^ Object2.WsTransactionAmount == null )
			{
				equal = false;
			}
			if ( Object1.ReferenceNumber != null && Object2.ReferenceNumber != null )
			{
				if (Object1.ReferenceNumber != Object2.ReferenceNumber)
					equal = false;
			}
			else if (Object1.ReferenceNumber == null ^ Object2.ReferenceNumber == null )
			{
				equal = false;
			}
			if ( Object1.UniqueConferenceId != null && Object2.UniqueConferenceId != null )
			{
				if (Object1.UniqueConferenceId != Object2.UniqueConferenceId)
					equal = false;
			}
			else if (Object1.UniqueConferenceId == null ^ Object2.UniqueConferenceId == null )
			{
				equal = false;
			}
			if (Object1.PostedDate != Object2.PostedDate)
				equal = false;
			if ( Object1.ModifiedBy != null && Object2.ModifiedBy != null )
			{
				if (Object1.ModifiedBy != Object2.ModifiedBy)
					equal = false;
			}
			else if (Object1.ModifiedBy == null ^ Object2.ModifiedBy == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.PostedToInvoice != null && Object2.PostedToInvoice != null )
			{
				if (Object1.PostedToInvoice != Object2.PostedToInvoice)
					equal = false;
			}
			else if (Object1.PostedToInvoice == null ^ Object2.PostedToInvoice == null )
			{
				equal = false;
			}
			if ( Object1.PostedToInvoiceDate != null && Object2.PostedToInvoiceDate != null )
			{
				if (Object1.PostedToInvoiceDate != Object2.PostedToInvoiceDate)
					equal = false;
			}
			else if (Object1.PostedToInvoiceDate == null ^ Object2.PostedToInvoiceDate == null )
			{
				equal = false;
			}
			if ( Object1.ElapsedTimeSeconds != null && Object2.ElapsedTimeSeconds != null )
			{
				if (Object1.ElapsedTimeSeconds != Object2.ElapsedTimeSeconds)
					equal = false;
			}
			else if (Object1.ElapsedTimeSeconds == null ^ Object2.ElapsedTimeSeconds == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomerTransactionBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomerTransactionComparer GetComparer()
        {
            return new CustomerTransactionComparer();
        }
        */

        // Comparer delegates back to CustomerTransaction
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CustomerTransaction rhs, CustomerTransactionColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomerTransactionColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.ModeratorId:
            		return this.ModeratorId.Value.CompareTo(rhs.ModeratorId.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.PriCustomerNumber:
            		return this.PriCustomerNumber.CompareTo(rhs.PriCustomerNumber);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.SecCustomerNumber:
            		return this.SecCustomerNumber.CompareTo(rhs.SecCustomerNumber);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.CustomerTransactionTypeId:
            		return this.CustomerTransactionTypeId.CompareTo(rhs.CustomerTransactionTypeId);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.TransactionDescription:
            		return this.TransactionDescription.CompareTo(rhs.TransactionDescription);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.TransactionDate:
            		return this.TransactionDate.CompareTo(rhs.TransactionDate);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.TransactionAmount:
            		return this.TransactionAmount.Value.CompareTo(rhs.TransactionAmount.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.LocalTaxRate:
            		return this.LocalTaxRate.Value.CompareTo(rhs.LocalTaxRate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.FederalTaxRate:
            		return this.FederalTaxRate.Value.CompareTo(rhs.FederalTaxRate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.LocalTaxAmount:
            		return this.LocalTaxAmount.Value.CompareTo(rhs.LocalTaxAmount.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.FederalTaxAmount:
            		return this.FederalTaxAmount.Value.CompareTo(rhs.FederalTaxAmount.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.TransactionTotal:
            		return this.TransactionTotal.Value.CompareTo(rhs.TransactionTotal.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.CustomerBalance:
            		return this.CustomerBalance.Value.CompareTo(rhs.CustomerBalance.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.Wholesaler_ProductId:
            		return this.Wholesaler_ProductId.Value.CompareTo(rhs.Wholesaler_ProductId.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.ProductRateId:
            		return this.ProductRateId.Value.CompareTo(rhs.ProductRateId.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.Quantity:
            		return this.Quantity.Value.CompareTo(rhs.Quantity.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.SellRate:
            		return this.SellRate.Value.CompareTo(rhs.SellRate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.BuyRate:
            		return this.BuyRate.Value.CompareTo(rhs.BuyRate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.WsTransactionAmount:
            		return this.WsTransactionAmount.Value.CompareTo(rhs.WsTransactionAmount.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.ReferenceNumber:
            		return this.ReferenceNumber.CompareTo(rhs.ReferenceNumber);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.UniqueConferenceId:
            		return this.UniqueConferenceId.CompareTo(rhs.UniqueConferenceId);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.PostedDate:
            		return this.PostedDate.CompareTo(rhs.PostedDate);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.ModifiedBy:
            		return this.ModifiedBy.CompareTo(rhs.ModifiedBy);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.PostedToInvoice:
            		return this.PostedToInvoice.Value.CompareTo(rhs.PostedToInvoice.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.PostedToInvoiceDate:
            		return this.PostedToInvoiceDate.Value.CompareTo(rhs.PostedToInvoiceDate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionColumn.ElapsedTimeSeconds:
            		return this.ElapsedTimeSeconds.Value.CompareTo(rhs.ElapsedTimeSeconds.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomerTransactionKey> Members
		
		// member variable for the EntityId property
		private CustomerTransactionKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CustomerTransactionKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomerTransactionKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CustomerTransaction")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{31}{30}- Id: {0}{30}- WholesalerId: {1}{30}- CustomerId: {2}{30}- ModeratorId: {3}{30}- PriCustomerNumber: {4}{30}- SecCustomerNumber: {5}{30}- CustomerTransactionTypeId: {6}{30}- TransactionDescription: {7}{30}- TransactionDate: {8}{30}- TransactionAmount: {9}{30}- LocalTaxRate: {10}{30}- FederalTaxRate: {11}{30}- LocalTaxAmount: {12}{30}- FederalTaxAmount: {13}{30}- TransactionTotal: {14}{30}- CustomerBalance: {15}{30}- Wholesaler_ProductId: {16}{30}- ProductRateId: {17}{30}- Quantity: {18}{30}- SellRate: {19}{30}- BuyRate: {20}{30}- WsTransactionAmount: {21}{30}- ReferenceNumber: {22}{30}- UniqueConferenceId: {23}{30}- PostedDate: {24}{30}- ModifiedBy: {25}{30}- CreatedDate: {26}{30}- PostedToInvoice: {27}{30}- PostedToInvoiceDate: {28}{30}- ElapsedTimeSeconds: {29}{30}", 
				this.Id,
				this.WholesalerId,
				this.CustomerId,
				(this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString(),
				(this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString(),
				(this.SecCustomerNumber == null) ? string.Empty : this.SecCustomerNumber.ToString(),
				this.CustomerTransactionTypeId,
				(this.TransactionDescription == null) ? string.Empty : this.TransactionDescription.ToString(),
				this.TransactionDate,
				(this.TransactionAmount == null) ? string.Empty : this.TransactionAmount.ToString(),
				(this.LocalTaxRate == null) ? string.Empty : this.LocalTaxRate.ToString(),
				(this.FederalTaxRate == null) ? string.Empty : this.FederalTaxRate.ToString(),
				(this.LocalTaxAmount == null) ? string.Empty : this.LocalTaxAmount.ToString(),
				(this.FederalTaxAmount == null) ? string.Empty : this.FederalTaxAmount.ToString(),
				(this.TransactionTotal == null) ? string.Empty : this.TransactionTotal.ToString(),
				(this.CustomerBalance == null) ? string.Empty : this.CustomerBalance.ToString(),
				(this.Wholesaler_ProductId == null) ? string.Empty : this.Wholesaler_ProductId.ToString(),
				(this.ProductRateId == null) ? string.Empty : this.ProductRateId.ToString(),
				(this.Quantity == null) ? string.Empty : this.Quantity.ToString(),
				(this.SellRate == null) ? string.Empty : this.SellRate.ToString(),
				(this.BuyRate == null) ? string.Empty : this.BuyRate.ToString(),
				(this.WsTransactionAmount == null) ? string.Empty : this.WsTransactionAmount.ToString(),
				(this.ReferenceNumber == null) ? string.Empty : this.ReferenceNumber.ToString(),
				(this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString(),
				this.PostedDate,
				(this.ModifiedBy == null) ? string.Empty : this.ModifiedBy.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.PostedToInvoice == null) ? string.Empty : this.PostedToInvoice.ToString(),
				(this.PostedToInvoiceDate == null) ? string.Empty : this.PostedToInvoiceDate.ToString(),
				(this.ElapsedTimeSeconds == null) ? string.Empty : this.ElapsedTimeSeconds.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CustomerTransaction' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomerTransactionEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "CustomerTransaction"</remarks>
			public System.Int64 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32		  CustomerId = (int)0;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32?		  ModeratorId = null;
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		public System.String		  PriCustomerNumber = null;
		
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		public System.String		  SecCustomerNumber = null;
		
		/// <summary>
		/// CustomerTransactionTypeID : 
		/// </summary>
		public System.Int32		  CustomerTransactionTypeId = (int)0;
		
		/// <summary>
		/// TransactionDescription : 
		/// </summary>
		public System.String		  TransactionDescription = null;
		
		/// <summary>
		/// TransactionDate : 
		/// </summary>
		public System.DateTime		  TransactionDate = DateTime.MinValue;
		
		/// <summary>
		/// TransactionAmount : 
		/// </summary>
		public System.Decimal?		  TransactionAmount = null;
		
		/// <summary>
		/// LocalTaxRate : 
		/// </summary>
		public System.Decimal?		  LocalTaxRate = null;
		
		/// <summary>
		/// FederalTaxRate : 
		/// </summary>
		public System.Decimal?		  FederalTaxRate = null;
		
		/// <summary>
		/// LocalTaxAmount : Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		public System.Decimal?		  LocalTaxAmount = null;
		
		/// <summary>
		/// FederalTaxAmount : Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		public System.Decimal?		  FederalTaxAmount = null;
		
		/// <summary>
		/// TransactionTotal : The total amount of the transaction including taxes.
		/// </summary>
		public System.Decimal?		  TransactionTotal = null;
		
		/// <summary>
		/// CustomerBalance : Customers Balance = Cust.Bal + (+/-TransactionTotal)
		/// </summary>
		public System.Decimal?		  CustomerBalance = null;
		
		/// <summary>
		/// Wholesaler_ProductID : Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.
		/// </summary>
		public System.Int32?		  Wholesaler_ProductId = null;
		
		/// <summary>
		/// ProductRateID : Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.
		/// </summary>
		public System.Int32?		  ProductRateId = null;
		
		/// <summary>
		/// Quantity : Optional: Only used if ProductRateID is set. Used to store the number of items for the specific charge.
		/// </summary>
		public System.Int32?		  Quantity = null;
		
		/// <summary>
		/// SellRate : Optional: Used when ProductRateID is set and stores the price of the item as the time of purchase. Avoids issues if rates or charges change in the future.
		/// </summary>
		public System.Decimal?		  SellRate = null;
		
		/// <summary>
		/// BuyRate : Used to track WS costs
		/// </summary>
		public System.Decimal?		  BuyRate = null;
		
		/// <summary>
		/// WSTransactionAmount : Used to track WS costs
		/// </summary>
		public System.Decimal?		  WsTransactionAmount = null;
		
		/// <summary>
		/// ReferenceNumber : Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.
		/// </summary>
		public System.String		  ReferenceNumber = null;
		
		/// <summary>
		/// UniqueConferenceID : Optional: Used to link the transaction to a specific conference.
		/// </summary>
		public System.String		  UniqueConferenceId = null;
		
		/// <summary>
		/// PostedDate : 
		/// </summary>
		public System.DateTime		  PostedDate = DateTime.Now;
		
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		public System.String		  ModifiedBy = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime?		  CreatedDate = DateTime.Now;
		
		/// <summary>
		/// PostedToInvoice : 
		/// </summary>
		public System.Boolean?		  PostedToInvoice = null;
		
		/// <summary>
		/// PostedToInvoiceDate : 
		/// </summary>
		public System.DateTime?		  PostedToInvoiceDate = null;
		
		/// <summary>
		/// ElapsedTimeSeconds : Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.
		/// </summary>
		public System.Int32?		  ElapsedTimeSeconds = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private CustomerTransactionType _customerTransactionTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CustomerTransactionType"/>.
		/// </summary>
		/// <value>The source CustomerTransactionType for CustomerTransactionTypeId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual CustomerTransactionType CustomerTransactionTypeIdSource
      	{
            get { return this._customerTransactionTypeIdSource; }
            set { this._customerTransactionTypeIdSource = value; }
      	}
		private ProductRate _productRateIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProductRate"/>.
		/// </summary>
		/// <value>The source ProductRate for ProductRateId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual ProductRate ProductRateIdSource
      	{
            get { return this._productRateIdSource; }
            set { this._productRateIdSource = value; }
      	}
		private Wholesaler_Product _wholesaler_ProductIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler_Product"/>.
		/// </summary>
		/// <value>The source Wholesaler_Product for Wholesaler_ProductId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler_Product Wholesaler_ProductIdSource
      	{
            get { return this._wholesaler_ProductIdSource; }
            set { this._wholesaler_ProductIdSource = value; }
      	}
		private Wholesaler _wholesalerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return this._wholesalerIdSource; }
            set { this._wholesalerIdSource = value; }
      	}
		private Customer _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Customer CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomerTransactionEntityData _tmp = new CustomerTransactionEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.PriCustomerNumber = this.PriCustomerNumber;
			_tmp.SecCustomerNumber = this.SecCustomerNumber;
			_tmp.CustomerTransactionTypeId = this.CustomerTransactionTypeId;
			_tmp.TransactionDescription = this.TransactionDescription;
			_tmp.TransactionDate = this.TransactionDate;
			_tmp.TransactionAmount = this.TransactionAmount;
			_tmp.LocalTaxRate = this.LocalTaxRate;
			_tmp.FederalTaxRate = this.FederalTaxRate;
			_tmp.LocalTaxAmount = this.LocalTaxAmount;
			_tmp.FederalTaxAmount = this.FederalTaxAmount;
			_tmp.TransactionTotal = this.TransactionTotal;
			_tmp.CustomerBalance = this.CustomerBalance;
			_tmp.Wholesaler_ProductId = this.Wholesaler_ProductId;
			_tmp.ProductRateId = this.ProductRateId;
			_tmp.Quantity = this.Quantity;
			_tmp.SellRate = this.SellRate;
			_tmp.BuyRate = this.BuyRate;
			_tmp.WsTransactionAmount = this.WsTransactionAmount;
			_tmp.ReferenceNumber = this.ReferenceNumber;
			_tmp.UniqueConferenceId = this.UniqueConferenceId;
			_tmp.PostedDate = this.PostedDate;
			_tmp.ModifiedBy = this.ModifiedBy;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.PostedToInvoice = this.PostedToInvoice;
			_tmp.PostedToInvoiceDate = this.PostedToInvoiceDate;
			_tmp.ElapsedTimeSeconds = this.ElapsedTimeSeconds;
			
			#region Source Parent Composite Entities
			if (this.CustomerTransactionTypeIdSource != null)
				_tmp.CustomerTransactionTypeIdSource = MakeCopyOf(this.CustomerTransactionTypeIdSource) as CustomerTransactionType;
			if (this.ProductRateIdSource != null)
				_tmp.ProductRateIdSource = MakeCopyOf(this.ProductRateIdSource) as ProductRate;
			if (this.Wholesaler_ProductIdSource != null)
				_tmp.Wholesaler_ProductIdSource = MakeCopyOf(this.Wholesaler_ProductIdSource) as Wholesaler_Product;
			if (this.WholesalerIdSource != null)
				_tmp.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CustomerTransactionColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CustomerTransactionColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CustomerTransactionColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CustomerTransactionEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomerTransactionEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CustomerTransactionColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomerTransactionEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomerTransactionEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomerTransactionEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CustomerTransaction"/> object.
	/// </remarks>
	public class CustomerTransactionEventArgs : System.EventArgs
	{
		private CustomerTransactionColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomerTransactionEventArgs class.
		///</summary>
		public CustomerTransactionEventArgs(CustomerTransactionColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomerTransactionEventArgs class.
		///</summary>
		public CustomerTransactionEventArgs(CustomerTransactionColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomerTransactionColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomerTransactionColumn" />
		public CustomerTransactionColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CustomerTransaction related events.
	///</summary>
	public delegate void CustomerTransactionEventHandler(object sender, CustomerTransactionEventArgs e);
	
	#region CustomerTransactionComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomerTransactionComparer : System.Collections.Generic.IComparer<CustomerTransaction>
	{
		CustomerTransactionColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerTransactionComparer"/> class.
        /// </summary>
		public CustomerTransactionComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerTransactionComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomerTransactionComparer(CustomerTransactionColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CustomerTransaction"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CustomerTransaction"/> to compare.</param>
        /// <param name="b">The second <c>CustomerTransaction</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CustomerTransaction a, CustomerTransaction b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CustomerTransaction entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CustomerTransaction a, CustomerTransaction b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomerTransactionColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomerTransactionKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CustomerTransaction"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomerTransactionKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionKey class.
		/// </summary>
		public CustomerTransactionKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionKey class.
		/// </summary>
		public CustomerTransactionKey(CustomerTransactionBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionKey class.
		/// </summary>
		public CustomerTransactionKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomerTransactionBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomerTransactionBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomerTransactionColumn Enum
	
	/// <summary>
	/// Enumerate the CustomerTransaction columns.
	/// </summary>
	[Serializable]
	public enum CustomerTransactionColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerId = 3,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ModeratorId = 4,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		PriCustomerNumber = 5,
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		[EnumTextValue("SecCustomerNumber")]
		[ColumnEnum("SecCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		SecCustomerNumber = 6,
		/// <summary>
		/// CustomerTransactionTypeId : 
		/// </summary>
		[EnumTextValue("CustomerTransactionTypeID")]
		[ColumnEnum("CustomerTransactionTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerTransactionTypeId = 7,
		/// <summary>
		/// TransactionDescription : 
		/// </summary>
		[EnumTextValue("TransactionDescription")]
		[ColumnEnum("TransactionDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		TransactionDescription = 8,
		/// <summary>
		/// TransactionDate : 
		/// </summary>
		[EnumTextValue("TransactionDate")]
		[ColumnEnum("TransactionDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TransactionDate = 9,
		/// <summary>
		/// TransactionAmount : 
		/// </summary>
		[EnumTextValue("TransactionAmount")]
		[ColumnEnum("TransactionAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TransactionAmount = 10,
		/// <summary>
		/// LocalTaxRate : 
		/// </summary>
		[EnumTextValue("LocalTaxRate")]
		[ColumnEnum("LocalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LocalTaxRate = 11,
		/// <summary>
		/// FederalTaxRate : 
		/// </summary>
		[EnumTextValue("FederalTaxRate")]
		[ColumnEnum("FederalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FederalTaxRate = 12,
		/// <summary>
		/// LocalTaxAmount : Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		[EnumTextValue("LocalTaxAmount")]
		[ColumnEnum("LocalTaxAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LocalTaxAmount = 13,
		/// <summary>
		/// FederalTaxAmount : Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		[EnumTextValue("FederalTaxAmount")]
		[ColumnEnum("FederalTaxAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FederalTaxAmount = 14,
		/// <summary>
		/// TransactionTotal : The total amount of the transaction including taxes.
		/// </summary>
		[EnumTextValue("TransactionTotal")]
		[ColumnEnum("TransactionTotal", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TransactionTotal = 15,
		/// <summary>
		/// CustomerBalance : Customers Balance = Cust.Bal + (+/-TransactionTotal)
		/// </summary>
		[EnumTextValue("CustomerBalance")]
		[ColumnEnum("CustomerBalance", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CustomerBalance = 16,
		/// <summary>
		/// Wholesaler_ProductId : Optional: But should be specified for Charges. Used to link transactions to a specific Product for reporting purpose, or can be used to select specific ProductRateID's for miscellaneous charges and the quantity.
		/// </summary>
		[EnumTextValue("Wholesaler_ProductID")]
		[ColumnEnum("Wholesaler_ProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Wholesaler_ProductId = 17,
		/// <summary>
		/// ProductRateId : Optional: Used to type transactions very specifically to a Product Rate. Gives more gandular reporting.
		/// </summary>
		[EnumTextValue("ProductRateID")]
		[ColumnEnum("ProductRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProductRateId = 18,
		/// <summary>
		/// Quantity : Optional: Only used if ProductRateID is set. Used to store the number of items for the specific charge.
		/// </summary>
		[EnumTextValue("Quantity")]
		[ColumnEnum("Quantity", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Quantity = 19,
		/// <summary>
		/// SellRate : Optional: Used when ProductRateID is set and stores the price of the item as the time of purchase. Avoids issues if rates or charges change in the future.
		/// </summary>
		[EnumTextValue("SellRate")]
		[ColumnEnum("SellRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SellRate = 20,
		/// <summary>
		/// BuyRate : Used to track WS costs
		/// </summary>
		[EnumTextValue("BuyRate")]
		[ColumnEnum("BuyRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BuyRate = 21,
		/// <summary>
		/// WsTransactionAmount : Used to track WS costs
		/// </summary>
		[EnumTextValue("WSTransactionAmount")]
		[ColumnEnum("WSTransactionAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTransactionAmount = 22,
		/// <summary>
		/// ReferenceNumber : Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.
		/// </summary>
		[EnumTextValue("ReferenceNumber")]
		[ColumnEnum("ReferenceNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ReferenceNumber = 23,
		/// <summary>
		/// UniqueConferenceId : Optional: Used to link the transaction to a specific conference.
		/// </summary>
		[EnumTextValue("UniqueConferenceID")]
		[ColumnEnum("UniqueConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		UniqueConferenceId = 24,
		/// <summary>
		/// PostedDate : 
		/// </summary>
		[EnumTextValue("PostedDate")]
		[ColumnEnum("PostedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		PostedDate = 25,
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		[EnumTextValue("ModifiedBy")]
		[ColumnEnum("ModifiedBy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ModifiedBy = 26,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 27,
		/// <summary>
		/// PostedToInvoice : 
		/// </summary>
		[EnumTextValue("PostedToInvoice")]
		[ColumnEnum("PostedToInvoice", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		PostedToInvoice = 28,
		/// <summary>
		/// PostedToInvoiceDate : 
		/// </summary>
		[EnumTextValue("PostedToInvoiceDate")]
		[ColumnEnum("PostedToInvoiceDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PostedToInvoiceDate = 29,
		/// <summary>
		/// ElapsedTimeSeconds : Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.
		/// </summary>
		[EnumTextValue("ElapsedTimeSeconds")]
		[ColumnEnum("ElapsedTimeSeconds", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ElapsedTimeSeconds = 30
	}//End enum

	#endregion CustomerTransactionColumn Enum

} // end namespace
