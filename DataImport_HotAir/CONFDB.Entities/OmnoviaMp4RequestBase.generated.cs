
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file OmnoviaMp4Request.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'OmnoviaMP4Request' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class OmnoviaMp4RequestBase : EntityBase, CONFDB.Entities.IOmnoviaMp4Request, IEntityId<OmnoviaMp4RequestKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private OmnoviaMp4RequestEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private OmnoviaMp4RequestEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private OmnoviaMp4RequestEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<OmnoviaMp4Request> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event OmnoviaMp4RequestEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OmnoviaMp4RequestEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OmnoviaMp4RequestBase"/> instance.
		///</summary>
		public OmnoviaMp4RequestBase()
		{
			this.entityData = new OmnoviaMp4RequestEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OmnoviaMp4RequestBase"/> instance.
		///</summary>
		///<param name="_hostedId"></param>
		///<param name="_requestedBy"></param>
		///<param name="_estimatedTime"></param>
		///<param name="_extraInfo"></param>
		///<param name="_omnoviaHostedUrl"></param>
		///<param name="_redbackHostedUrl"></param>
		///<param name="_omnoviaHostedUrlExpiryDate"></param>
		///<param name="_created"></param>
		public OmnoviaMp4RequestBase(System.Int32 _hostedId, System.String _requestedBy, 
			System.String _estimatedTime, System.String _extraInfo, System.String _omnoviaHostedUrl, 
			System.String _redbackHostedUrl, System.DateTime? _omnoviaHostedUrlExpiryDate, System.DateTime? _created)
		{
			this.entityData = new OmnoviaMp4RequestEntityData();
			this.backupData = null;

			this.HostedId = _hostedId;
			this.RequestedBy = _requestedBy;
			this.EstimatedTime = _estimatedTime;
			this.ExtraInfo = _extraInfo;
			this.OmnoviaHostedUrl = _omnoviaHostedUrl;
			this.RedbackHostedUrl = _redbackHostedUrl;
			this.OmnoviaHostedUrlExpiryDate = _omnoviaHostedUrlExpiryDate;
			this.Created = _created;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="OmnoviaMp4Request"/> instance.
		///</summary>
		///<param name="_hostedId"></param>
		///<param name="_requestedBy"></param>
		///<param name="_estimatedTime"></param>
		///<param name="_extraInfo"></param>
		///<param name="_omnoviaHostedUrl"></param>
		///<param name="_redbackHostedUrl"></param>
		///<param name="_omnoviaHostedUrlExpiryDate"></param>
		///<param name="_created"></param>
		public static OmnoviaMp4Request CreateOmnoviaMp4Request(System.Int32 _hostedId, System.String _requestedBy, 
			System.String _estimatedTime, System.String _extraInfo, System.String _omnoviaHostedUrl, 
			System.String _redbackHostedUrl, System.DateTime? _omnoviaHostedUrlExpiryDate, System.DateTime? _created)
		{
			OmnoviaMp4Request newOmnoviaMp4Request = new OmnoviaMp4Request();
			newOmnoviaMp4Request.HostedId = _hostedId;
			newOmnoviaMp4Request.RequestedBy = _requestedBy;
			newOmnoviaMp4Request.EstimatedTime = _estimatedTime;
			newOmnoviaMp4Request.ExtraInfo = _extraInfo;
			newOmnoviaMp4Request.OmnoviaHostedUrl = _omnoviaHostedUrl;
			newOmnoviaMp4Request.RedbackHostedUrl = _redbackHostedUrl;
			newOmnoviaMp4Request.OmnoviaHostedUrlExpiryDate = _omnoviaHostedUrlExpiryDate;
			newOmnoviaMp4Request.Created = _created;
			return newOmnoviaMp4Request;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostedId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 HostedId
		{
			get
			{
				return this.entityData.HostedId; 
			}
			
			set
			{
				if (this.entityData.HostedId == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.HostedId, this.entityData.HostedId);
				this.entityData.HostedId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.HostedId, this.entityData.HostedId);
				OnPropertyChanged("HostedId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestedBy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String RequestedBy
		{
			get
			{
				return this.entityData.RequestedBy; 
			}
			
			set
			{
				if (this.entityData.RequestedBy == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.RequestedBy, this.entityData.RequestedBy);
				this.entityData.RequestedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.RequestedBy, this.entityData.RequestedBy);
				OnPropertyChanged("RequestedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EstimatedTime property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String EstimatedTime
		{
			get
			{
				return this.entityData.EstimatedTime; 
			}
			
			set
			{
				if (this.entityData.EstimatedTime == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.EstimatedTime, this.entityData.EstimatedTime);
				this.entityData.EstimatedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.EstimatedTime, this.entityData.EstimatedTime);
				OnPropertyChanged("EstimatedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExtraInfo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String ExtraInfo
		{
			get
			{
				return this.entityData.ExtraInfo; 
			}
			
			set
			{
				if (this.entityData.ExtraInfo == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.ExtraInfo, this.entityData.ExtraInfo);
				this.entityData.ExtraInfo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.ExtraInfo, this.entityData.ExtraInfo);
				OnPropertyChanged("ExtraInfo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OmnoviaHostedUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String OmnoviaHostedUrl
		{
			get
			{
				return this.entityData.OmnoviaHostedUrl; 
			}
			
			set
			{
				if (this.entityData.OmnoviaHostedUrl == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.OmnoviaHostedUrl, this.entityData.OmnoviaHostedUrl);
				this.entityData.OmnoviaHostedUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.OmnoviaHostedUrl, this.entityData.OmnoviaHostedUrl);
				OnPropertyChanged("OmnoviaHostedUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RedbackHostedUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String RedbackHostedUrl
		{
			get
			{
				return this.entityData.RedbackHostedUrl; 
			}
			
			set
			{
				if (this.entityData.RedbackHostedUrl == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.RedbackHostedUrl, this.entityData.RedbackHostedUrl);
				this.entityData.RedbackHostedUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.RedbackHostedUrl, this.entityData.RedbackHostedUrl);
				OnPropertyChanged("RedbackHostedUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OmnoviaHostedUrlExpiryDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsOmnoviaHostedUrlExpiryDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? OmnoviaHostedUrlExpiryDate
		{
			get
			{
				return this.entityData.OmnoviaHostedUrlExpiryDate; 
			}
			
			set
			{
				if (this.entityData.OmnoviaHostedUrlExpiryDate == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.OmnoviaHostedUrlExpiryDate, this.entityData.OmnoviaHostedUrlExpiryDate);
				this.entityData.OmnoviaHostedUrlExpiryDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.OmnoviaHostedUrlExpiryDate, this.entityData.OmnoviaHostedUrlExpiryDate);
				OnPropertyChanged("OmnoviaHostedUrlExpiryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Created property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.Now. It is up to the developer
		/// to check the value of IsCreatedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Created
		{
			get
			{
				return this.entityData.Created; 
			}
			
			set
			{
				if (this.entityData.Created == value)
					return;
					
				OnColumnChanging(OmnoviaMp4RequestColumn.Created, this.entityData.Created);
				this.entityData.Created = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaMp4RequestColumn.Created, this.entityData.Created);
				OnPropertyChanged("Created");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RequestedBy", "Requested By", 255));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("EstimatedTime", "Estimated Time", 255));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExtraInfo", "Extra Info", 255));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("OmnoviaHostedUrl", "Omnovia Hosted Url", 255));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RedbackHostedUrl", "Redback Hosted Url", 255));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "OmnoviaMP4Request"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "HostedID", "RequestedBy", "EstimatedTime", "ExtraInfo", "OmnoviaHostedURL", "RedbackHostedURL", "OmnoviaHostedURLExpiryDate", "created"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OmnoviaMp4RequestEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (OmnoviaMp4Request) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<OmnoviaMp4Request>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as OmnoviaMp4Request);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed OmnoviaMp4Request Entity 
		///</summary>
		public virtual OmnoviaMp4Request Copy()
		{
			//shallow copy entity
			OmnoviaMp4Request copy = new OmnoviaMp4Request();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.HostedId = this.HostedId;
			copy.RequestedBy = this.RequestedBy;
			copy.EstimatedTime = this.EstimatedTime;
			copy.ExtraInfo = this.ExtraInfo;
			copy.OmnoviaHostedUrl = this.OmnoviaHostedUrl;
			copy.RedbackHostedUrl = this.RedbackHostedUrl;
			copy.OmnoviaHostedUrlExpiryDate = this.OmnoviaHostedUrlExpiryDate;
			copy.Created = this.Created;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed OmnoviaMp4Request Entity which is a deep copy of the current entity.
		///</summary>
		public virtual OmnoviaMp4Request DeepCopy()
		{
			return EntityHelper.Clone<OmnoviaMp4Request>(this as OmnoviaMp4Request);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as OmnoviaMp4RequestEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as OmnoviaMp4RequestEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(OmnoviaMp4RequestColumn column)
		{
			switch(column)
			{
					case OmnoviaMp4RequestColumn.Id:
					return entityData.Id != _originalData.Id;
					case OmnoviaMp4RequestColumn.HostedId:
					return entityData.HostedId != _originalData.HostedId;
					case OmnoviaMp4RequestColumn.RequestedBy:
					return entityData.RequestedBy != _originalData.RequestedBy;
					case OmnoviaMp4RequestColumn.EstimatedTime:
					return entityData.EstimatedTime != _originalData.EstimatedTime;
					case OmnoviaMp4RequestColumn.ExtraInfo:
					return entityData.ExtraInfo != _originalData.ExtraInfo;
					case OmnoviaMp4RequestColumn.OmnoviaHostedUrl:
					return entityData.OmnoviaHostedUrl != _originalData.OmnoviaHostedUrl;
					case OmnoviaMp4RequestColumn.RedbackHostedUrl:
					return entityData.RedbackHostedUrl != _originalData.RedbackHostedUrl;
					case OmnoviaMp4RequestColumn.OmnoviaHostedUrlExpiryDate:
					return entityData.OmnoviaHostedUrlExpiryDate != _originalData.OmnoviaHostedUrlExpiryDate;
					case OmnoviaMp4RequestColumn.Created:
					return entityData.Created != _originalData.Created;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.HostedId != _originalData.HostedId;
			result = result || entityData.RequestedBy != _originalData.RequestedBy;
			result = result || entityData.EstimatedTime != _originalData.EstimatedTime;
			result = result || entityData.ExtraInfo != _originalData.ExtraInfo;
			result = result || entityData.OmnoviaHostedUrl != _originalData.OmnoviaHostedUrl;
			result = result || entityData.RedbackHostedUrl != _originalData.RedbackHostedUrl;
			result = result || entityData.OmnoviaHostedUrlExpiryDate != _originalData.OmnoviaHostedUrlExpiryDate;
			result = result || entityData.Created != _originalData.Created;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="OmnoviaMp4RequestBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is OmnoviaMp4RequestBase)
				return Equals(this, (OmnoviaMp4RequestBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="OmnoviaMp4RequestBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.HostedId.GetHashCode() ^ 
					((this.RequestedBy == null) ? string.Empty : this.RequestedBy.ToString()).GetHashCode() ^ 
					((this.EstimatedTime == null) ? string.Empty : this.EstimatedTime.ToString()).GetHashCode() ^ 
					((this.ExtraInfo == null) ? string.Empty : this.ExtraInfo.ToString()).GetHashCode() ^ 
					((this.OmnoviaHostedUrl == null) ? string.Empty : this.OmnoviaHostedUrl.ToString()).GetHashCode() ^ 
					((this.RedbackHostedUrl == null) ? string.Empty : this.RedbackHostedUrl.ToString()).GetHashCode() ^ 
					((this.OmnoviaHostedUrlExpiryDate == null) ? string.Empty : this.OmnoviaHostedUrlExpiryDate.ToString()).GetHashCode() ^ 
					((this.Created == null) ? string.Empty : this.Created.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OmnoviaMp4RequestBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OmnoviaMp4RequestBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="OmnoviaMp4RequestBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="OmnoviaMp4RequestBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OmnoviaMp4RequestBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(OmnoviaMp4RequestBase Object1, OmnoviaMp4RequestBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.HostedId != Object2.HostedId)
				equal = false;
			if ( Object1.RequestedBy != null && Object2.RequestedBy != null )
			{
				if (Object1.RequestedBy != Object2.RequestedBy)
					equal = false;
			}
			else if (Object1.RequestedBy == null ^ Object2.RequestedBy == null )
			{
				equal = false;
			}
			if ( Object1.EstimatedTime != null && Object2.EstimatedTime != null )
			{
				if (Object1.EstimatedTime != Object2.EstimatedTime)
					equal = false;
			}
			else if (Object1.EstimatedTime == null ^ Object2.EstimatedTime == null )
			{
				equal = false;
			}
			if ( Object1.ExtraInfo != null && Object2.ExtraInfo != null )
			{
				if (Object1.ExtraInfo != Object2.ExtraInfo)
					equal = false;
			}
			else if (Object1.ExtraInfo == null ^ Object2.ExtraInfo == null )
			{
				equal = false;
			}
			if ( Object1.OmnoviaHostedUrl != null && Object2.OmnoviaHostedUrl != null )
			{
				if (Object1.OmnoviaHostedUrl != Object2.OmnoviaHostedUrl)
					equal = false;
			}
			else if (Object1.OmnoviaHostedUrl == null ^ Object2.OmnoviaHostedUrl == null )
			{
				equal = false;
			}
			if ( Object1.RedbackHostedUrl != null && Object2.RedbackHostedUrl != null )
			{
				if (Object1.RedbackHostedUrl != Object2.RedbackHostedUrl)
					equal = false;
			}
			else if (Object1.RedbackHostedUrl == null ^ Object2.RedbackHostedUrl == null )
			{
				equal = false;
			}
			if ( Object1.OmnoviaHostedUrlExpiryDate != null && Object2.OmnoviaHostedUrlExpiryDate != null )
			{
				if (Object1.OmnoviaHostedUrlExpiryDate != Object2.OmnoviaHostedUrlExpiryDate)
					equal = false;
			}
			else if (Object1.OmnoviaHostedUrlExpiryDate == null ^ Object2.OmnoviaHostedUrlExpiryDate == null )
			{
				equal = false;
			}
			if ( Object1.Created != null && Object2.Created != null )
			{
				if (Object1.Created != Object2.Created)
					equal = false;
			}
			else if (Object1.Created == null ^ Object2.Created == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((OmnoviaMp4RequestBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static OmnoviaMp4RequestComparer GetComparer()
        {
            return new OmnoviaMp4RequestComparer();
        }
        */

        // Comparer delegates back to OmnoviaMp4Request
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(OmnoviaMp4Request rhs, OmnoviaMp4RequestColumn which)
        {
            switch (which)
            {
            	
            	
            	case OmnoviaMp4RequestColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case OmnoviaMp4RequestColumn.HostedId:
            		return this.HostedId.CompareTo(rhs.HostedId);
            		
            		                 
            	
            	
            	case OmnoviaMp4RequestColumn.RequestedBy:
            		return this.RequestedBy.CompareTo(rhs.RequestedBy);
            		
            		                 
            	
            	
            	case OmnoviaMp4RequestColumn.EstimatedTime:
            		return this.EstimatedTime.CompareTo(rhs.EstimatedTime);
            		
            		                 
            	
            	
            	case OmnoviaMp4RequestColumn.ExtraInfo:
            		return this.ExtraInfo.CompareTo(rhs.ExtraInfo);
            		
            		                 
            	
            	
            	case OmnoviaMp4RequestColumn.OmnoviaHostedUrl:
            		return this.OmnoviaHostedUrl.CompareTo(rhs.OmnoviaHostedUrl);
            		
            		                 
            	
            	
            	case OmnoviaMp4RequestColumn.RedbackHostedUrl:
            		return this.RedbackHostedUrl.CompareTo(rhs.RedbackHostedUrl);
            		
            		                 
            	
            	
            	case OmnoviaMp4RequestColumn.OmnoviaHostedUrlExpiryDate:
            		return this.OmnoviaHostedUrlExpiryDate.Value.CompareTo(rhs.OmnoviaHostedUrlExpiryDate.Value);
            		
            		                 
            	
            	
            	case OmnoviaMp4RequestColumn.Created:
            		return this.Created.Value.CompareTo(rhs.Created.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OmnoviaMp4RequestKey> Members
		
		// member variable for the EntityId property
		private OmnoviaMp4RequestKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual OmnoviaMp4RequestKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OmnoviaMp4RequestKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("OmnoviaMp4Request")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- Id: {0}{9}- HostedId: {1}{9}- RequestedBy: {2}{9}- EstimatedTime: {3}{9}- ExtraInfo: {4}{9}- OmnoviaHostedUrl: {5}{9}- RedbackHostedUrl: {6}{9}- OmnoviaHostedUrlExpiryDate: {7}{9}- Created: {8}{9}", 
				this.Id,
				this.HostedId,
				(this.RequestedBy == null) ? string.Empty : this.RequestedBy.ToString(),
				(this.EstimatedTime == null) ? string.Empty : this.EstimatedTime.ToString(),
				(this.ExtraInfo == null) ? string.Empty : this.ExtraInfo.ToString(),
				(this.OmnoviaHostedUrl == null) ? string.Empty : this.OmnoviaHostedUrl.ToString(),
				(this.RedbackHostedUrl == null) ? string.Empty : this.RedbackHostedUrl.ToString(),
				(this.OmnoviaHostedUrlExpiryDate == null) ? string.Empty : this.OmnoviaHostedUrlExpiryDate.ToString(),
				(this.Created == null) ? string.Empty : this.Created.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'OmnoviaMP4Request' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class OmnoviaMp4RequestEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// id : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "OmnoviaMP4Request"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// HostedID : 
		/// </summary>
		public System.Int32		  HostedId = (int)0;
		
		/// <summary>
		/// RequestedBy : 
		/// </summary>
		public System.String		  RequestedBy = null;
		
		/// <summary>
		/// EstimatedTime : 
		/// </summary>
		public System.String		  EstimatedTime = null;
		
		/// <summary>
		/// ExtraInfo : 
		/// </summary>
		public System.String		  ExtraInfo = null;
		
		/// <summary>
		/// OmnoviaHostedURL : 
		/// </summary>
		public System.String		  OmnoviaHostedUrl = null;
		
		/// <summary>
		/// RedbackHostedURL : 
		/// </summary>
		public System.String		  RedbackHostedUrl = null;
		
		/// <summary>
		/// OmnoviaHostedURLExpiryDate : 
		/// </summary>
		public System.DateTime?		  OmnoviaHostedUrlExpiryDate = null;
		
		/// <summary>
		/// created : 
		/// </summary>
		public System.DateTime?		  Created = DateTime.Now;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			OmnoviaMp4RequestEntityData _tmp = new OmnoviaMp4RequestEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.HostedId = this.HostedId;
			_tmp.RequestedBy = this.RequestedBy;
			_tmp.EstimatedTime = this.EstimatedTime;
			_tmp.ExtraInfo = this.ExtraInfo;
			_tmp.OmnoviaHostedUrl = this.OmnoviaHostedUrl;
			_tmp.RedbackHostedUrl = this.RedbackHostedUrl;
			_tmp.OmnoviaHostedUrlExpiryDate = this.OmnoviaHostedUrlExpiryDate;
			_tmp.Created = this.Created;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OmnoviaMp4RequestColumn"/> which has raised the event.</param>
		public void OnColumnChanging(OmnoviaMp4RequestColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OmnoviaMp4RequestColumn"/> which has raised the event.</param>
		public void OnColumnChanged(OmnoviaMp4RequestColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OmnoviaMp4RequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(OmnoviaMp4RequestColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				OmnoviaMp4RequestEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OmnoviaMp4RequestEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OmnoviaMp4RequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(OmnoviaMp4RequestColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OmnoviaMp4RequestEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OmnoviaMp4RequestEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region OmnoviaMp4RequestEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="OmnoviaMp4Request"/> object.
	/// </remarks>
	public class OmnoviaMp4RequestEventArgs : System.EventArgs
	{
		private OmnoviaMp4RequestColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the OmnoviaMp4RequestEventArgs class.
		///</summary>
		public OmnoviaMp4RequestEventArgs(OmnoviaMp4RequestColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OmnoviaMp4RequestEventArgs class.
		///</summary>
		public OmnoviaMp4RequestEventArgs(OmnoviaMp4RequestColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The OmnoviaMp4RequestColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OmnoviaMp4RequestColumn" />
		public OmnoviaMp4RequestColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all OmnoviaMp4Request related events.
	///</summary>
	public delegate void OmnoviaMp4RequestEventHandler(object sender, OmnoviaMp4RequestEventArgs e);
	
	#region OmnoviaMp4RequestComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OmnoviaMp4RequestComparer : System.Collections.Generic.IComparer<OmnoviaMp4Request>
	{
		OmnoviaMp4RequestColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OmnoviaMp4RequestComparer"/> class.
        /// </summary>
		public OmnoviaMp4RequestComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:OmnoviaMp4RequestComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OmnoviaMp4RequestComparer(OmnoviaMp4RequestColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="OmnoviaMp4Request"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="OmnoviaMp4Request"/> to compare.</param>
        /// <param name="b">The second <c>OmnoviaMp4Request</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(OmnoviaMp4Request a, OmnoviaMp4Request b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(OmnoviaMp4Request entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(OmnoviaMp4Request a, OmnoviaMp4Request b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OmnoviaMp4RequestColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OmnoviaMp4RequestKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="OmnoviaMp4Request"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OmnoviaMp4RequestKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OmnoviaMp4RequestKey class.
		/// </summary>
		public OmnoviaMp4RequestKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OmnoviaMp4RequestKey class.
		/// </summary>
		public OmnoviaMp4RequestKey(OmnoviaMp4RequestBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OmnoviaMp4RequestKey class.
		/// </summary>
		public OmnoviaMp4RequestKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OmnoviaMp4RequestBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OmnoviaMp4RequestBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OmnoviaMp4RequestColumn Enum
	
	/// <summary>
	/// Enumerate the OmnoviaMp4Request columns.
	/// </summary>
	[Serializable]
	public enum OmnoviaMp4RequestColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("id")]
		[ColumnEnum("id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// HostedId : 
		/// </summary>
		[EnumTextValue("HostedID")]
		[ColumnEnum("HostedID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		HostedId = 2,
		/// <summary>
		/// RequestedBy : 
		/// </summary>
		[EnumTextValue("RequestedBy")]
		[ColumnEnum("RequestedBy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		RequestedBy = 3,
		/// <summary>
		/// EstimatedTime : 
		/// </summary>
		[EnumTextValue("EstimatedTime")]
		[ColumnEnum("EstimatedTime", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		EstimatedTime = 4,
		/// <summary>
		/// ExtraInfo : 
		/// </summary>
		[EnumTextValue("ExtraInfo")]
		[ColumnEnum("ExtraInfo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		ExtraInfo = 5,
		/// <summary>
		/// OmnoviaHostedUrl : 
		/// </summary>
		[EnumTextValue("OmnoviaHostedURL")]
		[ColumnEnum("OmnoviaHostedURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		OmnoviaHostedUrl = 6,
		/// <summary>
		/// RedbackHostedUrl : 
		/// </summary>
		[EnumTextValue("RedbackHostedURL")]
		[ColumnEnum("RedbackHostedURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		RedbackHostedUrl = 7,
		/// <summary>
		/// OmnoviaHostedUrlExpiryDate : 
		/// </summary>
		[EnumTextValue("OmnoviaHostedURLExpiryDate")]
		[ColumnEnum("OmnoviaHostedURLExpiryDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		OmnoviaHostedUrlExpiryDate = 8,
		/// <summary>
		/// Created : 
		/// </summary>
		[EnumTextValue("created")]
		[ColumnEnum("created", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Created = 9
	}//End enum

	#endregion OmnoviaMp4RequestColumn Enum

} // end namespace
