
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CompanyLeadTracking.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'CompanyLeadTracking' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class CompanyLeadTrackingBase : EntityBase, CONFDB.Entities.ICompanyLeadTracking, IEntityId<CompanyLeadTrackingKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CompanyLeadTrackingEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CompanyLeadTrackingEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CompanyLeadTrackingEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CompanyLeadTracking> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CompanyLeadTrackingEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CompanyLeadTrackingEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CompanyLeadTrackingBase"/> instance.
		///</summary>
		public CompanyLeadTrackingBase()
		{
			this.entityData = new CompanyLeadTrackingEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CompanyLeadTrackingBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_companyInfoId"></param>
		///<param name="_projectedRevenue"></param>
		///<param name="_leadProductId"></param>
		///<param name="_leadSourceId"></param>
		///<param name="_leadStageId"></param>
		///<param name="_expectedCloseDate"></param>
		///<param name="_createdDate"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_leadPeriodId"></param>
		///<param name="_leadChurnReasonId"></param>
		public CompanyLeadTrackingBase(System.Int32 _id, System.Int32 _companyInfoId, 
			System.Decimal? _projectedRevenue, System.Int32 _leadProductId, System.Int32 _leadSourceId, 
			System.Int32 _leadStageId, System.DateTime _expectedCloseDate, System.DateTime _createdDate, 
			System.String _modifiedBy, System.Int32 _leadPeriodId, System.Int32 _leadChurnReasonId)
		{
			this.entityData = new CompanyLeadTrackingEntityData();
			this.backupData = null;

			this.Id = _id;
			this.CompanyInfoId = _companyInfoId;
			this.ProjectedRevenue = _projectedRevenue;
			this.LeadProductId = _leadProductId;
			this.LeadSourceId = _leadSourceId;
			this.LeadStageId = _leadStageId;
			this.ExpectedCloseDate = _expectedCloseDate;
			this.CreatedDate = _createdDate;
			this.ModifiedBy = _modifiedBy;
			this.LeadPeriodId = _leadPeriodId;
			this.LeadChurnReasonId = _leadChurnReasonId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CompanyLeadTracking"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_companyInfoId"></param>
		///<param name="_projectedRevenue"></param>
		///<param name="_leadProductId"></param>
		///<param name="_leadSourceId"></param>
		///<param name="_leadStageId"></param>
		///<param name="_expectedCloseDate"></param>
		///<param name="_createdDate"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_leadPeriodId"></param>
		///<param name="_leadChurnReasonId"></param>
		public static CompanyLeadTracking CreateCompanyLeadTracking(System.Int32 _id, System.Int32 _companyInfoId, 
			System.Decimal? _projectedRevenue, System.Int32 _leadProductId, System.Int32 _leadSourceId, 
			System.Int32 _leadStageId, System.DateTime _expectedCloseDate, System.DateTime _createdDate, 
			System.String _modifiedBy, System.Int32 _leadPeriodId, System.Int32 _leadChurnReasonId)
		{
			CompanyLeadTracking newCompanyLeadTracking = new CompanyLeadTracking();
			newCompanyLeadTracking.Id = _id;
			newCompanyLeadTracking.CompanyInfoId = _companyInfoId;
			newCompanyLeadTracking.ProjectedRevenue = _projectedRevenue;
			newCompanyLeadTracking.LeadProductId = _leadProductId;
			newCompanyLeadTracking.LeadSourceId = _leadSourceId;
			newCompanyLeadTracking.LeadStageId = _leadStageId;
			newCompanyLeadTracking.ExpectedCloseDate = _expectedCloseDate;
			newCompanyLeadTracking.CreatedDate = _createdDate;
			newCompanyLeadTracking.ModifiedBy = _modifiedBy;
			newCompanyLeadTracking.LeadPeriodId = _leadPeriodId;
			newCompanyLeadTracking.LeadChurnReasonId = _leadChurnReasonId;
			return newCompanyLeadTracking;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyInfoId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CompanyInfoId
		{
			get
			{
				return this.entityData.CompanyInfoId; 
			}
			
			set
			{
				if (this.entityData.CompanyInfoId == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.CompanyInfoId, this.entityData.CompanyInfoId);
				this.entityData.CompanyInfoId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.CompanyInfoId, this.entityData.CompanyInfoId);
				OnPropertyChanged("CompanyInfoId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProjectedRevenue property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsProjectedRevenueNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ProjectedRevenue
		{
			get
			{
				return this.entityData.ProjectedRevenue; 
			}
			
			set
			{
				if (this.entityData.ProjectedRevenue == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.ProjectedRevenue, this.entityData.ProjectedRevenue);
				this.entityData.ProjectedRevenue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.ProjectedRevenue, this.entityData.ProjectedRevenue);
				OnPropertyChanged("ProjectedRevenue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LeadProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LeadProductId
		{
			get
			{
				return this.entityData.LeadProductId; 
			}
			
			set
			{
				if (this.entityData.LeadProductId == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.LeadProductId, this.entityData.LeadProductId);
				this.entityData.LeadProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.LeadProductId, this.entityData.LeadProductId);
				OnPropertyChanged("LeadProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LeadSourceId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LeadSourceId
		{
			get
			{
				return this.entityData.LeadSourceId; 
			}
			
			set
			{
				if (this.entityData.LeadSourceId == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.LeadSourceId, this.entityData.LeadSourceId);
				this.entityData.LeadSourceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.LeadSourceId, this.entityData.LeadSourceId);
				OnPropertyChanged("LeadSourceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LeadStageId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LeadStageId
		{
			get
			{
				return this.entityData.LeadStageId; 
			}
			
			set
			{
				if (this.entityData.LeadStageId == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.LeadStageId, this.entityData.LeadStageId);
				this.entityData.LeadStageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.LeadStageId, this.entityData.LeadStageId);
				OnPropertyChanged("LeadStageId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpectedCloseDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExpectedCloseDate
		{
			get
			{
				return this.entityData.ExpectedCloseDate; 
			}
			
			set
			{
				if (this.entityData.ExpectedCloseDate == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.ExpectedCloseDate, this.entityData.ExpectedCloseDate);
				this.entityData.ExpectedCloseDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.ExpectedCloseDate, this.entityData.ExpectedCloseDate);
				OnPropertyChanged("ExpectedCloseDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ModifiedBy
		{
			get
			{
				return this.entityData.ModifiedBy; 
			}
			
			set
			{
				if (this.entityData.ModifiedBy == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.ModifiedBy, this.entityData.ModifiedBy);
				this.entityData.ModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.ModifiedBy, this.entityData.ModifiedBy);
				OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LeadPeriodId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LeadPeriodId
		{
			get
			{
				return this.entityData.LeadPeriodId; 
			}
			
			set
			{
				if (this.entityData.LeadPeriodId == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.LeadPeriodId, this.entityData.LeadPeriodId);
				this.entityData.LeadPeriodId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.LeadPeriodId, this.entityData.LeadPeriodId);
				OnPropertyChanged("LeadPeriodId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LeadChurnReasonId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LeadChurnReasonId
		{
			get
			{
				return this.entityData.LeadChurnReasonId; 
			}
			
			set
			{
				if (this.entityData.LeadChurnReasonId == value)
					return;
					
				OnColumnChanging(CompanyLeadTrackingColumn.LeadChurnReasonId, this.entityData.LeadChurnReasonId);
				this.entityData.LeadChurnReasonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyLeadTrackingColumn.LeadChurnReasonId, this.entityData.LeadChurnReasonId);
				OnPropertyChanged("LeadChurnReasonId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="LeadPeriod"/>.
		/// </summary>
		/// <value>The source LeadPeriod for LeadPeriodId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LeadPeriod LeadPeriodIdSource
      	{
            get { return entityData.LeadPeriodIdSource; }
            set { entityData.LeadPeriodIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="CompanyInfo"/>.
		/// </summary>
		/// <value>The source CompanyInfo for CompanyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual CompanyInfo CompanyInfoIdSource
      	{
            get { return entityData.CompanyInfoIdSource; }
            set { entityData.CompanyInfoIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LeadSource"/>.
		/// </summary>
		/// <value>The source LeadSource for LeadSourceId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LeadSource LeadSourceIdSource
      	{
            get { return entityData.LeadSourceIdSource; }
            set { entityData.LeadSourceIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LeadChurnReason"/>.
		/// </summary>
		/// <value>The source LeadChurnReason for LeadChurnReasonId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LeadChurnReason LeadChurnReasonIdSource
      	{
            get { return entityData.LeadChurnReasonIdSource; }
            set { entityData.LeadChurnReasonIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LeadProduct"/>.
		/// </summary>
		/// <value>The source LeadProduct for LeadProductId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LeadProduct LeadProductIdSource
      	{
            get { return entityData.LeadProductIdSource; }
            set { entityData.LeadProductIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="LeadStage"/>.
		/// </summary>
		/// <value>The source LeadStage for LeadStageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual LeadStage LeadStageIdSource
      	{
            get { return entityData.LeadStageIdSource; }
            set { entityData.LeadStageIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CompanyLeadTrackingNotes objects
		///	which are related to this object through the relation FK_CompanyLeadTrackingNotes_CompanyLeadTracking
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CompanyLeadTrackingNotes> CompanyLeadTrackingNotesCollection
		{
			get { return entityData.CompanyLeadTrackingNotesCollection; }
			set { entityData.CompanyLeadTrackingNotesCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModifiedBy", "Modified By", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CompanyLeadTracking"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "CompanyInfoID", "ProjectedRevenue", "LeadProductID", "LeadSourceID", "LeadStageID", "ExpectedCloseDate", "CreatedDate", "ModifiedBy", "LeadPeriodID", "LeadChurnReasonID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CompanyLeadTrackingEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CompanyLeadTracking) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CompanyLeadTracking>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CompanyLeadTracking);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CompanyLeadTracking Entity 
		///</summary>
		public virtual CompanyLeadTracking Copy()
		{
			//shallow copy entity
			CompanyLeadTracking copy = new CompanyLeadTracking();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.OriginalId = this.OriginalId;
			copy.CompanyInfoId = this.CompanyInfoId;
			copy.ProjectedRevenue = this.ProjectedRevenue;
			copy.LeadProductId = this.LeadProductId;
			copy.LeadSourceId = this.LeadSourceId;
			copy.LeadStageId = this.LeadStageId;
			copy.ExpectedCloseDate = this.ExpectedCloseDate;
			copy.CreatedDate = this.CreatedDate;
			copy.ModifiedBy = this.ModifiedBy;
			copy.LeadPeriodId = this.LeadPeriodId;
			copy.LeadChurnReasonId = this.LeadChurnReasonId;
			
			copy.LeadPeriodIdSource = MakeCopyOf(this.LeadPeriodIdSource) as LeadPeriod;
			copy.CompanyInfoIdSource = MakeCopyOf(this.CompanyInfoIdSource) as CompanyInfo;
			copy.LeadSourceIdSource = MakeCopyOf(this.LeadSourceIdSource) as LeadSource;
			copy.LeadChurnReasonIdSource = MakeCopyOf(this.LeadChurnReasonIdSource) as LeadChurnReason;
			copy.LeadProductIdSource = MakeCopyOf(this.LeadProductIdSource) as LeadProduct;
			copy.LeadStageIdSource = MakeCopyOf(this.LeadStageIdSource) as LeadStage;
		
			//deep copy nested objects
			copy.CompanyLeadTrackingNotesCollection = (TList<CompanyLeadTrackingNotes>) MakeCopyOf(this.CompanyLeadTrackingNotesCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed CompanyLeadTracking Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CompanyLeadTracking DeepCopy()
		{
			return EntityHelper.Clone<CompanyLeadTracking>(this as CompanyLeadTracking);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CompanyLeadTrackingEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CompanyLeadTrackingEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CompanyLeadTrackingColumn column)
		{
			switch(column)
			{
					case CompanyLeadTrackingColumn.Id:
					return entityData.Id != _originalData.Id;
					case CompanyLeadTrackingColumn.CompanyInfoId:
					return entityData.CompanyInfoId != _originalData.CompanyInfoId;
					case CompanyLeadTrackingColumn.ProjectedRevenue:
					return entityData.ProjectedRevenue != _originalData.ProjectedRevenue;
					case CompanyLeadTrackingColumn.LeadProductId:
					return entityData.LeadProductId != _originalData.LeadProductId;
					case CompanyLeadTrackingColumn.LeadSourceId:
					return entityData.LeadSourceId != _originalData.LeadSourceId;
					case CompanyLeadTrackingColumn.LeadStageId:
					return entityData.LeadStageId != _originalData.LeadStageId;
					case CompanyLeadTrackingColumn.ExpectedCloseDate:
					return entityData.ExpectedCloseDate != _originalData.ExpectedCloseDate;
					case CompanyLeadTrackingColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case CompanyLeadTrackingColumn.ModifiedBy:
					return entityData.ModifiedBy != _originalData.ModifiedBy;
					case CompanyLeadTrackingColumn.LeadPeriodId:
					return entityData.LeadPeriodId != _originalData.LeadPeriodId;
					case CompanyLeadTrackingColumn.LeadChurnReasonId:
					return entityData.LeadChurnReasonId != _originalData.LeadChurnReasonId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.CompanyInfoId != _originalData.CompanyInfoId;
			result = result || entityData.ProjectedRevenue != _originalData.ProjectedRevenue;
			result = result || entityData.LeadProductId != _originalData.LeadProductId;
			result = result || entityData.LeadSourceId != _originalData.LeadSourceId;
			result = result || entityData.LeadStageId != _originalData.LeadStageId;
			result = result || entityData.ExpectedCloseDate != _originalData.ExpectedCloseDate;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.ModifiedBy != _originalData.ModifiedBy;
			result = result || entityData.LeadPeriodId != _originalData.LeadPeriodId;
			result = result || entityData.LeadChurnReasonId != _originalData.LeadChurnReasonId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CompanyLeadTrackingBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is CompanyLeadTrackingBase)
				return Equals(this, (CompanyLeadTrackingBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CompanyLeadTrackingBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.CompanyInfoId.GetHashCode() ^ 
					((this.ProjectedRevenue == null) ? string.Empty : this.ProjectedRevenue.ToString()).GetHashCode() ^ 
					this.LeadProductId.GetHashCode() ^ 
					this.LeadSourceId.GetHashCode() ^ 
					this.LeadStageId.GetHashCode() ^ 
					this.ExpectedCloseDate.GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					((this.ModifiedBy == null) ? string.Empty : this.ModifiedBy.ToString()).GetHashCode() ^ 
					this.LeadPeriodId.GetHashCode() ^ 
					this.LeadChurnReasonId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CompanyLeadTrackingBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CompanyLeadTrackingBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CompanyLeadTrackingBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CompanyLeadTrackingBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CompanyLeadTrackingBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CompanyLeadTrackingBase Object1, CompanyLeadTrackingBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.CompanyInfoId != Object2.CompanyInfoId)
				equal = false;
			if ( Object1.ProjectedRevenue != null && Object2.ProjectedRevenue != null )
			{
				if (Object1.ProjectedRevenue != Object2.ProjectedRevenue)
					equal = false;
			}
			else if (Object1.ProjectedRevenue == null ^ Object2.ProjectedRevenue == null )
			{
				equal = false;
			}
			if (Object1.LeadProductId != Object2.LeadProductId)
				equal = false;
			if (Object1.LeadSourceId != Object2.LeadSourceId)
				equal = false;
			if (Object1.LeadStageId != Object2.LeadStageId)
				equal = false;
			if (Object1.ExpectedCloseDate != Object2.ExpectedCloseDate)
				equal = false;
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if ( Object1.ModifiedBy != null && Object2.ModifiedBy != null )
			{
				if (Object1.ModifiedBy != Object2.ModifiedBy)
					equal = false;
			}
			else if (Object1.ModifiedBy == null ^ Object2.ModifiedBy == null )
			{
				equal = false;
			}
			if (Object1.LeadPeriodId != Object2.LeadPeriodId)
				equal = false;
			if (Object1.LeadChurnReasonId != Object2.LeadChurnReasonId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CompanyLeadTrackingBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CompanyLeadTrackingComparer GetComparer()
        {
            return new CompanyLeadTrackingComparer();
        }
        */

        // Comparer delegates back to CompanyLeadTracking
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CompanyLeadTracking rhs, CompanyLeadTrackingColumn which)
        {
            switch (which)
            {
            	
            	
            	case CompanyLeadTrackingColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.CompanyInfoId:
            		return this.CompanyInfoId.CompareTo(rhs.CompanyInfoId);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.ProjectedRevenue:
            		return this.ProjectedRevenue.Value.CompareTo(rhs.ProjectedRevenue.Value);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.LeadProductId:
            		return this.LeadProductId.CompareTo(rhs.LeadProductId);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.LeadSourceId:
            		return this.LeadSourceId.CompareTo(rhs.LeadSourceId);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.LeadStageId:
            		return this.LeadStageId.CompareTo(rhs.LeadStageId);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.ExpectedCloseDate:
            		return this.ExpectedCloseDate.CompareTo(rhs.ExpectedCloseDate);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.ModifiedBy:
            		return this.ModifiedBy.CompareTo(rhs.ModifiedBy);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.LeadPeriodId:
            		return this.LeadPeriodId.CompareTo(rhs.LeadPeriodId);
            		
            		                 
            	
            	
            	case CompanyLeadTrackingColumn.LeadChurnReasonId:
            		return this.LeadChurnReasonId.CompareTo(rhs.LeadChurnReasonId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CompanyLeadTrackingKey> Members
		
		// member variable for the EntityId property
		private CompanyLeadTrackingKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CompanyLeadTrackingKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CompanyLeadTrackingKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CompanyLeadTracking")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- Id: {0}{11}- CompanyInfoId: {1}{11}- ProjectedRevenue: {2}{11}- LeadProductId: {3}{11}- LeadSourceId: {4}{11}- LeadStageId: {5}{11}- ExpectedCloseDate: {6}{11}- CreatedDate: {7}{11}- ModifiedBy: {8}{11}- LeadPeriodId: {9}{11}- LeadChurnReasonId: {10}{11}", 
				this.Id,
				this.CompanyInfoId,
				(this.ProjectedRevenue == null) ? string.Empty : this.ProjectedRevenue.ToString(),
				this.LeadProductId,
				this.LeadSourceId,
				this.LeadStageId,
				this.ExpectedCloseDate,
				this.CreatedDate,
				(this.ModifiedBy == null) ? string.Empty : this.ModifiedBy.ToString(),
				this.LeadPeriodId,
				this.LeadChurnReasonId,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CompanyLeadTracking' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CompanyLeadTrackingEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "CompanyLeadTracking"</remarks>
			public System.Int32 Id;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CompanyInfoID : 
		/// </summary>
		public System.Int32		  CompanyInfoId = (int)0;
		
		/// <summary>
		/// ProjectedRevenue : 
		/// </summary>
		public System.Decimal?		  ProjectedRevenue = null;
		
		/// <summary>
		/// LeadProductID : 
		/// </summary>
		public System.Int32		  LeadProductId = (int)0;
		
		/// <summary>
		/// LeadSourceID : 
		/// </summary>
		public System.Int32		  LeadSourceId = (int)0;
		
		/// <summary>
		/// LeadStageID : 
		/// </summary>
		public System.Int32		  LeadStageId = (int)0;
		
		/// <summary>
		/// ExpectedCloseDate : 
		/// </summary>
		public System.DateTime		  ExpectedCloseDate = DateTime.MinValue;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		public System.String		  ModifiedBy = null;
		
		/// <summary>
		/// LeadPeriodID : 
		/// </summary>
		public System.Int32		  LeadPeriodId = (int)0;
		
		/// <summary>
		/// LeadChurnReasonID : 
		/// </summary>
		public System.Int32		  LeadChurnReasonId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private LeadPeriod _leadPeriodIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LeadPeriod"/>.
		/// </summary>
		/// <value>The source LeadPeriod for LeadPeriodId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual LeadPeriod LeadPeriodIdSource
      	{
            get { return this._leadPeriodIdSource; }
            set { this._leadPeriodIdSource = value; }
      	}
		private CompanyInfo _companyInfoIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="CompanyInfo"/>.
		/// </summary>
		/// <value>The source CompanyInfo for CompanyInfoId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual CompanyInfo CompanyInfoIdSource
      	{
            get { return this._companyInfoIdSource; }
            set { this._companyInfoIdSource = value; }
      	}
		private LeadSource _leadSourceIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LeadSource"/>.
		/// </summary>
		/// <value>The source LeadSource for LeadSourceId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual LeadSource LeadSourceIdSource
      	{
            get { return this._leadSourceIdSource; }
            set { this._leadSourceIdSource = value; }
      	}
		private LeadChurnReason _leadChurnReasonIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LeadChurnReason"/>.
		/// </summary>
		/// <value>The source LeadChurnReason for LeadChurnReasonId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual LeadChurnReason LeadChurnReasonIdSource
      	{
            get { return this._leadChurnReasonIdSource; }
            set { this._leadChurnReasonIdSource = value; }
      	}
		private LeadProduct _leadProductIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LeadProduct"/>.
		/// </summary>
		/// <value>The source LeadProduct for LeadProductId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual LeadProduct LeadProductIdSource
      	{
            get { return this._leadProductIdSource; }
            set { this._leadProductIdSource = value; }
      	}
		private LeadStage _leadStageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="LeadStage"/>.
		/// </summary>
		/// <value>The source LeadStage for LeadStageId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual LeadStage LeadStageIdSource
      	{
            get { return this._leadStageIdSource; }
            set { this._leadStageIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CompanyLeadTrackingNotesCollection
		
		private TList<CompanyLeadTrackingNotes> _companyLeadTrackingNotesCompanyLeadTrackingId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _companyLeadTrackingNotesCompanyLeadTrackingId
		/// </summary>	
		public TList<CompanyLeadTrackingNotes> CompanyLeadTrackingNotesCollection
		{
			get
			{
				if (_companyLeadTrackingNotesCompanyLeadTrackingId == null)
				{
				_companyLeadTrackingNotesCompanyLeadTrackingId = new TList<CompanyLeadTrackingNotes>();
				}
	
				return _companyLeadTrackingNotesCompanyLeadTrackingId;
			}
			set { _companyLeadTrackingNotesCompanyLeadTrackingId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CompanyLeadTrackingEntityData _tmp = new CompanyLeadTrackingEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.CompanyInfoId = this.CompanyInfoId;
			_tmp.ProjectedRevenue = this.ProjectedRevenue;
			_tmp.LeadProductId = this.LeadProductId;
			_tmp.LeadSourceId = this.LeadSourceId;
			_tmp.LeadStageId = this.LeadStageId;
			_tmp.ExpectedCloseDate = this.ExpectedCloseDate;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ModifiedBy = this.ModifiedBy;
			_tmp.LeadPeriodId = this.LeadPeriodId;
			_tmp.LeadChurnReasonId = this.LeadChurnReasonId;
			
			#region Source Parent Composite Entities
			if (this.LeadPeriodIdSource != null)
				_tmp.LeadPeriodIdSource = MakeCopyOf(this.LeadPeriodIdSource) as LeadPeriod;
			if (this.CompanyInfoIdSource != null)
				_tmp.CompanyInfoIdSource = MakeCopyOf(this.CompanyInfoIdSource) as CompanyInfo;
			if (this.LeadSourceIdSource != null)
				_tmp.LeadSourceIdSource = MakeCopyOf(this.LeadSourceIdSource) as LeadSource;
			if (this.LeadChurnReasonIdSource != null)
				_tmp.LeadChurnReasonIdSource = MakeCopyOf(this.LeadChurnReasonIdSource) as LeadChurnReason;
			if (this.LeadProductIdSource != null)
				_tmp.LeadProductIdSource = MakeCopyOf(this.LeadProductIdSource) as LeadProduct;
			if (this.LeadStageIdSource != null)
				_tmp.LeadStageIdSource = MakeCopyOf(this.LeadStageIdSource) as LeadStage;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._companyLeadTrackingNotesCompanyLeadTrackingId != null)
				_tmp.CompanyLeadTrackingNotesCollection = (TList<CompanyLeadTrackingNotes>) MakeCopyOf(this.CompanyLeadTrackingNotesCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyLeadTrackingColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CompanyLeadTrackingColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyLeadTrackingColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CompanyLeadTrackingColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyLeadTrackingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CompanyLeadTrackingColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CompanyLeadTrackingEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CompanyLeadTrackingEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyLeadTrackingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CompanyLeadTrackingColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CompanyLeadTrackingEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CompanyLeadTrackingEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CompanyLeadTrackingEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CompanyLeadTracking"/> object.
	/// </remarks>
	public class CompanyLeadTrackingEventArgs : System.EventArgs
	{
		private CompanyLeadTrackingColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CompanyLeadTrackingEventArgs class.
		///</summary>
		public CompanyLeadTrackingEventArgs(CompanyLeadTrackingColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CompanyLeadTrackingEventArgs class.
		///</summary>
		public CompanyLeadTrackingEventArgs(CompanyLeadTrackingColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CompanyLeadTrackingColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CompanyLeadTrackingColumn" />
		public CompanyLeadTrackingColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CompanyLeadTracking related events.
	///</summary>
	public delegate void CompanyLeadTrackingEventHandler(object sender, CompanyLeadTrackingEventArgs e);
	
	#region CompanyLeadTrackingComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CompanyLeadTrackingComparer : System.Collections.Generic.IComparer<CompanyLeadTracking>
	{
		CompanyLeadTrackingColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CompanyLeadTrackingComparer"/> class.
        /// </summary>
		public CompanyLeadTrackingComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CompanyLeadTrackingComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CompanyLeadTrackingComparer(CompanyLeadTrackingColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CompanyLeadTracking"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CompanyLeadTracking"/> to compare.</param>
        /// <param name="b">The second <c>CompanyLeadTracking</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CompanyLeadTracking a, CompanyLeadTracking b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CompanyLeadTracking entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CompanyLeadTracking a, CompanyLeadTracking b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CompanyLeadTrackingColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CompanyLeadTrackingKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CompanyLeadTracking"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CompanyLeadTrackingKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CompanyLeadTrackingKey class.
		/// </summary>
		public CompanyLeadTrackingKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CompanyLeadTrackingKey class.
		/// </summary>
		public CompanyLeadTrackingKey(CompanyLeadTrackingBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CompanyLeadTrackingKey class.
		/// </summary>
		public CompanyLeadTrackingKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CompanyLeadTrackingBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CompanyLeadTrackingBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CompanyLeadTrackingColumn Enum
	
	/// <summary>
	/// Enumerate the CompanyLeadTracking columns.
	/// </summary>
	[Serializable]
	public enum CompanyLeadTrackingColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		Id = 1,
		/// <summary>
		/// CompanyInfoId : 
		/// </summary>
		[EnumTextValue("CompanyInfoID")]
		[ColumnEnum("CompanyInfoID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CompanyInfoId = 2,
		/// <summary>
		/// ProjectedRevenue : 
		/// </summary>
		[EnumTextValue("ProjectedRevenue")]
		[ColumnEnum("ProjectedRevenue", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ProjectedRevenue = 3,
		/// <summary>
		/// LeadProductId : 
		/// </summary>
		[EnumTextValue("LeadProductID")]
		[ColumnEnum("LeadProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LeadProductId = 4,
		/// <summary>
		/// LeadSourceId : 
		/// </summary>
		[EnumTextValue("LeadSourceID")]
		[ColumnEnum("LeadSourceID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LeadSourceId = 5,
		/// <summary>
		/// LeadStageId : 
		/// </summary>
		[EnumTextValue("LeadStageID")]
		[ColumnEnum("LeadStageID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LeadStageId = 6,
		/// <summary>
		/// ExpectedCloseDate : 
		/// </summary>
		[EnumTextValue("ExpectedCloseDate")]
		[ColumnEnum("ExpectedCloseDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ExpectedCloseDate = 7,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 8,
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		[EnumTextValue("ModifiedBy")]
		[ColumnEnum("ModifiedBy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ModifiedBy = 9,
		/// <summary>
		/// LeadPeriodId : 
		/// </summary>
		[EnumTextValue("LeadPeriodID")]
		[ColumnEnum("LeadPeriodID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LeadPeriodId = 10,
		/// <summary>
		/// LeadChurnReasonId : 
		/// </summary>
		[EnumTextValue("LeadChurnReasonID")]
		[ColumnEnum("LeadChurnReasonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LeadChurnReasonId = 11
	}//End enum

	#endregion CompanyLeadTrackingColumn Enum

} // end namespace
