/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Vw_RecordingList.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'vw_RecordingList' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("Vw_RecordingListBase")]
	public abstract partial class Vw_RecordingListBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ID : 
		/// </summary>
		private System.Int32		  _id = (int)0;
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		private System.String		  _wholesalerId = string.Empty;
		
		/// <summary>
		/// BridgeID : 
		/// </summary>
		private System.Int32?		  _bridgeId = (int)0;
		
		/// <summary>
		/// RecordingStartTime : 
		/// </summary>
		private System.DateTime?		  _recordingStartTime = DateTime.MinValue;
		
		/// <summary>
		/// RecordingEndTime : 
		/// </summary>
		private System.DateTime?		  _recordingEndTime = DateTime.MinValue;
		
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		private System.String		  _moderatorCode = null;
		
		/// <summary>
		/// PassCode : 
		/// </summary>
		private System.String		  _passCode = null;
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		private System.String		  _priCustomerNumber = null;
		
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		private System.String		  _secCustomerNumber = null;
		
		/// <summary>
		/// RecordingDirectory : 
		/// </summary>
		private System.String		  _recordingDirectory = null;
		
		/// <summary>
		/// UniqueConferenceID : 
		/// </summary>
		private System.String		  _uniqueConferenceId = null;
		
		/// <summary>
		/// ReplayCode : 
		/// </summary>
		private System.String		  _replayCode = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		private System.DateTime?		  _createdDate = DateTime.MinValue;
		
		/// <summary>
		/// ProcessFlag : 
		/// </summary>
		private System.String		  _processFlag = null;
		
		/// <summary>
		/// EmailSent : 
		/// </summary>
		private System.Boolean?		  _emailSent = false;
		
		/// <summary>
		/// RPFileNumber : 
		/// </summary>
		private System.String		  _rpFileNumber = null;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		private System.Int32?		  _moderatorId = (int)0;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		private System.String		  _notes = null;
		
		/// <summary>
		/// Mp3Flag : 
		/// </summary>
		private System.String		  _mp3Flag = null;
		
		/// <summary>
		/// Mp3SizeInKB : 
		/// </summary>
		private System.Int32?		  _mp3SizeInKb = (int)0;
		
		/// <summary>
		/// Enabled : 
		/// </summary>
		private System.Boolean?		  _enabled = false;
		
		/// <summary>
		/// StorageDuration : 
		/// </summary>
		private System.Int16?		  _storageDuration = (short)0;
		
		/// <summary>
		/// BillingDuration : 
		/// </summary>
		private System.Int16?		  _billingDuration = (short)0;
		
		/// <summary>
		/// BillingID : 
		/// </summary>
		private System.String		  _billingId = null;
		
		/// <summary>
		/// DurationSec : 
		/// </summary>
		private System.Int32?		  _durationSec = (int)0;
		
		/// <summary>
		/// AuxiliaryConferenceID : 
		/// </summary>
		private System.String		  _auxiliaryConferenceId = null;
		
		/// <summary>
		/// MediaType : 
		/// </summary>
		private System.String		  _mediaType = null;
		
		/// <summary>
		/// HostedLinkExpiryDate : 
		/// </summary>
		private System.DateTime?		  _hostedLinkExpiryDate = DateTime.MinValue;
		
		/// <summary>
		/// ConferenceName : 
		/// </summary>
		private System.String		  _conferenceName = null;
		
		/// <summary>
		/// Username : 
		/// </summary>
		private System.String		  _username = string.Empty;
		
		/// <summary>
		/// DisplayName : 
		/// </summary>
		private System.String		  _displayName = string.Empty;
		
		/// <summary>
		/// ExtendRecordingDate : 
		/// </summary>
		private System.DateTime?		  _extendRecordingDate = DateTime.MinValue;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		private System.Int32		  _userId = (int)0;
		
		/// <summary>
		/// HostedLinkType : 
		/// </summary>
		private System.String		  _hostedLinkType = null;
		
		/// <summary>
		/// HostedLinkURL : 
		/// </summary>
		private System.String		  _hostedLinkUrl = null;
		
		/// <summary>
		/// RecordingGuid : 
		/// </summary>
		private System.String		  _recordingGuid = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="Vw_RecordingListBase"/> instance.
		///</summary>
		public Vw_RecordingListBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="Vw_RecordingListBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_bridgeId"></param>
		///<param name="_recordingStartTime"></param>
		///<param name="_recordingEndTime"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_recordingDirectory"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_replayCode"></param>
		///<param name="_createdDate"></param>
		///<param name="_processFlag"></param>
		///<param name="_emailSent"></param>
		///<param name="_rpFileNumber"></param>
		///<param name="_moderatorId"></param>
		///<param name="_notes"></param>
		///<param name="_mp3Flag"></param>
		///<param name="_mp3SizeInKb"></param>
		///<param name="_enabled"></param>
		///<param name="_storageDuration"></param>
		///<param name="_billingDuration"></param>
		///<param name="_billingId"></param>
		///<param name="_durationSec"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_mediaType"></param>
		///<param name="_hostedLinkExpiryDate"></param>
		///<param name="_conferenceName"></param>
		///<param name="_username"></param>
		///<param name="_displayName"></param>
		///<param name="_extendRecordingDate"></param>
		///<param name="_userId"></param>
		///<param name="_hostedLinkType"></param>
		///<param name="_hostedLinkUrl"></param>
		///<param name="_recordingGuid"></param>
		public Vw_RecordingListBase(System.Int32 _id, System.String _wholesalerId, System.Int32? _bridgeId, System.DateTime? _recordingStartTime, System.DateTime? _recordingEndTime, System.String _moderatorCode, System.String _passCode, System.String _priCustomerNumber, System.String _secCustomerNumber, System.String _recordingDirectory, System.String _uniqueConferenceId, System.String _replayCode, System.DateTime? _createdDate, System.String _processFlag, System.Boolean? _emailSent, System.String _rpFileNumber, System.Int32? _moderatorId, System.String _notes, System.String _mp3Flag, System.Int32? _mp3SizeInKb, System.Boolean? _enabled, System.Int16? _storageDuration, System.Int16? _billingDuration, System.String _billingId, System.Int32? _durationSec, System.String _auxiliaryConferenceId, System.String _mediaType, System.DateTime? _hostedLinkExpiryDate, System.String _conferenceName, System.String _username, System.String _displayName, System.DateTime? _extendRecordingDate, System.Int32 _userId, System.String _hostedLinkType, System.String _hostedLinkUrl, System.String _recordingGuid)
		{
			this._id = _id;
			this._wholesalerId = _wholesalerId;
			this._bridgeId = _bridgeId;
			this._recordingStartTime = _recordingStartTime;
			this._recordingEndTime = _recordingEndTime;
			this._moderatorCode = _moderatorCode;
			this._passCode = _passCode;
			this._priCustomerNumber = _priCustomerNumber;
			this._secCustomerNumber = _secCustomerNumber;
			this._recordingDirectory = _recordingDirectory;
			this._uniqueConferenceId = _uniqueConferenceId;
			this._replayCode = _replayCode;
			this._createdDate = _createdDate;
			this._processFlag = _processFlag;
			this._emailSent = _emailSent;
			this._rpFileNumber = _rpFileNumber;
			this._moderatorId = _moderatorId;
			this._notes = _notes;
			this._mp3Flag = _mp3Flag;
			this._mp3SizeInKb = _mp3SizeInKb;
			this._enabled = _enabled;
			this._storageDuration = _storageDuration;
			this._billingDuration = _billingDuration;
			this._billingId = _billingId;
			this._durationSec = _durationSec;
			this._auxiliaryConferenceId = _auxiliaryConferenceId;
			this._mediaType = _mediaType;
			this._hostedLinkExpiryDate = _hostedLinkExpiryDate;
			this._conferenceName = _conferenceName;
			this._username = _username;
			this._displayName = _displayName;
			this._extendRecordingDate = _extendRecordingDate;
			this._userId = _userId;
			this._hostedLinkType = _hostedLinkType;
			this._hostedLinkUrl = _hostedLinkUrl;
			this._recordingGuid = _recordingGuid;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Vw_RecordingList"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_bridgeId"></param>
		///<param name="_recordingStartTime"></param>
		///<param name="_recordingEndTime"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_recordingDirectory"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_replayCode"></param>
		///<param name="_createdDate"></param>
		///<param name="_processFlag"></param>
		///<param name="_emailSent"></param>
		///<param name="_rpFileNumber"></param>
		///<param name="_moderatorId"></param>
		///<param name="_notes"></param>
		///<param name="_mp3Flag"></param>
		///<param name="_mp3SizeInKb"></param>
		///<param name="_enabled"></param>
		///<param name="_storageDuration"></param>
		///<param name="_billingDuration"></param>
		///<param name="_billingId"></param>
		///<param name="_durationSec"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_mediaType"></param>
		///<param name="_hostedLinkExpiryDate"></param>
		///<param name="_conferenceName"></param>
		///<param name="_username"></param>
		///<param name="_displayName"></param>
		///<param name="_extendRecordingDate"></param>
		///<param name="_userId"></param>
		///<param name="_hostedLinkType"></param>
		///<param name="_hostedLinkUrl"></param>
		///<param name="_recordingGuid"></param>
		public static Vw_RecordingList CreateVw_RecordingList(System.Int32 _id, System.String _wholesalerId, System.Int32? _bridgeId, System.DateTime? _recordingStartTime, System.DateTime? _recordingEndTime, System.String _moderatorCode, System.String _passCode, System.String _priCustomerNumber, System.String _secCustomerNumber, System.String _recordingDirectory, System.String _uniqueConferenceId, System.String _replayCode, System.DateTime? _createdDate, System.String _processFlag, System.Boolean? _emailSent, System.String _rpFileNumber, System.Int32? _moderatorId, System.String _notes, System.String _mp3Flag, System.Int32? _mp3SizeInKb, System.Boolean? _enabled, System.Int16? _storageDuration, System.Int16? _billingDuration, System.String _billingId, System.Int32? _durationSec, System.String _auxiliaryConferenceId, System.String _mediaType, System.DateTime? _hostedLinkExpiryDate, System.String _conferenceName, System.String _username, System.String _displayName, System.DateTime? _extendRecordingDate, System.Int32 _userId, System.String _hostedLinkType, System.String _hostedLinkUrl, System.String _recordingGuid)
		{
			Vw_RecordingList newVw_RecordingList = new Vw_RecordingList();
			newVw_RecordingList.Id = _id;
			newVw_RecordingList.WholesalerId = _wholesalerId;
			newVw_RecordingList.BridgeId = _bridgeId;
			newVw_RecordingList.RecordingStartTime = _recordingStartTime;
			newVw_RecordingList.RecordingEndTime = _recordingEndTime;
			newVw_RecordingList.ModeratorCode = _moderatorCode;
			newVw_RecordingList.PassCode = _passCode;
			newVw_RecordingList.PriCustomerNumber = _priCustomerNumber;
			newVw_RecordingList.SecCustomerNumber = _secCustomerNumber;
			newVw_RecordingList.RecordingDirectory = _recordingDirectory;
			newVw_RecordingList.UniqueConferenceId = _uniqueConferenceId;
			newVw_RecordingList.ReplayCode = _replayCode;
			newVw_RecordingList.CreatedDate = _createdDate;
			newVw_RecordingList.ProcessFlag = _processFlag;
			newVw_RecordingList.EmailSent = _emailSent;
			newVw_RecordingList.RpFileNumber = _rpFileNumber;
			newVw_RecordingList.ModeratorId = _moderatorId;
			newVw_RecordingList.Notes = _notes;
			newVw_RecordingList.Mp3Flag = _mp3Flag;
			newVw_RecordingList.Mp3SizeInKb = _mp3SizeInKb;
			newVw_RecordingList.Enabled = _enabled;
			newVw_RecordingList.StorageDuration = _storageDuration;
			newVw_RecordingList.BillingDuration = _billingDuration;
			newVw_RecordingList.BillingId = _billingId;
			newVw_RecordingList.DurationSec = _durationSec;
			newVw_RecordingList.AuxiliaryConferenceId = _auxiliaryConferenceId;
			newVw_RecordingList.MediaType = _mediaType;
			newVw_RecordingList.HostedLinkExpiryDate = _hostedLinkExpiryDate;
			newVw_RecordingList.ConferenceName = _conferenceName;
			newVw_RecordingList.Username = _username;
			newVw_RecordingList.DisplayName = _displayName;
			newVw_RecordingList.ExtendRecordingDate = _extendRecordingDate;
			newVw_RecordingList.UserId = _userId;
			newVw_RecordingList.HostedLinkType = _hostedLinkType;
			newVw_RecordingList.HostedLinkUrl = _hostedLinkUrl;
			newVw_RecordingList.RecordingGuid = _recordingGuid;
			return newVw_RecordingList;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Id
		{
			get
			{
				return this._id; 
			}
			set
			{
				if (_id == value)
					return;
					
				this._id = value;
				this._isDirty = true;
				
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WholesalerID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this._wholesalerId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "WholesalerId does not allow null values.");
				if (_wholesalerId == value)
					return;
					
				this._wholesalerId = value;
				this._isDirty = true;
				
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BridgeID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsBridgeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? BridgeId
		{
			get
			{
				return this._bridgeId; 
			}
			set
			{
				if (_bridgeId == value && BridgeId != null )
					return;
					
				this._bridgeId = value;
				this._isDirty = true;
				
				OnPropertyChanged("BridgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RecordingStartTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRecordingStartTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? RecordingStartTime
		{
			get
			{
				return this._recordingStartTime; 
			}
			set
			{
				if (_recordingStartTime == value && RecordingStartTime != null )
					return;
					
				this._recordingStartTime = value;
				this._isDirty = true;
				
				OnPropertyChanged("RecordingStartTime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RecordingEndTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRecordingEndTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? RecordingEndTime
		{
			get
			{
				return this._recordingEndTime; 
			}
			set
			{
				if (_recordingEndTime == value && RecordingEndTime != null )
					return;
					
				this._recordingEndTime = value;
				this._isDirty = true;
				
				OnPropertyChanged("RecordingEndTime");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ModeratorCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ModeratorCode
		{
			get
			{
				return this._moderatorCode; 
			}
			set
			{
				if (_moderatorCode == value)
					return;
					
				this._moderatorCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("ModeratorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PassCode
		{
			get
			{
				return this._passCode; 
			}
			set
			{
				if (_passCode == value)
					return;
					
				this._passCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this._priCustomerNumber; 
			}
			set
			{
				if (_priCustomerNumber == value)
					return;
					
				this._priCustomerNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SecCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SecCustomerNumber
		{
			get
			{
				return this._secCustomerNumber; 
			}
			set
			{
				if (_secCustomerNumber == value)
					return;
					
				this._secCustomerNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("SecCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RecordingDirectory property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RecordingDirectory
		{
			get
			{
				return this._recordingDirectory; 
			}
			set
			{
				if (_recordingDirectory == value)
					return;
					
				this._recordingDirectory = value;
				this._isDirty = true;
				
				OnPropertyChanged("RecordingDirectory");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UniqueConferenceID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String UniqueConferenceId
		{
			get
			{
				return this._uniqueConferenceId; 
			}
			set
			{
				if (_uniqueConferenceId == value)
					return;
					
				this._uniqueConferenceId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UniqueConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ReplayCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ReplayCode
		{
			get
			{
				return this._replayCode; 
			}
			set
			{
				if (_replayCode == value)
					return;
					
				this._replayCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("ReplayCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this._createdDate; 
			}
			set
			{
				if (_createdDate == value && CreatedDate != null )
					return;
					
				this._createdDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ProcessFlag property. 
		///		
		/// </summary>
		/// <value>This type is char</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ProcessFlag
		{
			get
			{
				return this._processFlag; 
			}
			set
			{
				if (_processFlag == value)
					return;
					
				this._processFlag = value;
				this._isDirty = true;
				
				OnPropertyChanged("ProcessFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the EmailSent property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEmailSentNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? EmailSent
		{
			get
			{
				return this._emailSent; 
			}
			set
			{
				if (_emailSent == value && EmailSent != null )
					return;
					
				this._emailSent = value;
				this._isDirty = true;
				
				OnPropertyChanged("EmailSent");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RPFileNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RpFileNumber
		{
			get
			{
				return this._rpFileNumber; 
			}
			set
			{
				if (_rpFileNumber == value)
					return;
					
				this._rpFileNumber = value;
				this._isDirty = true;
				
				OnPropertyChanged("RpFileNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ModeratorID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsModeratorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? ModeratorId
		{
			get
			{
				return this._moderatorId; 
			}
			set
			{
				if (_moderatorId == value && ModeratorId != null )
					return;
					
				this._moderatorId = value;
				this._isDirty = true;
				
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Notes
		{
			get
			{
				return this._notes; 
			}
			set
			{
				if (_notes == value)
					return;
					
				this._notes = value;
				this._isDirty = true;
				
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Mp3Flag property. 
		///		
		/// </summary>
		/// <value>This type is char</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Mp3Flag
		{
			get
			{
				return this._mp3Flag; 
			}
			set
			{
				if (_mp3Flag == value)
					return;
					
				this._mp3Flag = value;
				this._isDirty = true;
				
				OnPropertyChanged("Mp3Flag");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Mp3SizeInKB property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMp3SizeInKbNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? Mp3SizeInKb
		{
			get
			{
				return this._mp3SizeInKb; 
			}
			set
			{
				if (_mp3SizeInKb == value && Mp3SizeInKb != null )
					return;
					
				this._mp3SizeInKb = value;
				this._isDirty = true;
				
				OnPropertyChanged("Mp3SizeInKb");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Enabled property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnabledNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? Enabled
		{
			get
			{
				return this._enabled; 
			}
			set
			{
				if (_enabled == value && Enabled != null )
					return;
					
				this._enabled = value;
				this._isDirty = true;
				
				OnPropertyChanged("Enabled");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the StorageDuration property. 
		///		
		/// </summary>
		/// <value>This type is smallint</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsStorageDurationNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int16? StorageDuration
		{
			get
			{
				return this._storageDuration; 
			}
			set
			{
				if (_storageDuration == value && StorageDuration != null )
					return;
					
				this._storageDuration = value;
				this._isDirty = true;
				
				OnPropertyChanged("StorageDuration");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BillingDuration property. 
		///		
		/// </summary>
		/// <value>This type is smallint</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsBillingDurationNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int16? BillingDuration
		{
			get
			{
				return this._billingDuration; 
			}
			set
			{
				if (_billingDuration == value && BillingDuration != null )
					return;
					
				this._billingDuration = value;
				this._isDirty = true;
				
				OnPropertyChanged("BillingDuration");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the BillingID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String BillingId
		{
			get
			{
				return this._billingId; 
			}
			set
			{
				if (_billingId == value)
					return;
					
				this._billingId = value;
				this._isDirty = true;
				
				OnPropertyChanged("BillingId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DurationSec property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDurationSecNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32? DurationSec
		{
			get
			{
				return this._durationSec; 
			}
			set
			{
				if (_durationSec == value && DurationSec != null )
					return;
					
				this._durationSec = value;
				this._isDirty = true;
				
				OnPropertyChanged("DurationSec");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AuxiliaryConferenceID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AuxiliaryConferenceId
		{
			get
			{
				return this._auxiliaryConferenceId; 
			}
			set
			{
				if (_auxiliaryConferenceId == value)
					return;
					
				this._auxiliaryConferenceId = value;
				this._isDirty = true;
				
				OnPropertyChanged("AuxiliaryConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the MediaType property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String MediaType
		{
			get
			{
				return this._mediaType; 
			}
			set
			{
				if (_mediaType == value)
					return;
					
				this._mediaType = value;
				this._isDirty = true;
				
				OnPropertyChanged("MediaType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HostedLinkExpiryDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsHostedLinkExpiryDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? HostedLinkExpiryDate
		{
			get
			{
				return this._hostedLinkExpiryDate; 
			}
			set
			{
				if (_hostedLinkExpiryDate == value && HostedLinkExpiryDate != null )
					return;
					
				this._hostedLinkExpiryDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("HostedLinkExpiryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ConferenceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ConferenceName
		{
			get
			{
				return this._conferenceName; 
			}
			set
			{
				if (_conferenceName == value)
					return;
					
				this._conferenceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ConferenceName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Username property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String Username
		{
			get
			{
				return this._username; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "Username does not allow null values.");
				if (_username == value)
					return;
					
				this._username = value;
				this._isDirty = true;
				
				OnPropertyChanged("Username");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the DisplayName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String DisplayName
		{
			get
			{
				return this._displayName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "DisplayName does not allow null values.");
				if (_displayName == value)
					return;
					
				this._displayName = value;
				this._isDirty = true;
				
				OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ExtendRecordingDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExtendRecordingDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.DateTime? ExtendRecordingDate
		{
			get
			{
				return this._extendRecordingDate; 
			}
			set
			{
				if (_extendRecordingDate == value && ExtendRecordingDate != null )
					return;
					
				this._extendRecordingDate = value;
				this._isDirty = true;
				
				OnPropertyChanged("ExtendRecordingDate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this._userId; 
			}
			set
			{
				if (_userId == value)
					return;
					
				this._userId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HostedLinkType property. 
		///		
		/// </summary>
		/// <value>This type is char</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HostedLinkType
		{
			get
			{
				return this._hostedLinkType; 
			}
			set
			{
				if (_hostedLinkType == value)
					return;
					
				this._hostedLinkType = value;
				this._isDirty = true;
				
				OnPropertyChanged("HostedLinkType");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the HostedLinkURL property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String HostedLinkUrl
		{
			get
			{
				return this._hostedLinkUrl; 
			}
			set
			{
				if (_hostedLinkUrl == value)
					return;
					
				this._hostedLinkUrl = value;
				this._isDirty = true;
				
				OnPropertyChanged("HostedLinkUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the RecordingGuid property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String RecordingGuid
		{
			get
			{
				return this._recordingGuid; 
			}
			set
			{
				if (_recordingGuid == value)
					return;
					
				this._recordingGuid = value;
				this._isDirty = true;
				
				OnPropertyChanged("RecordingGuid");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vw_RecordingList"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Vw_RecordingListBase Entity 
		///</summary>
		public virtual Vw_RecordingListBase Copy()
		{
			//shallow copy entity
			Vw_RecordingList copy = new Vw_RecordingList();
				copy.Id = this.Id;
				copy.WholesalerId = this.WholesalerId;
				copy.BridgeId = this.BridgeId;
				copy.RecordingStartTime = this.RecordingStartTime;
				copy.RecordingEndTime = this.RecordingEndTime;
				copy.ModeratorCode = this.ModeratorCode;
				copy.PassCode = this.PassCode;
				copy.PriCustomerNumber = this.PriCustomerNumber;
				copy.SecCustomerNumber = this.SecCustomerNumber;
				copy.RecordingDirectory = this.RecordingDirectory;
				copy.UniqueConferenceId = this.UniqueConferenceId;
				copy.ReplayCode = this.ReplayCode;
				copy.CreatedDate = this.CreatedDate;
				copy.ProcessFlag = this.ProcessFlag;
				copy.EmailSent = this.EmailSent;
				copy.RpFileNumber = this.RpFileNumber;
				copy.ModeratorId = this.ModeratorId;
				copy.Notes = this.Notes;
				copy.Mp3Flag = this.Mp3Flag;
				copy.Mp3SizeInKb = this.Mp3SizeInKb;
				copy.Enabled = this.Enabled;
				copy.StorageDuration = this.StorageDuration;
				copy.BillingDuration = this.BillingDuration;
				copy.BillingId = this.BillingId;
				copy.DurationSec = this.DurationSec;
				copy.AuxiliaryConferenceId = this.AuxiliaryConferenceId;
				copy.MediaType = this.MediaType;
				copy.HostedLinkExpiryDate = this.HostedLinkExpiryDate;
				copy.ConferenceName = this.ConferenceName;
				copy.Username = this.Username;
				copy.DisplayName = this.DisplayName;
				copy.ExtendRecordingDate = this.ExtendRecordingDate;
				copy.UserId = this.UserId;
				copy.HostedLinkType = this.HostedLinkType;
				copy.HostedLinkUrl = this.HostedLinkUrl;
				copy.RecordingGuid = this.RecordingGuid;
			copy.AcceptChanges();
			return (Vw_RecordingList)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="Vw_RecordingListBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(Vw_RecordingListBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="Vw_RecordingListBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="Vw_RecordingListBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="Vw_RecordingListBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(Vw_RecordingListBase Object1, Vw_RecordingListBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.BridgeId != null && Object2.BridgeId != null )
			{
				if (Object1.BridgeId != Object2.BridgeId)
					equal = false;
			}
			else if (Object1.BridgeId == null ^ Object1.BridgeId == null )
			{
				equal = false;
			}
			if (Object1.RecordingStartTime != null && Object2.RecordingStartTime != null )
			{
				if (Object1.RecordingStartTime != Object2.RecordingStartTime)
					equal = false;
			}
			else if (Object1.RecordingStartTime == null ^ Object1.RecordingStartTime == null )
			{
				equal = false;
			}
			if (Object1.RecordingEndTime != null && Object2.RecordingEndTime != null )
			{
				if (Object1.RecordingEndTime != Object2.RecordingEndTime)
					equal = false;
			}
			else if (Object1.RecordingEndTime == null ^ Object1.RecordingEndTime == null )
			{
				equal = false;
			}
			if (Object1.ModeratorCode != null && Object2.ModeratorCode != null )
			{
				if (Object1.ModeratorCode != Object2.ModeratorCode)
					equal = false;
			}
			else if (Object1.ModeratorCode == null ^ Object1.ModeratorCode == null )
			{
				equal = false;
			}
			if (Object1.PassCode != null && Object2.PassCode != null )
			{
				if (Object1.PassCode != Object2.PassCode)
					equal = false;
			}
			else if (Object1.PassCode == null ^ Object1.PassCode == null )
			{
				equal = false;
			}
			if (Object1.PriCustomerNumber != null && Object2.PriCustomerNumber != null )
			{
				if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
					equal = false;
			}
			else if (Object1.PriCustomerNumber == null ^ Object1.PriCustomerNumber == null )
			{
				equal = false;
			}
			if (Object1.SecCustomerNumber != null && Object2.SecCustomerNumber != null )
			{
				if (Object1.SecCustomerNumber != Object2.SecCustomerNumber)
					equal = false;
			}
			else if (Object1.SecCustomerNumber == null ^ Object1.SecCustomerNumber == null )
			{
				equal = false;
			}
			if (Object1.RecordingDirectory != null && Object2.RecordingDirectory != null )
			{
				if (Object1.RecordingDirectory != Object2.RecordingDirectory)
					equal = false;
			}
			else if (Object1.RecordingDirectory == null ^ Object1.RecordingDirectory == null )
			{
				equal = false;
			}
			if (Object1.UniqueConferenceId != null && Object2.UniqueConferenceId != null )
			{
				if (Object1.UniqueConferenceId != Object2.UniqueConferenceId)
					equal = false;
			}
			else if (Object1.UniqueConferenceId == null ^ Object1.UniqueConferenceId == null )
			{
				equal = false;
			}
			if (Object1.ReplayCode != null && Object2.ReplayCode != null )
			{
				if (Object1.ReplayCode != Object2.ReplayCode)
					equal = false;
			}
			else if (Object1.ReplayCode == null ^ Object1.ReplayCode == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object1.CreatedDate == null )
			{
				equal = false;
			}
			if (Object1.ProcessFlag != null && Object2.ProcessFlag != null )
			{
				if (Object1.ProcessFlag != Object2.ProcessFlag)
					equal = false;
			}
			else if (Object1.ProcessFlag == null ^ Object1.ProcessFlag == null )
			{
				equal = false;
			}
			if (Object1.EmailSent != null && Object2.EmailSent != null )
			{
				if (Object1.EmailSent != Object2.EmailSent)
					equal = false;
			}
			else if (Object1.EmailSent == null ^ Object1.EmailSent == null )
			{
				equal = false;
			}
			if (Object1.RpFileNumber != null && Object2.RpFileNumber != null )
			{
				if (Object1.RpFileNumber != Object2.RpFileNumber)
					equal = false;
			}
			else if (Object1.RpFileNumber == null ^ Object1.RpFileNumber == null )
			{
				equal = false;
			}
			if (Object1.ModeratorId != null && Object2.ModeratorId != null )
			{
				if (Object1.ModeratorId != Object2.ModeratorId)
					equal = false;
			}
			else if (Object1.ModeratorId == null ^ Object1.ModeratorId == null )
			{
				equal = false;
			}
			if (Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object1.Notes == null )
			{
				equal = false;
			}
			if (Object1.Mp3Flag != null && Object2.Mp3Flag != null )
			{
				if (Object1.Mp3Flag != Object2.Mp3Flag)
					equal = false;
			}
			else if (Object1.Mp3Flag == null ^ Object1.Mp3Flag == null )
			{
				equal = false;
			}
			if (Object1.Mp3SizeInKb != null && Object2.Mp3SizeInKb != null )
			{
				if (Object1.Mp3SizeInKb != Object2.Mp3SizeInKb)
					equal = false;
			}
			else if (Object1.Mp3SizeInKb == null ^ Object1.Mp3SizeInKb == null )
			{
				equal = false;
			}
			if (Object1.Enabled != null && Object2.Enabled != null )
			{
				if (Object1.Enabled != Object2.Enabled)
					equal = false;
			}
			else if (Object1.Enabled == null ^ Object1.Enabled == null )
			{
				equal = false;
			}
			if (Object1.StorageDuration != null && Object2.StorageDuration != null )
			{
				if (Object1.StorageDuration != Object2.StorageDuration)
					equal = false;
			}
			else if (Object1.StorageDuration == null ^ Object1.StorageDuration == null )
			{
				equal = false;
			}
			if (Object1.BillingDuration != null && Object2.BillingDuration != null )
			{
				if (Object1.BillingDuration != Object2.BillingDuration)
					equal = false;
			}
			else if (Object1.BillingDuration == null ^ Object1.BillingDuration == null )
			{
				equal = false;
			}
			if (Object1.BillingId != null && Object2.BillingId != null )
			{
				if (Object1.BillingId != Object2.BillingId)
					equal = false;
			}
			else if (Object1.BillingId == null ^ Object1.BillingId == null )
			{
				equal = false;
			}
			if (Object1.DurationSec != null && Object2.DurationSec != null )
			{
				if (Object1.DurationSec != Object2.DurationSec)
					equal = false;
			}
			else if (Object1.DurationSec == null ^ Object1.DurationSec == null )
			{
				equal = false;
			}
			if (Object1.AuxiliaryConferenceId != null && Object2.AuxiliaryConferenceId != null )
			{
				if (Object1.AuxiliaryConferenceId != Object2.AuxiliaryConferenceId)
					equal = false;
			}
			else if (Object1.AuxiliaryConferenceId == null ^ Object1.AuxiliaryConferenceId == null )
			{
				equal = false;
			}
			if (Object1.MediaType != null && Object2.MediaType != null )
			{
				if (Object1.MediaType != Object2.MediaType)
					equal = false;
			}
			else if (Object1.MediaType == null ^ Object1.MediaType == null )
			{
				equal = false;
			}
			if (Object1.HostedLinkExpiryDate != null && Object2.HostedLinkExpiryDate != null )
			{
				if (Object1.HostedLinkExpiryDate != Object2.HostedLinkExpiryDate)
					equal = false;
			}
			else if (Object1.HostedLinkExpiryDate == null ^ Object1.HostedLinkExpiryDate == null )
			{
				equal = false;
			}
			if (Object1.ConferenceName != null && Object2.ConferenceName != null )
			{
				if (Object1.ConferenceName != Object2.ConferenceName)
					equal = false;
			}
			else if (Object1.ConferenceName == null ^ Object1.ConferenceName == null )
			{
				equal = false;
			}
			if (Object1.Username != Object2.Username)
				equal = false;
			if (Object1.DisplayName != Object2.DisplayName)
				equal = false;
			if (Object1.ExtendRecordingDate != null && Object2.ExtendRecordingDate != null )
			{
				if (Object1.ExtendRecordingDate != Object2.ExtendRecordingDate)
					equal = false;
			}
			else if (Object1.ExtendRecordingDate == null ^ Object1.ExtendRecordingDate == null )
			{
				equal = false;
			}
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.HostedLinkType != null && Object2.HostedLinkType != null )
			{
				if (Object1.HostedLinkType != Object2.HostedLinkType)
					equal = false;
			}
			else if (Object1.HostedLinkType == null ^ Object1.HostedLinkType == null )
			{
				equal = false;
			}
			if (Object1.HostedLinkUrl != null && Object2.HostedLinkUrl != null )
			{
				if (Object1.HostedLinkUrl != Object2.HostedLinkUrl)
					equal = false;
			}
			else if (Object1.HostedLinkUrl == null ^ Object1.HostedLinkUrl == null )
			{
				equal = false;
			}
			if (Object1.RecordingGuid != null && Object2.RecordingGuid != null )
			{
				if (Object1.RecordingGuid != Object2.RecordingGuid)
					equal = false;
			}
			else if (Object1.RecordingGuid == null ^ Object1.RecordingGuid == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(Vw_RecordingList entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Id":
					return entity.Id;
				case "WholesalerId":
					return entity.WholesalerId;
				case "BridgeId":
					return entity.BridgeId;
				case "RecordingStartTime":
					return entity.RecordingStartTime;
				case "RecordingEndTime":
					return entity.RecordingEndTime;
				case "ModeratorCode":
					return entity.ModeratorCode;
				case "PassCode":
					return entity.PassCode;
				case "PriCustomerNumber":
					return entity.PriCustomerNumber;
				case "SecCustomerNumber":
					return entity.SecCustomerNumber;
				case "RecordingDirectory":
					return entity.RecordingDirectory;
				case "UniqueConferenceId":
					return entity.UniqueConferenceId;
				case "ReplayCode":
					return entity.ReplayCode;
				case "CreatedDate":
					return entity.CreatedDate;
				case "ProcessFlag":
					return entity.ProcessFlag;
				case "EmailSent":
					return entity.EmailSent;
				case "RpFileNumber":
					return entity.RpFileNumber;
				case "ModeratorId":
					return entity.ModeratorId;
				case "Notes":
					return entity.Notes;
				case "Mp3Flag":
					return entity.Mp3Flag;
				case "Mp3SizeInKb":
					return entity.Mp3SizeInKb;
				case "Enabled":
					return entity.Enabled;
				case "StorageDuration":
					return entity.StorageDuration;
				case "BillingDuration":
					return entity.BillingDuration;
				case "BillingId":
					return entity.BillingId;
				case "DurationSec":
					return entity.DurationSec;
				case "AuxiliaryConferenceId":
					return entity.AuxiliaryConferenceId;
				case "MediaType":
					return entity.MediaType;
				case "HostedLinkExpiryDate":
					return entity.HostedLinkExpiryDate;
				case "ConferenceName":
					return entity.ConferenceName;
				case "Username":
					return entity.Username;
				case "DisplayName":
					return entity.DisplayName;
				case "ExtendRecordingDate":
					return entity.ExtendRecordingDate;
				case "UserId":
					return entity.UserId;
				case "HostedLinkType":
					return entity.HostedLinkType;
				case "HostedLinkUrl":
					return entity.HostedLinkUrl;
				case "RecordingGuid":
					return entity.RecordingGuid;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as Vw_RecordingList, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{37}{36}- Id: {0}{36}- WholesalerId: {1}{36}- BridgeId: {2}{36}- RecordingStartTime: {3}{36}- RecordingEndTime: {4}{36}- ModeratorCode: {5}{36}- PassCode: {6}{36}- PriCustomerNumber: {7}{36}- SecCustomerNumber: {8}{36}- RecordingDirectory: {9}{36}- UniqueConferenceId: {10}{36}- ReplayCode: {11}{36}- CreatedDate: {12}{36}- ProcessFlag: {13}{36}- EmailSent: {14}{36}- RpFileNumber: {15}{36}- ModeratorId: {16}{36}- Notes: {17}{36}- Mp3Flag: {18}{36}- Mp3SizeInKb: {19}{36}- Enabled: {20}{36}- StorageDuration: {21}{36}- BillingDuration: {22}{36}- BillingId: {23}{36}- DurationSec: {24}{36}- AuxiliaryConferenceId: {25}{36}- MediaType: {26}{36}- HostedLinkExpiryDate: {27}{36}- ConferenceName: {28}{36}- Username: {29}{36}- DisplayName: {30}{36}- ExtendRecordingDate: {31}{36}- UserId: {32}{36}- HostedLinkType: {33}{36}- HostedLinkUrl: {34}{36}- RecordingGuid: {35}{36}", 
				this.Id,
				this.WholesalerId,
				(this.BridgeId == null) ? string.Empty : this.BridgeId.ToString(),
			     
				(this.RecordingStartTime == null) ? string.Empty : this.RecordingStartTime.ToString(),
			     
				(this.RecordingEndTime == null) ? string.Empty : this.RecordingEndTime.ToString(),
			     
				(this.ModeratorCode == null) ? string.Empty : this.ModeratorCode.ToString(),
			     
				(this.PassCode == null) ? string.Empty : this.PassCode.ToString(),
			     
				(this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString(),
			     
				(this.SecCustomerNumber == null) ? string.Empty : this.SecCustomerNumber.ToString(),
			     
				(this.RecordingDirectory == null) ? string.Empty : this.RecordingDirectory.ToString(),
			     
				(this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString(),
			     
				(this.ReplayCode == null) ? string.Empty : this.ReplayCode.ToString(),
			     
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
			     
				(this.ProcessFlag == null) ? string.Empty : this.ProcessFlag.ToString(),
			     
				(this.EmailSent == null) ? string.Empty : this.EmailSent.ToString(),
			     
				(this.RpFileNumber == null) ? string.Empty : this.RpFileNumber.ToString(),
			     
				(this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString(),
			     
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
			     
				(this.Mp3Flag == null) ? string.Empty : this.Mp3Flag.ToString(),
			     
				(this.Mp3SizeInKb == null) ? string.Empty : this.Mp3SizeInKb.ToString(),
			     
				(this.Enabled == null) ? string.Empty : this.Enabled.ToString(),
			     
				(this.StorageDuration == null) ? string.Empty : this.StorageDuration.ToString(),
			     
				(this.BillingDuration == null) ? string.Empty : this.BillingDuration.ToString(),
			     
				(this.BillingId == null) ? string.Empty : this.BillingId.ToString(),
			     
				(this.DurationSec == null) ? string.Empty : this.DurationSec.ToString(),
			     
				(this.AuxiliaryConferenceId == null) ? string.Empty : this.AuxiliaryConferenceId.ToString(),
			     
				(this.MediaType == null) ? string.Empty : this.MediaType.ToString(),
			     
				(this.HostedLinkExpiryDate == null) ? string.Empty : this.HostedLinkExpiryDate.ToString(),
			     
				(this.ConferenceName == null) ? string.Empty : this.ConferenceName.ToString(),
			     
				this.Username,
				this.DisplayName,
				(this.ExtendRecordingDate == null) ? string.Empty : this.ExtendRecordingDate.ToString(),
			     
				this.UserId,
				(this.HostedLinkType == null) ? string.Empty : this.HostedLinkType.ToString(),
			     
				(this.HostedLinkUrl == null) ? string.Empty : this.HostedLinkUrl.ToString(),
			     
				(this.RecordingGuid == null) ? string.Empty : this.RecordingGuid.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the Vw_RecordingList columns.
	/// </summary>
	[Serializable]
	public enum Vw_RecordingListColumn
	{
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Id,
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId,
		/// <summary>
		/// BridgeID : 
		/// </summary>
		[EnumTextValue("BridgeID")]
		[ColumnEnum("BridgeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BridgeId,
		/// <summary>
		/// RecordingStartTime : 
		/// </summary>
		[EnumTextValue("RecordingStartTime")]
		[ColumnEnum("RecordingStartTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RecordingStartTime,
		/// <summary>
		/// RecordingEndTime : 
		/// </summary>
		[EnumTextValue("RecordingEndTime")]
		[ColumnEnum("RecordingEndTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RecordingEndTime,
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		[EnumTextValue("ModeratorCode")]
		[ColumnEnum("ModeratorCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 16)]
		ModeratorCode,
		/// <summary>
		/// PassCode : 
		/// </summary>
		[EnumTextValue("PassCode")]
		[ColumnEnum("PassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 16)]
		PassCode,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		PriCustomerNumber,
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		[EnumTextValue("SecCustomerNumber")]
		[ColumnEnum("SecCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		SecCustomerNumber,
		/// <summary>
		/// RecordingDirectory : 
		/// </summary>
		[EnumTextValue("RecordingDirectory")]
		[ColumnEnum("RecordingDirectory", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		RecordingDirectory,
		/// <summary>
		/// UniqueConferenceID : 
		/// </summary>
		[EnumTextValue("UniqueConferenceID")]
		[ColumnEnum("UniqueConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		UniqueConferenceId,
		/// <summary>
		/// ReplayCode : 
		/// </summary>
		[EnumTextValue("ReplayCode")]
		[ColumnEnum("ReplayCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		ReplayCode,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate,
		/// <summary>
		/// ProcessFlag : 
		/// </summary>
		[EnumTextValue("ProcessFlag")]
		[ColumnEnum("ProcessFlag", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		ProcessFlag,
		/// <summary>
		/// EmailSent : 
		/// </summary>
		[EnumTextValue("EmailSent")]
		[ColumnEnum("EmailSent", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EmailSent,
		/// <summary>
		/// RPFileNumber : 
		/// </summary>
		[EnumTextValue("RPFileNumber")]
		[ColumnEnum("RPFileNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		RpFileNumber,
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ModeratorId,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Notes,
		/// <summary>
		/// Mp3Flag : 
		/// </summary>
		[EnumTextValue("Mp3Flag")]
		[ColumnEnum("Mp3Flag", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		Mp3Flag,
		/// <summary>
		/// Mp3SizeInKB : 
		/// </summary>
		[EnumTextValue("Mp3SizeInKB")]
		[ColumnEnum("Mp3SizeInKB", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Mp3SizeInKb,
		/// <summary>
		/// Enabled : 
		/// </summary>
		[EnumTextValue("Enabled")]
		[ColumnEnum("Enabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Enabled,
		/// <summary>
		/// StorageDuration : 
		/// </summary>
		[EnumTextValue("StorageDuration")]
		[ColumnEnum("StorageDuration", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		StorageDuration,
		/// <summary>
		/// BillingDuration : 
		/// </summary>
		[EnumTextValue("BillingDuration")]
		[ColumnEnum("BillingDuration", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		BillingDuration,
		/// <summary>
		/// BillingID : 
		/// </summary>
		[EnumTextValue("BillingID")]
		[ColumnEnum("BillingID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		BillingId,
		/// <summary>
		/// DurationSec : 
		/// </summary>
		[EnumTextValue("DurationSec")]
		[ColumnEnum("DurationSec", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DurationSec,
		/// <summary>
		/// AuxiliaryConferenceID : 
		/// </summary>
		[EnumTextValue("AuxiliaryConferenceID")]
		[ColumnEnum("AuxiliaryConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		AuxiliaryConferenceId,
		/// <summary>
		/// MediaType : 
		/// </summary>
		[EnumTextValue("MediaType")]
		[ColumnEnum("MediaType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MediaType,
		/// <summary>
		/// HostedLinkExpiryDate : 
		/// </summary>
		[EnumTextValue("HostedLinkExpiryDate")]
		[ColumnEnum("HostedLinkExpiryDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		HostedLinkExpiryDate,
		/// <summary>
		/// ConferenceName : 
		/// </summary>
		[EnumTextValue("ConferenceName")]
		[ColumnEnum("ConferenceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ConferenceName,
		/// <summary>
		/// Username : 
		/// </summary>
		[EnumTextValue("Username")]
		[ColumnEnum("Username", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		Username,
		/// <summary>
		/// DisplayName : 
		/// </summary>
		[EnumTextValue("DisplayName")]
		[ColumnEnum("DisplayName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		DisplayName,
		/// <summary>
		/// ExtendRecordingDate : 
		/// </summary>
		[EnumTextValue("ExtendRecordingDate")]
		[ColumnEnum("ExtendRecordingDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExtendRecordingDate,
		/// <summary>
		/// UserID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UserId,
		/// <summary>
		/// HostedLinkType : 
		/// </summary>
		[EnumTextValue("HostedLinkType")]
		[ColumnEnum("HostedLinkType", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		HostedLinkType,
		/// <summary>
		/// HostedLinkURL : 
		/// </summary>
		[EnumTextValue("HostedLinkURL")]
		[ColumnEnum("HostedLinkURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		HostedLinkUrl,
		/// <summary>
		/// RecordingGuid : 
		/// </summary>
		[EnumTextValue("RecordingGuid")]
		[ColumnEnum("RecordingGuid", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		RecordingGuid
	}//End enum

} // end namespace
