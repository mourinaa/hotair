/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Vw_ConferenceList.cs instead.
*/
#region Using Directives
using System;
using System.ComponentModel;
using System.Collections;
using System.Runtime.Serialization;
using System.Xml.Serialization;
#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'vw_ConferenceList' view. [No description found in the database]	
	///</summary>
	[Serializable]
	[CLSCompliant(true)]
	[ToolboxItem("Vw_ConferenceListBase")]
	public abstract partial class Vw_ConferenceListBase : System.IComparable, System.ICloneable, INotifyPropertyChanged
	{
		
		#region Variable Declarations
		
		/// <summary>
		/// ID : 
		/// </summary>
		private System.Int32		  _id = (int)0;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		private System.String		  _companyName = null;
		
		/// <summary>
		/// AdminName : 
		/// </summary>
		private System.String		  _adminName = string.Empty;
		
		/// <summary>
		/// ModeratorName : 
		/// </summary>
		private System.String		  _moderatorName = string.Empty;
		
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		private System.String		  _moderatorCode = string.Empty;
		
		/// <summary>
		/// PassCode : 
		/// </summary>
		private System.String		  _passCode = string.Empty;
		
		/// <summary>
		/// SeeVoghMeetingId : 
		/// </summary>
		private System.String		  _seeVoghMeetingId = null;
		
		/// <summary>
		/// Enabled : 
		/// </summary>
		private System.Boolean?		  _enabled = false;
		
		/// <summary>
		/// LastWalletCardSentdate : 
		/// </summary>
		private System.String		  _lastWalletCardSentdate = null;
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		private System.String		  _wholesalerId = string.Empty;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		private System.Int32		  _customerId = (int)0;
		
		/// <summary>
		/// CompanyID : 
		/// </summary>
		private System.Int32		  _companyId = (int)0;
		
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		private System.Int32		  _salesPersonId = (int)0;
		
		/// <summary>
		/// SalesPerson : 
		/// </summary>
		private System.String		  _salesPerson = string.Empty;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		private System.Int32		  _userId = (int)0;
		
		/// <summary>
		/// ConferenceName : 
		/// </summary>
		private System.String		  _conferenceName = null;
		
		/// <summary>
		/// Object that contains data to associate with this object
		/// </summary>
		private object _tag;
		
		/// <summary>
		/// Suppresses Entity Events from Firing, 
		/// useful when loading the entities from the database.
		/// </summary>
	    [NonSerialized] 
		private bool suppressEntityEvents = false;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="Vw_ConferenceListBase"/> instance.
		///</summary>
		public Vw_ConferenceListBase()
		{
		}		
		
		///<summary>
		/// Creates a new <see cref="Vw_ConferenceListBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_companyName"></param>
		///<param name="_adminName"></param>
		///<param name="_moderatorName"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_seeVoghMeetingId"></param>
		///<param name="_enabled"></param>
		///<param name="_lastWalletCardSentdate"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_companyId"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_salesPerson"></param>
		///<param name="_userId"></param>
		///<param name="_conferenceName"></param>
		public Vw_ConferenceListBase(System.Int32 _id, System.String _companyName, System.String _adminName, System.String _moderatorName, System.String _moderatorCode, System.String _passCode, System.String _seeVoghMeetingId, System.Boolean? _enabled, System.String _lastWalletCardSentdate, System.String _wholesalerId, System.Int32 _customerId, System.Int32 _companyId, System.Int32 _salesPersonId, System.String _salesPerson, System.Int32 _userId, System.String _conferenceName)
		{
			this._id = _id;
			this._companyName = _companyName;
			this._adminName = _adminName;
			this._moderatorName = _moderatorName;
			this._moderatorCode = _moderatorCode;
			this._passCode = _passCode;
			this._seeVoghMeetingId = _seeVoghMeetingId;
			this._enabled = _enabled;
			this._lastWalletCardSentdate = _lastWalletCardSentdate;
			this._wholesalerId = _wholesalerId;
			this._customerId = _customerId;
			this._companyId = _companyId;
			this._salesPersonId = _salesPersonId;
			this._salesPerson = _salesPerson;
			this._userId = _userId;
			this._conferenceName = _conferenceName;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Vw_ConferenceList"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_companyName"></param>
		///<param name="_adminName"></param>
		///<param name="_moderatorName"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_seeVoghMeetingId"></param>
		///<param name="_enabled"></param>
		///<param name="_lastWalletCardSentdate"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_companyId"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_salesPerson"></param>
		///<param name="_userId"></param>
		///<param name="_conferenceName"></param>
		public static Vw_ConferenceList CreateVw_ConferenceList(System.Int32 _id, System.String _companyName, System.String _adminName, System.String _moderatorName, System.String _moderatorCode, System.String _passCode, System.String _seeVoghMeetingId, System.Boolean? _enabled, System.String _lastWalletCardSentdate, System.String _wholesalerId, System.Int32 _customerId, System.Int32 _companyId, System.Int32 _salesPersonId, System.String _salesPerson, System.Int32 _userId, System.String _conferenceName)
		{
			Vw_ConferenceList newVw_ConferenceList = new Vw_ConferenceList();
			newVw_ConferenceList.Id = _id;
			newVw_ConferenceList.CompanyName = _companyName;
			newVw_ConferenceList.AdminName = _adminName;
			newVw_ConferenceList.ModeratorName = _moderatorName;
			newVw_ConferenceList.ModeratorCode = _moderatorCode;
			newVw_ConferenceList.PassCode = _passCode;
			newVw_ConferenceList.SeeVoghMeetingId = _seeVoghMeetingId;
			newVw_ConferenceList.Enabled = _enabled;
			newVw_ConferenceList.LastWalletCardSentdate = _lastWalletCardSentdate;
			newVw_ConferenceList.WholesalerId = _wholesalerId;
			newVw_ConferenceList.CustomerId = _customerId;
			newVw_ConferenceList.CompanyId = _companyId;
			newVw_ConferenceList.SalesPersonId = _salesPersonId;
			newVw_ConferenceList.SalesPerson = _salesPerson;
			newVw_ConferenceList.UserId = _userId;
			newVw_ConferenceList.ConferenceName = _conferenceName;
			return newVw_ConferenceList;
		}
				
		#endregion Constructors
		
		#region Properties	
		/// <summary>
		/// 	Gets or Sets the ID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 Id
		{
			get
			{
				return this._id; 
			}
			set
			{
				if (_id == value)
					return;
					
				this._id = value;
				this._isDirty = true;
				
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String CompanyName
		{
			get
			{
				return this._companyName; 
			}
			set
			{
				if (_companyName == value)
					return;
					
				this._companyName = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the AdminName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String AdminName
		{
			get
			{
				return this._adminName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "AdminName does not allow null values.");
				if (_adminName == value)
					return;
					
				this._adminName = value;
				this._isDirty = true;
				
				OnPropertyChanged("AdminName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ModeratorName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ModeratorName
		{
			get
			{
				return this._moderatorName; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ModeratorName does not allow null values.");
				if (_moderatorName == value)
					return;
					
				this._moderatorName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ModeratorName");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ModeratorCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ModeratorCode
		{
			get
			{
				return this._moderatorCode; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "ModeratorCode does not allow null values.");
				if (_moderatorCode == value)
					return;
					
				this._moderatorCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("ModeratorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the PassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String PassCode
		{
			get
			{
				return this._passCode; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "PassCode does not allow null values.");
				if (_passCode == value)
					return;
					
				this._passCode = value;
				this._isDirty = true;
				
				OnPropertyChanged("PassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SeeVoghMeetingId property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SeeVoghMeetingId
		{
			get
			{
				return this._seeVoghMeetingId; 
			}
			set
			{
				if (_seeVoghMeetingId == value)
					return;
					
				this._seeVoghMeetingId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SeeVoghMeetingId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the Enabled property. 
		///		
		/// </summary>
		/// <value>This type is bit</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnabledNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Boolean? Enabled
		{
			get
			{
				return this._enabled; 
			}
			set
			{
				if (_enabled == value && Enabled != null )
					return;
					
				this._enabled = value;
				this._isDirty = true;
				
				OnPropertyChanged("Enabled");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the LastWalletCardSentdate property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String LastWalletCardSentdate
		{
			get
			{
				return this._lastWalletCardSentdate; 
			}
			set
			{
				if (_lastWalletCardSentdate == value)
					return;
					
				this._lastWalletCardSentdate = value;
				this._isDirty = true;
				
				OnPropertyChanged("LastWalletCardSentdate");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the WholesalerID property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this._wholesalerId; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "WholesalerId does not allow null values.");
				if (_wholesalerId == value)
					return;
					
				this._wholesalerId = value;
				this._isDirty = true;
				
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CustomerID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this._customerId; 
			}
			set
			{
				if (_customerId == value)
					return;
					
				this._customerId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the CompanyID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 CompanyId
		{
			get
			{
				return this._companyId; 
			}
			set
			{
				if (_companyId == value)
					return;
					
				this._companyId = value;
				this._isDirty = true;
				
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalesPersonID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 SalesPersonId
		{
			get
			{
				return this._salesPersonId; 
			}
			set
			{
				if (_salesPersonId == value)
					return;
					
				this._salesPersonId = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the SalesPerson property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String SalesPerson
		{
			get
			{
				return this._salesPerson; 
			}
			set
			{
				if ( value == null )
					throw new ArgumentNullException("value", "SalesPerson does not allow null values.");
				if (_salesPerson == value)
					return;
					
				this._salesPerson = value;
				this._isDirty = true;
				
				OnPropertyChanged("SalesPerson");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the UserID property. 
		///		
		/// </summary>
		/// <value>This type is int</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this._userId; 
			}
			set
			{
				if (_userId == value)
					return;
					
				this._userId = value;
				this._isDirty = true;
				
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or Sets the ConferenceName property. 
		///		
		/// </summary>
		/// <value>This type is varchar</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		public virtual System.String ConferenceName
		{
			get
			{
				return this._conferenceName; 
			}
			set
			{
				if (_conferenceName == value)
					return;
					
				this._conferenceName = value;
				this._isDirty = true;
				
				OnPropertyChanged("ConferenceName");
			}
		}
		
		
		/// <summary>
		///     Gets or sets the object that contains supplemental data about this object.
		/// </summary>
		/// <value>Object</value>
		[System.ComponentModel.Bindable(false)]
		[LocalizableAttribute(false)]
		[DescriptionAttribute("Object containing data to be associated with this object")]
		public virtual object Tag
		{
			get
			{
				return this._tag;
			}
			set
			{
				if (this._tag == value)
					return;
		
				this._tag = value;
			}
		}
	
		/// <summary>
		/// Determines whether this entity is to suppress events while set to true.
		/// </summary>
		[System.ComponentModel.Bindable(false)]
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public bool SuppressEntityEvents
		{	
			get
			{
				return suppressEntityEvents;
			}
			set
			{
				suppressEntityEvents = value;
			}	
		}

		private bool _isDeleted = false;
		/// <summary>
		/// Gets a value indicating if object has been <see cref="MarkToDelete"/>. ReadOnly.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDeleted
		{
			get { return this._isDeleted; }
		}


		private bool _isDirty = false;
		/// <summary>
		///	Gets a value indicating  if the object has been modified from its original state.
		/// </summary>
		///<value>True if object has been modified from its original state; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsDirty
		{
			get { return this._isDirty; }
		}
		

		private bool _isNew = true;
		/// <summary>
		///	Gets a value indicating if the object is new.
		/// </summary>
		///<value>True if objectis new; otherwise False;</value>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public virtual bool IsNew
		{
			get { return this._isNew; }
			set { this._isNew = value; }
		}

		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public string ViewName
		{
			get { return "vw_ConferenceList"; }
		}

		
		#endregion
		
		#region Methods	
		
		/// <summary>
		/// Accepts the changes made to this object by setting each flags to false.
		/// </summary>
		public virtual void AcceptChanges()
		{
			this._isDeleted = false;
			this._isDirty = false;
			this._isNew = false;
			OnPropertyChanged(string.Empty);
		}
		
		
		///<summary>
		///  Revert all changes and restore original values.
		///  Currently not supported.
		///</summary>
		/// <exception cref="NotSupportedException">This method is not currently supported and always throws this exception.</exception>
		public virtual void CancelChanges()
		{
			throw new NotSupportedException("Method currently not Supported.");
		}
		
		///<summary>
		///   Marks entity to be deleted.
		///</summary>
		public virtual void MarkToDelete()
		{
			this._isDeleted = true;
		}
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Vw_ConferenceListBase Entity 
		///</summary>
		public virtual Vw_ConferenceListBase Copy()
		{
			//shallow copy entity
			Vw_ConferenceList copy = new Vw_ConferenceList();
				copy.Id = this.Id;
				copy.CompanyName = this.CompanyName;
				copy.AdminName = this.AdminName;
				copy.ModeratorName = this.ModeratorName;
				copy.ModeratorCode = this.ModeratorCode;
				copy.PassCode = this.PassCode;
				copy.SeeVoghMeetingId = this.SeeVoghMeetingId;
				copy.Enabled = this.Enabled;
				copy.LastWalletCardSentdate = this.LastWalletCardSentdate;
				copy.WholesalerId = this.WholesalerId;
				copy.CustomerId = this.CustomerId;
				copy.CompanyId = this.CompanyId;
				copy.SalesPersonId = this.SalesPersonId;
				copy.SalesPerson = this.SalesPerson;
				copy.UserId = this.UserId;
				copy.ConferenceName = this.ConferenceName;
			copy.AcceptChanges();
			return (Vw_ConferenceList)copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Deep Copy of this entity.
		///</summary>
		public object Clone(){
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		#endregion
		
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="Vw_ConferenceListBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(Vw_ConferenceListBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="Vw_ConferenceListBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="Vw_ConferenceListBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="Vw_ConferenceListBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(Vw_ConferenceListBase Object1, Vw_ConferenceListBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;

			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.CompanyName != null && Object2.CompanyName != null )
			{
				if (Object1.CompanyName != Object2.CompanyName)
					equal = false;
			}
			else if (Object1.CompanyName == null ^ Object1.CompanyName == null )
			{
				equal = false;
			}
			if (Object1.AdminName != Object2.AdminName)
				equal = false;
			if (Object1.ModeratorName != Object2.ModeratorName)
				equal = false;
			if (Object1.ModeratorCode != Object2.ModeratorCode)
				equal = false;
			if (Object1.PassCode != Object2.PassCode)
				equal = false;
			if (Object1.SeeVoghMeetingId != null && Object2.SeeVoghMeetingId != null )
			{
				if (Object1.SeeVoghMeetingId != Object2.SeeVoghMeetingId)
					equal = false;
			}
			else if (Object1.SeeVoghMeetingId == null ^ Object1.SeeVoghMeetingId == null )
			{
				equal = false;
			}
			if (Object1.Enabled != null && Object2.Enabled != null )
			{
				if (Object1.Enabled != Object2.Enabled)
					equal = false;
			}
			else if (Object1.Enabled == null ^ Object1.Enabled == null )
			{
				equal = false;
			}
			if (Object1.LastWalletCardSentdate != null && Object2.LastWalletCardSentdate != null )
			{
				if (Object1.LastWalletCardSentdate != Object2.LastWalletCardSentdate)
					equal = false;
			}
			else if (Object1.LastWalletCardSentdate == null ^ Object1.LastWalletCardSentdate == null )
			{
				equal = false;
			}
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.CompanyId != Object2.CompanyId)
				equal = false;
			if (Object1.SalesPersonId != Object2.SalesPersonId)
				equal = false;
			if (Object1.SalesPerson != Object2.SalesPerson)
				equal = false;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.ConferenceName != null && Object2.ConferenceName != null )
			{
				if (Object1.ConferenceName != Object2.ConferenceName)
					equal = false;
			}
			else if (Object1.ConferenceName == null ^ Object1.ConferenceName == null )
			{
				equal = false;
			}
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
		}
	
		#endregion
		
		#region INotifyPropertyChanged Members
		
		/// <summary>
      /// Event to indicate that a property has changed.
      /// </summary>
		[field:NonSerialized]
		public event PropertyChangedEventHandler PropertyChanged;

		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="propertyName">The name of the property that has changed.</param>
		protected virtual void OnPropertyChanged(string propertyName)
		{ 
			OnPropertyChanged(new PropertyChangedEventArgs(propertyName));
		}
		
		/// <summary>
      /// Called when a property is changed
      /// </summary>
      /// <param name="e">PropertyChangedEventArgs</param>
		protected virtual void OnPropertyChanged(PropertyChangedEventArgs e)
		{
			if (!SuppressEntityEvents)
			{
				if (null != PropertyChanged)
				{
					PropertyChanged(this, e);
				}
			}
		}
		
		#endregion
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="entity">The entity.</param>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public static object GetPropertyValueByName(Vw_ConferenceList entity, string propertyName)
		{
			switch (propertyName)
			{
				case "Id":
					return entity.Id;
				case "CompanyName":
					return entity.CompanyName;
				case "AdminName":
					return entity.AdminName;
				case "ModeratorName":
					return entity.ModeratorName;
				case "ModeratorCode":
					return entity.ModeratorCode;
				case "PassCode":
					return entity.PassCode;
				case "SeeVoghMeetingId":
					return entity.SeeVoghMeetingId;
				case "Enabled":
					return entity.Enabled;
				case "LastWalletCardSentdate":
					return entity.LastWalletCardSentdate;
				case "WholesalerId":
					return entity.WholesalerId;
				case "CustomerId":
					return entity.CustomerId;
				case "CompanyId":
					return entity.CompanyId;
				case "SalesPersonId":
					return entity.SalesPersonId;
				case "SalesPerson":
					return entity.SalesPerson;
				case "UserId":
					return entity.UserId;
				case "ConferenceName":
					return entity.ConferenceName;
			}
			return null;
		}
				
		/// <summary>
		/// Gets the property value by name.
		/// </summary>
		/// <param name="propertyName">Name of the property.</param>
		/// <returns></returns>
		public object GetPropertyValueByName(string propertyName)
		{			
			return GetPropertyValueByName(this as Vw_ConferenceList, propertyName);
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{17}{16}- Id: {0}{16}- CompanyName: {1}{16}- AdminName: {2}{16}- ModeratorName: {3}{16}- ModeratorCode: {4}{16}- PassCode: {5}{16}- SeeVoghMeetingId: {6}{16}- Enabled: {7}{16}- LastWalletCardSentdate: {8}{16}- WholesalerId: {9}{16}- CustomerId: {10}{16}- CompanyId: {11}{16}- SalesPersonId: {12}{16}- SalesPerson: {13}{16}- UserId: {14}{16}- ConferenceName: {15}{16}", 
				this.Id,
				(this.CompanyName == null) ? string.Empty : this.CompanyName.ToString(),
			     
				this.AdminName,
				this.ModeratorName,
				this.ModeratorCode,
				this.PassCode,
				(this.SeeVoghMeetingId == null) ? string.Empty : this.SeeVoghMeetingId.ToString(),
			     
				(this.Enabled == null) ? string.Empty : this.Enabled.ToString(),
			     
				(this.LastWalletCardSentdate == null) ? string.Empty : this.LastWalletCardSentdate.ToString(),
			     
				this.WholesalerId,
				this.CustomerId,
				this.CompanyId,
				this.SalesPersonId,
				this.SalesPerson,
				this.UserId,
				(this.ConferenceName == null) ? string.Empty : this.ConferenceName.ToString(),
			     
				System.Environment.NewLine, 
				this.GetType());
		}
	
	}//End Class
	
	
	/// <summary>
	/// Enumerate the Vw_ConferenceList columns.
	/// </summary>
	[Serializable]
	public enum Vw_ConferenceListColumn
	{
		/// <summary>
		/// ID : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Id,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		CompanyName,
		/// <summary>
		/// AdminName : 
		/// </summary>
		[EnumTextValue("AdminName")]
		[ColumnEnum("AdminName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		AdminName,
		/// <summary>
		/// ModeratorName : 
		/// </summary>
		[EnumTextValue("ModeratorName")]
		[ColumnEnum("ModeratorName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		ModeratorName,
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		[EnumTextValue("ModeratorCode")]
		[ColumnEnum("ModeratorCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 16)]
		ModeratorCode,
		/// <summary>
		/// PassCode : 
		/// </summary>
		[EnumTextValue("PassCode")]
		[ColumnEnum("PassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 16)]
		PassCode,
		/// <summary>
		/// SeeVoghMeetingId : 
		/// </summary>
		[EnumTextValue("SeeVoghMeetingId")]
		[ColumnEnum("SeeVoghMeetingId", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		SeeVoghMeetingId,
		/// <summary>
		/// Enabled : 
		/// </summary>
		[EnumTextValue("Enabled")]
		[ColumnEnum("Enabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Enabled,
		/// <summary>
		/// LastWalletCardSentdate : 
		/// </summary>
		[EnumTextValue("LastWalletCardSentdate")]
		[ColumnEnum("LastWalletCardSentdate", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		LastWalletCardSentdate,
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId,
		/// <summary>
		/// CustomerID : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerId,
		/// <summary>
		/// CompanyID : 
		/// </summary>
		[EnumTextValue("CompanyID")]
		[ColumnEnum("CompanyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CompanyId,
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SalesPersonId,
		/// <summary>
		/// SalesPerson : 
		/// </summary>
		[EnumTextValue("SalesPerson")]
		[ColumnEnum("SalesPerson", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		SalesPerson,
		/// <summary>
		/// UserID : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UserId,
		/// <summary>
		/// ConferenceName : 
		/// </summary>
		[EnumTextValue("ConferenceName")]
		[ColumnEnum("ConferenceName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ConferenceName
	}//End enum

} // end namespace
