
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Trend.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'Trend' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class TrendBase : EntityBase, CONFDB.Entities.ITrend, IEntityId<TrendKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TrendEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TrendEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TrendEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Trend> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event TrendEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TrendEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TrendBase"/> instance.
		///</summary>
		public TrendBase()
		{
			this.entityData = new TrendEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TrendBase"/> instance.
		///</summary>
		///<param name="_companyId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_retailCurrency"></param>
		///<param name="_companyName"></param>
		///<param name="_totalRevenueMonth01"></param>
		///<param name="_totalRevenueMonth02"></param>
		///<param name="_totalRevenueMonth03"></param>
		///<param name="_totalRevenueMonth04"></param>
		///<param name="_totalRevenueMonth05"></param>
		///<param name="_totalRevenueMonth06"></param>
		///<param name="_totalRevenueMonth07"></param>
		///<param name="_totalRevenueMonth08"></param>
		///<param name="_totalRevenueMonth09"></param>
		///<param name="_totalRevenueMonth10"></param>
		///<param name="_totalRevenueMonth11"></param>
		///<param name="_totalRevenueMonth12"></param>
		///<param name="_yearCategory"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		public TrendBase(System.Int32 _companyId, System.String _wholesalerId, System.Int32 _customerId, 
			System.Int32 _salesPersonId, System.String _retailCurrency, System.String _companyName, System.Decimal? _totalRevenueMonth01, 
			System.Decimal? _totalRevenueMonth02, System.Decimal? _totalRevenueMonth03, System.Decimal? _totalRevenueMonth04, 
			System.Decimal? _totalRevenueMonth05, System.Decimal? _totalRevenueMonth06, System.Decimal? _totalRevenueMonth07, 
			System.Decimal? _totalRevenueMonth08, System.Decimal? _totalRevenueMonth09, System.Decimal? _totalRevenueMonth10, 
			System.Decimal? _totalRevenueMonth11, System.Decimal? _totalRevenueMonth12, System.Int32? _yearCategory, System.DateTime? _startDate, 
			System.DateTime? _endDate)
		{
			this.entityData = new TrendEntityData();
			this.backupData = null;

			this.CompanyId = _companyId;
			this.WholesalerId = _wholesalerId;
			this.CustomerId = _customerId;
			this.SalesPersonId = _salesPersonId;
			this.RetailCurrency = _retailCurrency;
			this.CompanyName = _companyName;
			this.TotalRevenueMonth01 = _totalRevenueMonth01;
			this.TotalRevenueMonth02 = _totalRevenueMonth02;
			this.TotalRevenueMonth03 = _totalRevenueMonth03;
			this.TotalRevenueMonth04 = _totalRevenueMonth04;
			this.TotalRevenueMonth05 = _totalRevenueMonth05;
			this.TotalRevenueMonth06 = _totalRevenueMonth06;
			this.TotalRevenueMonth07 = _totalRevenueMonth07;
			this.TotalRevenueMonth08 = _totalRevenueMonth08;
			this.TotalRevenueMonth09 = _totalRevenueMonth09;
			this.TotalRevenueMonth10 = _totalRevenueMonth10;
			this.TotalRevenueMonth11 = _totalRevenueMonth11;
			this.TotalRevenueMonth12 = _totalRevenueMonth12;
			this.YearCategory = _yearCategory;
			this.StartDate = _startDate;
			this.EndDate = _endDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Trend"/> instance.
		///</summary>
		///<param name="_companyId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_retailCurrency"></param>
		///<param name="_companyName"></param>
		///<param name="_totalRevenueMonth01"></param>
		///<param name="_totalRevenueMonth02"></param>
		///<param name="_totalRevenueMonth03"></param>
		///<param name="_totalRevenueMonth04"></param>
		///<param name="_totalRevenueMonth05"></param>
		///<param name="_totalRevenueMonth06"></param>
		///<param name="_totalRevenueMonth07"></param>
		///<param name="_totalRevenueMonth08"></param>
		///<param name="_totalRevenueMonth09"></param>
		///<param name="_totalRevenueMonth10"></param>
		///<param name="_totalRevenueMonth11"></param>
		///<param name="_totalRevenueMonth12"></param>
		///<param name="_yearCategory"></param>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		public static Trend CreateTrend(System.Int32 _companyId, System.String _wholesalerId, System.Int32 _customerId, 
			System.Int32 _salesPersonId, System.String _retailCurrency, System.String _companyName, System.Decimal? _totalRevenueMonth01, 
			System.Decimal? _totalRevenueMonth02, System.Decimal? _totalRevenueMonth03, System.Decimal? _totalRevenueMonth04, 
			System.Decimal? _totalRevenueMonth05, System.Decimal? _totalRevenueMonth06, System.Decimal? _totalRevenueMonth07, 
			System.Decimal? _totalRevenueMonth08, System.Decimal? _totalRevenueMonth09, System.Decimal? _totalRevenueMonth10, 
			System.Decimal? _totalRevenueMonth11, System.Decimal? _totalRevenueMonth12, System.Int32? _yearCategory, System.DateTime? _startDate, 
			System.DateTime? _endDate)
		{
			Trend newTrend = new Trend();
			newTrend.CompanyId = _companyId;
			newTrend.WholesalerId = _wholesalerId;
			newTrend.CustomerId = _customerId;
			newTrend.SalesPersonId = _salesPersonId;
			newTrend.RetailCurrency = _retailCurrency;
			newTrend.CompanyName = _companyName;
			newTrend.TotalRevenueMonth01 = _totalRevenueMonth01;
			newTrend.TotalRevenueMonth02 = _totalRevenueMonth02;
			newTrend.TotalRevenueMonth03 = _totalRevenueMonth03;
			newTrend.TotalRevenueMonth04 = _totalRevenueMonth04;
			newTrend.TotalRevenueMonth05 = _totalRevenueMonth05;
			newTrend.TotalRevenueMonth06 = _totalRevenueMonth06;
			newTrend.TotalRevenueMonth07 = _totalRevenueMonth07;
			newTrend.TotalRevenueMonth08 = _totalRevenueMonth08;
			newTrend.TotalRevenueMonth09 = _totalRevenueMonth09;
			newTrend.TotalRevenueMonth10 = _totalRevenueMonth10;
			newTrend.TotalRevenueMonth11 = _totalRevenueMonth11;
			newTrend.TotalRevenueMonth12 = _totalRevenueMonth12;
			newTrend.YearCategory = _yearCategory;
			newTrend.StartDate = _startDate;
			newTrend.EndDate = _endDate;
			return newTrend;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the CompanyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CompanyId
		{
			get
			{
				return this.entityData.CompanyId; 
			}
			
			set
			{
				if (this.entityData.CompanyId == value)
					return;
					
				OnColumnChanging(TrendColumn.CompanyId, this.entityData.CompanyId);
				this.entityData.CompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.CompanyId, this.entityData.CompanyId);
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(TrendColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				this.EntityId.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the WholesalerID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the WholesalerID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalWholesalerId
		{
			get { return this.entityData.OriginalWholesalerId; }
			set { this.entityData.OriginalWholesalerId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(TrendColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				this.EntityId.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the CustomerID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the CustomerID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalCustomerId
		{
			get { return this.entityData.OriginalCustomerId; }
			set { this.entityData.OriginalCustomerId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the SalesPersonId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SalesPersonId
		{
			get
			{
				return this.entityData.SalesPersonId; 
			}
			
			set
			{
				if (this.entityData.SalesPersonId == value)
					return;
					
				OnColumnChanging(TrendColumn.SalesPersonId, this.entityData.SalesPersonId);
				this.entityData.SalesPersonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.SalesPersonId, this.entityData.SalesPersonId);
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailCurrency property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String RetailCurrency
		{
			get
			{
				return this.entityData.RetailCurrency; 
			}
			
			set
			{
				if (this.entityData.RetailCurrency == value)
					return;
					
				OnColumnChanging(TrendColumn.RetailCurrency, this.entityData.RetailCurrency);
				this.entityData.RetailCurrency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.RetailCurrency, this.entityData.RetailCurrency);
				OnPropertyChanged("RetailCurrency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
					
				OnColumnChanging(TrendColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth01 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth01Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth01
		{
			get
			{
				return this.entityData.TotalRevenueMonth01; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth01 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth01, this.entityData.TotalRevenueMonth01);
				this.entityData.TotalRevenueMonth01 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth01, this.entityData.TotalRevenueMonth01);
				OnPropertyChanged("TotalRevenueMonth01");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth02 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth02Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth02
		{
			get
			{
				return this.entityData.TotalRevenueMonth02; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth02 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth02, this.entityData.TotalRevenueMonth02);
				this.entityData.TotalRevenueMonth02 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth02, this.entityData.TotalRevenueMonth02);
				OnPropertyChanged("TotalRevenueMonth02");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth03 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth03Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth03
		{
			get
			{
				return this.entityData.TotalRevenueMonth03; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth03 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth03, this.entityData.TotalRevenueMonth03);
				this.entityData.TotalRevenueMonth03 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth03, this.entityData.TotalRevenueMonth03);
				OnPropertyChanged("TotalRevenueMonth03");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth04 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth04Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth04
		{
			get
			{
				return this.entityData.TotalRevenueMonth04; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth04 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth04, this.entityData.TotalRevenueMonth04);
				this.entityData.TotalRevenueMonth04 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth04, this.entityData.TotalRevenueMonth04);
				OnPropertyChanged("TotalRevenueMonth04");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth05 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth05Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth05
		{
			get
			{
				return this.entityData.TotalRevenueMonth05; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth05 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth05, this.entityData.TotalRevenueMonth05);
				this.entityData.TotalRevenueMonth05 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth05, this.entityData.TotalRevenueMonth05);
				OnPropertyChanged("TotalRevenueMonth05");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth06 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth06Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth06
		{
			get
			{
				return this.entityData.TotalRevenueMonth06; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth06 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth06, this.entityData.TotalRevenueMonth06);
				this.entityData.TotalRevenueMonth06 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth06, this.entityData.TotalRevenueMonth06);
				OnPropertyChanged("TotalRevenueMonth06");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth07 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth07Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth07
		{
			get
			{
				return this.entityData.TotalRevenueMonth07; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth07 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth07, this.entityData.TotalRevenueMonth07);
				this.entityData.TotalRevenueMonth07 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth07, this.entityData.TotalRevenueMonth07);
				OnPropertyChanged("TotalRevenueMonth07");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth08 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth08Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth08
		{
			get
			{
				return this.entityData.TotalRevenueMonth08; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth08 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth08, this.entityData.TotalRevenueMonth08);
				this.entityData.TotalRevenueMonth08 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth08, this.entityData.TotalRevenueMonth08);
				OnPropertyChanged("TotalRevenueMonth08");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth09 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth09Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth09
		{
			get
			{
				return this.entityData.TotalRevenueMonth09; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth09 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth09, this.entityData.TotalRevenueMonth09);
				this.entityData.TotalRevenueMonth09 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth09, this.entityData.TotalRevenueMonth09);
				OnPropertyChanged("TotalRevenueMonth09");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth10 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth10Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth10
		{
			get
			{
				return this.entityData.TotalRevenueMonth10; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth10 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth10, this.entityData.TotalRevenueMonth10);
				this.entityData.TotalRevenueMonth10 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth10, this.entityData.TotalRevenueMonth10);
				OnPropertyChanged("TotalRevenueMonth10");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth11 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth11Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth11
		{
			get
			{
				return this.entityData.TotalRevenueMonth11; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth11 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth11, this.entityData.TotalRevenueMonth11);
				this.entityData.TotalRevenueMonth11 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth11, this.entityData.TotalRevenueMonth11);
				OnPropertyChanged("TotalRevenueMonth11");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalRevenueMonth12 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalRevenueMonth12Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalRevenueMonth12
		{
			get
			{
				return this.entityData.TotalRevenueMonth12; 
			}
			
			set
			{
				if (this.entityData.TotalRevenueMonth12 == value)
					return;
					
				OnColumnChanging(TrendColumn.TotalRevenueMonth12, this.entityData.TotalRevenueMonth12);
				this.entityData.TotalRevenueMonth12 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.TotalRevenueMonth12, this.entityData.TotalRevenueMonth12);
				OnPropertyChanged("TotalRevenueMonth12");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the YearCategory property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsYearCategoryNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? YearCategory
		{
			get
			{
				return this.entityData.YearCategory; 
			}
			
			set
			{
				if (this.entityData.YearCategory == value)
					return;
					
				OnColumnChanging(TrendColumn.YearCategory, this.entityData.YearCategory);
				this.entityData.YearCategory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.YearCategory, this.entityData.YearCategory);
				OnPropertyChanged("YearCategory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsStartDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
					
				OnColumnChanging(TrendColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsEndDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? EndDate
		{
			get
			{
				return this.entityData.EndDate; 
			}
			
			set
			{
				if (this.entityData.EndDate == value)
					return;
					
				OnColumnChanging(TrendColumn.EndDate, this.entityData.EndDate);
				this.entityData.EndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TrendColumn.EndDate, this.entityData.EndDate);
				OnPropertyChanged("EndDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("RetailCurrency", "Retail Currency"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RetailCurrency", "Retail Currency", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("CompanyName", "Company Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CompanyName", "Company Name", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Trend"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"CompanyID", "WholesalerID", "CustomerID", "SalesPersonID", "RetailCurrency", "CompanyName", "TotalRevenueMonth01", "TotalRevenueMonth02", "TotalRevenueMonth03", "TotalRevenueMonth04", "TotalRevenueMonth05", "TotalRevenueMonth06", "TotalRevenueMonth07", "TotalRevenueMonth08", "TotalRevenueMonth09", "TotalRevenueMonth10", "TotalRevenueMonth11", "TotalRevenueMonth12", "YearCategory", "StartDate", "EndDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TrendEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Trend) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Trend>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Trend);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Trend Entity 
		///</summary>
		public virtual Trend Copy()
		{
			//shallow copy entity
			Trend copy = new Trend();
			copy.SuppressEntityEvents = true;
			copy.CompanyId = this.CompanyId;
			copy.WholesalerId = this.WholesalerId;
			copy.OriginalWholesalerId = this.OriginalWholesalerId;
			copy.CustomerId = this.CustomerId;
			copy.OriginalCustomerId = this.OriginalCustomerId;
			copy.SalesPersonId = this.SalesPersonId;
			copy.RetailCurrency = this.RetailCurrency;
			copy.CompanyName = this.CompanyName;
			copy.TotalRevenueMonth01 = this.TotalRevenueMonth01;
			copy.TotalRevenueMonth02 = this.TotalRevenueMonth02;
			copy.TotalRevenueMonth03 = this.TotalRevenueMonth03;
			copy.TotalRevenueMonth04 = this.TotalRevenueMonth04;
			copy.TotalRevenueMonth05 = this.TotalRevenueMonth05;
			copy.TotalRevenueMonth06 = this.TotalRevenueMonth06;
			copy.TotalRevenueMonth07 = this.TotalRevenueMonth07;
			copy.TotalRevenueMonth08 = this.TotalRevenueMonth08;
			copy.TotalRevenueMonth09 = this.TotalRevenueMonth09;
			copy.TotalRevenueMonth10 = this.TotalRevenueMonth10;
			copy.TotalRevenueMonth11 = this.TotalRevenueMonth11;
			copy.TotalRevenueMonth12 = this.TotalRevenueMonth12;
			copy.YearCategory = this.YearCategory;
			copy.StartDate = this.StartDate;
			copy.EndDate = this.EndDate;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Trend Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Trend DeepCopy()
		{
			return EntityHelper.Clone<Trend>(this as Trend);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TrendEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TrendEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TrendColumn column)
		{
			switch(column)
			{
					case TrendColumn.CompanyId:
					return entityData.CompanyId != _originalData.CompanyId;
					case TrendColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case TrendColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case TrendColumn.SalesPersonId:
					return entityData.SalesPersonId != _originalData.SalesPersonId;
					case TrendColumn.RetailCurrency:
					return entityData.RetailCurrency != _originalData.RetailCurrency;
					case TrendColumn.CompanyName:
					return entityData.CompanyName != _originalData.CompanyName;
					case TrendColumn.TotalRevenueMonth01:
					return entityData.TotalRevenueMonth01 != _originalData.TotalRevenueMonth01;
					case TrendColumn.TotalRevenueMonth02:
					return entityData.TotalRevenueMonth02 != _originalData.TotalRevenueMonth02;
					case TrendColumn.TotalRevenueMonth03:
					return entityData.TotalRevenueMonth03 != _originalData.TotalRevenueMonth03;
					case TrendColumn.TotalRevenueMonth04:
					return entityData.TotalRevenueMonth04 != _originalData.TotalRevenueMonth04;
					case TrendColumn.TotalRevenueMonth05:
					return entityData.TotalRevenueMonth05 != _originalData.TotalRevenueMonth05;
					case TrendColumn.TotalRevenueMonth06:
					return entityData.TotalRevenueMonth06 != _originalData.TotalRevenueMonth06;
					case TrendColumn.TotalRevenueMonth07:
					return entityData.TotalRevenueMonth07 != _originalData.TotalRevenueMonth07;
					case TrendColumn.TotalRevenueMonth08:
					return entityData.TotalRevenueMonth08 != _originalData.TotalRevenueMonth08;
					case TrendColumn.TotalRevenueMonth09:
					return entityData.TotalRevenueMonth09 != _originalData.TotalRevenueMonth09;
					case TrendColumn.TotalRevenueMonth10:
					return entityData.TotalRevenueMonth10 != _originalData.TotalRevenueMonth10;
					case TrendColumn.TotalRevenueMonth11:
					return entityData.TotalRevenueMonth11 != _originalData.TotalRevenueMonth11;
					case TrendColumn.TotalRevenueMonth12:
					return entityData.TotalRevenueMonth12 != _originalData.TotalRevenueMonth12;
					case TrendColumn.YearCategory:
					return entityData.YearCategory != _originalData.YearCategory;
					case TrendColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case TrendColumn.EndDate:
					return entityData.EndDate != _originalData.EndDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.CompanyId != _originalData.CompanyId;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.SalesPersonId != _originalData.SalesPersonId;
			result = result || entityData.RetailCurrency != _originalData.RetailCurrency;
			result = result || entityData.CompanyName != _originalData.CompanyName;
			result = result || entityData.TotalRevenueMonth01 != _originalData.TotalRevenueMonth01;
			result = result || entityData.TotalRevenueMonth02 != _originalData.TotalRevenueMonth02;
			result = result || entityData.TotalRevenueMonth03 != _originalData.TotalRevenueMonth03;
			result = result || entityData.TotalRevenueMonth04 != _originalData.TotalRevenueMonth04;
			result = result || entityData.TotalRevenueMonth05 != _originalData.TotalRevenueMonth05;
			result = result || entityData.TotalRevenueMonth06 != _originalData.TotalRevenueMonth06;
			result = result || entityData.TotalRevenueMonth07 != _originalData.TotalRevenueMonth07;
			result = result || entityData.TotalRevenueMonth08 != _originalData.TotalRevenueMonth08;
			result = result || entityData.TotalRevenueMonth09 != _originalData.TotalRevenueMonth09;
			result = result || entityData.TotalRevenueMonth10 != _originalData.TotalRevenueMonth10;
			result = result || entityData.TotalRevenueMonth11 != _originalData.TotalRevenueMonth11;
			result = result || entityData.TotalRevenueMonth12 != _originalData.TotalRevenueMonth12;
			result = result || entityData.YearCategory != _originalData.YearCategory;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.EndDate != _originalData.EndDate;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TrendBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is TrendBase)
				return Equals(this, (TrendBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TrendBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.CompanyId.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					this.CustomerId.GetHashCode() ^ 
					this.SalesPersonId.GetHashCode() ^ 
					this.RetailCurrency.GetHashCode() ^ 
					this.CompanyName.GetHashCode() ^ 
					((this.TotalRevenueMonth01 == null) ? string.Empty : this.TotalRevenueMonth01.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth02 == null) ? string.Empty : this.TotalRevenueMonth02.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth03 == null) ? string.Empty : this.TotalRevenueMonth03.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth04 == null) ? string.Empty : this.TotalRevenueMonth04.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth05 == null) ? string.Empty : this.TotalRevenueMonth05.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth06 == null) ? string.Empty : this.TotalRevenueMonth06.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth07 == null) ? string.Empty : this.TotalRevenueMonth07.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth08 == null) ? string.Empty : this.TotalRevenueMonth08.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth09 == null) ? string.Empty : this.TotalRevenueMonth09.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth10 == null) ? string.Empty : this.TotalRevenueMonth10.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth11 == null) ? string.Empty : this.TotalRevenueMonth11.ToString()).GetHashCode() ^ 
					((this.TotalRevenueMonth12 == null) ? string.Empty : this.TotalRevenueMonth12.ToString()).GetHashCode() ^ 
					((this.YearCategory == null) ? string.Empty : this.YearCategory.ToString()).GetHashCode() ^ 
					((this.StartDate == null) ? string.Empty : this.StartDate.ToString()).GetHashCode() ^ 
					((this.EndDate == null) ? string.Empty : this.EndDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TrendBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TrendBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="TrendBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="TrendBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TrendBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(TrendBase Object1, TrendBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.CompanyId != Object2.CompanyId)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.SalesPersonId != Object2.SalesPersonId)
				equal = false;
			if (Object1.RetailCurrency != Object2.RetailCurrency)
				equal = false;
			if (Object1.CompanyName != Object2.CompanyName)
				equal = false;
			if ( Object1.TotalRevenueMonth01 != null && Object2.TotalRevenueMonth01 != null )
			{
				if (Object1.TotalRevenueMonth01 != Object2.TotalRevenueMonth01)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth01 == null ^ Object2.TotalRevenueMonth01 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth02 != null && Object2.TotalRevenueMonth02 != null )
			{
				if (Object1.TotalRevenueMonth02 != Object2.TotalRevenueMonth02)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth02 == null ^ Object2.TotalRevenueMonth02 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth03 != null && Object2.TotalRevenueMonth03 != null )
			{
				if (Object1.TotalRevenueMonth03 != Object2.TotalRevenueMonth03)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth03 == null ^ Object2.TotalRevenueMonth03 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth04 != null && Object2.TotalRevenueMonth04 != null )
			{
				if (Object1.TotalRevenueMonth04 != Object2.TotalRevenueMonth04)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth04 == null ^ Object2.TotalRevenueMonth04 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth05 != null && Object2.TotalRevenueMonth05 != null )
			{
				if (Object1.TotalRevenueMonth05 != Object2.TotalRevenueMonth05)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth05 == null ^ Object2.TotalRevenueMonth05 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth06 != null && Object2.TotalRevenueMonth06 != null )
			{
				if (Object1.TotalRevenueMonth06 != Object2.TotalRevenueMonth06)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth06 == null ^ Object2.TotalRevenueMonth06 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth07 != null && Object2.TotalRevenueMonth07 != null )
			{
				if (Object1.TotalRevenueMonth07 != Object2.TotalRevenueMonth07)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth07 == null ^ Object2.TotalRevenueMonth07 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth08 != null && Object2.TotalRevenueMonth08 != null )
			{
				if (Object1.TotalRevenueMonth08 != Object2.TotalRevenueMonth08)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth08 == null ^ Object2.TotalRevenueMonth08 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth09 != null && Object2.TotalRevenueMonth09 != null )
			{
				if (Object1.TotalRevenueMonth09 != Object2.TotalRevenueMonth09)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth09 == null ^ Object2.TotalRevenueMonth09 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth10 != null && Object2.TotalRevenueMonth10 != null )
			{
				if (Object1.TotalRevenueMonth10 != Object2.TotalRevenueMonth10)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth10 == null ^ Object2.TotalRevenueMonth10 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth11 != null && Object2.TotalRevenueMonth11 != null )
			{
				if (Object1.TotalRevenueMonth11 != Object2.TotalRevenueMonth11)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth11 == null ^ Object2.TotalRevenueMonth11 == null )
			{
				equal = false;
			}
			if ( Object1.TotalRevenueMonth12 != null && Object2.TotalRevenueMonth12 != null )
			{
				if (Object1.TotalRevenueMonth12 != Object2.TotalRevenueMonth12)
					equal = false;
			}
			else if (Object1.TotalRevenueMonth12 == null ^ Object2.TotalRevenueMonth12 == null )
			{
				equal = false;
			}
			if ( Object1.YearCategory != null && Object2.YearCategory != null )
			{
				if (Object1.YearCategory != Object2.YearCategory)
					equal = false;
			}
			else if (Object1.YearCategory == null ^ Object2.YearCategory == null )
			{
				equal = false;
			}
			if ( Object1.StartDate != null && Object2.StartDate != null )
			{
				if (Object1.StartDate != Object2.StartDate)
					equal = false;
			}
			else if (Object1.StartDate == null ^ Object2.StartDate == null )
			{
				equal = false;
			}
			if ( Object1.EndDate != null && Object2.EndDate != null )
			{
				if (Object1.EndDate != Object2.EndDate)
					equal = false;
			}
			else if (Object1.EndDate == null ^ Object2.EndDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TrendBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TrendComparer GetComparer()
        {
            return new TrendComparer();
        }
        */

        // Comparer delegates back to Trend
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Trend rhs, TrendColumn which)
        {
            switch (which)
            {
            	
            	
            	case TrendColumn.CompanyId:
            		return this.CompanyId.CompareTo(rhs.CompanyId);
            		
            		                 
            	
            	
            	case TrendColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case TrendColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case TrendColumn.SalesPersonId:
            		return this.SalesPersonId.CompareTo(rhs.SalesPersonId);
            		
            		                 
            	
            	
            	case TrendColumn.RetailCurrency:
            		return this.RetailCurrency.CompareTo(rhs.RetailCurrency);
            		
            		                 
            	
            	
            	case TrendColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth01:
            		return this.TotalRevenueMonth01.Value.CompareTo(rhs.TotalRevenueMonth01.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth02:
            		return this.TotalRevenueMonth02.Value.CompareTo(rhs.TotalRevenueMonth02.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth03:
            		return this.TotalRevenueMonth03.Value.CompareTo(rhs.TotalRevenueMonth03.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth04:
            		return this.TotalRevenueMonth04.Value.CompareTo(rhs.TotalRevenueMonth04.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth05:
            		return this.TotalRevenueMonth05.Value.CompareTo(rhs.TotalRevenueMonth05.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth06:
            		return this.TotalRevenueMonth06.Value.CompareTo(rhs.TotalRevenueMonth06.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth07:
            		return this.TotalRevenueMonth07.Value.CompareTo(rhs.TotalRevenueMonth07.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth08:
            		return this.TotalRevenueMonth08.Value.CompareTo(rhs.TotalRevenueMonth08.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth09:
            		return this.TotalRevenueMonth09.Value.CompareTo(rhs.TotalRevenueMonth09.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth10:
            		return this.TotalRevenueMonth10.Value.CompareTo(rhs.TotalRevenueMonth10.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth11:
            		return this.TotalRevenueMonth11.Value.CompareTo(rhs.TotalRevenueMonth11.Value);
            		
            		                 
            	
            	
            	case TrendColumn.TotalRevenueMonth12:
            		return this.TotalRevenueMonth12.Value.CompareTo(rhs.TotalRevenueMonth12.Value);
            		
            		                 
            	
            	
            	case TrendColumn.YearCategory:
            		return this.YearCategory.Value.CompareTo(rhs.YearCategory.Value);
            		
            		                 
            	
            	
            	case TrendColumn.StartDate:
            		return this.StartDate.Value.CompareTo(rhs.StartDate.Value);
            		
            		                 
            	
            	
            	case TrendColumn.EndDate:
            		return this.EndDate.Value.CompareTo(rhs.EndDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TrendKey> Members
		
		// member variable for the EntityId property
		private TrendKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TrendKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TrendKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Trend")
					.Append("|").Append( this.WholesalerId.ToString())
					.Append("|").Append( this.CustomerId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- CompanyId: {0}{21}- WholesalerId: {1}{21}- CustomerId: {2}{21}- SalesPersonId: {3}{21}- RetailCurrency: {4}{21}- CompanyName: {5}{21}- TotalRevenueMonth01: {6}{21}- TotalRevenueMonth02: {7}{21}- TotalRevenueMonth03: {8}{21}- TotalRevenueMonth04: {9}{21}- TotalRevenueMonth05: {10}{21}- TotalRevenueMonth06: {11}{21}- TotalRevenueMonth07: {12}{21}- TotalRevenueMonth08: {13}{21}- TotalRevenueMonth09: {14}{21}- TotalRevenueMonth10: {15}{21}- TotalRevenueMonth11: {16}{21}- TotalRevenueMonth12: {17}{21}- YearCategory: {18}{21}- StartDate: {19}{21}- EndDate: {20}{21}", 
				this.CompanyId,
				this.WholesalerId,
				this.CustomerId,
				this.SalesPersonId,
				this.RetailCurrency,
				this.CompanyName,
				(this.TotalRevenueMonth01 == null) ? string.Empty : this.TotalRevenueMonth01.ToString(),
				(this.TotalRevenueMonth02 == null) ? string.Empty : this.TotalRevenueMonth02.ToString(),
				(this.TotalRevenueMonth03 == null) ? string.Empty : this.TotalRevenueMonth03.ToString(),
				(this.TotalRevenueMonth04 == null) ? string.Empty : this.TotalRevenueMonth04.ToString(),
				(this.TotalRevenueMonth05 == null) ? string.Empty : this.TotalRevenueMonth05.ToString(),
				(this.TotalRevenueMonth06 == null) ? string.Empty : this.TotalRevenueMonth06.ToString(),
				(this.TotalRevenueMonth07 == null) ? string.Empty : this.TotalRevenueMonth07.ToString(),
				(this.TotalRevenueMonth08 == null) ? string.Empty : this.TotalRevenueMonth08.ToString(),
				(this.TotalRevenueMonth09 == null) ? string.Empty : this.TotalRevenueMonth09.ToString(),
				(this.TotalRevenueMonth10 == null) ? string.Empty : this.TotalRevenueMonth10.ToString(),
				(this.TotalRevenueMonth11 == null) ? string.Empty : this.TotalRevenueMonth11.ToString(),
				(this.TotalRevenueMonth12 == null) ? string.Empty : this.TotalRevenueMonth12.ToString(),
				(this.YearCategory == null) ? string.Empty : this.YearCategory.ToString(),
				(this.StartDate == null) ? string.Empty : this.StartDate.ToString(),
				(this.EndDate == null) ? string.Empty : this.EndDate.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Trend' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TrendEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// WholesalerID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Trend"</remarks>
			public System.String WholesalerId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalWholesalerId;
			
			/// <summary>			
			/// CustomerID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Trend"</remarks>
			public System.Int32 CustomerId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalCustomerId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CompanyID : 
		/// </summary>
		public System.Int32		  CompanyId = (int)0;
		
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		public System.Int32		  SalesPersonId = (int)0;
		
		/// <summary>
		/// RetailCurrency : 
		/// </summary>
		public System.String		  RetailCurrency = string.Empty;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		public System.String		  CompanyName = string.Empty;
		
		/// <summary>
		/// TotalRevenueMonth01 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth01 = null;
		
		/// <summary>
		/// TotalRevenueMonth02 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth02 = null;
		
		/// <summary>
		/// TotalRevenueMonth03 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth03 = null;
		
		/// <summary>
		/// TotalRevenueMonth04 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth04 = null;
		
		/// <summary>
		/// TotalRevenueMonth05 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth05 = null;
		
		/// <summary>
		/// TotalRevenueMonth06 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth06 = null;
		
		/// <summary>
		/// TotalRevenueMonth07 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth07 = null;
		
		/// <summary>
		/// TotalRevenueMonth08 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth08 = null;
		
		/// <summary>
		/// TotalRevenueMonth09 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth09 = null;
		
		/// <summary>
		/// TotalRevenueMonth10 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth10 = null;
		
		/// <summary>
		/// TotalRevenueMonth11 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth11 = null;
		
		/// <summary>
		/// TotalRevenueMonth12 : 
		/// </summary>
		public System.Decimal?		  TotalRevenueMonth12 = null;
		
		/// <summary>
		/// YearCategory : 
		/// </summary>
		public System.Int32?		  YearCategory = null;
		
		/// <summary>
		/// StartDate : 
		/// </summary>
		public System.DateTime?		  StartDate = null;
		
		/// <summary>
		/// EndDate : 
		/// </summary>
		public System.DateTime?		  EndDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TrendEntityData _tmp = new TrendEntityData();
						
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.OriginalWholesalerId = this.OriginalWholesalerId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.OriginalCustomerId = this.OriginalCustomerId;
			
			_tmp.CompanyId = this.CompanyId;
			_tmp.SalesPersonId = this.SalesPersonId;
			_tmp.RetailCurrency = this.RetailCurrency;
			_tmp.CompanyName = this.CompanyName;
			_tmp.TotalRevenueMonth01 = this.TotalRevenueMonth01;
			_tmp.TotalRevenueMonth02 = this.TotalRevenueMonth02;
			_tmp.TotalRevenueMonth03 = this.TotalRevenueMonth03;
			_tmp.TotalRevenueMonth04 = this.TotalRevenueMonth04;
			_tmp.TotalRevenueMonth05 = this.TotalRevenueMonth05;
			_tmp.TotalRevenueMonth06 = this.TotalRevenueMonth06;
			_tmp.TotalRevenueMonth07 = this.TotalRevenueMonth07;
			_tmp.TotalRevenueMonth08 = this.TotalRevenueMonth08;
			_tmp.TotalRevenueMonth09 = this.TotalRevenueMonth09;
			_tmp.TotalRevenueMonth10 = this.TotalRevenueMonth10;
			_tmp.TotalRevenueMonth11 = this.TotalRevenueMonth11;
			_tmp.TotalRevenueMonth12 = this.TotalRevenueMonth12;
			_tmp.YearCategory = this.YearCategory;
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrendColumn"/> which has raised the event.</param>
		public void OnColumnChanging(TrendColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrendColumn"/> which has raised the event.</param>
		public void OnColumnChanged(TrendColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrendColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(TrendColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TrendEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TrendEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TrendColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(TrendColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TrendEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TrendEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TrendEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Trend"/> object.
	/// </remarks>
	public class TrendEventArgs : System.EventArgs
	{
		private TrendColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TrendEventArgs class.
		///</summary>
		public TrendEventArgs(TrendColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TrendEventArgs class.
		///</summary>
		public TrendEventArgs(TrendColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TrendColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TrendColumn" />
		public TrendColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Trend related events.
	///</summary>
	public delegate void TrendEventHandler(object sender, TrendEventArgs e);
	
	#region TrendComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TrendComparer : System.Collections.Generic.IComparer<Trend>
	{
		TrendColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TrendComparer"/> class.
        /// </summary>
		public TrendComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TrendComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TrendComparer(TrendColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Trend"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Trend"/> to compare.</param>
        /// <param name="b">The second <c>Trend</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Trend a, Trend b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Trend entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Trend a, Trend b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TrendColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TrendKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Trend"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TrendKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TrendKey class.
		/// </summary>
		public TrendKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TrendKey class.
		/// </summary>
		public TrendKey(TrendBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.WholesalerId = entity.WholesalerId;
				this.CustomerId = entity.CustomerId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TrendKey class.
		/// </summary>
		public TrendKey(System.String _wholesalerId, System.Int32 _customerId)
		{
			#region Init Properties

			this.WholesalerId = _wholesalerId;
			this.CustomerId = _customerId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TrendBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TrendBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the WholesalerId property
		private System.String _wholesalerId;
		
		/// <summary>
		/// Gets or sets the WholesalerId property.
		/// </summary>
		public System.String WholesalerId
		{
			get { return _wholesalerId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.WholesalerId = value;
				
				_wholesalerId = value;
			}
		}
		
		// member variable for the CustomerId property
		private System.Int32 _customerId;
		
		/// <summary>
		/// Gets or sets the CustomerId property.
		/// </summary>
		public System.Int32 CustomerId
		{
			get { return _customerId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.CustomerId = value;
				
				_customerId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				WholesalerId = ( values["WholesalerId"] != null ) ? (System.String) EntityUtil.ChangeType(values["WholesalerId"], typeof(System.String)) : string.Empty;
				CustomerId = ( values["CustomerId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["CustomerId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("WholesalerId", WholesalerId);
			values.Add("CustomerId", CustomerId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("WholesalerId: {0}{2}CustomerId: {1}{2}",
								WholesalerId,
								CustomerId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TrendColumn Enum
	
	/// <summary>
	/// Enumerate the Trend columns.
	/// </summary>
	[Serializable]
	public enum TrendColumn : int
	{
		/// <summary>
		/// CompanyId : 
		/// </summary>
		[EnumTextValue("CompanyID")]
		[ColumnEnum("CompanyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CompanyId = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		CustomerId = 3,
		/// <summary>
		/// SalesPersonId : 
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SalesPersonId = 4,
		/// <summary>
		/// RetailCurrency : 
		/// </summary>
		[EnumTextValue("RetailCurrency")]
		[ColumnEnum("RetailCurrency", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 3)]
		RetailCurrency = 5,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		CompanyName = 6,
		/// <summary>
		/// TotalRevenueMonth01 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth01")]
		[ColumnEnum("TotalRevenueMonth01", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth01 = 7,
		/// <summary>
		/// TotalRevenueMonth02 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth02")]
		[ColumnEnum("TotalRevenueMonth02", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth02 = 8,
		/// <summary>
		/// TotalRevenueMonth03 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth03")]
		[ColumnEnum("TotalRevenueMonth03", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth03 = 9,
		/// <summary>
		/// TotalRevenueMonth04 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth04")]
		[ColumnEnum("TotalRevenueMonth04", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth04 = 10,
		/// <summary>
		/// TotalRevenueMonth05 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth05")]
		[ColumnEnum("TotalRevenueMonth05", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth05 = 11,
		/// <summary>
		/// TotalRevenueMonth06 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth06")]
		[ColumnEnum("TotalRevenueMonth06", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth06 = 12,
		/// <summary>
		/// TotalRevenueMonth07 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth07")]
		[ColumnEnum("TotalRevenueMonth07", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth07 = 13,
		/// <summary>
		/// TotalRevenueMonth08 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth08")]
		[ColumnEnum("TotalRevenueMonth08", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth08 = 14,
		/// <summary>
		/// TotalRevenueMonth09 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth09")]
		[ColumnEnum("TotalRevenueMonth09", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth09 = 15,
		/// <summary>
		/// TotalRevenueMonth10 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth10")]
		[ColumnEnum("TotalRevenueMonth10", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth10 = 16,
		/// <summary>
		/// TotalRevenueMonth11 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth11")]
		[ColumnEnum("TotalRevenueMonth11", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth11 = 17,
		/// <summary>
		/// TotalRevenueMonth12 : 
		/// </summary>
		[EnumTextValue("TotalRevenueMonth12")]
		[ColumnEnum("TotalRevenueMonth12", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalRevenueMonth12 = 18,
		/// <summary>
		/// YearCategory : 
		/// </summary>
		[EnumTextValue("YearCategory")]
		[ColumnEnum("YearCategory", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		YearCategory = 19,
		/// <summary>
		/// StartDate : 
		/// </summary>
		[EnumTextValue("StartDate")]
		[ColumnEnum("StartDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		StartDate = 20,
		/// <summary>
		/// EndDate : 
		/// </summary>
		[EnumTextValue("EndDate")]
		[ColumnEnum("EndDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		EndDate = 21
	}//End enum

	#endregion TrendColumn Enum

} // end namespace
