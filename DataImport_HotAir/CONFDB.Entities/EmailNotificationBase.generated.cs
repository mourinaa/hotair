
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file EmailNotification.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'EmailNotification' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class EmailNotificationBase : EntityBase, CONFDB.Entities.IEmailNotification, IEntityId<EmailNotificationKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private EmailNotificationEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private EmailNotificationEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private EmailNotificationEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<EmailNotification> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event EmailNotificationEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event EmailNotificationEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="EmailNotificationBase"/> instance.
		///</summary>
		public EmailNotificationBase()
		{
			this.entityData = new EmailNotificationEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="EmailNotificationBase"/> instance.
		///</summary>
		///<param name="_templateName">Name of the email template to use for sending notifications</param>
		///<param name="_moderatorId"></param>
		///<param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
		///<param name="_emailSent"></param>
		///<param name="_sentDate"></param>
		///<param name="_createdDate"></param>
		///<param name="_errorInfo">Store error info if email couldn't be sent.</param>
		public EmailNotificationBase(System.String _templateName, System.Int32 _moderatorId, 
			System.String _email, System.Boolean _emailSent, System.DateTime? _sentDate, 
			System.DateTime _createdDate, System.String _errorInfo)
		{
			this.entityData = new EmailNotificationEntityData();
			this.backupData = null;

			this.TemplateName = _templateName;
			this.ModeratorId = _moderatorId;
			this.Email = _email;
			this.EmailSent = _emailSent;
			this.SentDate = _sentDate;
			this.CreatedDate = _createdDate;
			this.ErrorInfo = _errorInfo;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="EmailNotification"/> instance.
		///</summary>
		///<param name="_templateName">Name of the email template to use for sending notifications</param>
		///<param name="_moderatorId"></param>
		///<param name="_email">Email used for scenarios where you need to filter out emails you have already sent to.</param>
		///<param name="_emailSent"></param>
		///<param name="_sentDate"></param>
		///<param name="_createdDate"></param>
		///<param name="_errorInfo">Store error info if email couldn't be sent.</param>
		public static EmailNotification CreateEmailNotification(System.String _templateName, System.Int32 _moderatorId, 
			System.String _email, System.Boolean _emailSent, System.DateTime? _sentDate, 
			System.DateTime _createdDate, System.String _errorInfo)
		{
			EmailNotification newEmailNotification = new EmailNotification();
			newEmailNotification.TemplateName = _templateName;
			newEmailNotification.ModeratorId = _moderatorId;
			newEmailNotification.Email = _email;
			newEmailNotification.EmailSent = _emailSent;
			newEmailNotification.SentDate = _sentDate;
			newEmailNotification.CreatedDate = _createdDate;
			newEmailNotification.ErrorInfo = _errorInfo;
			return newEmailNotification;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(EmailNotificationColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailNotificationColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TemplateName property. 
		///		Name of the email template to use for sending notifications
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute("Name of the email template to use for sending notifications"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String TemplateName
		{
			get
			{
				return this.entityData.TemplateName; 
			}
			
			set
			{
				if (this.entityData.TemplateName == value)
					return;
					
				OnColumnChanging(EmailNotificationColumn.TemplateName, this.entityData.TemplateName);
				this.entityData.TemplateName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailNotificationColumn.TemplateName, this.entityData.TemplateName);
				OnPropertyChanged("TemplateName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(EmailNotificationColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailNotificationColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		Email used for scenarios where you need to filter out emails you have already sent to.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Email used for scenarios where you need to filter out emails you have already sent to."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(EmailNotificationColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailNotificationColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailSent property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean EmailSent
		{
			get
			{
				return this.entityData.EmailSent; 
			}
			
			set
			{
				if (this.entityData.EmailSent == value)
					return;
					
				OnColumnChanging(EmailNotificationColumn.EmailSent, this.entityData.EmailSent);
				this.entityData.EmailSent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailNotificationColumn.EmailSent, this.entityData.EmailSent);
				OnPropertyChanged("EmailSent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SentDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsSentDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? SentDate
		{
			get
			{
				return this.entityData.SentDate; 
			}
			
			set
			{
				if (this.entityData.SentDate == value)
					return;
					
				OnColumnChanging(EmailNotificationColumn.SentDate, this.entityData.SentDate);
				this.entityData.SentDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailNotificationColumn.SentDate, this.entityData.SentDate);
				OnPropertyChanged("SentDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(EmailNotificationColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailNotificationColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorInfo property. 
		///		Store error info if email couldn't be sent.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Store error info if email couldn't be sent."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ErrorInfo
		{
			get
			{
				return this.entityData.ErrorInfo; 
			}
			
			set
			{
				if (this.entityData.ErrorInfo == value)
					return;
					
				OnColumnChanging(EmailNotificationColumn.ErrorInfo, this.entityData.ErrorInfo);
				this.entityData.ErrorInfo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(EmailNotificationColumn.ErrorInfo, this.entityData.ErrorInfo);
				OnPropertyChanged("ErrorInfo");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("TemplateName", "Template Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TemplateName", "Template Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Email", "Email", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "EmailNotification"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "TemplateName", "ModeratorID", "Email", "EmailSent", "SentDate", "CreatedDate", "ErrorInfo"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as EmailNotificationEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (EmailNotification) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<EmailNotification>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as EmailNotification);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed EmailNotification Entity 
		///</summary>
		public virtual EmailNotification Copy()
		{
			//shallow copy entity
			EmailNotification copy = new EmailNotification();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.TemplateName = this.TemplateName;
			copy.ModeratorId = this.ModeratorId;
			copy.Email = this.Email;
			copy.EmailSent = this.EmailSent;
			copy.SentDate = this.SentDate;
			copy.CreatedDate = this.CreatedDate;
			copy.ErrorInfo = this.ErrorInfo;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed EmailNotification Entity which is a deep copy of the current entity.
		///</summary>
		public virtual EmailNotification DeepCopy()
		{
			return EntityHelper.Clone<EmailNotification>(this as EmailNotification);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as EmailNotificationEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as EmailNotificationEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(EmailNotificationColumn column)
		{
			switch(column)
			{
					case EmailNotificationColumn.Id:
					return entityData.Id != _originalData.Id;
					case EmailNotificationColumn.TemplateName:
					return entityData.TemplateName != _originalData.TemplateName;
					case EmailNotificationColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case EmailNotificationColumn.Email:
					return entityData.Email != _originalData.Email;
					case EmailNotificationColumn.EmailSent:
					return entityData.EmailSent != _originalData.EmailSent;
					case EmailNotificationColumn.SentDate:
					return entityData.SentDate != _originalData.SentDate;
					case EmailNotificationColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case EmailNotificationColumn.ErrorInfo:
					return entityData.ErrorInfo != _originalData.ErrorInfo;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.TemplateName != _originalData.TemplateName;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.EmailSent != _originalData.EmailSent;
			result = result || entityData.SentDate != _originalData.SentDate;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.ErrorInfo != _originalData.ErrorInfo;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="EmailNotificationBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is EmailNotificationBase)
				return Equals(this, (EmailNotificationBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="EmailNotificationBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.TemplateName.GetHashCode() ^ 
					this.ModeratorId.GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					this.EmailSent.GetHashCode() ^ 
					((this.SentDate == null) ? string.Empty : this.SentDate.ToString()).GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					((this.ErrorInfo == null) ? string.Empty : this.ErrorInfo.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="EmailNotificationBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(EmailNotificationBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="EmailNotificationBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="EmailNotificationBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="EmailNotificationBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(EmailNotificationBase Object1, EmailNotificationBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.TemplateName != Object2.TemplateName)
				equal = false;
			if (Object1.ModeratorId != Object2.ModeratorId)
				equal = false;
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if (Object1.EmailSent != Object2.EmailSent)
				equal = false;
			if ( Object1.SentDate != null && Object2.SentDate != null )
			{
				if (Object1.SentDate != Object2.SentDate)
					equal = false;
			}
			else if (Object1.SentDate == null ^ Object2.SentDate == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if ( Object1.ErrorInfo != null && Object2.ErrorInfo != null )
			{
				if (Object1.ErrorInfo != Object2.ErrorInfo)
					equal = false;
			}
			else if (Object1.ErrorInfo == null ^ Object2.ErrorInfo == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((EmailNotificationBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static EmailNotificationComparer GetComparer()
        {
            return new EmailNotificationComparer();
        }
        */

        // Comparer delegates back to EmailNotification
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(EmailNotification rhs, EmailNotificationColumn which)
        {
            switch (which)
            {
            	
            	
            	case EmailNotificationColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case EmailNotificationColumn.TemplateName:
            		return this.TemplateName.CompareTo(rhs.TemplateName);
            		
            		                 
            	
            	
            	case EmailNotificationColumn.ModeratorId:
            		return this.ModeratorId.CompareTo(rhs.ModeratorId);
            		
            		                 
            	
            	
            	case EmailNotificationColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case EmailNotificationColumn.EmailSent:
            		return this.EmailSent.CompareTo(rhs.EmailSent);
            		
            		                 
            	
            	
            	case EmailNotificationColumn.SentDate:
            		return this.SentDate.Value.CompareTo(rhs.SentDate.Value);
            		
            		                 
            	
            	
            	case EmailNotificationColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case EmailNotificationColumn.ErrorInfo:
            		return this.ErrorInfo.CompareTo(rhs.ErrorInfo);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<EmailNotificationKey> Members
		
		// member variable for the EntityId property
		private EmailNotificationKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual EmailNotificationKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new EmailNotificationKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("EmailNotification")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- Id: {0}{8}- TemplateName: {1}{8}- ModeratorId: {2}{8}- Email: {3}{8}- EmailSent: {4}{8}- SentDate: {5}{8}- CreatedDate: {6}{8}- ErrorInfo: {7}{8}", 
				this.Id,
				this.TemplateName,
				this.ModeratorId,
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				this.EmailSent,
				(this.SentDate == null) ? string.Empty : this.SentDate.ToString(),
				this.CreatedDate,
				(this.ErrorInfo == null) ? string.Empty : this.ErrorInfo.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'EmailNotification' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class EmailNotificationEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "EmailNotification"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// TemplateName : Name of the email template to use for sending notifications
		/// </summary>
		public System.String		  TemplateName = string.Empty;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32		  ModeratorId = (int)0;
		
		/// <summary>
		/// Email : Email used for scenarios where you need to filter out emails you have already sent to.
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// EmailSent : 
		/// </summary>
		public System.Boolean		  EmailSent = false;
		
		/// <summary>
		/// SentDate : 
		/// </summary>
		public System.DateTime?		  SentDate = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.Now;
		
		/// <summary>
		/// ErrorInfo : Store error info if email couldn't be sent.
		/// </summary>
		public System.String		  ErrorInfo = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			EmailNotificationEntityData _tmp = new EmailNotificationEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.TemplateName = this.TemplateName;
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.Email = this.Email;
			_tmp.EmailSent = this.EmailSent;
			_tmp.SentDate = this.SentDate;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ErrorInfo = this.ErrorInfo;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailNotificationColumn"/> which has raised the event.</param>
		public void OnColumnChanging(EmailNotificationColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailNotificationColumn"/> which has raised the event.</param>
		public void OnColumnChanged(EmailNotificationColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailNotificationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(EmailNotificationColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				EmailNotificationEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new EmailNotificationEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="EmailNotificationColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(EmailNotificationColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				EmailNotificationEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new EmailNotificationEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region EmailNotificationEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="EmailNotification"/> object.
	/// </remarks>
	public class EmailNotificationEventArgs : System.EventArgs
	{
		private EmailNotificationColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the EmailNotificationEventArgs class.
		///</summary>
		public EmailNotificationEventArgs(EmailNotificationColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the EmailNotificationEventArgs class.
		///</summary>
		public EmailNotificationEventArgs(EmailNotificationColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The EmailNotificationColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="EmailNotificationColumn" />
		public EmailNotificationColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all EmailNotification related events.
	///</summary>
	public delegate void EmailNotificationEventHandler(object sender, EmailNotificationEventArgs e);
	
	#region EmailNotificationComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class EmailNotificationComparer : System.Collections.Generic.IComparer<EmailNotification>
	{
		EmailNotificationColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:EmailNotificationComparer"/> class.
        /// </summary>
		public EmailNotificationComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:EmailNotificationComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public EmailNotificationComparer(EmailNotificationColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="EmailNotification"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="EmailNotification"/> to compare.</param>
        /// <param name="b">The second <c>EmailNotification</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(EmailNotification a, EmailNotification b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(EmailNotification entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(EmailNotification a, EmailNotification b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public EmailNotificationColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region EmailNotificationKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="EmailNotification"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class EmailNotificationKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the EmailNotificationKey class.
		/// </summary>
		public EmailNotificationKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the EmailNotificationKey class.
		/// </summary>
		public EmailNotificationKey(EmailNotificationBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the EmailNotificationKey class.
		/// </summary>
		public EmailNotificationKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private EmailNotificationBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public EmailNotificationBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region EmailNotificationColumn Enum
	
	/// <summary>
	/// Enumerate the EmailNotification columns.
	/// </summary>
	[Serializable]
	public enum EmailNotificationColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// TemplateName : Name of the email template to use for sending notifications
		/// </summary>
		[EnumTextValue("TemplateName")]
		[ColumnEnum("TemplateName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		TemplateName = 2,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ModeratorId = 3,
		/// <summary>
		/// Email : Email used for scenarios where you need to filter out emails you have already sent to.
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Email = 4,
		/// <summary>
		/// EmailSent : 
		/// </summary>
		[EnumTextValue("EmailSent")]
		[ColumnEnum("EmailSent", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		EmailSent = 5,
		/// <summary>
		/// SentDate : 
		/// </summary>
		[EnumTextValue("SentDate")]
		[ColumnEnum("SentDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		SentDate = 6,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 7,
		/// <summary>
		/// ErrorInfo : Store error info if email couldn't be sent.
		/// </summary>
		[EnumTextValue("ErrorInfo")]
		[ColumnEnum("ErrorInfo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		ErrorInfo = 8
	}//End enum

	#endregion EmailNotificationColumn Enum

} // end namespace
