
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file RatedCdr.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'RatedCDR' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class RatedCdrBase : EntityBase, CONFDB.Entities.IRatedCdr, IEntityId<RatedCdrKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private RatedCdrEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private RatedCdrEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private RatedCdrEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<RatedCdr> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event RatedCdrEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event RatedCdrEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="RatedCdrBase"/> instance.
		///</summary>
		public RatedCdrBase()
		{
			this.entityData = new RatedCdrEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="RatedCdrBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_conferenceId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_customerId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_moderatorName"></param>
		///<param name="_moderator"></param>
		///<param name="_externalCustomerNumber"></param>
		///<param name="_externalModeratorNumber"></param>
		///<param name="_referenceNumber"></param>
		///<param name="_conferenceStartTime"></param>
		///<param name="_conferenceEndTime"></param>
		///<param name="_conferenceElapsedTime"></param>
		///<param name="_startTime"></param>
		///<param name="_endTime"></param>
		///<param name="_elapsedTime"></param>
		///<param name="_bridgeId"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_dnis"></param>
		///<param name="_dialNumber">The number that the user would dial. This can differ from the DNIS greatly.</param>
		///<param name="_ani"></param>
		///<param name="_participantName"></param>
		///<param name="_destination"></param>
		///<param name="_accessTypeId"></param>
		///<param name="_connectProductRateId"></param>
		///<param name="_bridgeProductRateId"></param>
		///<param name="_ldProductRateId"></param>
		///<param name="_productRateTaxableValue"></param>
		///<param name="_customerTaxableValue"></param>
		///<param name="_wsTaxableValue"></param>
		///<param name="_retailConnectCharge"></param>
		///<param name="_retailBridgeRate"></param>
		///<param name="_retailLdRate"></param>
		///<param name="_retailCurrency"></param>
		///<param name="_retailBillingInterval"></param>
		///<param name="_retailTotalConnectCharge"></param>
		///<param name="_retailTotalBridge"></param>
		///<param name="_retailTotalLd"></param>
		///<param name="_retailTotal"></param>
		///<param name="_retailTotalCredit">This field is used to denote the amount of credit given for each CDR leg as some credits can be done on different services e.g. Audio, or Web on different dates. If this value is set then the RetailTotal will be zeroed out.</param>
		///<param name="_retailLocalTaxRate"></param>
		///<param name="_retailFederalTaxRate"></param>
		///<param name="_retailLocalTax"></param>
		///<param name="_retailFederalTax"></param>
		///<param name="_retailTotalTax"></param>
		///<param name="_wsConnectCharge"></param>
		///<param name="_wsBridgeRate"></param>
		///<param name="_wsldRate"></param>
		///<param name="_wsCurrency"></param>
		///<param name="_wsBillingInterval"></param>
		///<param name="_wsTotalConnectCharge"></param>
		///<param name="_wsTotalBridge"></param>
		///<param name="_wsTotalLd"></param>
		///<param name="_wsTotal"></param>
		///<param name="_wsLocalTaxRate"></param>
		///<param name="_wsFederalTaxRate"></param>
		///<param name="_wsLocalTax"></param>
		///<param name="_wsFederalTax"></param>
		///<param name="_wsTotalTax"></param>
		///<param name="_billingStatus"></param>
		///<param name="_billedDate"></param>
		///<param name="_processedDate"></param>
		///<param name="_seeVoghMeetingId"></param>
		public RatedCdrBase(System.Guid _id, System.String _conferenceId, System.Int32 _moderatorId, 
			System.Int32? _customerId, System.String _wholesalerId, System.String _moderatorCode, System.String _passCode, 
			System.String _moderatorName, System.Int32 _moderator, System.String _externalCustomerNumber, System.String _externalModeratorNumber, 
			System.String _referenceNumber, System.DateTime? _conferenceStartTime, System.DateTime? _conferenceEndTime, 
			System.Int32? _conferenceElapsedTime, System.DateTime _startTime, System.DateTime _endTime, System.Int32 _elapsedTime, 
			System.Int32 _bridgeId, System.String _uniqueConferenceId, System.String _auxiliaryConferenceId, 
			System.String _dnis, System.String _dialNumber, System.String _ani, System.String _participantName, 
			System.String _destination, System.Int32 _accessTypeId, System.Int32 _connectProductRateId, System.Int32 _bridgeProductRateId, 
			System.Int32 _ldProductRateId, System.Int32 _productRateTaxableValue, System.Int32 _customerTaxableValue, 
			System.Int32 _wsTaxableValue, System.Decimal? _retailConnectCharge, System.Decimal? _retailBridgeRate, 
			System.Decimal? _retailLdRate, System.String _retailCurrency, System.Int32 _retailBillingInterval, 
			System.Decimal? _retailTotalConnectCharge, System.Decimal? _retailTotalBridge, System.Decimal? _retailTotalLd, 
			System.Decimal? _retailTotal, System.Decimal? _retailTotalCredit, System.Decimal? _retailLocalTaxRate, 
			System.Decimal? _retailFederalTaxRate, System.Decimal? _retailLocalTax, System.Decimal? _retailFederalTax, 
			System.Decimal? _retailTotalTax, System.Decimal? _wsConnectCharge, System.Decimal? _wsBridgeRate, 
			System.Decimal? _wsldRate, System.String _wsCurrency, System.Int32 _wsBillingInterval, System.Decimal? _wsTotalConnectCharge, 
			System.Decimal? _wsTotalBridge, System.Decimal? _wsTotalLd, System.Decimal? _wsTotal, System.Decimal? _wsLocalTaxRate, 
			System.Decimal? _wsFederalTaxRate, System.Decimal? _wsLocalTax, System.Decimal? _wsFederalTax, System.Decimal? _wsTotalTax, 
			System.Int16? _billingStatus, System.DateTime? _billedDate, System.DateTime _processedDate, System.String _seeVoghMeetingId)
		{
			this.entityData = new RatedCdrEntityData();
			this.backupData = null;

			this.Id = _id;
			this.ConferenceId = _conferenceId;
			this.ModeratorId = _moderatorId;
			this.CustomerId = _customerId;
			this.WholesalerId = _wholesalerId;
			this.ModeratorCode = _moderatorCode;
			this.PassCode = _passCode;
			this.ModeratorName = _moderatorName;
			this.Moderator = _moderator;
			this.ExternalCustomerNumber = _externalCustomerNumber;
			this.ExternalModeratorNumber = _externalModeratorNumber;
			this.ReferenceNumber = _referenceNumber;
			this.ConferenceStartTime = _conferenceStartTime;
			this.ConferenceEndTime = _conferenceEndTime;
			this.ConferenceElapsedTime = _conferenceElapsedTime;
			this.StartTime = _startTime;
			this.EndTime = _endTime;
			this.ElapsedTime = _elapsedTime;
			this.BridgeId = _bridgeId;
			this.UniqueConferenceId = _uniqueConferenceId;
			this.AuxiliaryConferenceId = _auxiliaryConferenceId;
			this.Dnis = _dnis;
			this.DialNumber = _dialNumber;
			this.Ani = _ani;
			this.ParticipantName = _participantName;
			this.Destination = _destination;
			this.AccessTypeId = _accessTypeId;
			this.ConnectProductRateId = _connectProductRateId;
			this.BridgeProductRateId = _bridgeProductRateId;
			this.LdProductRateId = _ldProductRateId;
			this.ProductRateTaxableValue = _productRateTaxableValue;
			this.CustomerTaxableValue = _customerTaxableValue;
			this.WsTaxableValue = _wsTaxableValue;
			this.RetailConnectCharge = _retailConnectCharge;
			this.RetailBridgeRate = _retailBridgeRate;
			this.RetailLdRate = _retailLdRate;
			this.RetailCurrency = _retailCurrency;
			this.RetailBillingInterval = _retailBillingInterval;
			this.RetailTotalConnectCharge = _retailTotalConnectCharge;
			this.RetailTotalBridge = _retailTotalBridge;
			this.RetailTotalLd = _retailTotalLd;
			this.RetailTotal = _retailTotal;
			this.RetailTotalCredit = _retailTotalCredit;
			this.RetailLocalTaxRate = _retailLocalTaxRate;
			this.RetailFederalTaxRate = _retailFederalTaxRate;
			this.RetailLocalTax = _retailLocalTax;
			this.RetailFederalTax = _retailFederalTax;
			this.RetailTotalTax = _retailTotalTax;
			this.WsConnectCharge = _wsConnectCharge;
			this.WsBridgeRate = _wsBridgeRate;
			this.WsldRate = _wsldRate;
			this.WsCurrency = _wsCurrency;
			this.WsBillingInterval = _wsBillingInterval;
			this.WsTotalConnectCharge = _wsTotalConnectCharge;
			this.WsTotalBridge = _wsTotalBridge;
			this.WsTotalLd = _wsTotalLd;
			this.WsTotal = _wsTotal;
			this.WsLocalTaxRate = _wsLocalTaxRate;
			this.WsFederalTaxRate = _wsFederalTaxRate;
			this.WsLocalTax = _wsLocalTax;
			this.WsFederalTax = _wsFederalTax;
			this.WsTotalTax = _wsTotalTax;
			this.BillingStatus = _billingStatus;
			this.BilledDate = _billedDate;
			this.ProcessedDate = _processedDate;
			this.SeeVoghMeetingId = _seeVoghMeetingId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="RatedCdr"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_conferenceId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_customerId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_moderatorName"></param>
		///<param name="_moderator"></param>
		///<param name="_externalCustomerNumber"></param>
		///<param name="_externalModeratorNumber"></param>
		///<param name="_referenceNumber"></param>
		///<param name="_conferenceStartTime"></param>
		///<param name="_conferenceEndTime"></param>
		///<param name="_conferenceElapsedTime"></param>
		///<param name="_startTime"></param>
		///<param name="_endTime"></param>
		///<param name="_elapsedTime"></param>
		///<param name="_bridgeId"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_dnis"></param>
		///<param name="_dialNumber">The number that the user would dial. This can differ from the DNIS greatly.</param>
		///<param name="_ani"></param>
		///<param name="_participantName"></param>
		///<param name="_destination"></param>
		///<param name="_accessTypeId"></param>
		///<param name="_connectProductRateId"></param>
		///<param name="_bridgeProductRateId"></param>
		///<param name="_ldProductRateId"></param>
		///<param name="_productRateTaxableValue"></param>
		///<param name="_customerTaxableValue"></param>
		///<param name="_wsTaxableValue"></param>
		///<param name="_retailConnectCharge"></param>
		///<param name="_retailBridgeRate"></param>
		///<param name="_retailLdRate"></param>
		///<param name="_retailCurrency"></param>
		///<param name="_retailBillingInterval"></param>
		///<param name="_retailTotalConnectCharge"></param>
		///<param name="_retailTotalBridge"></param>
		///<param name="_retailTotalLd"></param>
		///<param name="_retailTotal"></param>
		///<param name="_retailTotalCredit">This field is used to denote the amount of credit given for each CDR leg as some credits can be done on different services e.g. Audio, or Web on different dates. If this value is set then the RetailTotal will be zeroed out.</param>
		///<param name="_retailLocalTaxRate"></param>
		///<param name="_retailFederalTaxRate"></param>
		///<param name="_retailLocalTax"></param>
		///<param name="_retailFederalTax"></param>
		///<param name="_retailTotalTax"></param>
		///<param name="_wsConnectCharge"></param>
		///<param name="_wsBridgeRate"></param>
		///<param name="_wsldRate"></param>
		///<param name="_wsCurrency"></param>
		///<param name="_wsBillingInterval"></param>
		///<param name="_wsTotalConnectCharge"></param>
		///<param name="_wsTotalBridge"></param>
		///<param name="_wsTotalLd"></param>
		///<param name="_wsTotal"></param>
		///<param name="_wsLocalTaxRate"></param>
		///<param name="_wsFederalTaxRate"></param>
		///<param name="_wsLocalTax"></param>
		///<param name="_wsFederalTax"></param>
		///<param name="_wsTotalTax"></param>
		///<param name="_billingStatus"></param>
		///<param name="_billedDate"></param>
		///<param name="_processedDate"></param>
		///<param name="_seeVoghMeetingId"></param>
		public static RatedCdr CreateRatedCdr(System.Guid _id, System.String _conferenceId, System.Int32 _moderatorId, 
			System.Int32? _customerId, System.String _wholesalerId, System.String _moderatorCode, System.String _passCode, 
			System.String _moderatorName, System.Int32 _moderator, System.String _externalCustomerNumber, System.String _externalModeratorNumber, 
			System.String _referenceNumber, System.DateTime? _conferenceStartTime, System.DateTime? _conferenceEndTime, 
			System.Int32? _conferenceElapsedTime, System.DateTime _startTime, System.DateTime _endTime, System.Int32 _elapsedTime, 
			System.Int32 _bridgeId, System.String _uniqueConferenceId, System.String _auxiliaryConferenceId, 
			System.String _dnis, System.String _dialNumber, System.String _ani, System.String _participantName, 
			System.String _destination, System.Int32 _accessTypeId, System.Int32 _connectProductRateId, System.Int32 _bridgeProductRateId, 
			System.Int32 _ldProductRateId, System.Int32 _productRateTaxableValue, System.Int32 _customerTaxableValue, 
			System.Int32 _wsTaxableValue, System.Decimal? _retailConnectCharge, System.Decimal? _retailBridgeRate, 
			System.Decimal? _retailLdRate, System.String _retailCurrency, System.Int32 _retailBillingInterval, 
			System.Decimal? _retailTotalConnectCharge, System.Decimal? _retailTotalBridge, System.Decimal? _retailTotalLd, 
			System.Decimal? _retailTotal, System.Decimal? _retailTotalCredit, System.Decimal? _retailLocalTaxRate, 
			System.Decimal? _retailFederalTaxRate, System.Decimal? _retailLocalTax, System.Decimal? _retailFederalTax, 
			System.Decimal? _retailTotalTax, System.Decimal? _wsConnectCharge, System.Decimal? _wsBridgeRate, 
			System.Decimal? _wsldRate, System.String _wsCurrency, System.Int32 _wsBillingInterval, System.Decimal? _wsTotalConnectCharge, 
			System.Decimal? _wsTotalBridge, System.Decimal? _wsTotalLd, System.Decimal? _wsTotal, System.Decimal? _wsLocalTaxRate, 
			System.Decimal? _wsFederalTaxRate, System.Decimal? _wsLocalTax, System.Decimal? _wsFederalTax, System.Decimal? _wsTotalTax, 
			System.Int16? _billingStatus, System.DateTime? _billedDate, System.DateTime _processedDate, System.String _seeVoghMeetingId)
		{
			RatedCdr newRatedCdr = new RatedCdr();
			newRatedCdr.Id = _id;
			newRatedCdr.ConferenceId = _conferenceId;
			newRatedCdr.ModeratorId = _moderatorId;
			newRatedCdr.CustomerId = _customerId;
			newRatedCdr.WholesalerId = _wholesalerId;
			newRatedCdr.ModeratorCode = _moderatorCode;
			newRatedCdr.PassCode = _passCode;
			newRatedCdr.ModeratorName = _moderatorName;
			newRatedCdr.Moderator = _moderator;
			newRatedCdr.ExternalCustomerNumber = _externalCustomerNumber;
			newRatedCdr.ExternalModeratorNumber = _externalModeratorNumber;
			newRatedCdr.ReferenceNumber = _referenceNumber;
			newRatedCdr.ConferenceStartTime = _conferenceStartTime;
			newRatedCdr.ConferenceEndTime = _conferenceEndTime;
			newRatedCdr.ConferenceElapsedTime = _conferenceElapsedTime;
			newRatedCdr.StartTime = _startTime;
			newRatedCdr.EndTime = _endTime;
			newRatedCdr.ElapsedTime = _elapsedTime;
			newRatedCdr.BridgeId = _bridgeId;
			newRatedCdr.UniqueConferenceId = _uniqueConferenceId;
			newRatedCdr.AuxiliaryConferenceId = _auxiliaryConferenceId;
			newRatedCdr.Dnis = _dnis;
			newRatedCdr.DialNumber = _dialNumber;
			newRatedCdr.Ani = _ani;
			newRatedCdr.ParticipantName = _participantName;
			newRatedCdr.Destination = _destination;
			newRatedCdr.AccessTypeId = _accessTypeId;
			newRatedCdr.ConnectProductRateId = _connectProductRateId;
			newRatedCdr.BridgeProductRateId = _bridgeProductRateId;
			newRatedCdr.LdProductRateId = _ldProductRateId;
			newRatedCdr.ProductRateTaxableValue = _productRateTaxableValue;
			newRatedCdr.CustomerTaxableValue = _customerTaxableValue;
			newRatedCdr.WsTaxableValue = _wsTaxableValue;
			newRatedCdr.RetailConnectCharge = _retailConnectCharge;
			newRatedCdr.RetailBridgeRate = _retailBridgeRate;
			newRatedCdr.RetailLdRate = _retailLdRate;
			newRatedCdr.RetailCurrency = _retailCurrency;
			newRatedCdr.RetailBillingInterval = _retailBillingInterval;
			newRatedCdr.RetailTotalConnectCharge = _retailTotalConnectCharge;
			newRatedCdr.RetailTotalBridge = _retailTotalBridge;
			newRatedCdr.RetailTotalLd = _retailTotalLd;
			newRatedCdr.RetailTotal = _retailTotal;
			newRatedCdr.RetailTotalCredit = _retailTotalCredit;
			newRatedCdr.RetailLocalTaxRate = _retailLocalTaxRate;
			newRatedCdr.RetailFederalTaxRate = _retailFederalTaxRate;
			newRatedCdr.RetailLocalTax = _retailLocalTax;
			newRatedCdr.RetailFederalTax = _retailFederalTax;
			newRatedCdr.RetailTotalTax = _retailTotalTax;
			newRatedCdr.WsConnectCharge = _wsConnectCharge;
			newRatedCdr.WsBridgeRate = _wsBridgeRate;
			newRatedCdr.WsldRate = _wsldRate;
			newRatedCdr.WsCurrency = _wsCurrency;
			newRatedCdr.WsBillingInterval = _wsBillingInterval;
			newRatedCdr.WsTotalConnectCharge = _wsTotalConnectCharge;
			newRatedCdr.WsTotalBridge = _wsTotalBridge;
			newRatedCdr.WsTotalLd = _wsTotalLd;
			newRatedCdr.WsTotal = _wsTotal;
			newRatedCdr.WsLocalTaxRate = _wsLocalTaxRate;
			newRatedCdr.WsFederalTaxRate = _wsFederalTaxRate;
			newRatedCdr.WsLocalTax = _wsLocalTax;
			newRatedCdr.WsFederalTax = _wsFederalTax;
			newRatedCdr.WsTotalTax = _wsTotalTax;
			newRatedCdr.BillingStatus = _billingStatus;
			newRatedCdr.BilledDate = _billedDate;
			newRatedCdr.ProcessedDate = _processedDate;
			newRatedCdr.SeeVoghMeetingId = _seeVoghMeetingId;
			return newRatedCdr;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Guid Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID property.</remarks>
		/// <value>This type is uniqueidentifier</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Guid OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String ConferenceId
		{
			get
			{
				return this.entityData.ConferenceId; 
			}
			
			set
			{
				if (this.entityData.ConferenceId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ConferenceId, this.entityData.ConferenceId);
				this.entityData.ConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ConferenceId, this.entityData.ConferenceId);
				OnPropertyChanged("ConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCustomerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String ModeratorCode
		{
			get
			{
				return this.entityData.ModeratorCode; 
			}
			
			set
			{
				if (this.entityData.ModeratorCode == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ModeratorCode, this.entityData.ModeratorCode);
				this.entityData.ModeratorCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ModeratorCode, this.entityData.ModeratorCode);
				OnPropertyChanged("ModeratorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String PassCode
		{
			get
			{
				return this.entityData.PassCode; 
			}
			
			set
			{
				if (this.entityData.PassCode == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.PassCode, this.entityData.PassCode);
				this.entityData.PassCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.PassCode, this.entityData.PassCode);
				OnPropertyChanged("PassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ModeratorName
		{
			get
			{
				return this.entityData.ModeratorName; 
			}
			
			set
			{
				if (this.entityData.ModeratorName == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ModeratorName, this.entityData.ModeratorName);
				this.entityData.ModeratorName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ModeratorName, this.entityData.ModeratorName);
				OnPropertyChanged("ModeratorName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Moderator property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Moderator
		{
			get
			{
				return this.entityData.Moderator; 
			}
			
			set
			{
				if (this.entityData.Moderator == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.Moderator, this.entityData.Moderator);
				this.entityData.Moderator = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.Moderator, this.entityData.Moderator);
				OnPropertyChanged("Moderator");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ExternalCustomerNumber
		{
			get
			{
				return this.entityData.ExternalCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.ExternalCustomerNumber == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ExternalCustomerNumber, this.entityData.ExternalCustomerNumber);
				this.entityData.ExternalCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ExternalCustomerNumber, this.entityData.ExternalCustomerNumber);
				OnPropertyChanged("ExternalCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalModeratorNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ExternalModeratorNumber
		{
			get
			{
				return this.entityData.ExternalModeratorNumber; 
			}
			
			set
			{
				if (this.entityData.ExternalModeratorNumber == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ExternalModeratorNumber, this.entityData.ExternalModeratorNumber);
				this.entityData.ExternalModeratorNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ExternalModeratorNumber, this.entityData.ExternalModeratorNumber);
				OnPropertyChanged("ExternalModeratorNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReferenceNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ReferenceNumber
		{
			get
			{
				return this.entityData.ReferenceNumber; 
			}
			
			set
			{
				if (this.entityData.ReferenceNumber == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ReferenceNumber, this.entityData.ReferenceNumber);
				this.entityData.ReferenceNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ReferenceNumber, this.entityData.ReferenceNumber);
				OnPropertyChanged("ReferenceNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConferenceStartTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsConferenceStartTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ConferenceStartTime
		{
			get
			{
				return this.entityData.ConferenceStartTime; 
			}
			
			set
			{
				if (this.entityData.ConferenceStartTime == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ConferenceStartTime, this.entityData.ConferenceStartTime);
				this.entityData.ConferenceStartTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ConferenceStartTime, this.entityData.ConferenceStartTime);
				OnPropertyChanged("ConferenceStartTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConferenceEndTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsConferenceEndTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ConferenceEndTime
		{
			get
			{
				return this.entityData.ConferenceEndTime; 
			}
			
			set
			{
				if (this.entityData.ConferenceEndTime == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ConferenceEndTime, this.entityData.ConferenceEndTime);
				this.entityData.ConferenceEndTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ConferenceEndTime, this.entityData.ConferenceEndTime);
				OnPropertyChanged("ConferenceEndTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConferenceElapsedTime property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsConferenceElapsedTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ConferenceElapsedTime
		{
			get
			{
				return this.entityData.ConferenceElapsedTime; 
			}
			
			set
			{
				if (this.entityData.ConferenceElapsedTime == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ConferenceElapsedTime, this.entityData.ConferenceElapsedTime);
				this.entityData.ConferenceElapsedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ConferenceElapsedTime, this.entityData.ConferenceElapsedTime);
				OnPropertyChanged("ConferenceElapsedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StartTime
		{
			get
			{
				return this.entityData.StartTime; 
			}
			
			set
			{
				if (this.entityData.StartTime == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.StartTime, this.entityData.StartTime);
				this.entityData.StartTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.StartTime, this.entityData.StartTime);
				OnPropertyChanged("StartTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EndTime
		{
			get
			{
				return this.entityData.EndTime; 
			}
			
			set
			{
				if (this.entityData.EndTime == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.EndTime, this.entityData.EndTime);
				this.entityData.EndTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.EndTime, this.entityData.EndTime);
				OnPropertyChanged("EndTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ElapsedTime property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ElapsedTime
		{
			get
			{
				return this.entityData.ElapsedTime; 
			}
			
			set
			{
				if (this.entityData.ElapsedTime == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ElapsedTime, this.entityData.ElapsedTime);
				this.entityData.ElapsedTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ElapsedTime, this.entityData.ElapsedTime);
				OnPropertyChanged("ElapsedTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BridgeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 BridgeId
		{
			get
			{
				return this.entityData.BridgeId; 
			}
			
			set
			{
				if (this.entityData.BridgeId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.BridgeId, this.entityData.BridgeId);
				this.entityData.BridgeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.BridgeId, this.entityData.BridgeId);
				OnPropertyChanged("BridgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String UniqueConferenceId
		{
			get
			{
				return this.entityData.UniqueConferenceId; 
			}
			
			set
			{
				if (this.entityData.UniqueConferenceId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				this.entityData.UniqueConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				OnPropertyChanged("UniqueConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuxiliaryConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String AuxiliaryConferenceId
		{
			get
			{
				return this.entityData.AuxiliaryConferenceId; 
			}
			
			set
			{
				if (this.entityData.AuxiliaryConferenceId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.AuxiliaryConferenceId, this.entityData.AuxiliaryConferenceId);
				this.entityData.AuxiliaryConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.AuxiliaryConferenceId, this.entityData.AuxiliaryConferenceId);
				OnPropertyChanged("AuxiliaryConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Dnis property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Dnis
		{
			get
			{
				return this.entityData.Dnis; 
			}
			
			set
			{
				if (this.entityData.Dnis == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.Dnis, this.entityData.Dnis);
				this.entityData.Dnis = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.Dnis, this.entityData.Dnis);
				OnPropertyChanged("Dnis");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DialNumber property. 
		///		The number that the user would dial. This can differ from the DNIS greatly.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("The number that the user would dial. This can differ from the DNIS greatly."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DialNumber
		{
			get
			{
				return this.entityData.DialNumber; 
			}
			
			set
			{
				if (this.entityData.DialNumber == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.DialNumber, this.entityData.DialNumber);
				this.entityData.DialNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.DialNumber, this.entityData.DialNumber);
				OnPropertyChanged("DialNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Ani property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Ani
		{
			get
			{
				return this.entityData.Ani; 
			}
			
			set
			{
				if (this.entityData.Ani == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.Ani, this.entityData.Ani);
				this.entityData.Ani = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.Ani, this.entityData.Ani);
				OnPropertyChanged("Ani");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ParticipantName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ParticipantName
		{
			get
			{
				return this.entityData.ParticipantName; 
			}
			
			set
			{
				if (this.entityData.ParticipantName == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ParticipantName, this.entityData.ParticipantName);
				this.entityData.ParticipantName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ParticipantName, this.entityData.ParticipantName);
				OnPropertyChanged("ParticipantName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Destination property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Destination
		{
			get
			{
				return this.entityData.Destination; 
			}
			
			set
			{
				if (this.entityData.Destination == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.Destination, this.entityData.Destination);
				this.entityData.Destination = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.Destination, this.entityData.Destination);
				OnPropertyChanged("Destination");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccessTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AccessTypeId
		{
			get
			{
				return this.entityData.AccessTypeId; 
			}
			
			set
			{
				if (this.entityData.AccessTypeId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.AccessTypeId, this.entityData.AccessTypeId);
				this.entityData.AccessTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.AccessTypeId, this.entityData.AccessTypeId);
				OnPropertyChanged("AccessTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ConnectProductRateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ConnectProductRateId
		{
			get
			{
				return this.entityData.ConnectProductRateId; 
			}
			
			set
			{
				if (this.entityData.ConnectProductRateId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ConnectProductRateId, this.entityData.ConnectProductRateId);
				this.entityData.ConnectProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ConnectProductRateId, this.entityData.ConnectProductRateId);
				OnPropertyChanged("ConnectProductRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BridgeProductRateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 BridgeProductRateId
		{
			get
			{
				return this.entityData.BridgeProductRateId; 
			}
			
			set
			{
				if (this.entityData.BridgeProductRateId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.BridgeProductRateId, this.entityData.BridgeProductRateId);
				this.entityData.BridgeProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.BridgeProductRateId, this.entityData.BridgeProductRateId);
				OnPropertyChanged("BridgeProductRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LdProductRateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LdProductRateId
		{
			get
			{
				return this.entityData.LdProductRateId; 
			}
			
			set
			{
				if (this.entityData.LdProductRateId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.LdProductRateId, this.entityData.LdProductRateId);
				this.entityData.LdProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.LdProductRateId, this.entityData.LdProductRateId);
				OnPropertyChanged("LdProductRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductRateTaxableValue property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProductRateTaxableValue
		{
			get
			{
				return this.entityData.ProductRateTaxableValue; 
			}
			
			set
			{
				if (this.entityData.ProductRateTaxableValue == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ProductRateTaxableValue, this.entityData.ProductRateTaxableValue);
				this.entityData.ProductRateTaxableValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ProductRateTaxableValue, this.entityData.ProductRateTaxableValue);
				OnPropertyChanged("ProductRateTaxableValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerTaxableValue property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerTaxableValue
		{
			get
			{
				return this.entityData.CustomerTaxableValue; 
			}
			
			set
			{
				if (this.entityData.CustomerTaxableValue == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.CustomerTaxableValue, this.entityData.CustomerTaxableValue);
				this.entityData.CustomerTaxableValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.CustomerTaxableValue, this.entityData.CustomerTaxableValue);
				OnPropertyChanged("CustomerTaxableValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTaxableValue property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 WsTaxableValue
		{
			get
			{
				return this.entityData.WsTaxableValue; 
			}
			
			set
			{
				if (this.entityData.WsTaxableValue == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsTaxableValue, this.entityData.WsTaxableValue);
				this.entityData.WsTaxableValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsTaxableValue, this.entityData.WsTaxableValue);
				OnPropertyChanged("WsTaxableValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailConnectCharge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailConnectChargeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailConnectCharge
		{
			get
			{
				return this.entityData.RetailConnectCharge; 
			}
			
			set
			{
				if (this.entityData.RetailConnectCharge == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailConnectCharge, this.entityData.RetailConnectCharge);
				this.entityData.RetailConnectCharge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailConnectCharge, this.entityData.RetailConnectCharge);
				OnPropertyChanged("RetailConnectCharge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailBridgeRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailBridgeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailBridgeRate
		{
			get
			{
				return this.entityData.RetailBridgeRate; 
			}
			
			set
			{
				if (this.entityData.RetailBridgeRate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailBridgeRate, this.entityData.RetailBridgeRate);
				this.entityData.RetailBridgeRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailBridgeRate, this.entityData.RetailBridgeRate);
				OnPropertyChanged("RetailBridgeRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailLdRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailLdRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailLdRate
		{
			get
			{
				return this.entityData.RetailLdRate; 
			}
			
			set
			{
				if (this.entityData.RetailLdRate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailLdRate, this.entityData.RetailLdRate);
				this.entityData.RetailLdRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailLdRate, this.entityData.RetailLdRate);
				OnPropertyChanged("RetailLdRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailCurrency property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String RetailCurrency
		{
			get
			{
				return this.entityData.RetailCurrency; 
			}
			
			set
			{
				if (this.entityData.RetailCurrency == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailCurrency, this.entityData.RetailCurrency);
				this.entityData.RetailCurrency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailCurrency, this.entityData.RetailCurrency);
				OnPropertyChanged("RetailCurrency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailBillingInterval property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 RetailBillingInterval
		{
			get
			{
				return this.entityData.RetailBillingInterval; 
			}
			
			set
			{
				if (this.entityData.RetailBillingInterval == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailBillingInterval, this.entityData.RetailBillingInterval);
				this.entityData.RetailBillingInterval = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailBillingInterval, this.entityData.RetailBillingInterval);
				OnPropertyChanged("RetailBillingInterval");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalConnectCharge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalConnectChargeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalConnectCharge
		{
			get
			{
				return this.entityData.RetailTotalConnectCharge; 
			}
			
			set
			{
				if (this.entityData.RetailTotalConnectCharge == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailTotalConnectCharge, this.entityData.RetailTotalConnectCharge);
				this.entityData.RetailTotalConnectCharge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailTotalConnectCharge, this.entityData.RetailTotalConnectCharge);
				OnPropertyChanged("RetailTotalConnectCharge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalBridge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalBridgeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalBridge
		{
			get
			{
				return this.entityData.RetailTotalBridge; 
			}
			
			set
			{
				if (this.entityData.RetailTotalBridge == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailTotalBridge, this.entityData.RetailTotalBridge);
				this.entityData.RetailTotalBridge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailTotalBridge, this.entityData.RetailTotalBridge);
				OnPropertyChanged("RetailTotalBridge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalLd property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalLdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalLd
		{
			get
			{
				return this.entityData.RetailTotalLd; 
			}
			
			set
			{
				if (this.entityData.RetailTotalLd == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailTotalLd, this.entityData.RetailTotalLd);
				this.entityData.RetailTotalLd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailTotalLd, this.entityData.RetailTotalLd);
				OnPropertyChanged("RetailTotalLd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotal property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotal
		{
			get
			{
				return this.entityData.RetailTotal; 
			}
			
			set
			{
				if (this.entityData.RetailTotal == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailTotal, this.entityData.RetailTotal);
				this.entityData.RetailTotal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailTotal, this.entityData.RetailTotal);
				OnPropertyChanged("RetailTotal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalCredit property. 
		///		This field is used to denote the amount of credit given for each CDR leg as some credits can be done on different services e.g. Audio, or Web on different dates. If this value is set then the RetailTotal will be zeroed out.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalCreditNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("This field is used to denote the amount of credit given for each CDR leg as some credits can be done on different services e.g. Audio, or Web on different dates. If this value is set then the RetailTotal will be zeroed out."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalCredit
		{
			get
			{
				return this.entityData.RetailTotalCredit; 
			}
			
			set
			{
				if (this.entityData.RetailTotalCredit == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailTotalCredit, this.entityData.RetailTotalCredit);
				this.entityData.RetailTotalCredit = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailTotalCredit, this.entityData.RetailTotalCredit);
				OnPropertyChanged("RetailTotalCredit");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailLocalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailLocalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailLocalTaxRate
		{
			get
			{
				return this.entityData.RetailLocalTaxRate; 
			}
			
			set
			{
				if (this.entityData.RetailLocalTaxRate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailLocalTaxRate, this.entityData.RetailLocalTaxRate);
				this.entityData.RetailLocalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailLocalTaxRate, this.entityData.RetailLocalTaxRate);
				OnPropertyChanged("RetailLocalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailFederalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailFederalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailFederalTaxRate
		{
			get
			{
				return this.entityData.RetailFederalTaxRate; 
			}
			
			set
			{
				if (this.entityData.RetailFederalTaxRate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailFederalTaxRate, this.entityData.RetailFederalTaxRate);
				this.entityData.RetailFederalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailFederalTaxRate, this.entityData.RetailFederalTaxRate);
				OnPropertyChanged("RetailFederalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailLocalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailLocalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailLocalTax
		{
			get
			{
				return this.entityData.RetailLocalTax; 
			}
			
			set
			{
				if (this.entityData.RetailLocalTax == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailLocalTax, this.entityData.RetailLocalTax);
				this.entityData.RetailLocalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailLocalTax, this.entityData.RetailLocalTax);
				OnPropertyChanged("RetailLocalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailFederalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailFederalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailFederalTax
		{
			get
			{
				return this.entityData.RetailFederalTax; 
			}
			
			set
			{
				if (this.entityData.RetailFederalTax == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailFederalTax, this.entityData.RetailFederalTax);
				this.entityData.RetailFederalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailFederalTax, this.entityData.RetailFederalTax);
				OnPropertyChanged("RetailFederalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailTotalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsRetailTotalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? RetailTotalTax
		{
			get
			{
				return this.entityData.RetailTotalTax; 
			}
			
			set
			{
				if (this.entityData.RetailTotalTax == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.RetailTotalTax, this.entityData.RetailTotalTax);
				this.entityData.RetailTotalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.RetailTotalTax, this.entityData.RetailTotalTax);
				OnPropertyChanged("RetailTotalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsConnectCharge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsConnectChargeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsConnectCharge
		{
			get
			{
				return this.entityData.WsConnectCharge; 
			}
			
			set
			{
				if (this.entityData.WsConnectCharge == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsConnectCharge, this.entityData.WsConnectCharge);
				this.entityData.WsConnectCharge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsConnectCharge, this.entityData.WsConnectCharge);
				OnPropertyChanged("WsConnectCharge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsBridgeRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsBridgeRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsBridgeRate
		{
			get
			{
				return this.entityData.WsBridgeRate; 
			}
			
			set
			{
				if (this.entityData.WsBridgeRate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsBridgeRate, this.entityData.WsBridgeRate);
				this.entityData.WsBridgeRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsBridgeRate, this.entityData.WsBridgeRate);
				OnPropertyChanged("WsBridgeRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsldRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsldRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsldRate
		{
			get
			{
				return this.entityData.WsldRate; 
			}
			
			set
			{
				if (this.entityData.WsldRate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsldRate, this.entityData.WsldRate);
				this.entityData.WsldRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsldRate, this.entityData.WsldRate);
				OnPropertyChanged("WsldRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsCurrency property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String WsCurrency
		{
			get
			{
				return this.entityData.WsCurrency; 
			}
			
			set
			{
				if (this.entityData.WsCurrency == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsCurrency, this.entityData.WsCurrency);
				this.entityData.WsCurrency = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsCurrency, this.entityData.WsCurrency);
				OnPropertyChanged("WsCurrency");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsBillingInterval property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 WsBillingInterval
		{
			get
			{
				return this.entityData.WsBillingInterval; 
			}
			
			set
			{
				if (this.entityData.WsBillingInterval == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsBillingInterval, this.entityData.WsBillingInterval);
				this.entityData.WsBillingInterval = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsBillingInterval, this.entityData.WsBillingInterval);
				OnPropertyChanged("WsBillingInterval");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotalConnectCharge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalConnectChargeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotalConnectCharge
		{
			get
			{
				return this.entityData.WsTotalConnectCharge; 
			}
			
			set
			{
				if (this.entityData.WsTotalConnectCharge == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsTotalConnectCharge, this.entityData.WsTotalConnectCharge);
				this.entityData.WsTotalConnectCharge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsTotalConnectCharge, this.entityData.WsTotalConnectCharge);
				OnPropertyChanged("WsTotalConnectCharge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotalBridge property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalBridgeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotalBridge
		{
			get
			{
				return this.entityData.WsTotalBridge; 
			}
			
			set
			{
				if (this.entityData.WsTotalBridge == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsTotalBridge, this.entityData.WsTotalBridge);
				this.entityData.WsTotalBridge = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsTotalBridge, this.entityData.WsTotalBridge);
				OnPropertyChanged("WsTotalBridge");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotalLd property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalLdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotalLd
		{
			get
			{
				return this.entityData.WsTotalLd; 
			}
			
			set
			{
				if (this.entityData.WsTotalLd == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsTotalLd, this.entityData.WsTotalLd);
				this.entityData.WsTotalLd = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsTotalLd, this.entityData.WsTotalLd);
				OnPropertyChanged("WsTotalLd");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotal property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotal
		{
			get
			{
				return this.entityData.WsTotal; 
			}
			
			set
			{
				if (this.entityData.WsTotal == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsTotal, this.entityData.WsTotal);
				this.entityData.WsTotal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsTotal, this.entityData.WsTotal);
				OnPropertyChanged("WsTotal");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsLocalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsLocalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsLocalTaxRate
		{
			get
			{
				return this.entityData.WsLocalTaxRate; 
			}
			
			set
			{
				if (this.entityData.WsLocalTaxRate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsLocalTaxRate, this.entityData.WsLocalTaxRate);
				this.entityData.WsLocalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsLocalTaxRate, this.entityData.WsLocalTaxRate);
				OnPropertyChanged("WsLocalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsFederalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsFederalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsFederalTaxRate
		{
			get
			{
				return this.entityData.WsFederalTaxRate; 
			}
			
			set
			{
				if (this.entityData.WsFederalTaxRate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsFederalTaxRate, this.entityData.WsFederalTaxRate);
				this.entityData.WsFederalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsFederalTaxRate, this.entityData.WsFederalTaxRate);
				OnPropertyChanged("WsFederalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsLocalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsLocalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsLocalTax
		{
			get
			{
				return this.entityData.WsLocalTax; 
			}
			
			set
			{
				if (this.entityData.WsLocalTax == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsLocalTax, this.entityData.WsLocalTax);
				this.entityData.WsLocalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsLocalTax, this.entityData.WsLocalTax);
				OnPropertyChanged("WsLocalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsFederalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsFederalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsFederalTax
		{
			get
			{
				return this.entityData.WsFederalTax; 
			}
			
			set
			{
				if (this.entityData.WsFederalTax == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsFederalTax, this.entityData.WsFederalTax);
				this.entityData.WsFederalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsFederalTax, this.entityData.WsFederalTax);
				OnPropertyChanged("WsFederalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTotalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTotalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTotalTax
		{
			get
			{
				return this.entityData.WsTotalTax; 
			}
			
			set
			{
				if (this.entityData.WsTotalTax == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.WsTotalTax, this.entityData.WsTotalTax);
				this.entityData.WsTotalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.WsTotalTax, this.entityData.WsTotalTax);
				OnPropertyChanged("WsTotalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingStatus property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsBillingStatusNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? BillingStatus
		{
			get
			{
				return this.entityData.BillingStatus; 
			}
			
			set
			{
				if (this.entityData.BillingStatus == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.BillingStatus, this.entityData.BillingStatus);
				this.entityData.BillingStatus = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.BillingStatus, this.entityData.BillingStatus);
				OnPropertyChanged("BillingStatus");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BilledDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBilledDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BilledDate
		{
			get
			{
				return this.entityData.BilledDate; 
			}
			
			set
			{
				if (this.entityData.BilledDate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.BilledDate, this.entityData.BilledDate);
				this.entityData.BilledDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.BilledDate, this.entityData.BilledDate);
				OnPropertyChanged("BilledDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProcessedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ProcessedDate
		{
			get
			{
				return this.entityData.ProcessedDate; 
			}
			
			set
			{
				if (this.entityData.ProcessedDate == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.ProcessedDate, this.entityData.ProcessedDate);
				this.entityData.ProcessedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.ProcessedDate, this.entityData.ProcessedDate);
				OnPropertyChanged("ProcessedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeeVoghMeetingId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SeeVoghMeetingId
		{
			get
			{
				return this.entityData.SeeVoghMeetingId; 
			}
			
			set
			{
				if (this.entityData.SeeVoghMeetingId == value)
					return;
					
				OnColumnChanging(RatedCdrColumn.SeeVoghMeetingId, this.entityData.SeeVoghMeetingId);
				this.entityData.SeeVoghMeetingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RatedCdrColumn.SeeVoghMeetingId, this.entityData.SeeVoghMeetingId);
				OnPropertyChanged("SeeVoghMeetingId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="AccessType"/>.
		/// </summary>
		/// <value>The source AccessType for AccessTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AccessType AccessTypeIdSource
      	{
            get { return entityData.AccessTypeIdSource; }
            set { entityData.AccessTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Bridge"/>.
		/// </summary>
		/// <value>The source Bridge for BridgeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Bridge BridgeIdSource
      	{
            get { return entityData.BridgeIdSource; }
            set { entityData.BridgeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Moderator"/>.
		/// </summary>
		/// <value>The source Moderator for ModeratorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Moderator ModeratorIdSource
      	{
            get { return entityData.ModeratorIdSource; }
            set { entityData.ModeratorIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return entityData.WholesalerIdSource; }
            set { entityData.WholesalerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("ConferenceId", "Conference Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ConferenceId", "Conference Id", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("ModeratorCode", "Moderator Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModeratorCode", "Moderator Code", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PassCode", "Pass Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PassCode", "Pass Code", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModeratorName", "Moderator Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExternalCustomerNumber", "External Customer Number", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExternalModeratorNumber", "External Moderator Number", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ReferenceNumber", "Reference Number", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("UniqueConferenceId", "Unique Conference Id", 40));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("AuxiliaryConferenceId", "Auxiliary Conference Id", 40));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Dnis", "Dnis", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DialNumber", "Dial Number", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Ani", "Ani", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ParticipantName", "Participant Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Destination", "Destination", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RetailCurrency", "Retail Currency", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WsCurrency", "Ws Currency", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SeeVoghMeetingId", "See Vogh Meeting Id", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "RatedCDR"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "ConferenceID", "ModeratorID", "CustomerID", "WholesalerID", "ModeratorCode", "PassCode", "ModeratorName", "Moderator", "ExternalCustomerNumber", "ExternalModeratorNumber", "ReferenceNumber", "ConferenceStartTime", "ConferenceEndTime", "ConferenceElapsedTime", "StartTime", "EndTime", "ElapsedTime", "BridgeID", "UniqueConferenceID", "AuxiliaryConferenceID", "DNIS", "DialNumber", "ANI", "ParticipantName", "Destination", "AccessTypeID", "ConnectProductRateID", "BridgeProductRateID", "LDProductRateID", "ProductRateTaxableValue", "CustomerTaxableValue", "WSTaxableValue", "RetailConnectCharge", "RetailBridgeRate", "RetailLDRate", "RetailCurrency", "RetailBillingInterval", "RetailTotalConnectCharge", "RetailTotalBridge", "RetailTotalLD", "RetailTotal", "RetailTotalCredit", "RetailLocalTaxRate", "RetailFederalTaxRate", "RetailLocalTax", "RetailFederalTax", "RetailTotalTax", "WSConnectCharge", "WSBridgeRate", "WSLDRate", "WSCurrency", "WSBillingInterval", "WSTotalConnectCharge", "WSTotalBridge", "WSTotalLD", "WSTotal", "WSLocalTaxRate", "WSFederalTaxRate", "WSLocalTax", "WSFederalTax", "WSTotalTax", "BillingStatus", "BilledDate", "ProcessedDate", "SeeVoghMeetingID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as RatedCdrEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (RatedCdr) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<RatedCdr>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as RatedCdr);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed RatedCdr Entity 
		///</summary>
		public virtual RatedCdr Copy()
		{
			//shallow copy entity
			RatedCdr copy = new RatedCdr();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.OriginalId = this.OriginalId;
			copy.ConferenceId = this.ConferenceId;
			copy.ModeratorId = this.ModeratorId;
			copy.CustomerId = this.CustomerId;
			copy.WholesalerId = this.WholesalerId;
			copy.ModeratorCode = this.ModeratorCode;
			copy.PassCode = this.PassCode;
			copy.ModeratorName = this.ModeratorName;
			copy.Moderator = this.Moderator;
			copy.ExternalCustomerNumber = this.ExternalCustomerNumber;
			copy.ExternalModeratorNumber = this.ExternalModeratorNumber;
			copy.ReferenceNumber = this.ReferenceNumber;
			copy.ConferenceStartTime = this.ConferenceStartTime;
			copy.ConferenceEndTime = this.ConferenceEndTime;
			copy.ConferenceElapsedTime = this.ConferenceElapsedTime;
			copy.StartTime = this.StartTime;
			copy.EndTime = this.EndTime;
			copy.ElapsedTime = this.ElapsedTime;
			copy.BridgeId = this.BridgeId;
			copy.UniqueConferenceId = this.UniqueConferenceId;
			copy.AuxiliaryConferenceId = this.AuxiliaryConferenceId;
			copy.Dnis = this.Dnis;
			copy.DialNumber = this.DialNumber;
			copy.Ani = this.Ani;
			copy.ParticipantName = this.ParticipantName;
			copy.Destination = this.Destination;
			copy.AccessTypeId = this.AccessTypeId;
			copy.ConnectProductRateId = this.ConnectProductRateId;
			copy.BridgeProductRateId = this.BridgeProductRateId;
			copy.LdProductRateId = this.LdProductRateId;
			copy.ProductRateTaxableValue = this.ProductRateTaxableValue;
			copy.CustomerTaxableValue = this.CustomerTaxableValue;
			copy.WsTaxableValue = this.WsTaxableValue;
			copy.RetailConnectCharge = this.RetailConnectCharge;
			copy.RetailBridgeRate = this.RetailBridgeRate;
			copy.RetailLdRate = this.RetailLdRate;
			copy.RetailCurrency = this.RetailCurrency;
			copy.RetailBillingInterval = this.RetailBillingInterval;
			copy.RetailTotalConnectCharge = this.RetailTotalConnectCharge;
			copy.RetailTotalBridge = this.RetailTotalBridge;
			copy.RetailTotalLd = this.RetailTotalLd;
			copy.RetailTotal = this.RetailTotal;
			copy.RetailTotalCredit = this.RetailTotalCredit;
			copy.RetailLocalTaxRate = this.RetailLocalTaxRate;
			copy.RetailFederalTaxRate = this.RetailFederalTaxRate;
			copy.RetailLocalTax = this.RetailLocalTax;
			copy.RetailFederalTax = this.RetailFederalTax;
			copy.RetailTotalTax = this.RetailTotalTax;
			copy.WsConnectCharge = this.WsConnectCharge;
			copy.WsBridgeRate = this.WsBridgeRate;
			copy.WsldRate = this.WsldRate;
			copy.WsCurrency = this.WsCurrency;
			copy.WsBillingInterval = this.WsBillingInterval;
			copy.WsTotalConnectCharge = this.WsTotalConnectCharge;
			copy.WsTotalBridge = this.WsTotalBridge;
			copy.WsTotalLd = this.WsTotalLd;
			copy.WsTotal = this.WsTotal;
			copy.WsLocalTaxRate = this.WsLocalTaxRate;
			copy.WsFederalTaxRate = this.WsFederalTaxRate;
			copy.WsLocalTax = this.WsLocalTax;
			copy.WsFederalTax = this.WsFederalTax;
			copy.WsTotalTax = this.WsTotalTax;
			copy.BillingStatus = this.BillingStatus;
			copy.BilledDate = this.BilledDate;
			copy.ProcessedDate = this.ProcessedDate;
			copy.SeeVoghMeetingId = this.SeeVoghMeetingId;
			
			copy.AccessTypeIdSource = MakeCopyOf(this.AccessTypeIdSource) as AccessType;
			copy.BridgeIdSource = MakeCopyOf(this.BridgeIdSource) as Bridge;
			copy.ModeratorIdSource = MakeCopyOf(this.ModeratorIdSource) as Moderator;
			copy.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed RatedCdr Entity which is a deep copy of the current entity.
		///</summary>
		public virtual RatedCdr DeepCopy()
		{
			return EntityHelper.Clone<RatedCdr>(this as RatedCdr);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as RatedCdrEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as RatedCdrEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(RatedCdrColumn column)
		{
			switch(column)
			{
					case RatedCdrColumn.Id:
					return entityData.Id != _originalData.Id;
					case RatedCdrColumn.ConferenceId:
					return entityData.ConferenceId != _originalData.ConferenceId;
					case RatedCdrColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case RatedCdrColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case RatedCdrColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case RatedCdrColumn.ModeratorCode:
					return entityData.ModeratorCode != _originalData.ModeratorCode;
					case RatedCdrColumn.PassCode:
					return entityData.PassCode != _originalData.PassCode;
					case RatedCdrColumn.ModeratorName:
					return entityData.ModeratorName != _originalData.ModeratorName;
					case RatedCdrColumn.Moderator:
					return entityData.Moderator != _originalData.Moderator;
					case RatedCdrColumn.ExternalCustomerNumber:
					return entityData.ExternalCustomerNumber != _originalData.ExternalCustomerNumber;
					case RatedCdrColumn.ExternalModeratorNumber:
					return entityData.ExternalModeratorNumber != _originalData.ExternalModeratorNumber;
					case RatedCdrColumn.ReferenceNumber:
					return entityData.ReferenceNumber != _originalData.ReferenceNumber;
					case RatedCdrColumn.ConferenceStartTime:
					return entityData.ConferenceStartTime != _originalData.ConferenceStartTime;
					case RatedCdrColumn.ConferenceEndTime:
					return entityData.ConferenceEndTime != _originalData.ConferenceEndTime;
					case RatedCdrColumn.ConferenceElapsedTime:
					return entityData.ConferenceElapsedTime != _originalData.ConferenceElapsedTime;
					case RatedCdrColumn.StartTime:
					return entityData.StartTime != _originalData.StartTime;
					case RatedCdrColumn.EndTime:
					return entityData.EndTime != _originalData.EndTime;
					case RatedCdrColumn.ElapsedTime:
					return entityData.ElapsedTime != _originalData.ElapsedTime;
					case RatedCdrColumn.BridgeId:
					return entityData.BridgeId != _originalData.BridgeId;
					case RatedCdrColumn.UniqueConferenceId:
					return entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
					case RatedCdrColumn.AuxiliaryConferenceId:
					return entityData.AuxiliaryConferenceId != _originalData.AuxiliaryConferenceId;
					case RatedCdrColumn.Dnis:
					return entityData.Dnis != _originalData.Dnis;
					case RatedCdrColumn.DialNumber:
					return entityData.DialNumber != _originalData.DialNumber;
					case RatedCdrColumn.Ani:
					return entityData.Ani != _originalData.Ani;
					case RatedCdrColumn.ParticipantName:
					return entityData.ParticipantName != _originalData.ParticipantName;
					case RatedCdrColumn.Destination:
					return entityData.Destination != _originalData.Destination;
					case RatedCdrColumn.AccessTypeId:
					return entityData.AccessTypeId != _originalData.AccessTypeId;
					case RatedCdrColumn.ConnectProductRateId:
					return entityData.ConnectProductRateId != _originalData.ConnectProductRateId;
					case RatedCdrColumn.BridgeProductRateId:
					return entityData.BridgeProductRateId != _originalData.BridgeProductRateId;
					case RatedCdrColumn.LdProductRateId:
					return entityData.LdProductRateId != _originalData.LdProductRateId;
					case RatedCdrColumn.ProductRateTaxableValue:
					return entityData.ProductRateTaxableValue != _originalData.ProductRateTaxableValue;
					case RatedCdrColumn.CustomerTaxableValue:
					return entityData.CustomerTaxableValue != _originalData.CustomerTaxableValue;
					case RatedCdrColumn.WsTaxableValue:
					return entityData.WsTaxableValue != _originalData.WsTaxableValue;
					case RatedCdrColumn.RetailConnectCharge:
					return entityData.RetailConnectCharge != _originalData.RetailConnectCharge;
					case RatedCdrColumn.RetailBridgeRate:
					return entityData.RetailBridgeRate != _originalData.RetailBridgeRate;
					case RatedCdrColumn.RetailLdRate:
					return entityData.RetailLdRate != _originalData.RetailLdRate;
					case RatedCdrColumn.RetailCurrency:
					return entityData.RetailCurrency != _originalData.RetailCurrency;
					case RatedCdrColumn.RetailBillingInterval:
					return entityData.RetailBillingInterval != _originalData.RetailBillingInterval;
					case RatedCdrColumn.RetailTotalConnectCharge:
					return entityData.RetailTotalConnectCharge != _originalData.RetailTotalConnectCharge;
					case RatedCdrColumn.RetailTotalBridge:
					return entityData.RetailTotalBridge != _originalData.RetailTotalBridge;
					case RatedCdrColumn.RetailTotalLd:
					return entityData.RetailTotalLd != _originalData.RetailTotalLd;
					case RatedCdrColumn.RetailTotal:
					return entityData.RetailTotal != _originalData.RetailTotal;
					case RatedCdrColumn.RetailTotalCredit:
					return entityData.RetailTotalCredit != _originalData.RetailTotalCredit;
					case RatedCdrColumn.RetailLocalTaxRate:
					return entityData.RetailLocalTaxRate != _originalData.RetailLocalTaxRate;
					case RatedCdrColumn.RetailFederalTaxRate:
					return entityData.RetailFederalTaxRate != _originalData.RetailFederalTaxRate;
					case RatedCdrColumn.RetailLocalTax:
					return entityData.RetailLocalTax != _originalData.RetailLocalTax;
					case RatedCdrColumn.RetailFederalTax:
					return entityData.RetailFederalTax != _originalData.RetailFederalTax;
					case RatedCdrColumn.RetailTotalTax:
					return entityData.RetailTotalTax != _originalData.RetailTotalTax;
					case RatedCdrColumn.WsConnectCharge:
					return entityData.WsConnectCharge != _originalData.WsConnectCharge;
					case RatedCdrColumn.WsBridgeRate:
					return entityData.WsBridgeRate != _originalData.WsBridgeRate;
					case RatedCdrColumn.WsldRate:
					return entityData.WsldRate != _originalData.WsldRate;
					case RatedCdrColumn.WsCurrency:
					return entityData.WsCurrency != _originalData.WsCurrency;
					case RatedCdrColumn.WsBillingInterval:
					return entityData.WsBillingInterval != _originalData.WsBillingInterval;
					case RatedCdrColumn.WsTotalConnectCharge:
					return entityData.WsTotalConnectCharge != _originalData.WsTotalConnectCharge;
					case RatedCdrColumn.WsTotalBridge:
					return entityData.WsTotalBridge != _originalData.WsTotalBridge;
					case RatedCdrColumn.WsTotalLd:
					return entityData.WsTotalLd != _originalData.WsTotalLd;
					case RatedCdrColumn.WsTotal:
					return entityData.WsTotal != _originalData.WsTotal;
					case RatedCdrColumn.WsLocalTaxRate:
					return entityData.WsLocalTaxRate != _originalData.WsLocalTaxRate;
					case RatedCdrColumn.WsFederalTaxRate:
					return entityData.WsFederalTaxRate != _originalData.WsFederalTaxRate;
					case RatedCdrColumn.WsLocalTax:
					return entityData.WsLocalTax != _originalData.WsLocalTax;
					case RatedCdrColumn.WsFederalTax:
					return entityData.WsFederalTax != _originalData.WsFederalTax;
					case RatedCdrColumn.WsTotalTax:
					return entityData.WsTotalTax != _originalData.WsTotalTax;
					case RatedCdrColumn.BillingStatus:
					return entityData.BillingStatus != _originalData.BillingStatus;
					case RatedCdrColumn.BilledDate:
					return entityData.BilledDate != _originalData.BilledDate;
					case RatedCdrColumn.ProcessedDate:
					return entityData.ProcessedDate != _originalData.ProcessedDate;
					case RatedCdrColumn.SeeVoghMeetingId:
					return entityData.SeeVoghMeetingId != _originalData.SeeVoghMeetingId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.ConferenceId != _originalData.ConferenceId;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.ModeratorCode != _originalData.ModeratorCode;
			result = result || entityData.PassCode != _originalData.PassCode;
			result = result || entityData.ModeratorName != _originalData.ModeratorName;
			result = result || entityData.Moderator != _originalData.Moderator;
			result = result || entityData.ExternalCustomerNumber != _originalData.ExternalCustomerNumber;
			result = result || entityData.ExternalModeratorNumber != _originalData.ExternalModeratorNumber;
			result = result || entityData.ReferenceNumber != _originalData.ReferenceNumber;
			result = result || entityData.ConferenceStartTime != _originalData.ConferenceStartTime;
			result = result || entityData.ConferenceEndTime != _originalData.ConferenceEndTime;
			result = result || entityData.ConferenceElapsedTime != _originalData.ConferenceElapsedTime;
			result = result || entityData.StartTime != _originalData.StartTime;
			result = result || entityData.EndTime != _originalData.EndTime;
			result = result || entityData.ElapsedTime != _originalData.ElapsedTime;
			result = result || entityData.BridgeId != _originalData.BridgeId;
			result = result || entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
			result = result || entityData.AuxiliaryConferenceId != _originalData.AuxiliaryConferenceId;
			result = result || entityData.Dnis != _originalData.Dnis;
			result = result || entityData.DialNumber != _originalData.DialNumber;
			result = result || entityData.Ani != _originalData.Ani;
			result = result || entityData.ParticipantName != _originalData.ParticipantName;
			result = result || entityData.Destination != _originalData.Destination;
			result = result || entityData.AccessTypeId != _originalData.AccessTypeId;
			result = result || entityData.ConnectProductRateId != _originalData.ConnectProductRateId;
			result = result || entityData.BridgeProductRateId != _originalData.BridgeProductRateId;
			result = result || entityData.LdProductRateId != _originalData.LdProductRateId;
			result = result || entityData.ProductRateTaxableValue != _originalData.ProductRateTaxableValue;
			result = result || entityData.CustomerTaxableValue != _originalData.CustomerTaxableValue;
			result = result || entityData.WsTaxableValue != _originalData.WsTaxableValue;
			result = result || entityData.RetailConnectCharge != _originalData.RetailConnectCharge;
			result = result || entityData.RetailBridgeRate != _originalData.RetailBridgeRate;
			result = result || entityData.RetailLdRate != _originalData.RetailLdRate;
			result = result || entityData.RetailCurrency != _originalData.RetailCurrency;
			result = result || entityData.RetailBillingInterval != _originalData.RetailBillingInterval;
			result = result || entityData.RetailTotalConnectCharge != _originalData.RetailTotalConnectCharge;
			result = result || entityData.RetailTotalBridge != _originalData.RetailTotalBridge;
			result = result || entityData.RetailTotalLd != _originalData.RetailTotalLd;
			result = result || entityData.RetailTotal != _originalData.RetailTotal;
			result = result || entityData.RetailTotalCredit != _originalData.RetailTotalCredit;
			result = result || entityData.RetailLocalTaxRate != _originalData.RetailLocalTaxRate;
			result = result || entityData.RetailFederalTaxRate != _originalData.RetailFederalTaxRate;
			result = result || entityData.RetailLocalTax != _originalData.RetailLocalTax;
			result = result || entityData.RetailFederalTax != _originalData.RetailFederalTax;
			result = result || entityData.RetailTotalTax != _originalData.RetailTotalTax;
			result = result || entityData.WsConnectCharge != _originalData.WsConnectCharge;
			result = result || entityData.WsBridgeRate != _originalData.WsBridgeRate;
			result = result || entityData.WsldRate != _originalData.WsldRate;
			result = result || entityData.WsCurrency != _originalData.WsCurrency;
			result = result || entityData.WsBillingInterval != _originalData.WsBillingInterval;
			result = result || entityData.WsTotalConnectCharge != _originalData.WsTotalConnectCharge;
			result = result || entityData.WsTotalBridge != _originalData.WsTotalBridge;
			result = result || entityData.WsTotalLd != _originalData.WsTotalLd;
			result = result || entityData.WsTotal != _originalData.WsTotal;
			result = result || entityData.WsLocalTaxRate != _originalData.WsLocalTaxRate;
			result = result || entityData.WsFederalTaxRate != _originalData.WsFederalTaxRate;
			result = result || entityData.WsLocalTax != _originalData.WsLocalTax;
			result = result || entityData.WsFederalTax != _originalData.WsFederalTax;
			result = result || entityData.WsTotalTax != _originalData.WsTotalTax;
			result = result || entityData.BillingStatus != _originalData.BillingStatus;
			result = result || entityData.BilledDate != _originalData.BilledDate;
			result = result || entityData.ProcessedDate != _originalData.ProcessedDate;
			result = result || entityData.SeeVoghMeetingId != _originalData.SeeVoghMeetingId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="RatedCdrBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is RatedCdrBase)
				return Equals(this, (RatedCdrBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="RatedCdrBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.ConferenceId.GetHashCode() ^ 
					this.ModeratorId.GetHashCode() ^ 
					((this.CustomerId == null) ? string.Empty : this.CustomerId.ToString()).GetHashCode() ^ 
					((this.WholesalerId == null) ? string.Empty : this.WholesalerId.ToString()).GetHashCode() ^ 
					this.ModeratorCode.GetHashCode() ^ 
					this.PassCode.GetHashCode() ^ 
					((this.ModeratorName == null) ? string.Empty : this.ModeratorName.ToString()).GetHashCode() ^ 
					this.Moderator.GetHashCode() ^ 
					((this.ExternalCustomerNumber == null) ? string.Empty : this.ExternalCustomerNumber.ToString()).GetHashCode() ^ 
					((this.ExternalModeratorNumber == null) ? string.Empty : this.ExternalModeratorNumber.ToString()).GetHashCode() ^ 
					((this.ReferenceNumber == null) ? string.Empty : this.ReferenceNumber.ToString()).GetHashCode() ^ 
					((this.ConferenceStartTime == null) ? string.Empty : this.ConferenceStartTime.ToString()).GetHashCode() ^ 
					((this.ConferenceEndTime == null) ? string.Empty : this.ConferenceEndTime.ToString()).GetHashCode() ^ 
					((this.ConferenceElapsedTime == null) ? string.Empty : this.ConferenceElapsedTime.ToString()).GetHashCode() ^ 
					this.StartTime.GetHashCode() ^ 
					this.EndTime.GetHashCode() ^ 
					this.ElapsedTime.GetHashCode() ^ 
					this.BridgeId.GetHashCode() ^ 
					((this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString()).GetHashCode() ^ 
					((this.AuxiliaryConferenceId == null) ? string.Empty : this.AuxiliaryConferenceId.ToString()).GetHashCode() ^ 
					((this.Dnis == null) ? string.Empty : this.Dnis.ToString()).GetHashCode() ^ 
					((this.DialNumber == null) ? string.Empty : this.DialNumber.ToString()).GetHashCode() ^ 
					((this.Ani == null) ? string.Empty : this.Ani.ToString()).GetHashCode() ^ 
					((this.ParticipantName == null) ? string.Empty : this.ParticipantName.ToString()).GetHashCode() ^ 
					((this.Destination == null) ? string.Empty : this.Destination.ToString()).GetHashCode() ^ 
					this.AccessTypeId.GetHashCode() ^ 
					this.ConnectProductRateId.GetHashCode() ^ 
					this.BridgeProductRateId.GetHashCode() ^ 
					this.LdProductRateId.GetHashCode() ^ 
					this.ProductRateTaxableValue.GetHashCode() ^ 
					this.CustomerTaxableValue.GetHashCode() ^ 
					this.WsTaxableValue.GetHashCode() ^ 
					((this.RetailConnectCharge == null) ? string.Empty : this.RetailConnectCharge.ToString()).GetHashCode() ^ 
					((this.RetailBridgeRate == null) ? string.Empty : this.RetailBridgeRate.ToString()).GetHashCode() ^ 
					((this.RetailLdRate == null) ? string.Empty : this.RetailLdRate.ToString()).GetHashCode() ^ 
					((this.RetailCurrency == null) ? string.Empty : this.RetailCurrency.ToString()).GetHashCode() ^ 
					this.RetailBillingInterval.GetHashCode() ^ 
					((this.RetailTotalConnectCharge == null) ? string.Empty : this.RetailTotalConnectCharge.ToString()).GetHashCode() ^ 
					((this.RetailTotalBridge == null) ? string.Empty : this.RetailTotalBridge.ToString()).GetHashCode() ^ 
					((this.RetailTotalLd == null) ? string.Empty : this.RetailTotalLd.ToString()).GetHashCode() ^ 
					((this.RetailTotal == null) ? string.Empty : this.RetailTotal.ToString()).GetHashCode() ^ 
					((this.RetailTotalCredit == null) ? string.Empty : this.RetailTotalCredit.ToString()).GetHashCode() ^ 
					((this.RetailLocalTaxRate == null) ? string.Empty : this.RetailLocalTaxRate.ToString()).GetHashCode() ^ 
					((this.RetailFederalTaxRate == null) ? string.Empty : this.RetailFederalTaxRate.ToString()).GetHashCode() ^ 
					((this.RetailLocalTax == null) ? string.Empty : this.RetailLocalTax.ToString()).GetHashCode() ^ 
					((this.RetailFederalTax == null) ? string.Empty : this.RetailFederalTax.ToString()).GetHashCode() ^ 
					((this.RetailTotalTax == null) ? string.Empty : this.RetailTotalTax.ToString()).GetHashCode() ^ 
					((this.WsConnectCharge == null) ? string.Empty : this.WsConnectCharge.ToString()).GetHashCode() ^ 
					((this.WsBridgeRate == null) ? string.Empty : this.WsBridgeRate.ToString()).GetHashCode() ^ 
					((this.WsldRate == null) ? string.Empty : this.WsldRate.ToString()).GetHashCode() ^ 
					((this.WsCurrency == null) ? string.Empty : this.WsCurrency.ToString()).GetHashCode() ^ 
					this.WsBillingInterval.GetHashCode() ^ 
					((this.WsTotalConnectCharge == null) ? string.Empty : this.WsTotalConnectCharge.ToString()).GetHashCode() ^ 
					((this.WsTotalBridge == null) ? string.Empty : this.WsTotalBridge.ToString()).GetHashCode() ^ 
					((this.WsTotalLd == null) ? string.Empty : this.WsTotalLd.ToString()).GetHashCode() ^ 
					((this.WsTotal == null) ? string.Empty : this.WsTotal.ToString()).GetHashCode() ^ 
					((this.WsLocalTaxRate == null) ? string.Empty : this.WsLocalTaxRate.ToString()).GetHashCode() ^ 
					((this.WsFederalTaxRate == null) ? string.Empty : this.WsFederalTaxRate.ToString()).GetHashCode() ^ 
					((this.WsLocalTax == null) ? string.Empty : this.WsLocalTax.ToString()).GetHashCode() ^ 
					((this.WsFederalTax == null) ? string.Empty : this.WsFederalTax.ToString()).GetHashCode() ^ 
					((this.WsTotalTax == null) ? string.Empty : this.WsTotalTax.ToString()).GetHashCode() ^ 
					((this.BillingStatus == null) ? string.Empty : this.BillingStatus.ToString()).GetHashCode() ^ 
					((this.BilledDate == null) ? string.Empty : this.BilledDate.ToString()).GetHashCode() ^ 
					this.ProcessedDate.GetHashCode() ^ 
					((this.SeeVoghMeetingId == null) ? string.Empty : this.SeeVoghMeetingId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="RatedCdrBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(RatedCdrBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="RatedCdrBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="RatedCdrBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="RatedCdrBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(RatedCdrBase Object1, RatedCdrBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.ConferenceId != Object2.ConferenceId)
				equal = false;
			if (Object1.ModeratorId != Object2.ModeratorId)
				equal = false;
			if ( Object1.CustomerId != null && Object2.CustomerId != null )
			{
				if (Object1.CustomerId != Object2.CustomerId)
					equal = false;
			}
			else if (Object1.CustomerId == null ^ Object2.CustomerId == null )
			{
				equal = false;
			}
			if ( Object1.WholesalerId != null && Object2.WholesalerId != null )
			{
				if (Object1.WholesalerId != Object2.WholesalerId)
					equal = false;
			}
			else if (Object1.WholesalerId == null ^ Object2.WholesalerId == null )
			{
				equal = false;
			}
			if (Object1.ModeratorCode != Object2.ModeratorCode)
				equal = false;
			if (Object1.PassCode != Object2.PassCode)
				equal = false;
			if ( Object1.ModeratorName != null && Object2.ModeratorName != null )
			{
				if (Object1.ModeratorName != Object2.ModeratorName)
					equal = false;
			}
			else if (Object1.ModeratorName == null ^ Object2.ModeratorName == null )
			{
				equal = false;
			}
			if (Object1.Moderator != Object2.Moderator)
				equal = false;
			if ( Object1.ExternalCustomerNumber != null && Object2.ExternalCustomerNumber != null )
			{
				if (Object1.ExternalCustomerNumber != Object2.ExternalCustomerNumber)
					equal = false;
			}
			else if (Object1.ExternalCustomerNumber == null ^ Object2.ExternalCustomerNumber == null )
			{
				equal = false;
			}
			if ( Object1.ExternalModeratorNumber != null && Object2.ExternalModeratorNumber != null )
			{
				if (Object1.ExternalModeratorNumber != Object2.ExternalModeratorNumber)
					equal = false;
			}
			else if (Object1.ExternalModeratorNumber == null ^ Object2.ExternalModeratorNumber == null )
			{
				equal = false;
			}
			if ( Object1.ReferenceNumber != null && Object2.ReferenceNumber != null )
			{
				if (Object1.ReferenceNumber != Object2.ReferenceNumber)
					equal = false;
			}
			else if (Object1.ReferenceNumber == null ^ Object2.ReferenceNumber == null )
			{
				equal = false;
			}
			if ( Object1.ConferenceStartTime != null && Object2.ConferenceStartTime != null )
			{
				if (Object1.ConferenceStartTime != Object2.ConferenceStartTime)
					equal = false;
			}
			else if (Object1.ConferenceStartTime == null ^ Object2.ConferenceStartTime == null )
			{
				equal = false;
			}
			if ( Object1.ConferenceEndTime != null && Object2.ConferenceEndTime != null )
			{
				if (Object1.ConferenceEndTime != Object2.ConferenceEndTime)
					equal = false;
			}
			else if (Object1.ConferenceEndTime == null ^ Object2.ConferenceEndTime == null )
			{
				equal = false;
			}
			if ( Object1.ConferenceElapsedTime != null && Object2.ConferenceElapsedTime != null )
			{
				if (Object1.ConferenceElapsedTime != Object2.ConferenceElapsedTime)
					equal = false;
			}
			else if (Object1.ConferenceElapsedTime == null ^ Object2.ConferenceElapsedTime == null )
			{
				equal = false;
			}
			if (Object1.StartTime != Object2.StartTime)
				equal = false;
			if (Object1.EndTime != Object2.EndTime)
				equal = false;
			if (Object1.ElapsedTime != Object2.ElapsedTime)
				equal = false;
			if (Object1.BridgeId != Object2.BridgeId)
				equal = false;
			if ( Object1.UniqueConferenceId != null && Object2.UniqueConferenceId != null )
			{
				if (Object1.UniqueConferenceId != Object2.UniqueConferenceId)
					equal = false;
			}
			else if (Object1.UniqueConferenceId == null ^ Object2.UniqueConferenceId == null )
			{
				equal = false;
			}
			if ( Object1.AuxiliaryConferenceId != null && Object2.AuxiliaryConferenceId != null )
			{
				if (Object1.AuxiliaryConferenceId != Object2.AuxiliaryConferenceId)
					equal = false;
			}
			else if (Object1.AuxiliaryConferenceId == null ^ Object2.AuxiliaryConferenceId == null )
			{
				equal = false;
			}
			if ( Object1.Dnis != null && Object2.Dnis != null )
			{
				if (Object1.Dnis != Object2.Dnis)
					equal = false;
			}
			else if (Object1.Dnis == null ^ Object2.Dnis == null )
			{
				equal = false;
			}
			if ( Object1.DialNumber != null && Object2.DialNumber != null )
			{
				if (Object1.DialNumber != Object2.DialNumber)
					equal = false;
			}
			else if (Object1.DialNumber == null ^ Object2.DialNumber == null )
			{
				equal = false;
			}
			if ( Object1.Ani != null && Object2.Ani != null )
			{
				if (Object1.Ani != Object2.Ani)
					equal = false;
			}
			else if (Object1.Ani == null ^ Object2.Ani == null )
			{
				equal = false;
			}
			if ( Object1.ParticipantName != null && Object2.ParticipantName != null )
			{
				if (Object1.ParticipantName != Object2.ParticipantName)
					equal = false;
			}
			else if (Object1.ParticipantName == null ^ Object2.ParticipantName == null )
			{
				equal = false;
			}
			if ( Object1.Destination != null && Object2.Destination != null )
			{
				if (Object1.Destination != Object2.Destination)
					equal = false;
			}
			else if (Object1.Destination == null ^ Object2.Destination == null )
			{
				equal = false;
			}
			if (Object1.AccessTypeId != Object2.AccessTypeId)
				equal = false;
			if (Object1.ConnectProductRateId != Object2.ConnectProductRateId)
				equal = false;
			if (Object1.BridgeProductRateId != Object2.BridgeProductRateId)
				equal = false;
			if (Object1.LdProductRateId != Object2.LdProductRateId)
				equal = false;
			if (Object1.ProductRateTaxableValue != Object2.ProductRateTaxableValue)
				equal = false;
			if (Object1.CustomerTaxableValue != Object2.CustomerTaxableValue)
				equal = false;
			if (Object1.WsTaxableValue != Object2.WsTaxableValue)
				equal = false;
			if ( Object1.RetailConnectCharge != null && Object2.RetailConnectCharge != null )
			{
				if (Object1.RetailConnectCharge != Object2.RetailConnectCharge)
					equal = false;
			}
			else if (Object1.RetailConnectCharge == null ^ Object2.RetailConnectCharge == null )
			{
				equal = false;
			}
			if ( Object1.RetailBridgeRate != null && Object2.RetailBridgeRate != null )
			{
				if (Object1.RetailBridgeRate != Object2.RetailBridgeRate)
					equal = false;
			}
			else if (Object1.RetailBridgeRate == null ^ Object2.RetailBridgeRate == null )
			{
				equal = false;
			}
			if ( Object1.RetailLdRate != null && Object2.RetailLdRate != null )
			{
				if (Object1.RetailLdRate != Object2.RetailLdRate)
					equal = false;
			}
			else if (Object1.RetailLdRate == null ^ Object2.RetailLdRate == null )
			{
				equal = false;
			}
			if ( Object1.RetailCurrency != null && Object2.RetailCurrency != null )
			{
				if (Object1.RetailCurrency != Object2.RetailCurrency)
					equal = false;
			}
			else if (Object1.RetailCurrency == null ^ Object2.RetailCurrency == null )
			{
				equal = false;
			}
			if (Object1.RetailBillingInterval != Object2.RetailBillingInterval)
				equal = false;
			if ( Object1.RetailTotalConnectCharge != null && Object2.RetailTotalConnectCharge != null )
			{
				if (Object1.RetailTotalConnectCharge != Object2.RetailTotalConnectCharge)
					equal = false;
			}
			else if (Object1.RetailTotalConnectCharge == null ^ Object2.RetailTotalConnectCharge == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotalBridge != null && Object2.RetailTotalBridge != null )
			{
				if (Object1.RetailTotalBridge != Object2.RetailTotalBridge)
					equal = false;
			}
			else if (Object1.RetailTotalBridge == null ^ Object2.RetailTotalBridge == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotalLd != null && Object2.RetailTotalLd != null )
			{
				if (Object1.RetailTotalLd != Object2.RetailTotalLd)
					equal = false;
			}
			else if (Object1.RetailTotalLd == null ^ Object2.RetailTotalLd == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotal != null && Object2.RetailTotal != null )
			{
				if (Object1.RetailTotal != Object2.RetailTotal)
					equal = false;
			}
			else if (Object1.RetailTotal == null ^ Object2.RetailTotal == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotalCredit != null && Object2.RetailTotalCredit != null )
			{
				if (Object1.RetailTotalCredit != Object2.RetailTotalCredit)
					equal = false;
			}
			else if (Object1.RetailTotalCredit == null ^ Object2.RetailTotalCredit == null )
			{
				equal = false;
			}
			if ( Object1.RetailLocalTaxRate != null && Object2.RetailLocalTaxRate != null )
			{
				if (Object1.RetailLocalTaxRate != Object2.RetailLocalTaxRate)
					equal = false;
			}
			else if (Object1.RetailLocalTaxRate == null ^ Object2.RetailLocalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.RetailFederalTaxRate != null && Object2.RetailFederalTaxRate != null )
			{
				if (Object1.RetailFederalTaxRate != Object2.RetailFederalTaxRate)
					equal = false;
			}
			else if (Object1.RetailFederalTaxRate == null ^ Object2.RetailFederalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.RetailLocalTax != null && Object2.RetailLocalTax != null )
			{
				if (Object1.RetailLocalTax != Object2.RetailLocalTax)
					equal = false;
			}
			else if (Object1.RetailLocalTax == null ^ Object2.RetailLocalTax == null )
			{
				equal = false;
			}
			if ( Object1.RetailFederalTax != null && Object2.RetailFederalTax != null )
			{
				if (Object1.RetailFederalTax != Object2.RetailFederalTax)
					equal = false;
			}
			else if (Object1.RetailFederalTax == null ^ Object2.RetailFederalTax == null )
			{
				equal = false;
			}
			if ( Object1.RetailTotalTax != null && Object2.RetailTotalTax != null )
			{
				if (Object1.RetailTotalTax != Object2.RetailTotalTax)
					equal = false;
			}
			else if (Object1.RetailTotalTax == null ^ Object2.RetailTotalTax == null )
			{
				equal = false;
			}
			if ( Object1.WsConnectCharge != null && Object2.WsConnectCharge != null )
			{
				if (Object1.WsConnectCharge != Object2.WsConnectCharge)
					equal = false;
			}
			else if (Object1.WsConnectCharge == null ^ Object2.WsConnectCharge == null )
			{
				equal = false;
			}
			if ( Object1.WsBridgeRate != null && Object2.WsBridgeRate != null )
			{
				if (Object1.WsBridgeRate != Object2.WsBridgeRate)
					equal = false;
			}
			else if (Object1.WsBridgeRate == null ^ Object2.WsBridgeRate == null )
			{
				equal = false;
			}
			if ( Object1.WsldRate != null && Object2.WsldRate != null )
			{
				if (Object1.WsldRate != Object2.WsldRate)
					equal = false;
			}
			else if (Object1.WsldRate == null ^ Object2.WsldRate == null )
			{
				equal = false;
			}
			if ( Object1.WsCurrency != null && Object2.WsCurrency != null )
			{
				if (Object1.WsCurrency != Object2.WsCurrency)
					equal = false;
			}
			else if (Object1.WsCurrency == null ^ Object2.WsCurrency == null )
			{
				equal = false;
			}
			if (Object1.WsBillingInterval != Object2.WsBillingInterval)
				equal = false;
			if ( Object1.WsTotalConnectCharge != null && Object2.WsTotalConnectCharge != null )
			{
				if (Object1.WsTotalConnectCharge != Object2.WsTotalConnectCharge)
					equal = false;
			}
			else if (Object1.WsTotalConnectCharge == null ^ Object2.WsTotalConnectCharge == null )
			{
				equal = false;
			}
			if ( Object1.WsTotalBridge != null && Object2.WsTotalBridge != null )
			{
				if (Object1.WsTotalBridge != Object2.WsTotalBridge)
					equal = false;
			}
			else if (Object1.WsTotalBridge == null ^ Object2.WsTotalBridge == null )
			{
				equal = false;
			}
			if ( Object1.WsTotalLd != null && Object2.WsTotalLd != null )
			{
				if (Object1.WsTotalLd != Object2.WsTotalLd)
					equal = false;
			}
			else if (Object1.WsTotalLd == null ^ Object2.WsTotalLd == null )
			{
				equal = false;
			}
			if ( Object1.WsTotal != null && Object2.WsTotal != null )
			{
				if (Object1.WsTotal != Object2.WsTotal)
					equal = false;
			}
			else if (Object1.WsTotal == null ^ Object2.WsTotal == null )
			{
				equal = false;
			}
			if ( Object1.WsLocalTaxRate != null && Object2.WsLocalTaxRate != null )
			{
				if (Object1.WsLocalTaxRate != Object2.WsLocalTaxRate)
					equal = false;
			}
			else if (Object1.WsLocalTaxRate == null ^ Object2.WsLocalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.WsFederalTaxRate != null && Object2.WsFederalTaxRate != null )
			{
				if (Object1.WsFederalTaxRate != Object2.WsFederalTaxRate)
					equal = false;
			}
			else if (Object1.WsFederalTaxRate == null ^ Object2.WsFederalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.WsLocalTax != null && Object2.WsLocalTax != null )
			{
				if (Object1.WsLocalTax != Object2.WsLocalTax)
					equal = false;
			}
			else if (Object1.WsLocalTax == null ^ Object2.WsLocalTax == null )
			{
				equal = false;
			}
			if ( Object1.WsFederalTax != null && Object2.WsFederalTax != null )
			{
				if (Object1.WsFederalTax != Object2.WsFederalTax)
					equal = false;
			}
			else if (Object1.WsFederalTax == null ^ Object2.WsFederalTax == null )
			{
				equal = false;
			}
			if ( Object1.WsTotalTax != null && Object2.WsTotalTax != null )
			{
				if (Object1.WsTotalTax != Object2.WsTotalTax)
					equal = false;
			}
			else if (Object1.WsTotalTax == null ^ Object2.WsTotalTax == null )
			{
				equal = false;
			}
			if ( Object1.BillingStatus != null && Object2.BillingStatus != null )
			{
				if (Object1.BillingStatus != Object2.BillingStatus)
					equal = false;
			}
			else if (Object1.BillingStatus == null ^ Object2.BillingStatus == null )
			{
				equal = false;
			}
			if ( Object1.BilledDate != null && Object2.BilledDate != null )
			{
				if (Object1.BilledDate != Object2.BilledDate)
					equal = false;
			}
			else if (Object1.BilledDate == null ^ Object2.BilledDate == null )
			{
				equal = false;
			}
			if (Object1.ProcessedDate != Object2.ProcessedDate)
				equal = false;
			if ( Object1.SeeVoghMeetingId != null && Object2.SeeVoghMeetingId != null )
			{
				if (Object1.SeeVoghMeetingId != Object2.SeeVoghMeetingId)
					equal = false;
			}
			else if (Object1.SeeVoghMeetingId == null ^ Object2.SeeVoghMeetingId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((RatedCdrBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static RatedCdrComparer GetComparer()
        {
            return new RatedCdrComparer();
        }
        */

        // Comparer delegates back to RatedCdr
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(RatedCdr rhs, RatedCdrColumn which)
        {
            switch (which)
            {
            	
            	
            	case RatedCdrColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ConferenceId:
            		return this.ConferenceId.CompareTo(rhs.ConferenceId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ModeratorId:
            		return this.ModeratorId.CompareTo(rhs.ModeratorId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.CustomerId:
            		return this.CustomerId.Value.CompareTo(rhs.CustomerId.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ModeratorCode:
            		return this.ModeratorCode.CompareTo(rhs.ModeratorCode);
            		
            		                 
            	
            	
            	case RatedCdrColumn.PassCode:
            		return this.PassCode.CompareTo(rhs.PassCode);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ModeratorName:
            		return this.ModeratorName.CompareTo(rhs.ModeratorName);
            		
            		                 
            	
            	
            	case RatedCdrColumn.Moderator:
            		return this.Moderator.CompareTo(rhs.Moderator);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ExternalCustomerNumber:
            		return this.ExternalCustomerNumber.CompareTo(rhs.ExternalCustomerNumber);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ExternalModeratorNumber:
            		return this.ExternalModeratorNumber.CompareTo(rhs.ExternalModeratorNumber);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ReferenceNumber:
            		return this.ReferenceNumber.CompareTo(rhs.ReferenceNumber);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ConferenceStartTime:
            		return this.ConferenceStartTime.Value.CompareTo(rhs.ConferenceStartTime.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ConferenceEndTime:
            		return this.ConferenceEndTime.Value.CompareTo(rhs.ConferenceEndTime.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ConferenceElapsedTime:
            		return this.ConferenceElapsedTime.Value.CompareTo(rhs.ConferenceElapsedTime.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.StartTime:
            		return this.StartTime.CompareTo(rhs.StartTime);
            		
            		                 
            	
            	
            	case RatedCdrColumn.EndTime:
            		return this.EndTime.CompareTo(rhs.EndTime);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ElapsedTime:
            		return this.ElapsedTime.CompareTo(rhs.ElapsedTime);
            		
            		                 
            	
            	
            	case RatedCdrColumn.BridgeId:
            		return this.BridgeId.CompareTo(rhs.BridgeId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.UniqueConferenceId:
            		return this.UniqueConferenceId.CompareTo(rhs.UniqueConferenceId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.AuxiliaryConferenceId:
            		return this.AuxiliaryConferenceId.CompareTo(rhs.AuxiliaryConferenceId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.Dnis:
            		return this.Dnis.CompareTo(rhs.Dnis);
            		
            		                 
            	
            	
            	case RatedCdrColumn.DialNumber:
            		return this.DialNumber.CompareTo(rhs.DialNumber);
            		
            		                 
            	
            	
            	case RatedCdrColumn.Ani:
            		return this.Ani.CompareTo(rhs.Ani);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ParticipantName:
            		return this.ParticipantName.CompareTo(rhs.ParticipantName);
            		
            		                 
            	
            	
            	case RatedCdrColumn.Destination:
            		return this.Destination.CompareTo(rhs.Destination);
            		
            		                 
            	
            	
            	case RatedCdrColumn.AccessTypeId:
            		return this.AccessTypeId.CompareTo(rhs.AccessTypeId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ConnectProductRateId:
            		return this.ConnectProductRateId.CompareTo(rhs.ConnectProductRateId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.BridgeProductRateId:
            		return this.BridgeProductRateId.CompareTo(rhs.BridgeProductRateId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.LdProductRateId:
            		return this.LdProductRateId.CompareTo(rhs.LdProductRateId);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ProductRateTaxableValue:
            		return this.ProductRateTaxableValue.CompareTo(rhs.ProductRateTaxableValue);
            		
            		                 
            	
            	
            	case RatedCdrColumn.CustomerTaxableValue:
            		return this.CustomerTaxableValue.CompareTo(rhs.CustomerTaxableValue);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsTaxableValue:
            		return this.WsTaxableValue.CompareTo(rhs.WsTaxableValue);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailConnectCharge:
            		return this.RetailConnectCharge.Value.CompareTo(rhs.RetailConnectCharge.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailBridgeRate:
            		return this.RetailBridgeRate.Value.CompareTo(rhs.RetailBridgeRate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailLdRate:
            		return this.RetailLdRate.Value.CompareTo(rhs.RetailLdRate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailCurrency:
            		return this.RetailCurrency.CompareTo(rhs.RetailCurrency);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailBillingInterval:
            		return this.RetailBillingInterval.CompareTo(rhs.RetailBillingInterval);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailTotalConnectCharge:
            		return this.RetailTotalConnectCharge.Value.CompareTo(rhs.RetailTotalConnectCharge.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailTotalBridge:
            		return this.RetailTotalBridge.Value.CompareTo(rhs.RetailTotalBridge.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailTotalLd:
            		return this.RetailTotalLd.Value.CompareTo(rhs.RetailTotalLd.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailTotal:
            		return this.RetailTotal.Value.CompareTo(rhs.RetailTotal.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailTotalCredit:
            		return this.RetailTotalCredit.Value.CompareTo(rhs.RetailTotalCredit.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailLocalTaxRate:
            		return this.RetailLocalTaxRate.Value.CompareTo(rhs.RetailLocalTaxRate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailFederalTaxRate:
            		return this.RetailFederalTaxRate.Value.CompareTo(rhs.RetailFederalTaxRate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailLocalTax:
            		return this.RetailLocalTax.Value.CompareTo(rhs.RetailLocalTax.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailFederalTax:
            		return this.RetailFederalTax.Value.CompareTo(rhs.RetailFederalTax.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.RetailTotalTax:
            		return this.RetailTotalTax.Value.CompareTo(rhs.RetailTotalTax.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsConnectCharge:
            		return this.WsConnectCharge.Value.CompareTo(rhs.WsConnectCharge.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsBridgeRate:
            		return this.WsBridgeRate.Value.CompareTo(rhs.WsBridgeRate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsldRate:
            		return this.WsldRate.Value.CompareTo(rhs.WsldRate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsCurrency:
            		return this.WsCurrency.CompareTo(rhs.WsCurrency);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsBillingInterval:
            		return this.WsBillingInterval.CompareTo(rhs.WsBillingInterval);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsTotalConnectCharge:
            		return this.WsTotalConnectCharge.Value.CompareTo(rhs.WsTotalConnectCharge.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsTotalBridge:
            		return this.WsTotalBridge.Value.CompareTo(rhs.WsTotalBridge.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsTotalLd:
            		return this.WsTotalLd.Value.CompareTo(rhs.WsTotalLd.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsTotal:
            		return this.WsTotal.Value.CompareTo(rhs.WsTotal.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsLocalTaxRate:
            		return this.WsLocalTaxRate.Value.CompareTo(rhs.WsLocalTaxRate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsFederalTaxRate:
            		return this.WsFederalTaxRate.Value.CompareTo(rhs.WsFederalTaxRate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsLocalTax:
            		return this.WsLocalTax.Value.CompareTo(rhs.WsLocalTax.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsFederalTax:
            		return this.WsFederalTax.Value.CompareTo(rhs.WsFederalTax.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.WsTotalTax:
            		return this.WsTotalTax.Value.CompareTo(rhs.WsTotalTax.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.BillingStatus:
            		return this.BillingStatus.Value.CompareTo(rhs.BillingStatus.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.BilledDate:
            		return this.BilledDate.Value.CompareTo(rhs.BilledDate.Value);
            		
            		                 
            	
            	
            	case RatedCdrColumn.ProcessedDate:
            		return this.ProcessedDate.CompareTo(rhs.ProcessedDate);
            		
            		                 
            	
            	
            	case RatedCdrColumn.SeeVoghMeetingId:
            		return this.SeeVoghMeetingId.CompareTo(rhs.SeeVoghMeetingId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<RatedCdrKey> Members
		
		// member variable for the EntityId property
		private RatedCdrKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual RatedCdrKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new RatedCdrKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("RatedCdr")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{67}{66}- Id: {0}{66}- ConferenceId: {1}{66}- ModeratorId: {2}{66}- CustomerId: {3}{66}- WholesalerId: {4}{66}- ModeratorCode: {5}{66}- PassCode: {6}{66}- ModeratorName: {7}{66}- Moderator: {8}{66}- ExternalCustomerNumber: {9}{66}- ExternalModeratorNumber: {10}{66}- ReferenceNumber: {11}{66}- ConferenceStartTime: {12}{66}- ConferenceEndTime: {13}{66}- ConferenceElapsedTime: {14}{66}- StartTime: {15}{66}- EndTime: {16}{66}- ElapsedTime: {17}{66}- BridgeId: {18}{66}- UniqueConferenceId: {19}{66}- AuxiliaryConferenceId: {20}{66}- Dnis: {21}{66}- DialNumber: {22}{66}- Ani: {23}{66}- ParticipantName: {24}{66}- Destination: {25}{66}- AccessTypeId: {26}{66}- ConnectProductRateId: {27}{66}- BridgeProductRateId: {28}{66}- LdProductRateId: {29}{66}- ProductRateTaxableValue: {30}{66}- CustomerTaxableValue: {31}{66}- WsTaxableValue: {32}{66}- RetailConnectCharge: {33}{66}- RetailBridgeRate: {34}{66}- RetailLdRate: {35}{66}- RetailCurrency: {36}{66}- RetailBillingInterval: {37}{66}- RetailTotalConnectCharge: {38}{66}- RetailTotalBridge: {39}{66}- RetailTotalLd: {40}{66}- RetailTotal: {41}{66}- RetailTotalCredit: {42}{66}- RetailLocalTaxRate: {43}{66}- RetailFederalTaxRate: {44}{66}- RetailLocalTax: {45}{66}- RetailFederalTax: {46}{66}- RetailTotalTax: {47}{66}- WsConnectCharge: {48}{66}- WsBridgeRate: {49}{66}- WsldRate: {50}{66}- WsCurrency: {51}{66}- WsBillingInterval: {52}{66}- WsTotalConnectCharge: {53}{66}- WsTotalBridge: {54}{66}- WsTotalLd: {55}{66}- WsTotal: {56}{66}- WsLocalTaxRate: {57}{66}- WsFederalTaxRate: {58}{66}- WsLocalTax: {59}{66}- WsFederalTax: {60}{66}- WsTotalTax: {61}{66}- BillingStatus: {62}{66}- BilledDate: {63}{66}- ProcessedDate: {64}{66}- SeeVoghMeetingId: {65}{66}", 
				this.Id,
				this.ConferenceId,
				this.ModeratorId,
				(this.CustomerId == null) ? string.Empty : this.CustomerId.ToString(),
				(this.WholesalerId == null) ? string.Empty : this.WholesalerId.ToString(),
				this.ModeratorCode,
				this.PassCode,
				(this.ModeratorName == null) ? string.Empty : this.ModeratorName.ToString(),
				this.Moderator,
				(this.ExternalCustomerNumber == null) ? string.Empty : this.ExternalCustomerNumber.ToString(),
				(this.ExternalModeratorNumber == null) ? string.Empty : this.ExternalModeratorNumber.ToString(),
				(this.ReferenceNumber == null) ? string.Empty : this.ReferenceNumber.ToString(),
				(this.ConferenceStartTime == null) ? string.Empty : this.ConferenceStartTime.ToString(),
				(this.ConferenceEndTime == null) ? string.Empty : this.ConferenceEndTime.ToString(),
				(this.ConferenceElapsedTime == null) ? string.Empty : this.ConferenceElapsedTime.ToString(),
				this.StartTime,
				this.EndTime,
				this.ElapsedTime,
				this.BridgeId,
				(this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString(),
				(this.AuxiliaryConferenceId == null) ? string.Empty : this.AuxiliaryConferenceId.ToString(),
				(this.Dnis == null) ? string.Empty : this.Dnis.ToString(),
				(this.DialNumber == null) ? string.Empty : this.DialNumber.ToString(),
				(this.Ani == null) ? string.Empty : this.Ani.ToString(),
				(this.ParticipantName == null) ? string.Empty : this.ParticipantName.ToString(),
				(this.Destination == null) ? string.Empty : this.Destination.ToString(),
				this.AccessTypeId,
				this.ConnectProductRateId,
				this.BridgeProductRateId,
				this.LdProductRateId,
				this.ProductRateTaxableValue,
				this.CustomerTaxableValue,
				this.WsTaxableValue,
				(this.RetailConnectCharge == null) ? string.Empty : this.RetailConnectCharge.ToString(),
				(this.RetailBridgeRate == null) ? string.Empty : this.RetailBridgeRate.ToString(),
				(this.RetailLdRate == null) ? string.Empty : this.RetailLdRate.ToString(),
				(this.RetailCurrency == null) ? string.Empty : this.RetailCurrency.ToString(),
				this.RetailBillingInterval,
				(this.RetailTotalConnectCharge == null) ? string.Empty : this.RetailTotalConnectCharge.ToString(),
				(this.RetailTotalBridge == null) ? string.Empty : this.RetailTotalBridge.ToString(),
				(this.RetailTotalLd == null) ? string.Empty : this.RetailTotalLd.ToString(),
				(this.RetailTotal == null) ? string.Empty : this.RetailTotal.ToString(),
				(this.RetailTotalCredit == null) ? string.Empty : this.RetailTotalCredit.ToString(),
				(this.RetailLocalTaxRate == null) ? string.Empty : this.RetailLocalTaxRate.ToString(),
				(this.RetailFederalTaxRate == null) ? string.Empty : this.RetailFederalTaxRate.ToString(),
				(this.RetailLocalTax == null) ? string.Empty : this.RetailLocalTax.ToString(),
				(this.RetailFederalTax == null) ? string.Empty : this.RetailFederalTax.ToString(),
				(this.RetailTotalTax == null) ? string.Empty : this.RetailTotalTax.ToString(),
				(this.WsConnectCharge == null) ? string.Empty : this.WsConnectCharge.ToString(),
				(this.WsBridgeRate == null) ? string.Empty : this.WsBridgeRate.ToString(),
				(this.WsldRate == null) ? string.Empty : this.WsldRate.ToString(),
				(this.WsCurrency == null) ? string.Empty : this.WsCurrency.ToString(),
				this.WsBillingInterval,
				(this.WsTotalConnectCharge == null) ? string.Empty : this.WsTotalConnectCharge.ToString(),
				(this.WsTotalBridge == null) ? string.Empty : this.WsTotalBridge.ToString(),
				(this.WsTotalLd == null) ? string.Empty : this.WsTotalLd.ToString(),
				(this.WsTotal == null) ? string.Empty : this.WsTotal.ToString(),
				(this.WsLocalTaxRate == null) ? string.Empty : this.WsLocalTaxRate.ToString(),
				(this.WsFederalTaxRate == null) ? string.Empty : this.WsFederalTaxRate.ToString(),
				(this.WsLocalTax == null) ? string.Empty : this.WsLocalTax.ToString(),
				(this.WsFederalTax == null) ? string.Empty : this.WsFederalTax.ToString(),
				(this.WsTotalTax == null) ? string.Empty : this.WsTotalTax.ToString(),
				(this.BillingStatus == null) ? string.Empty : this.BillingStatus.ToString(),
				(this.BilledDate == null) ? string.Empty : this.BilledDate.ToString(),
				this.ProcessedDate,
				(this.SeeVoghMeetingId == null) ? string.Empty : this.SeeVoghMeetingId.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'RatedCDR' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class RatedCdrEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "RatedCDR"</remarks>
			public System.Guid Id;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Guid OriginalId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ConferenceID : 
		/// </summary>
		public System.String		  ConferenceId = string.Empty;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32		  ModeratorId = (int)0;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32?		  CustomerId = null;
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = null;
		
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		public System.String		  ModeratorCode = string.Empty;
		
		/// <summary>
		/// PassCode : 
		/// </summary>
		public System.String		  PassCode = string.Empty;
		
		/// <summary>
		/// ModeratorName : 
		/// </summary>
		public System.String		  ModeratorName = null;
		
		/// <summary>
		/// Moderator : 
		/// </summary>
		public System.Int32		  Moderator = (int)0;
		
		/// <summary>
		/// ExternalCustomerNumber : 
		/// </summary>
		public System.String		  ExternalCustomerNumber = null;
		
		/// <summary>
		/// ExternalModeratorNumber : 
		/// </summary>
		public System.String		  ExternalModeratorNumber = null;
		
		/// <summary>
		/// ReferenceNumber : 
		/// </summary>
		public System.String		  ReferenceNumber = null;
		
		/// <summary>
		/// ConferenceStartTime : 
		/// </summary>
		public System.DateTime?		  ConferenceStartTime = null;
		
		/// <summary>
		/// ConferenceEndTime : 
		/// </summary>
		public System.DateTime?		  ConferenceEndTime = null;
		
		/// <summary>
		/// ConferenceElapsedTime : 
		/// </summary>
		public System.Int32?		  ConferenceElapsedTime = null;
		
		/// <summary>
		/// StartTime : 
		/// </summary>
		public System.DateTime		  StartTime = DateTime.MinValue;
		
		/// <summary>
		/// EndTime : 
		/// </summary>
		public System.DateTime		  EndTime = DateTime.MinValue;
		
		/// <summary>
		/// ElapsedTime : 
		/// </summary>
		public System.Int32		  ElapsedTime = (int)0;
		
		/// <summary>
		/// BridgeID : 
		/// </summary>
		public System.Int32		  BridgeId = (int)0;
		
		/// <summary>
		/// UniqueConferenceID : 
		/// </summary>
		public System.String		  UniqueConferenceId = null;
		
		/// <summary>
		/// AuxiliaryConferenceID : 
		/// </summary>
		public System.String		  AuxiliaryConferenceId = null;
		
		/// <summary>
		/// DNIS : 
		/// </summary>
		public System.String		  Dnis = null;
		
		/// <summary>
		/// DialNumber : The number that the user would dial. This can differ from the DNIS greatly.
		/// </summary>
		public System.String		  DialNumber = null;
		
		/// <summary>
		/// ANI : 
		/// </summary>
		public System.String		  Ani = null;
		
		/// <summary>
		/// ParticipantName : 
		/// </summary>
		public System.String		  ParticipantName = null;
		
		/// <summary>
		/// Destination : 
		/// </summary>
		public System.String		  Destination = null;
		
		/// <summary>
		/// AccessTypeID : 
		/// </summary>
		public System.Int32		  AccessTypeId = (int)0;
		
		/// <summary>
		/// ConnectProductRateID : 
		/// </summary>
		public System.Int32		  ConnectProductRateId = (int)0;
		
		/// <summary>
		/// BridgeProductRateID : 
		/// </summary>
		public System.Int32		  BridgeProductRateId = (int)0;
		
		/// <summary>
		/// LDProductRateID : 
		/// </summary>
		public System.Int32		  LdProductRateId = (int)0;
		
		/// <summary>
		/// ProductRateTaxableValue : 
		/// </summary>
		public System.Int32		  ProductRateTaxableValue = (int)0;
		
		/// <summary>
		/// CustomerTaxableValue : 
		/// </summary>
		public System.Int32		  CustomerTaxableValue = (int)0;
		
		/// <summary>
		/// WSTaxableValue : 
		/// </summary>
		public System.Int32		  WsTaxableValue = (int)0;
		
		/// <summary>
		/// RetailConnectCharge : 
		/// </summary>
		public System.Decimal?		  RetailConnectCharge = null;
		
		/// <summary>
		/// RetailBridgeRate : 
		/// </summary>
		public System.Decimal?		  RetailBridgeRate = null;
		
		/// <summary>
		/// RetailLDRate : 
		/// </summary>
		public System.Decimal?		  RetailLdRate = null;
		
		/// <summary>
		/// RetailCurrency : 
		/// </summary>
		public System.String		  RetailCurrency = null;
		
		/// <summary>
		/// RetailBillingInterval : 
		/// </summary>
		public System.Int32		  RetailBillingInterval = (int)0;
		
		/// <summary>
		/// RetailTotalConnectCharge : 
		/// </summary>
		public System.Decimal?		  RetailTotalConnectCharge = null;
		
		/// <summary>
		/// RetailTotalBridge : 
		/// </summary>
		public System.Decimal?		  RetailTotalBridge = null;
		
		/// <summary>
		/// RetailTotalLD : 
		/// </summary>
		public System.Decimal?		  RetailTotalLd = null;
		
		/// <summary>
		/// RetailTotal : 
		/// </summary>
		public System.Decimal?		  RetailTotal = null;
		
		/// <summary>
		/// RetailTotalCredit : This field is used to denote the amount of credit given for each CDR leg as some credits can be done on different services e.g. Audio, or Web on different dates. If this value is set then the RetailTotal will be zeroed out.
		/// </summary>
		public System.Decimal?		  RetailTotalCredit = null;
		
		/// <summary>
		/// RetailLocalTaxRate : 
		/// </summary>
		public System.Decimal?		  RetailLocalTaxRate = null;
		
		/// <summary>
		/// RetailFederalTaxRate : 
		/// </summary>
		public System.Decimal?		  RetailFederalTaxRate = null;
		
		/// <summary>
		/// RetailLocalTax : 
		/// </summary>
		public System.Decimal?		  RetailLocalTax = null;
		
		/// <summary>
		/// RetailFederalTax : 
		/// </summary>
		public System.Decimal?		  RetailFederalTax = null;
		
		/// <summary>
		/// RetailTotalTax : 
		/// </summary>
		public System.Decimal?		  RetailTotalTax = null;
		
		/// <summary>
		/// WSConnectCharge : 
		/// </summary>
		public System.Decimal?		  WsConnectCharge = null;
		
		/// <summary>
		/// WSBridgeRate : 
		/// </summary>
		public System.Decimal?		  WsBridgeRate = null;
		
		/// <summary>
		/// WSLDRate : 
		/// </summary>
		public System.Decimal?		  WsldRate = null;
		
		/// <summary>
		/// WSCurrency : 
		/// </summary>
		public System.String		  WsCurrency = null;
		
		/// <summary>
		/// WSBillingInterval : 
		/// </summary>
		public System.Int32		  WsBillingInterval = (int)0;
		
		/// <summary>
		/// WSTotalConnectCharge : 
		/// </summary>
		public System.Decimal?		  WsTotalConnectCharge = null;
		
		/// <summary>
		/// WSTotalBridge : 
		/// </summary>
		public System.Decimal?		  WsTotalBridge = null;
		
		/// <summary>
		/// WSTotalLD : 
		/// </summary>
		public System.Decimal?		  WsTotalLd = null;
		
		/// <summary>
		/// WSTotal : 
		/// </summary>
		public System.Decimal?		  WsTotal = null;
		
		/// <summary>
		/// WSLocalTaxRate : 
		/// </summary>
		public System.Decimal?		  WsLocalTaxRate = null;
		
		/// <summary>
		/// WSFederalTaxRate : 
		/// </summary>
		public System.Decimal?		  WsFederalTaxRate = null;
		
		/// <summary>
		/// WSLocalTax : 
		/// </summary>
		public System.Decimal?		  WsLocalTax = null;
		
		/// <summary>
		/// WSFederalTax : 
		/// </summary>
		public System.Decimal?		  WsFederalTax = null;
		
		/// <summary>
		/// WSTotalTax : 
		/// </summary>
		public System.Decimal?		  WsTotalTax = null;
		
		/// <summary>
		/// BillingStatus : 
		/// </summary>
		public System.Int16?		  BillingStatus = null;
		
		/// <summary>
		/// BilledDate : 
		/// </summary>
		public System.DateTime?		  BilledDate = null;
		
		/// <summary>
		/// ProcessedDate : 
		/// </summary>
		public System.DateTime		  ProcessedDate = DateTime.MinValue;
		
		/// <summary>
		/// SeeVoghMeetingID : 
		/// </summary>
		public System.String		  SeeVoghMeetingId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private AccessType _accessTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AccessType"/>.
		/// </summary>
		/// <value>The source AccessType for AccessTypeId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual AccessType AccessTypeIdSource
      	{
            get { return this._accessTypeIdSource; }
            set { this._accessTypeIdSource = value; }
      	}
		private Bridge _bridgeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Bridge"/>.
		/// </summary>
		/// <value>The source Bridge for BridgeId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Bridge BridgeIdSource
      	{
            get { return this._bridgeIdSource; }
            set { this._bridgeIdSource = value; }
      	}
		private Moderator _moderatorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Moderator"/>.
		/// </summary>
		/// <value>The source Moderator for ModeratorId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Moderator ModeratorIdSource
      	{
            get { return this._moderatorIdSource; }
            set { this._moderatorIdSource = value; }
      	}
		private Wholesaler _wholesalerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return this._wholesalerIdSource; }
            set { this._wholesalerIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			RatedCdrEntityData _tmp = new RatedCdrEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.ConferenceId = this.ConferenceId;
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.ModeratorCode = this.ModeratorCode;
			_tmp.PassCode = this.PassCode;
			_tmp.ModeratorName = this.ModeratorName;
			_tmp.Moderator = this.Moderator;
			_tmp.ExternalCustomerNumber = this.ExternalCustomerNumber;
			_tmp.ExternalModeratorNumber = this.ExternalModeratorNumber;
			_tmp.ReferenceNumber = this.ReferenceNumber;
			_tmp.ConferenceStartTime = this.ConferenceStartTime;
			_tmp.ConferenceEndTime = this.ConferenceEndTime;
			_tmp.ConferenceElapsedTime = this.ConferenceElapsedTime;
			_tmp.StartTime = this.StartTime;
			_tmp.EndTime = this.EndTime;
			_tmp.ElapsedTime = this.ElapsedTime;
			_tmp.BridgeId = this.BridgeId;
			_tmp.UniqueConferenceId = this.UniqueConferenceId;
			_tmp.AuxiliaryConferenceId = this.AuxiliaryConferenceId;
			_tmp.Dnis = this.Dnis;
			_tmp.DialNumber = this.DialNumber;
			_tmp.Ani = this.Ani;
			_tmp.ParticipantName = this.ParticipantName;
			_tmp.Destination = this.Destination;
			_tmp.AccessTypeId = this.AccessTypeId;
			_tmp.ConnectProductRateId = this.ConnectProductRateId;
			_tmp.BridgeProductRateId = this.BridgeProductRateId;
			_tmp.LdProductRateId = this.LdProductRateId;
			_tmp.ProductRateTaxableValue = this.ProductRateTaxableValue;
			_tmp.CustomerTaxableValue = this.CustomerTaxableValue;
			_tmp.WsTaxableValue = this.WsTaxableValue;
			_tmp.RetailConnectCharge = this.RetailConnectCharge;
			_tmp.RetailBridgeRate = this.RetailBridgeRate;
			_tmp.RetailLdRate = this.RetailLdRate;
			_tmp.RetailCurrency = this.RetailCurrency;
			_tmp.RetailBillingInterval = this.RetailBillingInterval;
			_tmp.RetailTotalConnectCharge = this.RetailTotalConnectCharge;
			_tmp.RetailTotalBridge = this.RetailTotalBridge;
			_tmp.RetailTotalLd = this.RetailTotalLd;
			_tmp.RetailTotal = this.RetailTotal;
			_tmp.RetailTotalCredit = this.RetailTotalCredit;
			_tmp.RetailLocalTaxRate = this.RetailLocalTaxRate;
			_tmp.RetailFederalTaxRate = this.RetailFederalTaxRate;
			_tmp.RetailLocalTax = this.RetailLocalTax;
			_tmp.RetailFederalTax = this.RetailFederalTax;
			_tmp.RetailTotalTax = this.RetailTotalTax;
			_tmp.WsConnectCharge = this.WsConnectCharge;
			_tmp.WsBridgeRate = this.WsBridgeRate;
			_tmp.WsldRate = this.WsldRate;
			_tmp.WsCurrency = this.WsCurrency;
			_tmp.WsBillingInterval = this.WsBillingInterval;
			_tmp.WsTotalConnectCharge = this.WsTotalConnectCharge;
			_tmp.WsTotalBridge = this.WsTotalBridge;
			_tmp.WsTotalLd = this.WsTotalLd;
			_tmp.WsTotal = this.WsTotal;
			_tmp.WsLocalTaxRate = this.WsLocalTaxRate;
			_tmp.WsFederalTaxRate = this.WsFederalTaxRate;
			_tmp.WsLocalTax = this.WsLocalTax;
			_tmp.WsFederalTax = this.WsFederalTax;
			_tmp.WsTotalTax = this.WsTotalTax;
			_tmp.BillingStatus = this.BillingStatus;
			_tmp.BilledDate = this.BilledDate;
			_tmp.ProcessedDate = this.ProcessedDate;
			_tmp.SeeVoghMeetingId = this.SeeVoghMeetingId;
			
			#region Source Parent Composite Entities
			if (this.AccessTypeIdSource != null)
				_tmp.AccessTypeIdSource = MakeCopyOf(this.AccessTypeIdSource) as AccessType;
			if (this.BridgeIdSource != null)
				_tmp.BridgeIdSource = MakeCopyOf(this.BridgeIdSource) as Bridge;
			if (this.ModeratorIdSource != null)
				_tmp.ModeratorIdSource = MakeCopyOf(this.ModeratorIdSource) as Moderator;
			if (this.WholesalerIdSource != null)
				_tmp.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RatedCdrColumn"/> which has raised the event.</param>
		public void OnColumnChanging(RatedCdrColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RatedCdrColumn"/> which has raised the event.</param>
		public void OnColumnChanged(RatedCdrColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RatedCdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(RatedCdrColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				RatedCdrEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new RatedCdrEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RatedCdrColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(RatedCdrColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				RatedCdrEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new RatedCdrEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region RatedCdrEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="RatedCdr"/> object.
	/// </remarks>
	public class RatedCdrEventArgs : System.EventArgs
	{
		private RatedCdrColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the RatedCdrEventArgs class.
		///</summary>
		public RatedCdrEventArgs(RatedCdrColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the RatedCdrEventArgs class.
		///</summary>
		public RatedCdrEventArgs(RatedCdrColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The RatedCdrColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="RatedCdrColumn" />
		public RatedCdrColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all RatedCdr related events.
	///</summary>
	public delegate void RatedCdrEventHandler(object sender, RatedCdrEventArgs e);
	
	#region RatedCdrComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class RatedCdrComparer : System.Collections.Generic.IComparer<RatedCdr>
	{
		RatedCdrColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:RatedCdrComparer"/> class.
        /// </summary>
		public RatedCdrComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:RatedCdrComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public RatedCdrComparer(RatedCdrColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="RatedCdr"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="RatedCdr"/> to compare.</param>
        /// <param name="b">The second <c>RatedCdr</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(RatedCdr a, RatedCdr b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(RatedCdr entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(RatedCdr a, RatedCdr b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public RatedCdrColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region RatedCdrKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="RatedCdr"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class RatedCdrKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the RatedCdrKey class.
		/// </summary>
		public RatedCdrKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the RatedCdrKey class.
		/// </summary>
		public RatedCdrKey(RatedCdrBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the RatedCdrKey class.
		/// </summary>
		public RatedCdrKey(System.Guid _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private RatedCdrBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public RatedCdrBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Guid _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Guid Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Guid) EntityUtil.ChangeType(values["Id"], typeof(System.Guid)) : Guid.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region RatedCdrColumn Enum
	
	/// <summary>
	/// Enumerate the RatedCdr columns.
	/// </summary>
	[Serializable]
	public enum RatedCdrColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Guid), System.Data.DbType.Guid, true, false, false)]
		Id = 1,
		/// <summary>
		/// ConferenceId : 
		/// </summary>
		[EnumTextValue("ConferenceID")]
		[ColumnEnum("ConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		ConferenceId = 2,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ModeratorId = 3,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CustomerId = 4,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		WholesalerId = 5,
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		[EnumTextValue("ModeratorCode")]
		[ColumnEnum("ModeratorCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		ModeratorCode = 6,
		/// <summary>
		/// PassCode : 
		/// </summary>
		[EnumTextValue("PassCode")]
		[ColumnEnum("PassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		PassCode = 7,
		/// <summary>
		/// ModeratorName : 
		/// </summary>
		[EnumTextValue("ModeratorName")]
		[ColumnEnum("ModeratorName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ModeratorName = 8,
		/// <summary>
		/// Moderator : 
		/// </summary>
		[EnumTextValue("Moderator")]
		[ColumnEnum("Moderator", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Moderator = 9,
		/// <summary>
		/// ExternalCustomerNumber : 
		/// </summary>
		[EnumTextValue("ExternalCustomerNumber")]
		[ColumnEnum("ExternalCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ExternalCustomerNumber = 10,
		/// <summary>
		/// ExternalModeratorNumber : 
		/// </summary>
		[EnumTextValue("ExternalModeratorNumber")]
		[ColumnEnum("ExternalModeratorNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ExternalModeratorNumber = 11,
		/// <summary>
		/// ReferenceNumber : 
		/// </summary>
		[EnumTextValue("ReferenceNumber")]
		[ColumnEnum("ReferenceNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ReferenceNumber = 12,
		/// <summary>
		/// ConferenceStartTime : 
		/// </summary>
		[EnumTextValue("ConferenceStartTime")]
		[ColumnEnum("ConferenceStartTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ConferenceStartTime = 13,
		/// <summary>
		/// ConferenceEndTime : 
		/// </summary>
		[EnumTextValue("ConferenceEndTime")]
		[ColumnEnum("ConferenceEndTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ConferenceEndTime = 14,
		/// <summary>
		/// ConferenceElapsedTime : 
		/// </summary>
		[EnumTextValue("ConferenceElapsedTime")]
		[ColumnEnum("ConferenceElapsedTime", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ConferenceElapsedTime = 15,
		/// <summary>
		/// StartTime : 
		/// </summary>
		[EnumTextValue("StartTime")]
		[ColumnEnum("StartTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartTime = 16,
		/// <summary>
		/// EndTime : 
		/// </summary>
		[EnumTextValue("EndTime")]
		[ColumnEnum("EndTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EndTime = 17,
		/// <summary>
		/// ElapsedTime : 
		/// </summary>
		[EnumTextValue("ElapsedTime")]
		[ColumnEnum("ElapsedTime", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ElapsedTime = 18,
		/// <summary>
		/// BridgeId : 
		/// </summary>
		[EnumTextValue("BridgeID")]
		[ColumnEnum("BridgeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		BridgeId = 19,
		/// <summary>
		/// UniqueConferenceId : 
		/// </summary>
		[EnumTextValue("UniqueConferenceID")]
		[ColumnEnum("UniqueConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		UniqueConferenceId = 20,
		/// <summary>
		/// AuxiliaryConferenceId : 
		/// </summary>
		[EnumTextValue("AuxiliaryConferenceID")]
		[ColumnEnum("AuxiliaryConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		AuxiliaryConferenceId = 21,
		/// <summary>
		/// Dnis : 
		/// </summary>
		[EnumTextValue("DNIS")]
		[ColumnEnum("DNIS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Dnis = 22,
		/// <summary>
		/// DialNumber : The number that the user would dial. This can differ from the DNIS greatly.
		/// </summary>
		[EnumTextValue("DialNumber")]
		[ColumnEnum("DialNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		DialNumber = 23,
		/// <summary>
		/// Ani : 
		/// </summary>
		[EnumTextValue("ANI")]
		[ColumnEnum("ANI", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Ani = 24,
		/// <summary>
		/// ParticipantName : 
		/// </summary>
		[EnumTextValue("ParticipantName")]
		[ColumnEnum("ParticipantName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ParticipantName = 25,
		/// <summary>
		/// Destination : 
		/// </summary>
		[EnumTextValue("Destination")]
		[ColumnEnum("Destination", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Destination = 26,
		/// <summary>
		/// AccessTypeId : 
		/// </summary>
		[EnumTextValue("AccessTypeID")]
		[ColumnEnum("AccessTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AccessTypeId = 27,
		/// <summary>
		/// ConnectProductRateId : 
		/// </summary>
		[EnumTextValue("ConnectProductRateID")]
		[ColumnEnum("ConnectProductRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ConnectProductRateId = 28,
		/// <summary>
		/// BridgeProductRateId : 
		/// </summary>
		[EnumTextValue("BridgeProductRateID")]
		[ColumnEnum("BridgeProductRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		BridgeProductRateId = 29,
		/// <summary>
		/// LdProductRateId : 
		/// </summary>
		[EnumTextValue("LDProductRateID")]
		[ColumnEnum("LDProductRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LdProductRateId = 30,
		/// <summary>
		/// ProductRateTaxableValue : 
		/// </summary>
		[EnumTextValue("ProductRateTaxableValue")]
		[ColumnEnum("ProductRateTaxableValue", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductRateTaxableValue = 31,
		/// <summary>
		/// CustomerTaxableValue : 
		/// </summary>
		[EnumTextValue("CustomerTaxableValue")]
		[ColumnEnum("CustomerTaxableValue", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerTaxableValue = 32,
		/// <summary>
		/// WsTaxableValue : 
		/// </summary>
		[EnumTextValue("WSTaxableValue")]
		[ColumnEnum("WSTaxableValue", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		WsTaxableValue = 33,
		/// <summary>
		/// RetailConnectCharge : 
		/// </summary>
		[EnumTextValue("RetailConnectCharge")]
		[ColumnEnum("RetailConnectCharge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailConnectCharge = 34,
		/// <summary>
		/// RetailBridgeRate : 
		/// </summary>
		[EnumTextValue("RetailBridgeRate")]
		[ColumnEnum("RetailBridgeRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailBridgeRate = 35,
		/// <summary>
		/// RetailLdRate : 
		/// </summary>
		[EnumTextValue("RetailLDRate")]
		[ColumnEnum("RetailLDRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailLdRate = 36,
		/// <summary>
		/// RetailCurrency : 
		/// </summary>
		[EnumTextValue("RetailCurrency")]
		[ColumnEnum("RetailCurrency", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 3)]
		RetailCurrency = 37,
		/// <summary>
		/// RetailBillingInterval : 
		/// </summary>
		[EnumTextValue("RetailBillingInterval")]
		[ColumnEnum("RetailBillingInterval", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		RetailBillingInterval = 38,
		/// <summary>
		/// RetailTotalConnectCharge : 
		/// </summary>
		[EnumTextValue("RetailTotalConnectCharge")]
		[ColumnEnum("RetailTotalConnectCharge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalConnectCharge = 39,
		/// <summary>
		/// RetailTotalBridge : 
		/// </summary>
		[EnumTextValue("RetailTotalBridge")]
		[ColumnEnum("RetailTotalBridge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalBridge = 40,
		/// <summary>
		/// RetailTotalLd : 
		/// </summary>
		[EnumTextValue("RetailTotalLD")]
		[ColumnEnum("RetailTotalLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalLd = 41,
		/// <summary>
		/// RetailTotal : 
		/// </summary>
		[EnumTextValue("RetailTotal")]
		[ColumnEnum("RetailTotal", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotal = 42,
		/// <summary>
		/// RetailTotalCredit : This field is used to denote the amount of credit given for each CDR leg as some credits can be done on different services e.g. Audio, or Web on different dates. If this value is set then the RetailTotal will be zeroed out.
		/// </summary>
		[EnumTextValue("RetailTotalCredit")]
		[ColumnEnum("RetailTotalCredit", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalCredit = 43,
		/// <summary>
		/// RetailLocalTaxRate : 
		/// </summary>
		[EnumTextValue("RetailLocalTaxRate")]
		[ColumnEnum("RetailLocalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailLocalTaxRate = 44,
		/// <summary>
		/// RetailFederalTaxRate : 
		/// </summary>
		[EnumTextValue("RetailFederalTaxRate")]
		[ColumnEnum("RetailFederalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailFederalTaxRate = 45,
		/// <summary>
		/// RetailLocalTax : 
		/// </summary>
		[EnumTextValue("RetailLocalTax")]
		[ColumnEnum("RetailLocalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailLocalTax = 46,
		/// <summary>
		/// RetailFederalTax : 
		/// </summary>
		[EnumTextValue("RetailFederalTax")]
		[ColumnEnum("RetailFederalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailFederalTax = 47,
		/// <summary>
		/// RetailTotalTax : 
		/// </summary>
		[EnumTextValue("RetailTotalTax")]
		[ColumnEnum("RetailTotalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		RetailTotalTax = 48,
		/// <summary>
		/// WsConnectCharge : 
		/// </summary>
		[EnumTextValue("WSConnectCharge")]
		[ColumnEnum("WSConnectCharge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsConnectCharge = 49,
		/// <summary>
		/// WsBridgeRate : 
		/// </summary>
		[EnumTextValue("WSBridgeRate")]
		[ColumnEnum("WSBridgeRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsBridgeRate = 50,
		/// <summary>
		/// WsldRate : 
		/// </summary>
		[EnumTextValue("WSLDRate")]
		[ColumnEnum("WSLDRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsldRate = 51,
		/// <summary>
		/// WsCurrency : 
		/// </summary>
		[EnumTextValue("WSCurrency")]
		[ColumnEnum("WSCurrency", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 3)]
		WsCurrency = 52,
		/// <summary>
		/// WsBillingInterval : 
		/// </summary>
		[EnumTextValue("WSBillingInterval")]
		[ColumnEnum("WSBillingInterval", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		WsBillingInterval = 53,
		/// <summary>
		/// WsTotalConnectCharge : 
		/// </summary>
		[EnumTextValue("WSTotalConnectCharge")]
		[ColumnEnum("WSTotalConnectCharge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotalConnectCharge = 54,
		/// <summary>
		/// WsTotalBridge : 
		/// </summary>
		[EnumTextValue("WSTotalBridge")]
		[ColumnEnum("WSTotalBridge", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotalBridge = 55,
		/// <summary>
		/// WsTotalLd : 
		/// </summary>
		[EnumTextValue("WSTotalLD")]
		[ColumnEnum("WSTotalLD", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotalLd = 56,
		/// <summary>
		/// WsTotal : 
		/// </summary>
		[EnumTextValue("WSTotal")]
		[ColumnEnum("WSTotal", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotal = 57,
		/// <summary>
		/// WsLocalTaxRate : 
		/// </summary>
		[EnumTextValue("WSLocalTaxRate")]
		[ColumnEnum("WSLocalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsLocalTaxRate = 58,
		/// <summary>
		/// WsFederalTaxRate : 
		/// </summary>
		[EnumTextValue("WSFederalTaxRate")]
		[ColumnEnum("WSFederalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsFederalTaxRate = 59,
		/// <summary>
		/// WsLocalTax : 
		/// </summary>
		[EnumTextValue("WSLocalTax")]
		[ColumnEnum("WSLocalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsLocalTax = 60,
		/// <summary>
		/// WsFederalTax : 
		/// </summary>
		[EnumTextValue("WSFederalTax")]
		[ColumnEnum("WSFederalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsFederalTax = 61,
		/// <summary>
		/// WsTotalTax : 
		/// </summary>
		[EnumTextValue("WSTotalTax")]
		[ColumnEnum("WSTotalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTotalTax = 62,
		/// <summary>
		/// BillingStatus : 
		/// </summary>
		[EnumTextValue("BillingStatus")]
		[ColumnEnum("BillingStatus", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		BillingStatus = 63,
		/// <summary>
		/// BilledDate : 
		/// </summary>
		[EnumTextValue("BilledDate")]
		[ColumnEnum("BilledDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BilledDate = 64,
		/// <summary>
		/// ProcessedDate : 
		/// </summary>
		[EnumTextValue("ProcessedDate")]
		[ColumnEnum("ProcessedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ProcessedDate = 65,
		/// <summary>
		/// SeeVoghMeetingId : 
		/// </summary>
		[EnumTextValue("SeeVoghMeetingID")]
		[ColumnEnum("SeeVoghMeetingID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		SeeVoghMeetingId = 66
	}//End enum

	#endregion RatedCdrColumn Enum

} // end namespace
