
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AccessType.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'AccessType' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class AccessTypeBase : EntityBase, CONFDB.Entities.IAccessType, IEntityId<AccessTypeKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AccessTypeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AccessTypeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AccessTypeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AccessType> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AccessTypeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AccessTypeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AccessTypeBase"/> instance.
		///</summary>
		public AccessTypeBase()
		{
			this.entityData = new AccessTypeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AccessTypeBase"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_displayName"></param>
		///<param name="_description"></param>
		///<param name="_value"></param>
		///<param name="_retailLdApplicable"></param>
		///<param name="_wholesaleLdApplicable"></param>
		///<param name="_billable"></param>
		///<param name="_enabled"></param>
		public AccessTypeBase(System.String _name, System.String _displayName, System.String _description, 
			System.Int32 _value, System.Boolean _retailLdApplicable, System.Boolean _wholesaleLdApplicable, 
			System.Boolean _billable, System.Boolean _enabled)
		{
			this.entityData = new AccessTypeEntityData();
			this.backupData = null;

			this.Name = _name;
			this.DisplayName = _displayName;
			this.Description = _description;
			this.Value = _value;
			this.RetailLdApplicable = _retailLdApplicable;
			this.WholesaleLdApplicable = _wholesaleLdApplicable;
			this.Billable = _billable;
			this.Enabled = _enabled;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AccessType"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_displayName"></param>
		///<param name="_description"></param>
		///<param name="_value"></param>
		///<param name="_retailLdApplicable"></param>
		///<param name="_wholesaleLdApplicable"></param>
		///<param name="_billable"></param>
		///<param name="_enabled"></param>
		public static AccessType CreateAccessType(System.String _name, System.String _displayName, System.String _description, 
			System.Int32 _value, System.Boolean _retailLdApplicable, System.Boolean _wholesaleLdApplicable, 
			System.Boolean _billable, System.Boolean _enabled)
		{
			AccessType newAccessType = new AccessType();
			newAccessType.Name = _name;
			newAccessType.DisplayName = _displayName;
			newAccessType.Description = _description;
			newAccessType.Value = _value;
			newAccessType.RetailLdApplicable = _retailLdApplicable;
			newAccessType.WholesaleLdApplicable = _wholesaleLdApplicable;
			newAccessType.Billable = _billable;
			newAccessType.Enabled = _enabled;
			return newAccessType;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String DisplayName
		{
			get
			{
				return this.entityData.DisplayName; 
			}
			
			set
			{
				if (this.entityData.DisplayName == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.DisplayName, this.entityData.DisplayName);
				this.entityData.DisplayName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.DisplayName, this.entityData.DisplayName);
				OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 300)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Value property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 Value
		{
			get
			{
				return this.entityData.Value; 
			}
			
			set
			{
				if (this.entityData.Value == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.Value, this.entityData.Value);
				this.entityData.Value = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.Value, this.entityData.Value);
				OnPropertyChanged("Value");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RetailLdApplicable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean RetailLdApplicable
		{
			get
			{
				return this.entityData.RetailLdApplicable; 
			}
			
			set
			{
				if (this.entityData.RetailLdApplicable == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.RetailLdApplicable, this.entityData.RetailLdApplicable);
				this.entityData.RetailLdApplicable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.RetailLdApplicable, this.entityData.RetailLdApplicable);
				OnPropertyChanged("RetailLdApplicable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesaleLdApplicable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean WholesaleLdApplicable
		{
			get
			{
				return this.entityData.WholesaleLdApplicable; 
			}
			
			set
			{
				if (this.entityData.WholesaleLdApplicable == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.WholesaleLdApplicable, this.entityData.WholesaleLdApplicable);
				this.entityData.WholesaleLdApplicable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.WholesaleLdApplicable, this.entityData.WholesaleLdApplicable);
				OnPropertyChanged("WholesaleLdApplicable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Billable property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Billable
		{
			get
			{
				return this.entityData.Billable; 
			}
			
			set
			{
				if (this.entityData.Billable == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.Billable, this.entityData.Billable);
				this.entityData.Billable = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.Billable, this.entityData.Billable);
				OnPropertyChanged("Billable");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Enabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Enabled
		{
			get
			{
				return this.entityData.Enabled; 
			}
			
			set
			{
				if (this.entityData.Enabled == value)
					return;
					
				OnColumnChanging(AccessTypeColumn.Enabled, this.entityData.Enabled);
				this.entityData.Enabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AccessTypeColumn.Enabled, this.entityData.Enabled);
				OnPropertyChanged("Enabled");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Dnis objects
		///	which are related to this object through the relation AccessType_DNIS_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Dnis> DnisCollection
		{
			get { return entityData.DnisCollection; }
			set { entityData.DnisCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AccessType_ProductRate objects
		///	which are related to this object through the relation AccessType_AccessType_ProductRate_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AccessType_ProductRate> AccessType_ProductRateCollection
		{
			get { return entityData.AccessType_ProductRateCollection; }
			set { entityData.AccessType_ProductRateCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RatedCdr objects
		///	which are related to this object through the relation AccessType_RatedCDR_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RatedCdr> RatedCdrCollection
		{
			get { return entityData.RatedCdrCollection; }
			set { entityData.RatedCdrCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Name", "Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Name", "Name", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("DisplayName", "Display Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DisplayName", "Display Name", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Description", "Description", 300));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "AccessType"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "Name", "DisplayName", "Description", "Value", "RetailLDApplicable", "WholesaleLDApplicable", "Billable", "Enabled"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AccessTypeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AccessType) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AccessType>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AccessType);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AccessType Entity 
		///</summary>
		public virtual AccessType Copy()
		{
			//shallow copy entity
			AccessType copy = new AccessType();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.Name = this.Name;
			copy.DisplayName = this.DisplayName;
			copy.Description = this.Description;
			copy.Value = this.Value;
			copy.RetailLdApplicable = this.RetailLdApplicable;
			copy.WholesaleLdApplicable = this.WholesaleLdApplicable;
			copy.Billable = this.Billable;
			copy.Enabled = this.Enabled;
			
		
			//deep copy nested objects
			copy.DnisCollection = (TList<Dnis>) MakeCopyOf(this.DnisCollection); 
			copy.AccessType_ProductRateCollection = (TList<AccessType_ProductRate>) MakeCopyOf(this.AccessType_ProductRateCollection); 
			copy.RatedCdrCollection = (TList<RatedCdr>) MakeCopyOf(this.RatedCdrCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed AccessType Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AccessType DeepCopy()
		{
			return EntityHelper.Clone<AccessType>(this as AccessType);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AccessTypeEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AccessTypeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AccessTypeColumn column)
		{
			switch(column)
			{
					case AccessTypeColumn.Id:
					return entityData.Id != _originalData.Id;
					case AccessTypeColumn.Name:
					return entityData.Name != _originalData.Name;
					case AccessTypeColumn.DisplayName:
					return entityData.DisplayName != _originalData.DisplayName;
					case AccessTypeColumn.Description:
					return entityData.Description != _originalData.Description;
					case AccessTypeColumn.Value:
					return entityData.Value != _originalData.Value;
					case AccessTypeColumn.RetailLdApplicable:
					return entityData.RetailLdApplicable != _originalData.RetailLdApplicable;
					case AccessTypeColumn.WholesaleLdApplicable:
					return entityData.WholesaleLdApplicable != _originalData.WholesaleLdApplicable;
					case AccessTypeColumn.Billable:
					return entityData.Billable != _originalData.Billable;
					case AccessTypeColumn.Enabled:
					return entityData.Enabled != _originalData.Enabled;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.DisplayName != _originalData.DisplayName;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.Value != _originalData.Value;
			result = result || entityData.RetailLdApplicable != _originalData.RetailLdApplicable;
			result = result || entityData.WholesaleLdApplicable != _originalData.WholesaleLdApplicable;
			result = result || entityData.Billable != _originalData.Billable;
			result = result || entityData.Enabled != _originalData.Enabled;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AccessTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is AccessTypeBase)
				return Equals(this, (AccessTypeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AccessTypeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.Name.GetHashCode() ^ 
					this.DisplayName.GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					this.Value.GetHashCode() ^ 
					this.RetailLdApplicable.GetHashCode() ^ 
					this.WholesaleLdApplicable.GetHashCode() ^ 
					this.Billable.GetHashCode() ^ 
					this.Enabled.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AccessTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AccessTypeBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AccessTypeBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AccessTypeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AccessTypeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AccessTypeBase Object1, AccessTypeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.Name != Object2.Name)
				equal = false;
			if (Object1.DisplayName != Object2.DisplayName)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if (Object1.Value != Object2.Value)
				equal = false;
			if (Object1.RetailLdApplicable != Object2.RetailLdApplicable)
				equal = false;
			if (Object1.WholesaleLdApplicable != Object2.WholesaleLdApplicable)
				equal = false;
			if (Object1.Billable != Object2.Billable)
				equal = false;
			if (Object1.Enabled != Object2.Enabled)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AccessTypeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AccessTypeComparer GetComparer()
        {
            return new AccessTypeComparer();
        }
        */

        // Comparer delegates back to AccessType
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AccessType rhs, AccessTypeColumn which)
        {
            switch (which)
            {
            	
            	
            	case AccessTypeColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case AccessTypeColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case AccessTypeColumn.DisplayName:
            		return this.DisplayName.CompareTo(rhs.DisplayName);
            		
            		                 
            	
            	
            	case AccessTypeColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case AccessTypeColumn.Value:
            		return this.Value.CompareTo(rhs.Value);
            		
            		                 
            	
            	
            	case AccessTypeColumn.RetailLdApplicable:
            		return this.RetailLdApplicable.CompareTo(rhs.RetailLdApplicable);
            		
            		                 
            	
            	
            	case AccessTypeColumn.WholesaleLdApplicable:
            		return this.WholesaleLdApplicable.CompareTo(rhs.WholesaleLdApplicable);
            		
            		                 
            	
            	
            	case AccessTypeColumn.Billable:
            		return this.Billable.CompareTo(rhs.Billable);
            		
            		                 
            	
            	
            	case AccessTypeColumn.Enabled:
            		return this.Enabled.CompareTo(rhs.Enabled);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AccessTypeKey> Members
		
		// member variable for the EntityId property
		private AccessTypeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AccessTypeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AccessTypeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AccessType")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{10}{9}- Id: {0}{9}- Name: {1}{9}- DisplayName: {2}{9}- Description: {3}{9}- Value: {4}{9}- RetailLdApplicable: {5}{9}- WholesaleLdApplicable: {6}{9}- Billable: {7}{9}- Enabled: {8}{9}", 
				this.Id,
				this.Name,
				this.DisplayName,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				this.Value,
				this.RetailLdApplicable,
				this.WholesaleLdApplicable,
				this.Billable,
				this.Enabled,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'AccessType' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AccessTypeEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "AccessType"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = string.Empty;
		
		/// <summary>
		/// DisplayName : 
		/// </summary>
		public System.String		  DisplayName = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// Value : 
		/// </summary>
		public System.Int32		  Value = (int)0;
		
		/// <summary>
		/// RetailLDApplicable : 
		/// </summary>
		public System.Boolean		  RetailLdApplicable = false;
		
		/// <summary>
		/// WholesaleLDApplicable : 
		/// </summary>
		public System.Boolean		  WholesaleLdApplicable = false;
		
		/// <summary>
		/// Billable : 
		/// </summary>
		public System.Boolean		  Billable = false;
		
		/// <summary>
		/// Enabled : 
		/// </summary>
		public System.Boolean		  Enabled = false;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region DnisCollection
		
		private TList<Dnis> _dnisAccessTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _dnisAccessTypeId
		/// </summary>	
		public TList<Dnis> DnisCollection
		{
			get
			{
				if (_dnisAccessTypeId == null)
				{
				_dnisAccessTypeId = new TList<Dnis>();
				}
	
				return _dnisAccessTypeId;
			}
			set { _dnisAccessTypeId = value; }
		}
		
		#endregion

		#region AccessType_ProductRateCollection
		
		private TList<AccessType_ProductRate> _accessType_ProductRateAccessTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _accessType_ProductRateAccessTypeId
		/// </summary>	
		public TList<AccessType_ProductRate> AccessType_ProductRateCollection
		{
			get
			{
				if (_accessType_ProductRateAccessTypeId == null)
				{
				_accessType_ProductRateAccessTypeId = new TList<AccessType_ProductRate>();
				}
	
				return _accessType_ProductRateAccessTypeId;
			}
			set { _accessType_ProductRateAccessTypeId = value; }
		}
		
		#endregion

		#region RatedCdrCollection
		
		private TList<RatedCdr> _ratedCdrAccessTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ratedCdrAccessTypeId
		/// </summary>	
		public TList<RatedCdr> RatedCdrCollection
		{
			get
			{
				if (_ratedCdrAccessTypeId == null)
				{
				_ratedCdrAccessTypeId = new TList<RatedCdr>();
				}
	
				return _ratedCdrAccessTypeId;
			}
			set { _ratedCdrAccessTypeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AccessTypeEntityData _tmp = new AccessTypeEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Name = this.Name;
			_tmp.DisplayName = this.DisplayName;
			_tmp.Description = this.Description;
			_tmp.Value = this.Value;
			_tmp.RetailLdApplicable = this.RetailLdApplicable;
			_tmp.WholesaleLdApplicable = this.WholesaleLdApplicable;
			_tmp.Billable = this.Billable;
			_tmp.Enabled = this.Enabled;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._dnisAccessTypeId != null)
				_tmp.DnisCollection = (TList<Dnis>) MakeCopyOf(this.DnisCollection); 
			if (this._accessType_ProductRateAccessTypeId != null)
				_tmp.AccessType_ProductRateCollection = (TList<AccessType_ProductRate>) MakeCopyOf(this.AccessType_ProductRateCollection); 
			if (this._ratedCdrAccessTypeId != null)
				_tmp.RatedCdrCollection = (TList<RatedCdr>) MakeCopyOf(this.RatedCdrCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccessTypeColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AccessTypeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccessTypeColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AccessTypeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccessTypeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(AccessTypeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AccessTypeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AccessTypeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AccessTypeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(AccessTypeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AccessTypeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AccessTypeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AccessTypeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AccessType"/> object.
	/// </remarks>
	public class AccessTypeEventArgs : System.EventArgs
	{
		private AccessTypeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AccessTypeEventArgs class.
		///</summary>
		public AccessTypeEventArgs(AccessTypeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AccessTypeEventArgs class.
		///</summary>
		public AccessTypeEventArgs(AccessTypeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AccessTypeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AccessTypeColumn" />
		public AccessTypeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AccessType related events.
	///</summary>
	public delegate void AccessTypeEventHandler(object sender, AccessTypeEventArgs e);
	
	#region AccessTypeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AccessTypeComparer : System.Collections.Generic.IComparer<AccessType>
	{
		AccessTypeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AccessTypeComparer"/> class.
        /// </summary>
		public AccessTypeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AccessTypeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AccessTypeComparer(AccessTypeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AccessType"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AccessType"/> to compare.</param>
        /// <param name="b">The second <c>AccessType</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AccessType a, AccessType b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AccessType entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AccessType a, AccessType b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AccessTypeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AccessTypeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AccessType"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AccessTypeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AccessTypeKey class.
		/// </summary>
		public AccessTypeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AccessTypeKey class.
		/// </summary>
		public AccessTypeKey(AccessTypeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AccessTypeKey class.
		/// </summary>
		public AccessTypeKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AccessTypeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AccessTypeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AccessTypeColumn Enum
	
	/// <summary>
	/// Enumerate the AccessType columns.
	/// </summary>
	[Serializable]
	public enum AccessTypeColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		Name = 2,
		/// <summary>
		/// DisplayName : 
		/// </summary>
		[EnumTextValue("DisplayName")]
		[ColumnEnum("DisplayName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		DisplayName = 3,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 300)]
		Description = 4,
		/// <summary>
		/// Value : 
		/// </summary>
		[EnumTextValue("Value")]
		[ColumnEnum("Value", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		Value = 5,
		/// <summary>
		/// RetailLdApplicable : 
		/// </summary>
		[EnumTextValue("RetailLDApplicable")]
		[ColumnEnum("RetailLDApplicable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		RetailLdApplicable = 6,
		/// <summary>
		/// WholesaleLdApplicable : 
		/// </summary>
		[EnumTextValue("WholesaleLDApplicable")]
		[ColumnEnum("WholesaleLDApplicable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		WholesaleLdApplicable = 7,
		/// <summary>
		/// Billable : 
		/// </summary>
		[EnumTextValue("Billable")]
		[ColumnEnum("Billable", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Billable = 8,
		/// <summary>
		/// Enabled : 
		/// </summary>
		[EnumTextValue("Enabled")]
		[ColumnEnum("Enabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Enabled = 9
	}//End enum

	#endregion AccessTypeColumn Enum

} // end namespace
