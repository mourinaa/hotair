
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file WelcomeKitRequest.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'WelcomeKitRequest' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class WelcomeKitRequestBase : EntityBase, CONFDB.Entities.IWelcomeKitRequest, IEntityId<WelcomeKitRequestKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private WelcomeKitRequestEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private WelcomeKitRequestEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private WelcomeKitRequestEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<WelcomeKitRequest> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event WelcomeKitRequestEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event WelcomeKitRequestEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="WelcomeKitRequestBase"/> instance.
		///</summary>
		public WelcomeKitRequestBase()
		{
			this.entityData = new WelcomeKitRequestEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="WelcomeKitRequestBase"/> instance.
		///</summary>
		///<param name="_moderatorId"></param>
		///<param name="_notes"></param>
		///<param name="_requestedBy"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModified"></param>
		///<param name="_createdDate"></param>
		///<param name="_requestProcessed"></param>
		///<param name="_requestCompletedDate"></param>
		///<param name="_requestCompletedBy"></param>
		///<param name="_billedDate"></param>
		public WelcomeKitRequestBase(System.Int32 _moderatorId, System.String _notes, 
			System.String _requestedBy, System.String _lastModifiedBy, System.DateTime _lastModified, 
			System.DateTime _createdDate, System.Boolean _requestProcessed, System.DateTime? _requestCompletedDate, 
			System.String _requestCompletedBy, System.DateTime? _billedDate)
		{
			this.entityData = new WelcomeKitRequestEntityData();
			this.backupData = null;

			this.ModeratorId = _moderatorId;
			this.Notes = _notes;
			this.RequestedBy = _requestedBy;
			this.LastModifiedBy = _lastModifiedBy;
			this.LastModified = _lastModified;
			this.CreatedDate = _createdDate;
			this.RequestProcessed = _requestProcessed;
			this.RequestCompletedDate = _requestCompletedDate;
			this.RequestCompletedBy = _requestCompletedBy;
			this.BilledDate = _billedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="WelcomeKitRequest"/> instance.
		///</summary>
		///<param name="_moderatorId"></param>
		///<param name="_notes"></param>
		///<param name="_requestedBy"></param>
		///<param name="_lastModifiedBy"></param>
		///<param name="_lastModified"></param>
		///<param name="_createdDate"></param>
		///<param name="_requestProcessed"></param>
		///<param name="_requestCompletedDate"></param>
		///<param name="_requestCompletedBy"></param>
		///<param name="_billedDate"></param>
		public static WelcomeKitRequest CreateWelcomeKitRequest(System.Int32 _moderatorId, System.String _notes, 
			System.String _requestedBy, System.String _lastModifiedBy, System.DateTime _lastModified, 
			System.DateTime _createdDate, System.Boolean _requestProcessed, System.DateTime? _requestCompletedDate, 
			System.String _requestCompletedBy, System.DateTime? _billedDate)
		{
			WelcomeKitRequest newWelcomeKitRequest = new WelcomeKitRequest();
			newWelcomeKitRequest.ModeratorId = _moderatorId;
			newWelcomeKitRequest.Notes = _notes;
			newWelcomeKitRequest.RequestedBy = _requestedBy;
			newWelcomeKitRequest.LastModifiedBy = _lastModifiedBy;
			newWelcomeKitRequest.LastModified = _lastModified;
			newWelcomeKitRequest.CreatedDate = _createdDate;
			newWelcomeKitRequest.RequestProcessed = _requestProcessed;
			newWelcomeKitRequest.RequestCompletedDate = _requestCompletedDate;
			newWelcomeKitRequest.RequestCompletedBy = _requestCompletedBy;
			newWelcomeKitRequest.BilledDate = _billedDate;
			return newWelcomeKitRequest;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestedBy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String RequestedBy
		{
			get
			{
				return this.entityData.RequestedBy; 
			}
			
			set
			{
				if (this.entityData.RequestedBy == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.RequestedBy, this.entityData.RequestedBy);
				this.entityData.RequestedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.RequestedBy, this.entityData.RequestedBy);
				OnPropertyChanged("RequestedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String LastModifiedBy
		{
			get
			{
				return this.entityData.LastModifiedBy; 
			}
			
			set
			{
				if (this.entityData.LastModifiedBy == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				this.entityData.LastModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.LastModifiedBy, this.entityData.LastModifiedBy);
				OnPropertyChanged("LastModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestProcessed property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean RequestProcessed
		{
			get
			{
				return this.entityData.RequestProcessed; 
			}
			
			set
			{
				if (this.entityData.RequestProcessed == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.RequestProcessed, this.entityData.RequestProcessed);
				this.entityData.RequestProcessed = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.RequestProcessed, this.entityData.RequestProcessed);
				OnPropertyChanged("RequestProcessed");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestCompletedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRequestCompletedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RequestCompletedDate
		{
			get
			{
				return this.entityData.RequestCompletedDate; 
			}
			
			set
			{
				if (this.entityData.RequestCompletedDate == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.RequestCompletedDate, this.entityData.RequestCompletedDate);
				this.entityData.RequestCompletedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.RequestCompletedDate, this.entityData.RequestCompletedDate);
				OnPropertyChanged("RequestCompletedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RequestCompletedBy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String RequestCompletedBy
		{
			get
			{
				return this.entityData.RequestCompletedBy; 
			}
			
			set
			{
				if (this.entityData.RequestCompletedBy == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.RequestCompletedBy, this.entityData.RequestCompletedBy);
				this.entityData.RequestCompletedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.RequestCompletedBy, this.entityData.RequestCompletedBy);
				OnPropertyChanged("RequestCompletedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BilledDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBilledDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BilledDate
		{
			get
			{
				return this.entityData.BilledDate; 
			}
			
			set
			{
				if (this.entityData.BilledDate == value)
					return;
					
				OnColumnChanging(WelcomeKitRequestColumn.BilledDate, this.entityData.BilledDate);
				this.entityData.BilledDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(WelcomeKitRequestColumn.BilledDate, this.entityData.BilledDate);
				OnPropertyChanged("BilledDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Moderator"/>.
		/// </summary>
		/// <value>The source Moderator for ModeratorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Moderator ModeratorIdSource
      	{
            get { return entityData.ModeratorIdSource; }
            set { entityData.ModeratorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Notes", "Notes", 500));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RequestedBy", "Requested By", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("LastModifiedBy", "Last Modified By", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RequestCompletedBy", "Request Completed By", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "WelcomeKitRequest"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "ModeratorID", "Notes", "RequestedBy", "LastModifiedBy", "LastModified", "CreatedDate", "RequestProcessed", "RequestCompletedDate", "RequestCompletedBy", "BilledDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as WelcomeKitRequestEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (WelcomeKitRequest) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<WelcomeKitRequest>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as WelcomeKitRequest);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed WelcomeKitRequest Entity 
		///</summary>
		public virtual WelcomeKitRequest Copy()
		{
			//shallow copy entity
			WelcomeKitRequest copy = new WelcomeKitRequest();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.ModeratorId = this.ModeratorId;
			copy.Notes = this.Notes;
			copy.RequestedBy = this.RequestedBy;
			copy.LastModifiedBy = this.LastModifiedBy;
			copy.LastModified = this.LastModified;
			copy.CreatedDate = this.CreatedDate;
			copy.RequestProcessed = this.RequestProcessed;
			copy.RequestCompletedDate = this.RequestCompletedDate;
			copy.RequestCompletedBy = this.RequestCompletedBy;
			copy.BilledDate = this.BilledDate;
			
			copy.ModeratorIdSource = MakeCopyOf(this.ModeratorIdSource) as Moderator;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed WelcomeKitRequest Entity which is a deep copy of the current entity.
		///</summary>
		public virtual WelcomeKitRequest DeepCopy()
		{
			return EntityHelper.Clone<WelcomeKitRequest>(this as WelcomeKitRequest);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as WelcomeKitRequestEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as WelcomeKitRequestEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(WelcomeKitRequestColumn column)
		{
			switch(column)
			{
					case WelcomeKitRequestColumn.Id:
					return entityData.Id != _originalData.Id;
					case WelcomeKitRequestColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case WelcomeKitRequestColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case WelcomeKitRequestColumn.RequestedBy:
					return entityData.RequestedBy != _originalData.RequestedBy;
					case WelcomeKitRequestColumn.LastModifiedBy:
					return entityData.LastModifiedBy != _originalData.LastModifiedBy;
					case WelcomeKitRequestColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case WelcomeKitRequestColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case WelcomeKitRequestColumn.RequestProcessed:
					return entityData.RequestProcessed != _originalData.RequestProcessed;
					case WelcomeKitRequestColumn.RequestCompletedDate:
					return entityData.RequestCompletedDate != _originalData.RequestCompletedDate;
					case WelcomeKitRequestColumn.RequestCompletedBy:
					return entityData.RequestCompletedBy != _originalData.RequestCompletedBy;
					case WelcomeKitRequestColumn.BilledDate:
					return entityData.BilledDate != _originalData.BilledDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.RequestedBy != _originalData.RequestedBy;
			result = result || entityData.LastModifiedBy != _originalData.LastModifiedBy;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.RequestProcessed != _originalData.RequestProcessed;
			result = result || entityData.RequestCompletedDate != _originalData.RequestCompletedDate;
			result = result || entityData.RequestCompletedBy != _originalData.RequestCompletedBy;
			result = result || entityData.BilledDate != _originalData.BilledDate;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="WelcomeKitRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is WelcomeKitRequestBase)
				return Equals(this, (WelcomeKitRequestBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="WelcomeKitRequestBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.ModeratorId.GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.RequestedBy == null) ? string.Empty : this.RequestedBy.ToString()).GetHashCode() ^ 
					((this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString()).GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					this.RequestProcessed.GetHashCode() ^ 
					((this.RequestCompletedDate == null) ? string.Empty : this.RequestCompletedDate.ToString()).GetHashCode() ^ 
					((this.RequestCompletedBy == null) ? string.Empty : this.RequestCompletedBy.ToString()).GetHashCode() ^ 
					((this.BilledDate == null) ? string.Empty : this.BilledDate.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="WelcomeKitRequestBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(WelcomeKitRequestBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="WelcomeKitRequestBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="WelcomeKitRequestBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="WelcomeKitRequestBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(WelcomeKitRequestBase Object1, WelcomeKitRequestBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.ModeratorId != Object2.ModeratorId)
				equal = false;
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.RequestedBy != null && Object2.RequestedBy != null )
			{
				if (Object1.RequestedBy != Object2.RequestedBy)
					equal = false;
			}
			else if (Object1.RequestedBy == null ^ Object2.RequestedBy == null )
			{
				equal = false;
			}
			if ( Object1.LastModifiedBy != null && Object2.LastModifiedBy != null )
			{
				if (Object1.LastModifiedBy != Object2.LastModifiedBy)
					equal = false;
			}
			else if (Object1.LastModifiedBy == null ^ Object2.LastModifiedBy == null )
			{
				equal = false;
			}
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if (Object1.RequestProcessed != Object2.RequestProcessed)
				equal = false;
			if ( Object1.RequestCompletedDate != null && Object2.RequestCompletedDate != null )
			{
				if (Object1.RequestCompletedDate != Object2.RequestCompletedDate)
					equal = false;
			}
			else if (Object1.RequestCompletedDate == null ^ Object2.RequestCompletedDate == null )
			{
				equal = false;
			}
			if ( Object1.RequestCompletedBy != null && Object2.RequestCompletedBy != null )
			{
				if (Object1.RequestCompletedBy != Object2.RequestCompletedBy)
					equal = false;
			}
			else if (Object1.RequestCompletedBy == null ^ Object2.RequestCompletedBy == null )
			{
				equal = false;
			}
			if ( Object1.BilledDate != null && Object2.BilledDate != null )
			{
				if (Object1.BilledDate != Object2.BilledDate)
					equal = false;
			}
			else if (Object1.BilledDate == null ^ Object2.BilledDate == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((WelcomeKitRequestBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static WelcomeKitRequestComparer GetComparer()
        {
            return new WelcomeKitRequestComparer();
        }
        */

        // Comparer delegates back to WelcomeKitRequest
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(WelcomeKitRequest rhs, WelcomeKitRequestColumn which)
        {
            switch (which)
            {
            	
            	
            	case WelcomeKitRequestColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.ModeratorId:
            		return this.ModeratorId.CompareTo(rhs.ModeratorId);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.RequestedBy:
            		return this.RequestedBy.CompareTo(rhs.RequestedBy);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.LastModifiedBy:
            		return this.LastModifiedBy.CompareTo(rhs.LastModifiedBy);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.RequestProcessed:
            		return this.RequestProcessed.CompareTo(rhs.RequestProcessed);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.RequestCompletedDate:
            		return this.RequestCompletedDate.Value.CompareTo(rhs.RequestCompletedDate.Value);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.RequestCompletedBy:
            		return this.RequestCompletedBy.CompareTo(rhs.RequestCompletedBy);
            		
            		                 
            	
            	
            	case WelcomeKitRequestColumn.BilledDate:
            		return this.BilledDate.Value.CompareTo(rhs.BilledDate.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<WelcomeKitRequestKey> Members
		
		// member variable for the EntityId property
		private WelcomeKitRequestKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual WelcomeKitRequestKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new WelcomeKitRequestKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("WelcomeKitRequest")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- Id: {0}{11}- ModeratorId: {1}{11}- Notes: {2}{11}- RequestedBy: {3}{11}- LastModifiedBy: {4}{11}- LastModified: {5}{11}- CreatedDate: {6}{11}- RequestProcessed: {7}{11}- RequestCompletedDate: {8}{11}- RequestCompletedBy: {9}{11}- BilledDate: {10}{11}", 
				this.Id,
				this.ModeratorId,
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.RequestedBy == null) ? string.Empty : this.RequestedBy.ToString(),
				(this.LastModifiedBy == null) ? string.Empty : this.LastModifiedBy.ToString(),
				this.LastModified,
				this.CreatedDate,
				this.RequestProcessed,
				(this.RequestCompletedDate == null) ? string.Empty : this.RequestCompletedDate.ToString(),
				(this.RequestCompletedBy == null) ? string.Empty : this.RequestCompletedBy.ToString(),
				(this.BilledDate == null) ? string.Empty : this.BilledDate.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'WelcomeKitRequest' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class WelcomeKitRequestEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "WelcomeKitRequest"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32		  ModeratorId = (int)0;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// RequestedBy : 
		/// </summary>
		public System.String		  RequestedBy = null;
		
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		public System.String		  LastModifiedBy = null;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.Now;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.Now;
		
		/// <summary>
		/// RequestProcessed : 
		/// </summary>
		public System.Boolean		  RequestProcessed = false;
		
		/// <summary>
		/// RequestCompletedDate : 
		/// </summary>
		public System.DateTime?		  RequestCompletedDate = null;
		
		/// <summary>
		/// RequestCompletedBy : 
		/// </summary>
		public System.String		  RequestCompletedBy = null;
		
		/// <summary>
		/// BilledDate : 
		/// </summary>
		public System.DateTime?		  BilledDate = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Moderator _moderatorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Moderator"/>.
		/// </summary>
		/// <value>The source Moderator for ModeratorId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Moderator ModeratorIdSource
      	{
            get { return this._moderatorIdSource; }
            set { this._moderatorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			WelcomeKitRequestEntityData _tmp = new WelcomeKitRequestEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.Notes = this.Notes;
			_tmp.RequestedBy = this.RequestedBy;
			_tmp.LastModifiedBy = this.LastModifiedBy;
			_tmp.LastModified = this.LastModified;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.RequestProcessed = this.RequestProcessed;
			_tmp.RequestCompletedDate = this.RequestCompletedDate;
			_tmp.RequestCompletedBy = this.RequestCompletedBy;
			_tmp.BilledDate = this.BilledDate;
			
			#region Source Parent Composite Entities
			if (this.ModeratorIdSource != null)
				_tmp.ModeratorIdSource = MakeCopyOf(this.ModeratorIdSource) as Moderator;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WelcomeKitRequestColumn"/> which has raised the event.</param>
		public void OnColumnChanging(WelcomeKitRequestColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WelcomeKitRequestColumn"/> which has raised the event.</param>
		public void OnColumnChanged(WelcomeKitRequestColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WelcomeKitRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(WelcomeKitRequestColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				WelcomeKitRequestEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new WelcomeKitRequestEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="WelcomeKitRequestColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(WelcomeKitRequestColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				WelcomeKitRequestEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new WelcomeKitRequestEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region WelcomeKitRequestEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="WelcomeKitRequest"/> object.
	/// </remarks>
	public class WelcomeKitRequestEventArgs : System.EventArgs
	{
		private WelcomeKitRequestColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the WelcomeKitRequestEventArgs class.
		///</summary>
		public WelcomeKitRequestEventArgs(WelcomeKitRequestColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the WelcomeKitRequestEventArgs class.
		///</summary>
		public WelcomeKitRequestEventArgs(WelcomeKitRequestColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The WelcomeKitRequestColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="WelcomeKitRequestColumn" />
		public WelcomeKitRequestColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all WelcomeKitRequest related events.
	///</summary>
	public delegate void WelcomeKitRequestEventHandler(object sender, WelcomeKitRequestEventArgs e);
	
	#region WelcomeKitRequestComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class WelcomeKitRequestComparer : System.Collections.Generic.IComparer<WelcomeKitRequest>
	{
		WelcomeKitRequestColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:WelcomeKitRequestComparer"/> class.
        /// </summary>
		public WelcomeKitRequestComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:WelcomeKitRequestComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public WelcomeKitRequestComparer(WelcomeKitRequestColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="WelcomeKitRequest"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="WelcomeKitRequest"/> to compare.</param>
        /// <param name="b">The second <c>WelcomeKitRequest</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(WelcomeKitRequest a, WelcomeKitRequest b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(WelcomeKitRequest entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(WelcomeKitRequest a, WelcomeKitRequest b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public WelcomeKitRequestColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region WelcomeKitRequestKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="WelcomeKitRequest"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class WelcomeKitRequestKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the WelcomeKitRequestKey class.
		/// </summary>
		public WelcomeKitRequestKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the WelcomeKitRequestKey class.
		/// </summary>
		public WelcomeKitRequestKey(WelcomeKitRequestBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the WelcomeKitRequestKey class.
		/// </summary>
		public WelcomeKitRequestKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private WelcomeKitRequestBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public WelcomeKitRequestBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region WelcomeKitRequestColumn Enum
	
	/// <summary>
	/// Enumerate the WelcomeKitRequest columns.
	/// </summary>
	[Serializable]
	public enum WelcomeKitRequestColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ModeratorId = 2,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		Notes = 3,
		/// <summary>
		/// RequestedBy : 
		/// </summary>
		[EnumTextValue("RequestedBy")]
		[ColumnEnum("RequestedBy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		RequestedBy = 4,
		/// <summary>
		/// LastModifiedBy : 
		/// </summary>
		[EnumTextValue("LastModifiedBy")]
		[ColumnEnum("LastModifiedBy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		LastModifiedBy = 5,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 6,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 7,
		/// <summary>
		/// RequestProcessed : 
		/// </summary>
		[EnumTextValue("RequestProcessed")]
		[ColumnEnum("RequestProcessed", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		RequestProcessed = 8,
		/// <summary>
		/// RequestCompletedDate : 
		/// </summary>
		[EnumTextValue("RequestCompletedDate")]
		[ColumnEnum("RequestCompletedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RequestCompletedDate = 9,
		/// <summary>
		/// RequestCompletedBy : 
		/// </summary>
		[EnumTextValue("RequestCompletedBy")]
		[ColumnEnum("RequestCompletedBy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		RequestCompletedBy = 10,
		/// <summary>
		/// BilledDate : 
		/// </summary>
		[EnumTextValue("BilledDate")]
		[ColumnEnum("BilledDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BilledDate = 11
	}//End enum

	#endregion WelcomeKitRequestColumn Enum

} // end namespace
