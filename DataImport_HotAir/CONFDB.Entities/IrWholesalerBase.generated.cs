
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file IrWholesaler.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'IRWholesaler' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class IrWholesalerBase : EntityBase, CONFDB.Entities.IIrWholesaler, IEntityId<IrWholesalerKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private IrWholesalerEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private IrWholesalerEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private IrWholesalerEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<IrWholesaler> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event IrWholesalerEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event IrWholesalerEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="IrWholesalerBase"/> instance.
		///</summary>
		public IrWholesalerBase()
		{
			this.entityData = new IrWholesalerEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="IrWholesalerBase"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_languageId"></param>
		///<param name="_irCustomerId"></param>
		///<param name="_localDnis"></param>
		///<param name="_localDialNumber"></param>
		///<param name="_localAccessType"></param>
		///<param name="_tollFreeDnis"></param>
		///<param name="_tollFreeDialNumber"></param>
		///<param name="_tollFreeAccessType"></param>
		///<param name="_instantReplayUrl"></param>
		///<param name="_storageDuration"></param>
		///<param name="_instantReplayLoginUrl"></param>
		public IrWholesalerBase(System.String _wholesalerId, System.String _languageId, System.String _irCustomerId, 
			System.String _localDnis, System.String _localDialNumber, System.Int32? _localAccessType, 
			System.String _tollFreeDnis, System.String _tollFreeDialNumber, System.Int32? _tollFreeAccessType, 
			System.String _instantReplayUrl, System.Int16? _storageDuration, System.String _instantReplayLoginUrl)
		{
			this.entityData = new IrWholesalerEntityData();
			this.backupData = null;

			this.WholesalerId = _wholesalerId;
			this.LanguageId = _languageId;
			this.IrCustomerId = _irCustomerId;
			this.LocalDnis = _localDnis;
			this.LocalDialNumber = _localDialNumber;
			this.LocalAccessType = _localAccessType;
			this.TollFreeDnis = _tollFreeDnis;
			this.TollFreeDialNumber = _tollFreeDialNumber;
			this.TollFreeAccessType = _tollFreeAccessType;
			this.InstantReplayUrl = _instantReplayUrl;
			this.StorageDuration = _storageDuration;
			this.InstantReplayLoginUrl = _instantReplayLoginUrl;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="IrWholesaler"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_languageId"></param>
		///<param name="_irCustomerId"></param>
		///<param name="_localDnis"></param>
		///<param name="_localDialNumber"></param>
		///<param name="_localAccessType"></param>
		///<param name="_tollFreeDnis"></param>
		///<param name="_tollFreeDialNumber"></param>
		///<param name="_tollFreeAccessType"></param>
		///<param name="_instantReplayUrl"></param>
		///<param name="_storageDuration"></param>
		///<param name="_instantReplayLoginUrl"></param>
		public static IrWholesaler CreateIrWholesaler(System.String _wholesalerId, System.String _languageId, System.String _irCustomerId, 
			System.String _localDnis, System.String _localDialNumber, System.Int32? _localAccessType, 
			System.String _tollFreeDnis, System.String _tollFreeDialNumber, System.Int32? _tollFreeAccessType, 
			System.String _instantReplayUrl, System.Int16? _storageDuration, System.String _instantReplayLoginUrl)
		{
			IrWholesaler newIrWholesaler = new IrWholesaler();
			newIrWholesaler.WholesalerId = _wholesalerId;
			newIrWholesaler.LanguageId = _languageId;
			newIrWholesaler.IrCustomerId = _irCustomerId;
			newIrWholesaler.LocalDnis = _localDnis;
			newIrWholesaler.LocalDialNumber = _localDialNumber;
			newIrWholesaler.LocalAccessType = _localAccessType;
			newIrWholesaler.TollFreeDnis = _tollFreeDnis;
			newIrWholesaler.TollFreeDialNumber = _tollFreeDialNumber;
			newIrWholesaler.TollFreeAccessType = _tollFreeAccessType;
			newIrWholesaler.InstantReplayUrl = _instantReplayUrl;
			newIrWholesaler.StorageDuration = _storageDuration;
			newIrWholesaler.InstantReplayLoginUrl = _instantReplayLoginUrl;
			return newIrWholesaler;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				this.EntityId.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the WholesalerID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the WholesalerID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalWholesalerId
		{
			get { return this.entityData.OriginalWholesalerId; }
			set { this.entityData.OriginalWholesalerId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the LanguageId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 5)]
		public virtual System.String LanguageId
		{
			get
			{
				return this.entityData.LanguageId; 
			}
			
			set
			{
				if (this.entityData.LanguageId == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.LanguageId, this.entityData.LanguageId);
				this.entityData.LanguageId = value;
				this.EntityId.LanguageId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.LanguageId, this.entityData.LanguageId);
				OnPropertyChanged("LanguageId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the LanguageID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the LanguageID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalLanguageId
		{
			get { return this.entityData.OriginalLanguageId; }
			set { this.entityData.OriginalLanguageId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the IrCustomerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String IrCustomerId
		{
			get
			{
				return this.entityData.IrCustomerId; 
			}
			
			set
			{
				if (this.entityData.IrCustomerId == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.IrCustomerId, this.entityData.IrCustomerId);
				this.entityData.IrCustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.IrCustomerId, this.entityData.IrCustomerId);
				OnPropertyChanged("IrCustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalDnis property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 36)]
		public virtual System.String LocalDnis
		{
			get
			{
				return this.entityData.LocalDnis; 
			}
			
			set
			{
				if (this.entityData.LocalDnis == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.LocalDnis, this.entityData.LocalDnis);
				this.entityData.LocalDnis = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.LocalDnis, this.entityData.LocalDnis);
				OnPropertyChanged("LocalDnis");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalDialNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 36)]
		public virtual System.String LocalDialNumber
		{
			get
			{
				return this.entityData.LocalDialNumber; 
			}
			
			set
			{
				if (this.entityData.LocalDialNumber == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.LocalDialNumber, this.entityData.LocalDialNumber);
				this.entityData.LocalDialNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.LocalDialNumber, this.entityData.LocalDialNumber);
				OnPropertyChanged("LocalDialNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalAccessType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsLocalAccessTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? LocalAccessType
		{
			get
			{
				return this.entityData.LocalAccessType; 
			}
			
			set
			{
				if (this.entityData.LocalAccessType == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.LocalAccessType, this.entityData.LocalAccessType);
				this.entityData.LocalAccessType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.LocalAccessType, this.entityData.LocalAccessType);
				OnPropertyChanged("LocalAccessType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TollFreeDnis property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 36)]
		public virtual System.String TollFreeDnis
		{
			get
			{
				return this.entityData.TollFreeDnis; 
			}
			
			set
			{
				if (this.entityData.TollFreeDnis == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.TollFreeDnis, this.entityData.TollFreeDnis);
				this.entityData.TollFreeDnis = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.TollFreeDnis, this.entityData.TollFreeDnis);
				OnPropertyChanged("TollFreeDnis");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TollFreeDialNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 36)]
		public virtual System.String TollFreeDialNumber
		{
			get
			{
				return this.entityData.TollFreeDialNumber; 
			}
			
			set
			{
				if (this.entityData.TollFreeDialNumber == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.TollFreeDialNumber, this.entityData.TollFreeDialNumber);
				this.entityData.TollFreeDialNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.TollFreeDialNumber, this.entityData.TollFreeDialNumber);
				OnPropertyChanged("TollFreeDialNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TollFreeAccessType property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsTollFreeAccessTypeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? TollFreeAccessType
		{
			get
			{
				return this.entityData.TollFreeAccessType; 
			}
			
			set
			{
				if (this.entityData.TollFreeAccessType == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.TollFreeAccessType, this.entityData.TollFreeAccessType);
				this.entityData.TollFreeAccessType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.TollFreeAccessType, this.entityData.TollFreeAccessType);
				OnPropertyChanged("TollFreeAccessType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InstantReplayUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String InstantReplayUrl
		{
			get
			{
				return this.entityData.InstantReplayUrl; 
			}
			
			set
			{
				if (this.entityData.InstantReplayUrl == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.InstantReplayUrl, this.entityData.InstantReplayUrl);
				this.entityData.InstantReplayUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.InstantReplayUrl, this.entityData.InstantReplayUrl);
				OnPropertyChanged("InstantReplayUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StorageDuration property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsStorageDurationNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? StorageDuration
		{
			get
			{
				return this.entityData.StorageDuration; 
			}
			
			set
			{
				if (this.entityData.StorageDuration == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.StorageDuration, this.entityData.StorageDuration);
				this.entityData.StorageDuration = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.StorageDuration, this.entityData.StorageDuration);
				OnPropertyChanged("StorageDuration");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InstantReplayLoginUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String InstantReplayLoginUrl
		{
			get
			{
				return this.entityData.InstantReplayLoginUrl; 
			}
			
			set
			{
				if (this.entityData.InstantReplayLoginUrl == value)
					return;
					
				OnColumnChanging(IrWholesalerColumn.InstantReplayLoginUrl, this.entityData.InstantReplayLoginUrl);
				this.entityData.InstantReplayLoginUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(IrWholesalerColumn.InstantReplayLoginUrl, this.entityData.InstantReplayLoginUrl);
				OnPropertyChanged("InstantReplayLoginUrl");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return entityData.WholesalerIdSource; }
            set { entityData.WholesalerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Language"/>.
		/// </summary>
		/// <value>The source Language for LanguageId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Language LanguageIdSource
      	{
            get { return entityData.LanguageIdSource; }
            set { entityData.LanguageIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("LanguageId", "Language Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("LanguageId", "Language Id", 5));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("IrCustomerId", "Ir Customer Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("IrCustomerId", "Ir Customer Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("LocalDnis", "Local Dnis", 36));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("LocalDialNumber", "Local Dial Number", 36));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TollFreeDnis", "Toll Free Dnis", 36));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TollFreeDialNumber", "Toll Free Dial Number", 36));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("InstantReplayUrl", "Instant Replay Url", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("InstantReplayLoginUrl", "Instant Replay Login Url", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "IRWholesaler"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"WholesalerID", "LanguageID", "IRCustomerID", "LocalDNIS", "LocalDialNumber", "LocalAccessType", "TollFreeDNIS", "TollFreeDialNumber", "TollFreeAccessType", "InstantReplayURL", "StorageDuration", "InstantReplayLoginURL"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as IrWholesalerEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (IrWholesaler) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<IrWholesaler>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as IrWholesaler);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed IrWholesaler Entity 
		///</summary>
		public virtual IrWholesaler Copy()
		{
			//shallow copy entity
			IrWholesaler copy = new IrWholesaler();
			copy.SuppressEntityEvents = true;
			copy.WholesalerId = this.WholesalerId;
			copy.OriginalWholesalerId = this.OriginalWholesalerId;
			copy.LanguageId = this.LanguageId;
			copy.OriginalLanguageId = this.OriginalLanguageId;
			copy.IrCustomerId = this.IrCustomerId;
			copy.LocalDnis = this.LocalDnis;
			copy.LocalDialNumber = this.LocalDialNumber;
			copy.LocalAccessType = this.LocalAccessType;
			copy.TollFreeDnis = this.TollFreeDnis;
			copy.TollFreeDialNumber = this.TollFreeDialNumber;
			copy.TollFreeAccessType = this.TollFreeAccessType;
			copy.InstantReplayUrl = this.InstantReplayUrl;
			copy.StorageDuration = this.StorageDuration;
			copy.InstantReplayLoginUrl = this.InstantReplayLoginUrl;
			
			copy.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			copy.LanguageIdSource = MakeCopyOf(this.LanguageIdSource) as Language;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed IrWholesaler Entity which is a deep copy of the current entity.
		///</summary>
		public virtual IrWholesaler DeepCopy()
		{
			return EntityHelper.Clone<IrWholesaler>(this as IrWholesaler);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as IrWholesalerEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as IrWholesalerEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(IrWholesalerColumn column)
		{
			switch(column)
			{
					case IrWholesalerColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case IrWholesalerColumn.LanguageId:
					return entityData.LanguageId != _originalData.LanguageId;
					case IrWholesalerColumn.IrCustomerId:
					return entityData.IrCustomerId != _originalData.IrCustomerId;
					case IrWholesalerColumn.LocalDnis:
					return entityData.LocalDnis != _originalData.LocalDnis;
					case IrWholesalerColumn.LocalDialNumber:
					return entityData.LocalDialNumber != _originalData.LocalDialNumber;
					case IrWholesalerColumn.LocalAccessType:
					return entityData.LocalAccessType != _originalData.LocalAccessType;
					case IrWholesalerColumn.TollFreeDnis:
					return entityData.TollFreeDnis != _originalData.TollFreeDnis;
					case IrWholesalerColumn.TollFreeDialNumber:
					return entityData.TollFreeDialNumber != _originalData.TollFreeDialNumber;
					case IrWholesalerColumn.TollFreeAccessType:
					return entityData.TollFreeAccessType != _originalData.TollFreeAccessType;
					case IrWholesalerColumn.InstantReplayUrl:
					return entityData.InstantReplayUrl != _originalData.InstantReplayUrl;
					case IrWholesalerColumn.StorageDuration:
					return entityData.StorageDuration != _originalData.StorageDuration;
					case IrWholesalerColumn.InstantReplayLoginUrl:
					return entityData.InstantReplayLoginUrl != _originalData.InstantReplayLoginUrl;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.LanguageId != _originalData.LanguageId;
			result = result || entityData.IrCustomerId != _originalData.IrCustomerId;
			result = result || entityData.LocalDnis != _originalData.LocalDnis;
			result = result || entityData.LocalDialNumber != _originalData.LocalDialNumber;
			result = result || entityData.LocalAccessType != _originalData.LocalAccessType;
			result = result || entityData.TollFreeDnis != _originalData.TollFreeDnis;
			result = result || entityData.TollFreeDialNumber != _originalData.TollFreeDialNumber;
			result = result || entityData.TollFreeAccessType != _originalData.TollFreeAccessType;
			result = result || entityData.InstantReplayUrl != _originalData.InstantReplayUrl;
			result = result || entityData.StorageDuration != _originalData.StorageDuration;
			result = result || entityData.InstantReplayLoginUrl != _originalData.InstantReplayLoginUrl;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="IrWholesalerBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is IrWholesalerBase)
				return Equals(this, (IrWholesalerBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="IrWholesalerBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.WholesalerId.GetHashCode() ^ 
					this.LanguageId.GetHashCode() ^ 
					this.IrCustomerId.GetHashCode() ^ 
					((this.LocalDnis == null) ? string.Empty : this.LocalDnis.ToString()).GetHashCode() ^ 
					((this.LocalDialNumber == null) ? string.Empty : this.LocalDialNumber.ToString()).GetHashCode() ^ 
					((this.LocalAccessType == null) ? string.Empty : this.LocalAccessType.ToString()).GetHashCode() ^ 
					((this.TollFreeDnis == null) ? string.Empty : this.TollFreeDnis.ToString()).GetHashCode() ^ 
					((this.TollFreeDialNumber == null) ? string.Empty : this.TollFreeDialNumber.ToString()).GetHashCode() ^ 
					((this.TollFreeAccessType == null) ? string.Empty : this.TollFreeAccessType.ToString()).GetHashCode() ^ 
					((this.InstantReplayUrl == null) ? string.Empty : this.InstantReplayUrl.ToString()).GetHashCode() ^ 
					((this.StorageDuration == null) ? string.Empty : this.StorageDuration.ToString()).GetHashCode() ^ 
					((this.InstantReplayLoginUrl == null) ? string.Empty : this.InstantReplayLoginUrl.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="IrWholesalerBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(IrWholesalerBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="IrWholesalerBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="IrWholesalerBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="IrWholesalerBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(IrWholesalerBase Object1, IrWholesalerBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.LanguageId != Object2.LanguageId)
				equal = false;
			if (Object1.IrCustomerId != Object2.IrCustomerId)
				equal = false;
			if ( Object1.LocalDnis != null && Object2.LocalDnis != null )
			{
				if (Object1.LocalDnis != Object2.LocalDnis)
					equal = false;
			}
			else if (Object1.LocalDnis == null ^ Object2.LocalDnis == null )
			{
				equal = false;
			}
			if ( Object1.LocalDialNumber != null && Object2.LocalDialNumber != null )
			{
				if (Object1.LocalDialNumber != Object2.LocalDialNumber)
					equal = false;
			}
			else if (Object1.LocalDialNumber == null ^ Object2.LocalDialNumber == null )
			{
				equal = false;
			}
			if ( Object1.LocalAccessType != null && Object2.LocalAccessType != null )
			{
				if (Object1.LocalAccessType != Object2.LocalAccessType)
					equal = false;
			}
			else if (Object1.LocalAccessType == null ^ Object2.LocalAccessType == null )
			{
				equal = false;
			}
			if ( Object1.TollFreeDnis != null && Object2.TollFreeDnis != null )
			{
				if (Object1.TollFreeDnis != Object2.TollFreeDnis)
					equal = false;
			}
			else if (Object1.TollFreeDnis == null ^ Object2.TollFreeDnis == null )
			{
				equal = false;
			}
			if ( Object1.TollFreeDialNumber != null && Object2.TollFreeDialNumber != null )
			{
				if (Object1.TollFreeDialNumber != Object2.TollFreeDialNumber)
					equal = false;
			}
			else if (Object1.TollFreeDialNumber == null ^ Object2.TollFreeDialNumber == null )
			{
				equal = false;
			}
			if ( Object1.TollFreeAccessType != null && Object2.TollFreeAccessType != null )
			{
				if (Object1.TollFreeAccessType != Object2.TollFreeAccessType)
					equal = false;
			}
			else if (Object1.TollFreeAccessType == null ^ Object2.TollFreeAccessType == null )
			{
				equal = false;
			}
			if ( Object1.InstantReplayUrl != null && Object2.InstantReplayUrl != null )
			{
				if (Object1.InstantReplayUrl != Object2.InstantReplayUrl)
					equal = false;
			}
			else if (Object1.InstantReplayUrl == null ^ Object2.InstantReplayUrl == null )
			{
				equal = false;
			}
			if ( Object1.StorageDuration != null && Object2.StorageDuration != null )
			{
				if (Object1.StorageDuration != Object2.StorageDuration)
					equal = false;
			}
			else if (Object1.StorageDuration == null ^ Object2.StorageDuration == null )
			{
				equal = false;
			}
			if ( Object1.InstantReplayLoginUrl != null && Object2.InstantReplayLoginUrl != null )
			{
				if (Object1.InstantReplayLoginUrl != Object2.InstantReplayLoginUrl)
					equal = false;
			}
			else if (Object1.InstantReplayLoginUrl == null ^ Object2.InstantReplayLoginUrl == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((IrWholesalerBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static IrWholesalerComparer GetComparer()
        {
            return new IrWholesalerComparer();
        }
        */

        // Comparer delegates back to IrWholesaler
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(IrWholesaler rhs, IrWholesalerColumn which)
        {
            switch (which)
            {
            	
            	
            	case IrWholesalerColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.LanguageId:
            		return this.LanguageId.CompareTo(rhs.LanguageId);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.IrCustomerId:
            		return this.IrCustomerId.CompareTo(rhs.IrCustomerId);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.LocalDnis:
            		return this.LocalDnis.CompareTo(rhs.LocalDnis);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.LocalDialNumber:
            		return this.LocalDialNumber.CompareTo(rhs.LocalDialNumber);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.LocalAccessType:
            		return this.LocalAccessType.Value.CompareTo(rhs.LocalAccessType.Value);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.TollFreeDnis:
            		return this.TollFreeDnis.CompareTo(rhs.TollFreeDnis);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.TollFreeDialNumber:
            		return this.TollFreeDialNumber.CompareTo(rhs.TollFreeDialNumber);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.TollFreeAccessType:
            		return this.TollFreeAccessType.Value.CompareTo(rhs.TollFreeAccessType.Value);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.InstantReplayUrl:
            		return this.InstantReplayUrl.CompareTo(rhs.InstantReplayUrl);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.StorageDuration:
            		return this.StorageDuration.Value.CompareTo(rhs.StorageDuration.Value);
            		
            		                 
            	
            	
            	case IrWholesalerColumn.InstantReplayLoginUrl:
            		return this.InstantReplayLoginUrl.CompareTo(rhs.InstantReplayLoginUrl);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<IrWholesalerKey> Members
		
		// member variable for the EntityId property
		private IrWholesalerKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual IrWholesalerKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new IrWholesalerKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("IrWholesaler")
					.Append("|").Append( this.WholesalerId.ToString())
					.Append("|").Append( this.LanguageId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- WholesalerId: {0}{12}- LanguageId: {1}{12}- IrCustomerId: {2}{12}- LocalDnis: {3}{12}- LocalDialNumber: {4}{12}- LocalAccessType: {5}{12}- TollFreeDnis: {6}{12}- TollFreeDialNumber: {7}{12}- TollFreeAccessType: {8}{12}- InstantReplayUrl: {9}{12}- StorageDuration: {10}{12}- InstantReplayLoginUrl: {11}{12}", 
				this.WholesalerId,
				this.LanguageId,
				this.IrCustomerId,
				(this.LocalDnis == null) ? string.Empty : this.LocalDnis.ToString(),
				(this.LocalDialNumber == null) ? string.Empty : this.LocalDialNumber.ToString(),
				(this.LocalAccessType == null) ? string.Empty : this.LocalAccessType.ToString(),
				(this.TollFreeDnis == null) ? string.Empty : this.TollFreeDnis.ToString(),
				(this.TollFreeDialNumber == null) ? string.Empty : this.TollFreeDialNumber.ToString(),
				(this.TollFreeAccessType == null) ? string.Empty : this.TollFreeAccessType.ToString(),
				(this.InstantReplayUrl == null) ? string.Empty : this.InstantReplayUrl.ToString(),
				(this.StorageDuration == null) ? string.Empty : this.StorageDuration.ToString(),
				(this.InstantReplayLoginUrl == null) ? string.Empty : this.InstantReplayLoginUrl.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'IRWholesaler' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class IrWholesalerEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// WholesalerID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "IRWholesaler"</remarks>
			public System.String WholesalerId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalWholesalerId;
			
			/// <summary>			
			/// LanguageID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "IRWholesaler"</remarks>
			public System.String LanguageId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalLanguageId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// IRCustomerID : 
		/// </summary>
		public System.String		  IrCustomerId = string.Empty;
		
		/// <summary>
		/// LocalDNIS : 
		/// </summary>
		public System.String		  LocalDnis = null;
		
		/// <summary>
		/// LocalDialNumber : 
		/// </summary>
		public System.String		  LocalDialNumber = null;
		
		/// <summary>
		/// LocalAccessType : 
		/// </summary>
		public System.Int32?		  LocalAccessType = null;
		
		/// <summary>
		/// TollFreeDNIS : 
		/// </summary>
		public System.String		  TollFreeDnis = null;
		
		/// <summary>
		/// TollFreeDialNumber : 
		/// </summary>
		public System.String		  TollFreeDialNumber = null;
		
		/// <summary>
		/// TollFreeAccessType : 
		/// </summary>
		public System.Int32?		  TollFreeAccessType = null;
		
		/// <summary>
		/// InstantReplayURL : 
		/// </summary>
		public System.String		  InstantReplayUrl = null;
		
		/// <summary>
		/// StorageDuration : 
		/// </summary>
		public System.Int16?		  StorageDuration = null;
		
		/// <summary>
		/// InstantReplayLoginURL : 
		/// </summary>
		public System.String		  InstantReplayLoginUrl = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Wholesaler _wholesalerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return this._wholesalerIdSource; }
            set { this._wholesalerIdSource = value; }
      	}
		private Language _languageIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Language"/>.
		/// </summary>
		/// <value>The source Language for LanguageId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Language LanguageIdSource
      	{
            get { return this._languageIdSource; }
            set { this._languageIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			IrWholesalerEntityData _tmp = new IrWholesalerEntityData();
						
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.OriginalWholesalerId = this.OriginalWholesalerId;
			_tmp.LanguageId = this.LanguageId;
			_tmp.OriginalLanguageId = this.OriginalLanguageId;
			
			_tmp.IrCustomerId = this.IrCustomerId;
			_tmp.LocalDnis = this.LocalDnis;
			_tmp.LocalDialNumber = this.LocalDialNumber;
			_tmp.LocalAccessType = this.LocalAccessType;
			_tmp.TollFreeDnis = this.TollFreeDnis;
			_tmp.TollFreeDialNumber = this.TollFreeDialNumber;
			_tmp.TollFreeAccessType = this.TollFreeAccessType;
			_tmp.InstantReplayUrl = this.InstantReplayUrl;
			_tmp.StorageDuration = this.StorageDuration;
			_tmp.InstantReplayLoginUrl = this.InstantReplayLoginUrl;
			
			#region Source Parent Composite Entities
			if (this.WholesalerIdSource != null)
				_tmp.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			if (this.LanguageIdSource != null)
				_tmp.LanguageIdSource = MakeCopyOf(this.LanguageIdSource) as Language;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IrWholesalerColumn"/> which has raised the event.</param>
		public void OnColumnChanging(IrWholesalerColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IrWholesalerColumn"/> which has raised the event.</param>
		public void OnColumnChanged(IrWholesalerColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IrWholesalerColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(IrWholesalerColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				IrWholesalerEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new IrWholesalerEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="IrWholesalerColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(IrWholesalerColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				IrWholesalerEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new IrWholesalerEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region IrWholesalerEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="IrWholesaler"/> object.
	/// </remarks>
	public class IrWholesalerEventArgs : System.EventArgs
	{
		private IrWholesalerColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the IrWholesalerEventArgs class.
		///</summary>
		public IrWholesalerEventArgs(IrWholesalerColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the IrWholesalerEventArgs class.
		///</summary>
		public IrWholesalerEventArgs(IrWholesalerColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The IrWholesalerColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="IrWholesalerColumn" />
		public IrWholesalerColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all IrWholesaler related events.
	///</summary>
	public delegate void IrWholesalerEventHandler(object sender, IrWholesalerEventArgs e);
	
	#region IrWholesalerComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class IrWholesalerComparer : System.Collections.Generic.IComparer<IrWholesaler>
	{
		IrWholesalerColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:IrWholesalerComparer"/> class.
        /// </summary>
		public IrWholesalerComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:IrWholesalerComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public IrWholesalerComparer(IrWholesalerColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="IrWholesaler"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="IrWholesaler"/> to compare.</param>
        /// <param name="b">The second <c>IrWholesaler</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(IrWholesaler a, IrWholesaler b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(IrWholesaler entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(IrWholesaler a, IrWholesaler b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public IrWholesalerColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region IrWholesalerKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="IrWholesaler"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class IrWholesalerKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the IrWholesalerKey class.
		/// </summary>
		public IrWholesalerKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the IrWholesalerKey class.
		/// </summary>
		public IrWholesalerKey(IrWholesalerBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.WholesalerId = entity.WholesalerId;
				this.LanguageId = entity.LanguageId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the IrWholesalerKey class.
		/// </summary>
		public IrWholesalerKey(System.String _wholesalerId, System.String _languageId)
		{
			#region Init Properties

			this.WholesalerId = _wholesalerId;
			this.LanguageId = _languageId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private IrWholesalerBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public IrWholesalerBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the WholesalerId property
		private System.String _wholesalerId;
		
		/// <summary>
		/// Gets or sets the WholesalerId property.
		/// </summary>
		public System.String WholesalerId
		{
			get { return _wholesalerId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.WholesalerId = value;
				
				_wholesalerId = value;
			}
		}
		
		// member variable for the LanguageId property
		private System.String _languageId;
		
		/// <summary>
		/// Gets or sets the LanguageId property.
		/// </summary>
		public System.String LanguageId
		{
			get { return _languageId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.LanguageId = value;
				
				_languageId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				WholesalerId = ( values["WholesalerId"] != null ) ? (System.String) EntityUtil.ChangeType(values["WholesalerId"], typeof(System.String)) : string.Empty;
				LanguageId = ( values["LanguageId"] != null ) ? (System.String) EntityUtil.ChangeType(values["LanguageId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("WholesalerId", WholesalerId);
			values.Add("LanguageId", LanguageId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("WholesalerId: {0}{2}LanguageId: {1}{2}",
								WholesalerId,
								LanguageId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region IrWholesalerColumn Enum
	
	/// <summary>
	/// Enumerate the IrWholesaler columns.
	/// </summary>
	[Serializable]
	public enum IrWholesalerColumn : int
	{
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 10)]
		WholesalerId = 1,
		/// <summary>
		/// LanguageId : 
		/// </summary>
		[EnumTextValue("LanguageID")]
		[ColumnEnum("LanguageID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 5)]
		LanguageId = 2,
		/// <summary>
		/// IrCustomerId : 
		/// </summary>
		[EnumTextValue("IRCustomerID")]
		[ColumnEnum("IRCustomerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		IrCustomerId = 3,
		/// <summary>
		/// LocalDnis : 
		/// </summary>
		[EnumTextValue("LocalDNIS")]
		[ColumnEnum("LocalDNIS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 36)]
		LocalDnis = 4,
		/// <summary>
		/// LocalDialNumber : 
		/// </summary>
		[EnumTextValue("LocalDialNumber")]
		[ColumnEnum("LocalDialNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 36)]
		LocalDialNumber = 5,
		/// <summary>
		/// LocalAccessType : 
		/// </summary>
		[EnumTextValue("LocalAccessType")]
		[ColumnEnum("LocalAccessType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		LocalAccessType = 6,
		/// <summary>
		/// TollFreeDnis : 
		/// </summary>
		[EnumTextValue("TollFreeDNIS")]
		[ColumnEnum("TollFreeDNIS", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 36)]
		TollFreeDnis = 7,
		/// <summary>
		/// TollFreeDialNumber : 
		/// </summary>
		[EnumTextValue("TollFreeDialNumber")]
		[ColumnEnum("TollFreeDialNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 36)]
		TollFreeDialNumber = 8,
		/// <summary>
		/// TollFreeAccessType : 
		/// </summary>
		[EnumTextValue("TollFreeAccessType")]
		[ColumnEnum("TollFreeAccessType", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		TollFreeAccessType = 9,
		/// <summary>
		/// InstantReplayUrl : 
		/// </summary>
		[EnumTextValue("InstantReplayURL")]
		[ColumnEnum("InstantReplayURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		InstantReplayUrl = 10,
		/// <summary>
		/// StorageDuration : 
		/// </summary>
		[EnumTextValue("StorageDuration")]
		[ColumnEnum("StorageDuration", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		StorageDuration = 11,
		/// <summary>
		/// InstantReplayLoginUrl : 
		/// </summary>
		[EnumTextValue("InstantReplayLoginURL")]
		[ColumnEnum("InstantReplayLoginURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		InstantReplayLoginUrl = 12
	}//End enum

	#endregion IrWholesalerColumn Enum

} // end namespace
