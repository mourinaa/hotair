
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file User.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'User' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class UserBase : EntityBase, CONFDB.Entities.IUser, IEntityId<UserKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private UserEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private UserEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private UserEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<User> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event UserEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event UserEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="UserBase"/> instance.
		///</summary>
		public UserBase()
		{
			this.entityData = new UserEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="UserBase"/> instance.
		///</summary>
		///<param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
		///<param name="_password"></param>
		///<param name="_displayName"></param>
		///<param name="_email"></param>
		///<param name="_telephone"></param>
		///<param name="_enabled">Denotes if the user is active or not. Default is Disabled for security reasons.</param>
		///<param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
		///<param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
		///<param name="_roleId">Used to denote the role of the user.</param>
		///<param name="_mustChangePassword">Denotes if the user is forced to change their password.</param>
		///<param name="_address1"></param>
		///<param name="_address2"></param>
		///<param name="_city"></param>
		///<param name="_country"></param>
		///<param name="_region"></param>
		///<param name="_postalCode"></param>
		///<param name="_charityId"></param>
		///<param name="_webMemberId"></param>
		///<param name="_userUniqueId"></param>
		public UserBase(System.String _username, System.String _password, System.String _displayName, 
			System.String _email, System.String _telephone, System.Boolean _enabled, System.Int32? _companyId, System.Int32? _salesPersonId, 
			System.Int32? _roleId, System.Boolean? _mustChangePassword, System.String _address1, System.String _address2, 
			System.String _city, System.String _country, System.String _region, System.String _postalCode, System.Int32? _charityId, 
			System.String _webMemberId, System.Guid _userUniqueId)
		{
			this.entityData = new UserEntityData();
			this.backupData = null;

			this.Username = _username;
			this.Password = _password;
			this.DisplayName = _displayName;
			this.Email = _email;
			this.Telephone = _telephone;
			this.Enabled = _enabled;
			this.CompanyId = _companyId;
			this.SalesPersonId = _salesPersonId;
			this.RoleId = _roleId;
			this.MustChangePassword = _mustChangePassword;
			this.Address1 = _address1;
			this.Address2 = _address2;
			this.City = _city;
			this.Country = _country;
			this.Region = _region;
			this.PostalCode = _postalCode;
			this.CharityId = _charityId;
			this.WebMemberId = _webMemberId;
			this.UserUniqueId = _userUniqueId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="User"/> instance.
		///</summary>
		///<param name="_username">Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.</param>
		///<param name="_password"></param>
		///<param name="_displayName"></param>
		///<param name="_email"></param>
		///<param name="_telephone"></param>
		///<param name="_enabled">Denotes if the user is active or not. Default is Disabled for security reasons.</param>
		///<param name="_companyId">Used for the Company Admin role and links to the company the user is associated with to restrict data access.</param>
		///<param name="_salesPersonId">Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.</param>
		///<param name="_roleId">Used to denote the role of the user.</param>
		///<param name="_mustChangePassword">Denotes if the user is forced to change their password.</param>
		///<param name="_address1"></param>
		///<param name="_address2"></param>
		///<param name="_city"></param>
		///<param name="_country"></param>
		///<param name="_region"></param>
		///<param name="_postalCode"></param>
		///<param name="_charityId"></param>
		///<param name="_webMemberId"></param>
		///<param name="_userUniqueId"></param>
		public static User CreateUser(System.String _username, System.String _password, System.String _displayName, 
			System.String _email, System.String _telephone, System.Boolean _enabled, System.Int32? _companyId, System.Int32? _salesPersonId, 
			System.Int32? _roleId, System.Boolean? _mustChangePassword, System.String _address1, System.String _address2, 
			System.String _city, System.String _country, System.String _region, System.String _postalCode, System.Int32? _charityId, 
			System.String _webMemberId, System.Guid _userUniqueId)
		{
			User newUser = new User();
			newUser.Username = _username;
			newUser.Password = _password;
			newUser.DisplayName = _displayName;
			newUser.Email = _email;
			newUser.Telephone = _telephone;
			newUser.Enabled = _enabled;
			newUser.CompanyId = _companyId;
			newUser.SalesPersonId = _salesPersonId;
			newUser.RoleId = _roleId;
			newUser.MustChangePassword = _mustChangePassword;
			newUser.Address1 = _address1;
			newUser.Address2 = _address2;
			newUser.City = _city;
			newUser.Country = _country;
			newUser.Region = _region;
			newUser.PostalCode = _postalCode;
			newUser.CharityId = _charityId;
			newUser.WebMemberId = _webMemberId;
			newUser.UserUniqueId = _userUniqueId;
			return newUser;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(UserColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				this.EntityId.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Username property. 
		///		Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute("Needs to be unique and can be anything e.g. Customer Number, Email Address, etc."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String Username
		{
			get
			{
				return this.entityData.Username; 
			}
			
			set
			{
				if (this.entityData.Username == value)
					return;
					
				OnColumnChanging(UserColumn.Username, this.entityData.Username);
				this.entityData.Username = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Username, this.entityData.Username);
				OnPropertyChanged("Username");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Password property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String Password
		{
			get
			{
				return this.entityData.Password; 
			}
			
			set
			{
				if (this.entityData.Password == value)
					return;
					
				OnColumnChanging(UserColumn.Password, this.entityData.Password);
				this.entityData.Password = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Password, this.entityData.Password);
				OnPropertyChanged("Password");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String DisplayName
		{
			get
			{
				return this.entityData.DisplayName; 
			}
			
			set
			{
				if (this.entityData.DisplayName == value)
					return;
					
				OnColumnChanging(UserColumn.DisplayName, this.entityData.DisplayName);
				this.entityData.DisplayName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.DisplayName, this.entityData.DisplayName);
				OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Email property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Email
		{
			get
			{
				return this.entityData.Email; 
			}
			
			set
			{
				if (this.entityData.Email == value)
					return;
					
				OnColumnChanging(UserColumn.Email, this.entityData.Email);
				this.entityData.Email = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Email, this.entityData.Email);
				OnPropertyChanged("Email");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Telephone property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Telephone
		{
			get
			{
				return this.entityData.Telephone; 
			}
			
			set
			{
				if (this.entityData.Telephone == value)
					return;
					
				OnColumnChanging(UserColumn.Telephone, this.entityData.Telephone);
				this.entityData.Telephone = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Telephone, this.entityData.Telephone);
				OnPropertyChanged("Telephone");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Enabled property. 
		///		Denotes if the user is active or not. Default is Disabled for security reasons.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute("Denotes if the user is active or not. Default is Disabled for security reasons."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean Enabled
		{
			get
			{
				return this.entityData.Enabled; 
			}
			
			set
			{
				if (this.entityData.Enabled == value)
					return;
					
				OnColumnChanging(UserColumn.Enabled, this.entityData.Enabled);
				this.entityData.Enabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Enabled, this.entityData.Enabled);
				OnPropertyChanged("Enabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyId property. 
		///		Used for the Company Admin role and links to the company the user is associated with to restrict data access.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCompanyIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used for the Company Admin role and links to the company the user is associated with to restrict data access."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CompanyId
		{
			get
			{
				return this.entityData.CompanyId; 
			}
			
			set
			{
				if (this.entityData.CompanyId == value)
					return;
					
				OnColumnChanging(UserColumn.CompanyId, this.entityData.CompanyId);
				this.entityData.CompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.CompanyId, this.entityData.CompanyId);
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesPersonId property. 
		///		Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsSalesPersonIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? SalesPersonId
		{
			get
			{
				return this.entityData.SalesPersonId; 
			}
			
			set
			{
				if (this.entityData.SalesPersonId == value)
					return;
					
				OnColumnChanging(UserColumn.SalesPersonId, this.entityData.SalesPersonId);
				this.entityData.SalesPersonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.SalesPersonId, this.entityData.SalesPersonId);
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RoleId property. 
		///		Used to denote the role of the user.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsRoleIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to denote the role of the user."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? RoleId
		{
			get
			{
				return this.entityData.RoleId; 
			}
			
			set
			{
				if (this.entityData.RoleId == value)
					return;
					
				OnColumnChanging(UserColumn.RoleId, this.entityData.RoleId);
				this.entityData.RoleId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.RoleId, this.entityData.RoleId);
				OnPropertyChanged("RoleId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MustChangePassword property. 
		///		Denotes if the user is forced to change their password.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsMustChangePasswordNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Denotes if the user is forced to change their password."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? MustChangePassword
		{
			get
			{
				return this.entityData.MustChangePassword; 
			}
			
			set
			{
				if (this.entityData.MustChangePassword == value)
					return;
					
				OnColumnChanging(UserColumn.MustChangePassword, this.entityData.MustChangePassword);
				this.entityData.MustChangePassword = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.MustChangePassword, this.entityData.MustChangePassword);
				OnPropertyChanged("MustChangePassword");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Address1
		{
			get
			{
				return this.entityData.Address1; 
			}
			
			set
			{
				if (this.entityData.Address1 == value)
					return;
					
				OnColumnChanging(UserColumn.Address1, this.entityData.Address1);
				this.entityData.Address1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Address1, this.entityData.Address1);
				OnPropertyChanged("Address1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Address2
		{
			get
			{
				return this.entityData.Address2; 
			}
			
			set
			{
				if (this.entityData.Address2 == value)
					return;
					
				OnColumnChanging(UserColumn.Address2, this.entityData.Address2);
				this.entityData.Address2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Address2, this.entityData.Address2);
				OnPropertyChanged("Address2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
				OnColumnChanging(UserColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Country property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String Country
		{
			get
			{
				return this.entityData.Country; 
			}
			
			set
			{
				if (this.entityData.Country == value)
					return;
					
				OnColumnChanging(UserColumn.Country, this.entityData.Country);
				this.entityData.Country = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Country, this.entityData.Country);
				OnPropertyChanged("Country");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Region property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String Region
		{
			get
			{
				return this.entityData.Region; 
			}
			
			set
			{
				if (this.entityData.Region == value)
					return;
					
				OnColumnChanging(UserColumn.Region, this.entityData.Region);
				this.entityData.Region = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.Region, this.entityData.Region);
				OnPropertyChanged("Region");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostalCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PostalCode
		{
			get
			{
				return this.entityData.PostalCode; 
			}
			
			set
			{
				if (this.entityData.PostalCode == value)
					return;
					
				OnColumnChanging(UserColumn.PostalCode, this.entityData.PostalCode);
				this.entityData.PostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.PostalCode, this.entityData.PostalCode);
				OnPropertyChanged("PostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CharityId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCharityIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CharityId
		{
			get
			{
				return this.entityData.CharityId; 
			}
			
			set
			{
				if (this.entityData.CharityId == value)
					return;
					
				OnColumnChanging(UserColumn.CharityId, this.entityData.CharityId);
				this.entityData.CharityId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.CharityId, this.entityData.CharityId);
				OnPropertyChanged("CharityId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WebMemberId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String WebMemberId
		{
			get
			{
				return this.entityData.WebMemberId; 
			}
			
			set
			{
				if (this.entityData.WebMemberId == value)
					return;
					
				OnColumnChanging(UserColumn.WebMemberId, this.entityData.WebMemberId);
				this.entityData.WebMemberId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.WebMemberId, this.entityData.WebMemberId);
				OnPropertyChanged("WebMemberId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserUniqueId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Guid UserUniqueId
		{
			get
			{
				return this.entityData.UserUniqueId; 
			}
			
			set
			{
				if (this.entityData.UserUniqueId == value)
					return;
					
				OnColumnChanging(UserColumn.UserUniqueId, this.entityData.UserUniqueId);
				this.entityData.UserUniqueId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(UserColumn.UserUniqueId, this.entityData.UserUniqueId);
				OnPropertyChanged("UserUniqueId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Charity"/>.
		/// </summary>
		/// <value>The source Charity for CharityId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Charity CharityIdSource
      	{
            get { return entityData.CharityIdSource; }
            set { entityData.CharityIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for Country.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Country CountrySource
      	{
            get { return entityData.CountrySource; }
            set { entityData.CountrySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Role"/>.
		/// </summary>
		/// <value>The source Role for RoleId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Role RoleIdSource
      	{
            get { return entityData.RoleIdSource; }
            set { entityData.RoleIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return entityData.SalesPersonIdSource; }
            set { entityData.SalesPersonIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="State"/>.
		/// </summary>
		/// <value>The source State for Region.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual State RegionSource
      	{
            get { return entityData.RegionSource; }
            set { entityData.RegionSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Company"/>.
		/// </summary>
		/// <value>The source Company for CompanyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Company CompanyIdSource
      	{
            get { return entityData.CompanyIdSource; }
            set { entityData.CompanyIdSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a collection of MarketingServiceFromUser_MarketingService objects
		///	which are related to this object through the junction table User_MarketingService
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<MarketingService> MarketingServiceIdMarketingServiceCollection_From_User_MarketingService
		{
			get { return entityData.MarketingServiceIdMarketingServiceCollection_From_User_MarketingService; }
			set { entityData.MarketingServiceIdMarketingServiceCollection_From_User_MarketingService = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Moderator objects
		///	which are related to this object through the relation FK_Moderator_UserID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Moderator> ModeratorCollection
		{
			get { return entityData.ModeratorCollection; }
			set { entityData.ModeratorCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of User_MarketingService objects
		///	which are related to this object through the relation FK_User_MarketingService_User
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<User_MarketingService> User_MarketingServiceCollection
		{
			get { return entityData.User_MarketingServiceCollection; }
			set { entityData.User_MarketingServiceCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Customer objects
		///	which are related to this object through the relation FK_Customer_UserID
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Customer> CustomerCollection
		{
			get { return entityData.CustomerCollection; }
			set { entityData.CustomerCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EventManager objects
		///	which are related to this object through the relation FK_EventManager_User
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EventManager> EventManagerCollection
		{
			get { return entityData.EventManagerCollection; }
			set { entityData.EventManagerCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Username", "Username"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Username", "Username", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Password", "Password"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Password", "Password", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("DisplayName", "Display Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DisplayName", "Display Name", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Email", "Email", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Telephone", "Telephone", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Address1", "Address1", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Address2", "Address2", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("City", "City", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Country", "Country", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Region", "Region", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PostalCode", "Postal Code", 20));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WebMemberId", "Web Member Id", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "User"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"UserID", "Username", "Password", "DisplayName", "Email", "Telephone", "Enabled", "CompanyID", "SalesPersonID", "RoleID", "MustChangePassword", "Address1", "Address2", "City", "Country", "Region", "PostalCode", "CharityID", "WebMemberID", "UserUniqueID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as UserEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (User) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<User>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as User);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed User Entity 
		///</summary>
		public virtual User Copy()
		{
			//shallow copy entity
			User copy = new User();
			copy.SuppressEntityEvents = true;
			copy.UserId = this.UserId;
			copy.Username = this.Username;
			copy.Password = this.Password;
			copy.DisplayName = this.DisplayName;
			copy.Email = this.Email;
			copy.Telephone = this.Telephone;
			copy.Enabled = this.Enabled;
			copy.CompanyId = this.CompanyId;
			copy.SalesPersonId = this.SalesPersonId;
			copy.RoleId = this.RoleId;
			copy.MustChangePassword = this.MustChangePassword;
			copy.Address1 = this.Address1;
			copy.Address2 = this.Address2;
			copy.City = this.City;
			copy.Country = this.Country;
			copy.Region = this.Region;
			copy.PostalCode = this.PostalCode;
			copy.CharityId = this.CharityId;
			copy.WebMemberId = this.WebMemberId;
			copy.UserUniqueId = this.UserUniqueId;
			
			copy.CharityIdSource = MakeCopyOf(this.CharityIdSource) as Charity;
			copy.CountrySource = MakeCopyOf(this.CountrySource) as Country;
			copy.RoleIdSource = MakeCopyOf(this.RoleIdSource) as Role;
			copy.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
			copy.RegionSource = MakeCopyOf(this.RegionSource) as State;
			copy.CompanyIdSource = MakeCopyOf(this.CompanyIdSource) as Company;
		
			//deep copy nested objects
			copy.MarketingServiceIdMarketingServiceCollection_From_User_MarketingService = (TList<MarketingService>) MakeCopyOf(this.MarketingServiceIdMarketingServiceCollection_From_User_MarketingService); 
			copy.ModeratorCollection = (TList<Moderator>) MakeCopyOf(this.ModeratorCollection); 
			copy.User_MarketingServiceCollection = (TList<User_MarketingService>) MakeCopyOf(this.User_MarketingServiceCollection); 
			copy.CustomerCollection = (TList<Customer>) MakeCopyOf(this.CustomerCollection); 
			copy.EventManagerCollection = (TList<EventManager>) MakeCopyOf(this.EventManagerCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed User Entity which is a deep copy of the current entity.
		///</summary>
		public virtual User DeepCopy()
		{
			return EntityHelper.Clone<User>(this as User);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as UserEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as UserEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(UserColumn column)
		{
			switch(column)
			{
					case UserColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case UserColumn.Username:
					return entityData.Username != _originalData.Username;
					case UserColumn.Password:
					return entityData.Password != _originalData.Password;
					case UserColumn.DisplayName:
					return entityData.DisplayName != _originalData.DisplayName;
					case UserColumn.Email:
					return entityData.Email != _originalData.Email;
					case UserColumn.Telephone:
					return entityData.Telephone != _originalData.Telephone;
					case UserColumn.Enabled:
					return entityData.Enabled != _originalData.Enabled;
					case UserColumn.CompanyId:
					return entityData.CompanyId != _originalData.CompanyId;
					case UserColumn.SalesPersonId:
					return entityData.SalesPersonId != _originalData.SalesPersonId;
					case UserColumn.RoleId:
					return entityData.RoleId != _originalData.RoleId;
					case UserColumn.MustChangePassword:
					return entityData.MustChangePassword != _originalData.MustChangePassword;
					case UserColumn.Address1:
					return entityData.Address1 != _originalData.Address1;
					case UserColumn.Address2:
					return entityData.Address2 != _originalData.Address2;
					case UserColumn.City:
					return entityData.City != _originalData.City;
					case UserColumn.Country:
					return entityData.Country != _originalData.Country;
					case UserColumn.Region:
					return entityData.Region != _originalData.Region;
					case UserColumn.PostalCode:
					return entityData.PostalCode != _originalData.PostalCode;
					case UserColumn.CharityId:
					return entityData.CharityId != _originalData.CharityId;
					case UserColumn.WebMemberId:
					return entityData.WebMemberId != _originalData.WebMemberId;
					case UserColumn.UserUniqueId:
					return entityData.UserUniqueId != _originalData.UserUniqueId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.Username != _originalData.Username;
			result = result || entityData.Password != _originalData.Password;
			result = result || entityData.DisplayName != _originalData.DisplayName;
			result = result || entityData.Email != _originalData.Email;
			result = result || entityData.Telephone != _originalData.Telephone;
			result = result || entityData.Enabled != _originalData.Enabled;
			result = result || entityData.CompanyId != _originalData.CompanyId;
			result = result || entityData.SalesPersonId != _originalData.SalesPersonId;
			result = result || entityData.RoleId != _originalData.RoleId;
			result = result || entityData.MustChangePassword != _originalData.MustChangePassword;
			result = result || entityData.Address1 != _originalData.Address1;
			result = result || entityData.Address2 != _originalData.Address2;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.Country != _originalData.Country;
			result = result || entityData.Region != _originalData.Region;
			result = result || entityData.PostalCode != _originalData.PostalCode;
			result = result || entityData.CharityId != _originalData.CharityId;
			result = result || entityData.WebMemberId != _originalData.WebMemberId;
			result = result || entityData.UserUniqueId != _originalData.UserUniqueId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="UserBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is UserBase)
				return Equals(this, (UserBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="UserBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.UserId.GetHashCode() ^ 
					this.Username.GetHashCode() ^ 
					this.Password.GetHashCode() ^ 
					this.DisplayName.GetHashCode() ^ 
					((this.Email == null) ? string.Empty : this.Email.ToString()).GetHashCode() ^ 
					((this.Telephone == null) ? string.Empty : this.Telephone.ToString()).GetHashCode() ^ 
					this.Enabled.GetHashCode() ^ 
					((this.CompanyId == null) ? string.Empty : this.CompanyId.ToString()).GetHashCode() ^ 
					((this.SalesPersonId == null) ? string.Empty : this.SalesPersonId.ToString()).GetHashCode() ^ 
					((this.RoleId == null) ? string.Empty : this.RoleId.ToString()).GetHashCode() ^ 
					((this.MustChangePassword == null) ? string.Empty : this.MustChangePassword.ToString()).GetHashCode() ^ 
					((this.Address1 == null) ? string.Empty : this.Address1.ToString()).GetHashCode() ^ 
					((this.Address2 == null) ? string.Empty : this.Address2.ToString()).GetHashCode() ^ 
					((this.City == null) ? string.Empty : this.City.ToString()).GetHashCode() ^ 
					((this.Country == null) ? string.Empty : this.Country.ToString()).GetHashCode() ^ 
					((this.Region == null) ? string.Empty : this.Region.ToString()).GetHashCode() ^ 
					((this.PostalCode == null) ? string.Empty : this.PostalCode.ToString()).GetHashCode() ^ 
					((this.CharityId == null) ? string.Empty : this.CharityId.ToString()).GetHashCode() ^ 
					((this.WebMemberId == null) ? string.Empty : this.WebMemberId.ToString()).GetHashCode() ^ 
					this.UserUniqueId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="UserBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(UserBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="UserBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="UserBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="UserBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(UserBase Object1, UserBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.UserId != Object2.UserId)
				equal = false;
			if (Object1.Username != Object2.Username)
				equal = false;
			if (Object1.Password != Object2.Password)
				equal = false;
			if (Object1.DisplayName != Object2.DisplayName)
				equal = false;
			if ( Object1.Email != null && Object2.Email != null )
			{
				if (Object1.Email != Object2.Email)
					equal = false;
			}
			else if (Object1.Email == null ^ Object2.Email == null )
			{
				equal = false;
			}
			if ( Object1.Telephone != null && Object2.Telephone != null )
			{
				if (Object1.Telephone != Object2.Telephone)
					equal = false;
			}
			else if (Object1.Telephone == null ^ Object2.Telephone == null )
			{
				equal = false;
			}
			if (Object1.Enabled != Object2.Enabled)
				equal = false;
			if ( Object1.CompanyId != null && Object2.CompanyId != null )
			{
				if (Object1.CompanyId != Object2.CompanyId)
					equal = false;
			}
			else if (Object1.CompanyId == null ^ Object2.CompanyId == null )
			{
				equal = false;
			}
			if ( Object1.SalesPersonId != null && Object2.SalesPersonId != null )
			{
				if (Object1.SalesPersonId != Object2.SalesPersonId)
					equal = false;
			}
			else if (Object1.SalesPersonId == null ^ Object2.SalesPersonId == null )
			{
				equal = false;
			}
			if ( Object1.RoleId != null && Object2.RoleId != null )
			{
				if (Object1.RoleId != Object2.RoleId)
					equal = false;
			}
			else if (Object1.RoleId == null ^ Object2.RoleId == null )
			{
				equal = false;
			}
			if ( Object1.MustChangePassword != null && Object2.MustChangePassword != null )
			{
				if (Object1.MustChangePassword != Object2.MustChangePassword)
					equal = false;
			}
			else if (Object1.MustChangePassword == null ^ Object2.MustChangePassword == null )
			{
				equal = false;
			}
			if ( Object1.Address1 != null && Object2.Address1 != null )
			{
				if (Object1.Address1 != Object2.Address1)
					equal = false;
			}
			else if (Object1.Address1 == null ^ Object2.Address1 == null )
			{
				equal = false;
			}
			if ( Object1.Address2 != null && Object2.Address2 != null )
			{
				if (Object1.Address2 != Object2.Address2)
					equal = false;
			}
			else if (Object1.Address2 == null ^ Object2.Address2 == null )
			{
				equal = false;
			}
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object2.City == null )
			{
				equal = false;
			}
			if ( Object1.Country != null && Object2.Country != null )
			{
				if (Object1.Country != Object2.Country)
					equal = false;
			}
			else if (Object1.Country == null ^ Object2.Country == null )
			{
				equal = false;
			}
			if ( Object1.Region != null && Object2.Region != null )
			{
				if (Object1.Region != Object2.Region)
					equal = false;
			}
			else if (Object1.Region == null ^ Object2.Region == null )
			{
				equal = false;
			}
			if ( Object1.PostalCode != null && Object2.PostalCode != null )
			{
				if (Object1.PostalCode != Object2.PostalCode)
					equal = false;
			}
			else if (Object1.PostalCode == null ^ Object2.PostalCode == null )
			{
				equal = false;
			}
			if ( Object1.CharityId != null && Object2.CharityId != null )
			{
				if (Object1.CharityId != Object2.CharityId)
					equal = false;
			}
			else if (Object1.CharityId == null ^ Object2.CharityId == null )
			{
				equal = false;
			}
			if ( Object1.WebMemberId != null && Object2.WebMemberId != null )
			{
				if (Object1.WebMemberId != Object2.WebMemberId)
					equal = false;
			}
			else if (Object1.WebMemberId == null ^ Object2.WebMemberId == null )
			{
				equal = false;
			}
			if (Object1.UserUniqueId != Object2.UserUniqueId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((UserBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static UserComparer GetComparer()
        {
            return new UserComparer();
        }
        */

        // Comparer delegates back to User
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(User rhs, UserColumn which)
        {
            switch (which)
            {
            	
            	
            	case UserColumn.UserId:
            		return this.UserId.CompareTo(rhs.UserId);
            		
            		                 
            	
            	
            	case UserColumn.Username:
            		return this.Username.CompareTo(rhs.Username);
            		
            		                 
            	
            	
            	case UserColumn.Password:
            		return this.Password.CompareTo(rhs.Password);
            		
            		                 
            	
            	
            	case UserColumn.DisplayName:
            		return this.DisplayName.CompareTo(rhs.DisplayName);
            		
            		                 
            	
            	
            	case UserColumn.Email:
            		return this.Email.CompareTo(rhs.Email);
            		
            		                 
            	
            	
            	case UserColumn.Telephone:
            		return this.Telephone.CompareTo(rhs.Telephone);
            		
            		                 
            	
            	
            	case UserColumn.Enabled:
            		return this.Enabled.CompareTo(rhs.Enabled);
            		
            		                 
            	
            	
            	case UserColumn.CompanyId:
            		return this.CompanyId.Value.CompareTo(rhs.CompanyId.Value);
            		
            		                 
            	
            	
            	case UserColumn.SalesPersonId:
            		return this.SalesPersonId.Value.CompareTo(rhs.SalesPersonId.Value);
            		
            		                 
            	
            	
            	case UserColumn.RoleId:
            		return this.RoleId.Value.CompareTo(rhs.RoleId.Value);
            		
            		                 
            	
            	
            	case UserColumn.MustChangePassword:
            		return this.MustChangePassword.Value.CompareTo(rhs.MustChangePassword.Value);
            		
            		                 
            	
            	
            	case UserColumn.Address1:
            		return this.Address1.CompareTo(rhs.Address1);
            		
            		                 
            	
            	
            	case UserColumn.Address2:
            		return this.Address2.CompareTo(rhs.Address2);
            		
            		                 
            	
            	
            	case UserColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case UserColumn.Country:
            		return this.Country.CompareTo(rhs.Country);
            		
            		                 
            	
            	
            	case UserColumn.Region:
            		return this.Region.CompareTo(rhs.Region);
            		
            		                 
            	
            	
            	case UserColumn.PostalCode:
            		return this.PostalCode.CompareTo(rhs.PostalCode);
            		
            		                 
            	
            	
            	case UserColumn.CharityId:
            		return this.CharityId.Value.CompareTo(rhs.CharityId.Value);
            		
            		                 
            	
            	
            	case UserColumn.WebMemberId:
            		return this.WebMemberId.CompareTo(rhs.WebMemberId);
            		
            		                 
            	
            	
            	case UserColumn.UserUniqueId:
            		return this.UserUniqueId.CompareTo(rhs.UserUniqueId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<UserKey> Members
		
		// member variable for the EntityId property
		private UserKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual UserKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new UserKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("User")
					.Append("|").Append( this.UserId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- UserId: {0}{20}- Username: {1}{20}- Password: {2}{20}- DisplayName: {3}{20}- Email: {4}{20}- Telephone: {5}{20}- Enabled: {6}{20}- CompanyId: {7}{20}- SalesPersonId: {8}{20}- RoleId: {9}{20}- MustChangePassword: {10}{20}- Address1: {11}{20}- Address2: {12}{20}- City: {13}{20}- Country: {14}{20}- Region: {15}{20}- PostalCode: {16}{20}- CharityId: {17}{20}- WebMemberId: {18}{20}- UserUniqueId: {19}{20}", 
				this.UserId,
				this.Username,
				this.Password,
				this.DisplayName,
				(this.Email == null) ? string.Empty : this.Email.ToString(),
				(this.Telephone == null) ? string.Empty : this.Telephone.ToString(),
				this.Enabled,
				(this.CompanyId == null) ? string.Empty : this.CompanyId.ToString(),
				(this.SalesPersonId == null) ? string.Empty : this.SalesPersonId.ToString(),
				(this.RoleId == null) ? string.Empty : this.RoleId.ToString(),
				(this.MustChangePassword == null) ? string.Empty : this.MustChangePassword.ToString(),
				(this.Address1 == null) ? string.Empty : this.Address1.ToString(),
				(this.Address2 == null) ? string.Empty : this.Address2.ToString(),
				(this.City == null) ? string.Empty : this.City.ToString(),
				(this.Country == null) ? string.Empty : this.Country.ToString(),
				(this.Region == null) ? string.Empty : this.Region.ToString(),
				(this.PostalCode == null) ? string.Empty : this.PostalCode.ToString(),
				(this.CharityId == null) ? string.Empty : this.CharityId.ToString(),
				(this.WebMemberId == null) ? string.Empty : this.WebMemberId.ToString(),
				this.UserUniqueId,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'User' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class UserEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// UserID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "User"</remarks>
			public System.Int32 UserId;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Username : Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.
		/// </summary>
		public System.String		  Username = string.Empty;
		
		/// <summary>
		/// Password : 
		/// </summary>
		public System.String		  Password = string.Empty;
		
		/// <summary>
		/// DisplayName : 
		/// </summary>
		public System.String		  DisplayName = string.Empty;
		
		/// <summary>
		/// Email : 
		/// </summary>
		public System.String		  Email = null;
		
		/// <summary>
		/// Telephone : 
		/// </summary>
		public System.String		  Telephone = null;
		
		/// <summary>
		/// Enabled : Denotes if the user is active or not. Default is Disabled for security reasons.
		/// </summary>
		public System.Boolean		  Enabled = false;
		
		/// <summary>
		/// CompanyID : Used for the Company Admin role and links to the company the user is associated with to restrict data access.
		/// </summary>
		public System.Int32?		  CompanyId = null;
		
		/// <summary>
		/// SalesPersonID : Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.
		/// </summary>
		public System.Int32?		  SalesPersonId = null;
		
		/// <summary>
		/// RoleID : Used to denote the role of the user.
		/// </summary>
		public System.Int32?		  RoleId = null;
		
		/// <summary>
		/// MustChangePassword : Denotes if the user is forced to change their password.
		/// </summary>
		public System.Boolean?		  MustChangePassword = null;
		
		/// <summary>
		/// Address1 : 
		/// </summary>
		public System.String		  Address1 = null;
		
		/// <summary>
		/// Address2 : 
		/// </summary>
		public System.String		  Address2 = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String		  City = null;
		
		/// <summary>
		/// Country : 
		/// </summary>
		public System.String		  Country = null;
		
		/// <summary>
		/// Region : 
		/// </summary>
		public System.String		  Region = null;
		
		/// <summary>
		/// PostalCode : 
		/// </summary>
		public System.String		  PostalCode = null;
		
		/// <summary>
		/// CharityID : 
		/// </summary>
		public System.Int32?		  CharityId = null;
		
		/// <summary>
		/// WebMemberID : 
		/// </summary>
		public System.String		  WebMemberId = null;
		
		/// <summary>
		/// UserUniqueID : 
		/// </summary>
		public System.Guid		  UserUniqueId = Guid.NewGuid();
		#endregion
			
		#region Source Foreign Key Property
				
		private Charity _charityIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Charity"/>.
		/// </summary>
		/// <value>The source Charity for CharityId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Charity CharityIdSource
      	{
            get { return this._charityIdSource; }
            set { this._charityIdSource = value; }
      	}
		private Country _countrySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for Country.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Country CountrySource
      	{
            get { return this._countrySource; }
            set { this._countrySource = value; }
      	}
		private Role _roleIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Role"/>.
		/// </summary>
		/// <value>The source Role for RoleId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Role RoleIdSource
      	{
            get { return this._roleIdSource; }
            set { this._roleIdSource = value; }
      	}
		private SalesPerson _salesPersonIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return this._salesPersonIdSource; }
            set { this._salesPersonIdSource = value; }
      	}
		private State _regionSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="State"/>.
		/// </summary>
		/// <value>The source State for Region.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual State RegionSource
      	{
            get { return this._regionSource; }
            set { this._regionSource = value; }
      	}
		private Company _companyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Company"/>.
		/// </summary>
		/// <value>The source Company for CompanyId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Company CompanyIdSource
      	{
            get { return this._companyIdSource; }
            set { this._companyIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region MarketingServiceIdMarketingServiceCollection_From_User_MarketingService
		
		private TList<MarketingService> marketingServiceIdMarketingServiceCollection_From_User_MarketingService;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table marketingServiceIdMarketingServiceCollection_From_User_MarketingService
		/// </summary>	
		public TList<MarketingService> MarketingServiceIdMarketingServiceCollection_From_User_MarketingService
		{
			get
			{
				if (marketingServiceIdMarketingServiceCollection_From_User_MarketingService == null)
				{
				marketingServiceIdMarketingServiceCollection_From_User_MarketingService = new TList<MarketingService>();
				}
	
				return marketingServiceIdMarketingServiceCollection_From_User_MarketingService;
			}
			set { marketingServiceIdMarketingServiceCollection_From_User_MarketingService = value; }
		}
		
		#endregion 

		#region ModeratorCollection
		
		private TList<Moderator> _moderatorUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _moderatorUserId
		/// </summary>	
		public TList<Moderator> ModeratorCollection
		{
			get
			{
				if (_moderatorUserId == null)
				{
				_moderatorUserId = new TList<Moderator>();
				}
	
				return _moderatorUserId;
			}
			set { _moderatorUserId = value; }
		}
		
		#endregion

		#region User_MarketingServiceCollection
		
		private TList<User_MarketingService> _user_MarketingServiceUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _user_MarketingServiceUserId
		/// </summary>	
		public TList<User_MarketingService> User_MarketingServiceCollection
		{
			get
			{
				if (_user_MarketingServiceUserId == null)
				{
				_user_MarketingServiceUserId = new TList<User_MarketingService>();
				}
	
				return _user_MarketingServiceUserId;
			}
			set { _user_MarketingServiceUserId = value; }
		}
		
		#endregion

		#region CustomerCollection
		
		private TList<Customer> _customerUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerUserId
		/// </summary>	
		public TList<Customer> CustomerCollection
		{
			get
			{
				if (_customerUserId == null)
				{
				_customerUserId = new TList<Customer>();
				}
	
				return _customerUserId;
			}
			set { _customerUserId = value; }
		}
		
		#endregion

		#region EventManagerCollection
		
		private TList<EventManager> _eventManagerUserId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _eventManagerUserId
		/// </summary>	
		public TList<EventManager> EventManagerCollection
		{
			get
			{
				if (_eventManagerUserId == null)
				{
				_eventManagerUserId = new TList<EventManager>();
				}
	
				return _eventManagerUserId;
			}
			set { _eventManagerUserId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			UserEntityData _tmp = new UserEntityData();
						
			_tmp.UserId = this.UserId;
			
			_tmp.Username = this.Username;
			_tmp.Password = this.Password;
			_tmp.DisplayName = this.DisplayName;
			_tmp.Email = this.Email;
			_tmp.Telephone = this.Telephone;
			_tmp.Enabled = this.Enabled;
			_tmp.CompanyId = this.CompanyId;
			_tmp.SalesPersonId = this.SalesPersonId;
			_tmp.RoleId = this.RoleId;
			_tmp.MustChangePassword = this.MustChangePassword;
			_tmp.Address1 = this.Address1;
			_tmp.Address2 = this.Address2;
			_tmp.City = this.City;
			_tmp.Country = this.Country;
			_tmp.Region = this.Region;
			_tmp.PostalCode = this.PostalCode;
			_tmp.CharityId = this.CharityId;
			_tmp.WebMemberId = this.WebMemberId;
			_tmp.UserUniqueId = this.UserUniqueId;
			
			#region Source Parent Composite Entities
			if (this.CharityIdSource != null)
				_tmp.CharityIdSource = MakeCopyOf(this.CharityIdSource) as Charity;
			if (this.CountrySource != null)
				_tmp.CountrySource = MakeCopyOf(this.CountrySource) as Country;
			if (this.RoleIdSource != null)
				_tmp.RoleIdSource = MakeCopyOf(this.RoleIdSource) as Role;
			if (this.SalesPersonIdSource != null)
				_tmp.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
			if (this.RegionSource != null)
				_tmp.RegionSource = MakeCopyOf(this.RegionSource) as State;
			if (this.CompanyIdSource != null)
				_tmp.CompanyIdSource = MakeCopyOf(this.CompanyIdSource) as Company;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this.marketingServiceIdMarketingServiceCollection_From_User_MarketingService != null)
				_tmp.MarketingServiceIdMarketingServiceCollection_From_User_MarketingService = (TList<MarketingService>) MakeCopyOf(this.MarketingServiceIdMarketingServiceCollection_From_User_MarketingService); 
			if (this._moderatorUserId != null)
				_tmp.ModeratorCollection = (TList<Moderator>) MakeCopyOf(this.ModeratorCollection); 
			if (this._user_MarketingServiceUserId != null)
				_tmp.User_MarketingServiceCollection = (TList<User_MarketingService>) MakeCopyOf(this.User_MarketingServiceCollection); 
			if (this._customerUserId != null)
				_tmp.CustomerCollection = (TList<Customer>) MakeCopyOf(this.CustomerCollection); 
			if (this._eventManagerUserId != null)
				_tmp.EventManagerCollection = (TList<EventManager>) MakeCopyOf(this.EventManagerCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		public void OnColumnChanging(UserColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		public void OnColumnChanged(UserColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(UserColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				UserEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new UserEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="UserColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(UserColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				UserEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new UserEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region UserEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="User"/> object.
	/// </remarks>
	public class UserEventArgs : System.EventArgs
	{
		private UserColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the UserEventArgs class.
		///</summary>
		public UserEventArgs(UserColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the UserEventArgs class.
		///</summary>
		public UserEventArgs(UserColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The UserColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="UserColumn" />
		public UserColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all User related events.
	///</summary>
	public delegate void UserEventHandler(object sender, UserEventArgs e);
	
	#region UserComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class UserComparer : System.Collections.Generic.IComparer<User>
	{
		UserColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:UserComparer"/> class.
        /// </summary>
		public UserComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:UserComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public UserComparer(UserColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="User"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="User"/> to compare.</param>
        /// <param name="b">The second <c>User</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(User a, User b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(User entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(User a, User b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public UserColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region UserKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="User"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class UserKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey(UserBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.UserId = entity.UserId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the UserKey class.
		/// </summary>
		public UserKey(System.Int32 _userId)
		{
			#region Init Properties

			this.UserId = _userId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private UserBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public UserBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the UserId property
		private System.Int32 _userId;
		
		/// <summary>
		/// Gets or sets the UserId property.
		/// </summary>
		public System.Int32 UserId
		{
			get { return _userId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.UserId = value;
				
				_userId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				UserId = ( values["UserId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["UserId"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("UserId", UserId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("UserId: {0}{1}",
								UserId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region UserColumn Enum
	
	/// <summary>
	/// Enumerate the User columns.
	/// </summary>
	[Serializable]
	public enum UserColumn : int
	{
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		UserId = 1,
		/// <summary>
		/// Username : Needs to be unique and can be anything e.g. Customer Number, Email Address, etc.
		/// </summary>
		[EnumTextValue("Username")]
		[ColumnEnum("Username", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		Username = 2,
		/// <summary>
		/// Password : 
		/// </summary>
		[EnumTextValue("Password")]
		[ColumnEnum("Password", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		Password = 3,
		/// <summary>
		/// DisplayName : 
		/// </summary>
		[EnumTextValue("DisplayName")]
		[ColumnEnum("DisplayName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		DisplayName = 4,
		/// <summary>
		/// Email : 
		/// </summary>
		[EnumTextValue("Email")]
		[ColumnEnum("Email", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Email = 5,
		/// <summary>
		/// Telephone : 
		/// </summary>
		[EnumTextValue("Telephone")]
		[ColumnEnum("Telephone", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Telephone = 6,
		/// <summary>
		/// Enabled : Denotes if the user is active or not. Default is Disabled for security reasons.
		/// </summary>
		[EnumTextValue("Enabled")]
		[ColumnEnum("Enabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		Enabled = 7,
		/// <summary>
		/// CompanyId : Used for the Company Admin role and links to the company the user is associated with to restrict data access.
		/// </summary>
		[EnumTextValue("CompanyID")]
		[ColumnEnum("CompanyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CompanyId = 8,
		/// <summary>
		/// SalesPersonId : Used for the Sales Manger/Sales role(s) and links to the sales person the user is associated with to restrict data access.
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		SalesPersonId = 9,
		/// <summary>
		/// RoleId : Used to denote the role of the user.
		/// </summary>
		[EnumTextValue("RoleID")]
		[ColumnEnum("RoleID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		RoleId = 10,
		/// <summary>
		/// MustChangePassword : Denotes if the user is forced to change their password.
		/// </summary>
		[EnumTextValue("MustChangePassword")]
		[ColumnEnum("MustChangePassword", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		MustChangePassword = 11,
		/// <summary>
		/// Address1 : 
		/// </summary>
		[EnumTextValue("Address1")]
		[ColumnEnum("Address1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Address1 = 12,
		/// <summary>
		/// Address2 : 
		/// </summary>
		[EnumTextValue("Address2")]
		[ColumnEnum("Address2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Address2 = 13,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		City = 14,
		/// <summary>
		/// Country : 
		/// </summary>
		[EnumTextValue("Country")]
		[ColumnEnum("Country", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		Country = 15,
		/// <summary>
		/// Region : 
		/// </summary>
		[EnumTextValue("Region")]
		[ColumnEnum("Region", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		Region = 16,
		/// <summary>
		/// PostalCode : 
		/// </summary>
		[EnumTextValue("PostalCode")]
		[ColumnEnum("PostalCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		PostalCode = 17,
		/// <summary>
		/// CharityId : 
		/// </summary>
		[EnumTextValue("CharityID")]
		[ColumnEnum("CharityID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CharityId = 18,
		/// <summary>
		/// WebMemberId : 
		/// </summary>
		[EnumTextValue("WebMemberID")]
		[ColumnEnum("WebMemberID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		WebMemberId = 19,
		/// <summary>
		/// UserUniqueId : 
		/// </summary>
		[EnumTextValue("UserUniqueID")]
		[ColumnEnum("UserUniqueID", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		UserUniqueId = 20
	}//End enum

	#endregion UserColumn Enum

} // end namespace
