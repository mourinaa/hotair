
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Customer.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'Customer' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class CustomerBase : EntityBase, CONFDB.Entities.ICustomer, IEntityId<CustomerKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomerEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomerEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomerEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Customer> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CustomerEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomerEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomerBase"/> instance.
		///</summary>
		public CustomerBase()
		{
			this.entityData = new CustomerEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomerBase"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_description"></param>
		///<param name="_externalCustomerNumber"></param>
		///<param name="_primaryContactName"></param>
		///<param name="_primaryContactPhoneNumber"></param>
		///<param name="_primaryContactEmailAddress"></param>
		///<param name="_primaryContactAddress1"></param>
		///<param name="_primaryContactAddress2"></param>
		///<param name="_primaryContactCity"></param>
		///<param name="_primaryContactCountry"></param>
		///<param name="_primaryContactRegion"></param>
		///<param name="_primaryContactPostalCode"></param>
		///<param name="_primaryContactFaxNumber"></param>
		///<param name="_billingContactName"></param>
		///<param name="_billingContactPhoneNumber"></param>
		///<param name="_billingContactEmailAddress"></param>
		///<param name="_billingContactAddress1"></param>
		///<param name="_billingContactAddress2"></param>
		///<param name="_billingContactCity"></param>
		///<param name="_billingContactCountry"></param>
		///<param name="_billingContactRegion"></param>
		///<param name="_billingContactPostalCode"></param>
		///<param name="_billingContactFaxNumber"></param>
		///<param name="_websiteUrl"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_verticalId"></param>
		///<param name="_companyId"></param>
		///<param name="_currencyId"></param>
		///<param name="_billingPeriodCutoff">Used to denote the day of the customers billing cycle. Only used/important if you support multiple billing cycles per month.</param>
		///<param name="_taxableId"></param>
		///<param name="_creditCardNameOnCard"></param>
		///<param name="_creditCardNumber"></param>
		///<param name="_creditCardExp"></param>
		///<param name="_creditCardVerCode"></param>
		///<param name="_creditCardTypeName"></param>
		///<param name="_createdDate"></param>
		///<param name="_lastModified"></param>
		///<param name="_uniqueCustomerId"></param>
		///<param name="_enabled"></param>
		///<param name="_userId"></param>
		///<param name="_webGroupId">Used by the Web API to store GroupID</param>
		///<param name="_accountManagerId"></param>
		public CustomerBase(System.String _wholesalerId, System.String _priCustomerNumber, System.String _description, 
			System.String _externalCustomerNumber, System.String _primaryContactName, System.String _primaryContactPhoneNumber, 
			System.String _primaryContactEmailAddress, System.String _primaryContactAddress1, System.String _primaryContactAddress2, 
			System.String _primaryContactCity, System.String _primaryContactCountry, System.String _primaryContactRegion, 
			System.String _primaryContactPostalCode, System.String _primaryContactFaxNumber, System.String _billingContactName, 
			System.String _billingContactPhoneNumber, System.String _billingContactEmailAddress, System.String _billingContactAddress1, 
			System.String _billingContactAddress2, System.String _billingContactCity, System.String _billingContactCountry, 
			System.String _billingContactRegion, System.String _billingContactPostalCode, System.String _billingContactFaxNumber, 
			System.String _websiteUrl, System.Int32 _salesPersonId, System.Int32 _verticalId, System.Int32 _companyId, 
			System.String _currencyId, System.Int32 _billingPeriodCutoff, System.Int32 _taxableId, System.String _creditCardNameOnCard, 
			System.String _creditCardNumber, System.String _creditCardExp, System.String _creditCardVerCode, 
			System.String _creditCardTypeName, System.DateTime _createdDate, System.DateTime _lastModified, System.Guid _uniqueCustomerId, 
			System.Boolean? _enabled, System.Int32? _userId, System.String _webGroupId, System.Int32 _accountManagerId)
		{
			this.entityData = new CustomerEntityData();
			this.backupData = null;

			this.WholesalerId = _wholesalerId;
			this.PriCustomerNumber = _priCustomerNumber;
			this.Description = _description;
			this.ExternalCustomerNumber = _externalCustomerNumber;
			this.PrimaryContactName = _primaryContactName;
			this.PrimaryContactPhoneNumber = _primaryContactPhoneNumber;
			this.PrimaryContactEmailAddress = _primaryContactEmailAddress;
			this.PrimaryContactAddress1 = _primaryContactAddress1;
			this.PrimaryContactAddress2 = _primaryContactAddress2;
			this.PrimaryContactCity = _primaryContactCity;
			this.PrimaryContactCountry = _primaryContactCountry;
			this.PrimaryContactRegion = _primaryContactRegion;
			this.PrimaryContactPostalCode = _primaryContactPostalCode;
			this.PrimaryContactFaxNumber = _primaryContactFaxNumber;
			this.BillingContactName = _billingContactName;
			this.BillingContactPhoneNumber = _billingContactPhoneNumber;
			this.BillingContactEmailAddress = _billingContactEmailAddress;
			this.BillingContactAddress1 = _billingContactAddress1;
			this.BillingContactAddress2 = _billingContactAddress2;
			this.BillingContactCity = _billingContactCity;
			this.BillingContactCountry = _billingContactCountry;
			this.BillingContactRegion = _billingContactRegion;
			this.BillingContactPostalCode = _billingContactPostalCode;
			this.BillingContactFaxNumber = _billingContactFaxNumber;
			this.WebsiteUrl = _websiteUrl;
			this.SalesPersonId = _salesPersonId;
			this.VerticalId = _verticalId;
			this.CompanyId = _companyId;
			this.CurrencyId = _currencyId;
			this.BillingPeriodCutoff = _billingPeriodCutoff;
			this.TaxableId = _taxableId;
			this.CreditCardNameOnCard = _creditCardNameOnCard;
			this.CreditCardNumber = _creditCardNumber;
			this.CreditCardExp = _creditCardExp;
			this.CreditCardVerCode = _creditCardVerCode;
			this.CreditCardTypeName = _creditCardTypeName;
			this.CreatedDate = _createdDate;
			this.LastModified = _lastModified;
			this.UniqueCustomerId = _uniqueCustomerId;
			this.Enabled = _enabled;
			this.UserId = _userId;
			this.WebGroupId = _webGroupId;
			this.AccountManagerId = _accountManagerId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Customer"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_description"></param>
		///<param name="_externalCustomerNumber"></param>
		///<param name="_primaryContactName"></param>
		///<param name="_primaryContactPhoneNumber"></param>
		///<param name="_primaryContactEmailAddress"></param>
		///<param name="_primaryContactAddress1"></param>
		///<param name="_primaryContactAddress2"></param>
		///<param name="_primaryContactCity"></param>
		///<param name="_primaryContactCountry"></param>
		///<param name="_primaryContactRegion"></param>
		///<param name="_primaryContactPostalCode"></param>
		///<param name="_primaryContactFaxNumber"></param>
		///<param name="_billingContactName"></param>
		///<param name="_billingContactPhoneNumber"></param>
		///<param name="_billingContactEmailAddress"></param>
		///<param name="_billingContactAddress1"></param>
		///<param name="_billingContactAddress2"></param>
		///<param name="_billingContactCity"></param>
		///<param name="_billingContactCountry"></param>
		///<param name="_billingContactRegion"></param>
		///<param name="_billingContactPostalCode"></param>
		///<param name="_billingContactFaxNumber"></param>
		///<param name="_websiteUrl"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_verticalId"></param>
		///<param name="_companyId"></param>
		///<param name="_currencyId"></param>
		///<param name="_billingPeriodCutoff">Used to denote the day of the customers billing cycle. Only used/important if you support multiple billing cycles per month.</param>
		///<param name="_taxableId"></param>
		///<param name="_creditCardNameOnCard"></param>
		///<param name="_creditCardNumber"></param>
		///<param name="_creditCardExp"></param>
		///<param name="_creditCardVerCode"></param>
		///<param name="_creditCardTypeName"></param>
		///<param name="_createdDate"></param>
		///<param name="_lastModified"></param>
		///<param name="_uniqueCustomerId"></param>
		///<param name="_enabled"></param>
		///<param name="_userId"></param>
		///<param name="_webGroupId">Used by the Web API to store GroupID</param>
		///<param name="_accountManagerId"></param>
		public static Customer CreateCustomer(System.String _wholesalerId, System.String _priCustomerNumber, System.String _description, 
			System.String _externalCustomerNumber, System.String _primaryContactName, System.String _primaryContactPhoneNumber, 
			System.String _primaryContactEmailAddress, System.String _primaryContactAddress1, System.String _primaryContactAddress2, 
			System.String _primaryContactCity, System.String _primaryContactCountry, System.String _primaryContactRegion, 
			System.String _primaryContactPostalCode, System.String _primaryContactFaxNumber, System.String _billingContactName, 
			System.String _billingContactPhoneNumber, System.String _billingContactEmailAddress, System.String _billingContactAddress1, 
			System.String _billingContactAddress2, System.String _billingContactCity, System.String _billingContactCountry, 
			System.String _billingContactRegion, System.String _billingContactPostalCode, System.String _billingContactFaxNumber, 
			System.String _websiteUrl, System.Int32 _salesPersonId, System.Int32 _verticalId, System.Int32 _companyId, 
			System.String _currencyId, System.Int32 _billingPeriodCutoff, System.Int32 _taxableId, System.String _creditCardNameOnCard, 
			System.String _creditCardNumber, System.String _creditCardExp, System.String _creditCardVerCode, 
			System.String _creditCardTypeName, System.DateTime _createdDate, System.DateTime _lastModified, System.Guid _uniqueCustomerId, 
			System.Boolean? _enabled, System.Int32? _userId, System.String _webGroupId, System.Int32 _accountManagerId)
		{
			Customer newCustomer = new Customer();
			newCustomer.WholesalerId = _wholesalerId;
			newCustomer.PriCustomerNumber = _priCustomerNumber;
			newCustomer.Description = _description;
			newCustomer.ExternalCustomerNumber = _externalCustomerNumber;
			newCustomer.PrimaryContactName = _primaryContactName;
			newCustomer.PrimaryContactPhoneNumber = _primaryContactPhoneNumber;
			newCustomer.PrimaryContactEmailAddress = _primaryContactEmailAddress;
			newCustomer.PrimaryContactAddress1 = _primaryContactAddress1;
			newCustomer.PrimaryContactAddress2 = _primaryContactAddress2;
			newCustomer.PrimaryContactCity = _primaryContactCity;
			newCustomer.PrimaryContactCountry = _primaryContactCountry;
			newCustomer.PrimaryContactRegion = _primaryContactRegion;
			newCustomer.PrimaryContactPostalCode = _primaryContactPostalCode;
			newCustomer.PrimaryContactFaxNumber = _primaryContactFaxNumber;
			newCustomer.BillingContactName = _billingContactName;
			newCustomer.BillingContactPhoneNumber = _billingContactPhoneNumber;
			newCustomer.BillingContactEmailAddress = _billingContactEmailAddress;
			newCustomer.BillingContactAddress1 = _billingContactAddress1;
			newCustomer.BillingContactAddress2 = _billingContactAddress2;
			newCustomer.BillingContactCity = _billingContactCity;
			newCustomer.BillingContactCountry = _billingContactCountry;
			newCustomer.BillingContactRegion = _billingContactRegion;
			newCustomer.BillingContactPostalCode = _billingContactPostalCode;
			newCustomer.BillingContactFaxNumber = _billingContactFaxNumber;
			newCustomer.WebsiteUrl = _websiteUrl;
			newCustomer.SalesPersonId = _salesPersonId;
			newCustomer.VerticalId = _verticalId;
			newCustomer.CompanyId = _companyId;
			newCustomer.CurrencyId = _currencyId;
			newCustomer.BillingPeriodCutoff = _billingPeriodCutoff;
			newCustomer.TaxableId = _taxableId;
			newCustomer.CreditCardNameOnCard = _creditCardNameOnCard;
			newCustomer.CreditCardNumber = _creditCardNumber;
			newCustomer.CreditCardExp = _creditCardExp;
			newCustomer.CreditCardVerCode = _creditCardVerCode;
			newCustomer.CreditCardTypeName = _creditCardTypeName;
			newCustomer.CreatedDate = _createdDate;
			newCustomer.LastModified = _lastModified;
			newCustomer.UniqueCustomerId = _uniqueCustomerId;
			newCustomer.Enabled = _enabled;
			newCustomer.UserId = _userId;
			newCustomer.WebGroupId = _webGroupId;
			newCustomer.AccountManagerId = _accountManagerId;
			return newCustomer;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CustomerColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(CustomerColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this.entityData.PriCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.PriCustomerNumber == value)
					return;
					
				OnColumnChanging(CustomerColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				this.entityData.PriCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(CustomerColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ExternalCustomerNumber
		{
			get
			{
				return this.entityData.ExternalCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.ExternalCustomerNumber == value)
					return;
					
				OnColumnChanging(CustomerColumn.ExternalCustomerNumber, this.entityData.ExternalCustomerNumber);
				this.entityData.ExternalCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.ExternalCustomerNumber, this.entityData.ExternalCustomerNumber);
				OnPropertyChanged("ExternalCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String PrimaryContactName
		{
			get
			{
				return this.entityData.PrimaryContactName; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactName == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactName, this.entityData.PrimaryContactName);
				this.entityData.PrimaryContactName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactName, this.entityData.PrimaryContactName);
				OnPropertyChanged("PrimaryContactName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactPhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String PrimaryContactPhoneNumber
		{
			get
			{
				return this.entityData.PrimaryContactPhoneNumber; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactPhoneNumber == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactPhoneNumber, this.entityData.PrimaryContactPhoneNumber);
				this.entityData.PrimaryContactPhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactPhoneNumber, this.entityData.PrimaryContactPhoneNumber);
				OnPropertyChanged("PrimaryContactPhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactEmailAddress property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 100)]
		public virtual System.String PrimaryContactEmailAddress
		{
			get
			{
				return this.entityData.PrimaryContactEmailAddress; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactEmailAddress == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactEmailAddress, this.entityData.PrimaryContactEmailAddress);
				this.entityData.PrimaryContactEmailAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactEmailAddress, this.entityData.PrimaryContactEmailAddress);
				OnPropertyChanged("PrimaryContactEmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactAddress1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PrimaryContactAddress1
		{
			get
			{
				return this.entityData.PrimaryContactAddress1; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactAddress1 == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactAddress1, this.entityData.PrimaryContactAddress1);
				this.entityData.PrimaryContactAddress1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactAddress1, this.entityData.PrimaryContactAddress1);
				OnPropertyChanged("PrimaryContactAddress1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactAddress2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PrimaryContactAddress2
		{
			get
			{
				return this.entityData.PrimaryContactAddress2; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactAddress2 == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactAddress2, this.entityData.PrimaryContactAddress2);
				this.entityData.PrimaryContactAddress2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactAddress2, this.entityData.PrimaryContactAddress2);
				OnPropertyChanged("PrimaryContactAddress2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String PrimaryContactCity
		{
			get
			{
				return this.entityData.PrimaryContactCity; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactCity == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactCity, this.entityData.PrimaryContactCity);
				this.entityData.PrimaryContactCity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactCity, this.entityData.PrimaryContactCity);
				OnPropertyChanged("PrimaryContactCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactCountry property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String PrimaryContactCountry
		{
			get
			{
				return this.entityData.PrimaryContactCountry; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactCountry == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactCountry, this.entityData.PrimaryContactCountry);
				this.entityData.PrimaryContactCountry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactCountry, this.entityData.PrimaryContactCountry);
				OnPropertyChanged("PrimaryContactCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactRegion property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String PrimaryContactRegion
		{
			get
			{
				return this.entityData.PrimaryContactRegion; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactRegion == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactRegion, this.entityData.PrimaryContactRegion);
				this.entityData.PrimaryContactRegion = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactRegion, this.entityData.PrimaryContactRegion);
				OnPropertyChanged("PrimaryContactRegion");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactPostalCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PrimaryContactPostalCode
		{
			get
			{
				return this.entityData.PrimaryContactPostalCode; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactPostalCode == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactPostalCode, this.entityData.PrimaryContactPostalCode);
				this.entityData.PrimaryContactPostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactPostalCode, this.entityData.PrimaryContactPostalCode);
				OnPropertyChanged("PrimaryContactPostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PrimaryContactFaxNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String PrimaryContactFaxNumber
		{
			get
			{
				return this.entityData.PrimaryContactFaxNumber; 
			}
			
			set
			{
				if (this.entityData.PrimaryContactFaxNumber == value)
					return;
					
				OnColumnChanging(CustomerColumn.PrimaryContactFaxNumber, this.entityData.PrimaryContactFaxNumber);
				this.entityData.PrimaryContactFaxNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.PrimaryContactFaxNumber, this.entityData.PrimaryContactFaxNumber);
				OnPropertyChanged("PrimaryContactFaxNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String BillingContactName
		{
			get
			{
				return this.entityData.BillingContactName; 
			}
			
			set
			{
				if (this.entityData.BillingContactName == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactName, this.entityData.BillingContactName);
				this.entityData.BillingContactName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactName, this.entityData.BillingContactName);
				OnPropertyChanged("BillingContactName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactPhoneNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String BillingContactPhoneNumber
		{
			get
			{
				return this.entityData.BillingContactPhoneNumber; 
			}
			
			set
			{
				if (this.entityData.BillingContactPhoneNumber == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactPhoneNumber, this.entityData.BillingContactPhoneNumber);
				this.entityData.BillingContactPhoneNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactPhoneNumber, this.entityData.BillingContactPhoneNumber);
				OnPropertyChanged("BillingContactPhoneNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactEmailAddress property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String BillingContactEmailAddress
		{
			get
			{
				return this.entityData.BillingContactEmailAddress; 
			}
			
			set
			{
				if (this.entityData.BillingContactEmailAddress == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactEmailAddress, this.entityData.BillingContactEmailAddress);
				this.entityData.BillingContactEmailAddress = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactEmailAddress, this.entityData.BillingContactEmailAddress);
				OnPropertyChanged("BillingContactEmailAddress");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactAddress1 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String BillingContactAddress1
		{
			get
			{
				return this.entityData.BillingContactAddress1; 
			}
			
			set
			{
				if (this.entityData.BillingContactAddress1 == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactAddress1, this.entityData.BillingContactAddress1);
				this.entityData.BillingContactAddress1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactAddress1, this.entityData.BillingContactAddress1);
				OnPropertyChanged("BillingContactAddress1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactAddress2 property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String BillingContactAddress2
		{
			get
			{
				return this.entityData.BillingContactAddress2; 
			}
			
			set
			{
				if (this.entityData.BillingContactAddress2 == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactAddress2, this.entityData.BillingContactAddress2);
				this.entityData.BillingContactAddress2 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactAddress2, this.entityData.BillingContactAddress2);
				OnPropertyChanged("BillingContactAddress2");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactCity property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String BillingContactCity
		{
			get
			{
				return this.entityData.BillingContactCity; 
			}
			
			set
			{
				if (this.entityData.BillingContactCity == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactCity, this.entityData.BillingContactCity);
				this.entityData.BillingContactCity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactCity, this.entityData.BillingContactCity);
				OnPropertyChanged("BillingContactCity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactCountry property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String BillingContactCountry
		{
			get
			{
				return this.entityData.BillingContactCountry; 
			}
			
			set
			{
				if (this.entityData.BillingContactCountry == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactCountry, this.entityData.BillingContactCountry);
				this.entityData.BillingContactCountry = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactCountry, this.entityData.BillingContactCountry);
				OnPropertyChanged("BillingContactCountry");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactRegion property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String BillingContactRegion
		{
			get
			{
				return this.entityData.BillingContactRegion; 
			}
			
			set
			{
				if (this.entityData.BillingContactRegion == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactRegion, this.entityData.BillingContactRegion);
				this.entityData.BillingContactRegion = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactRegion, this.entityData.BillingContactRegion);
				OnPropertyChanged("BillingContactRegion");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactPostalCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String BillingContactPostalCode
		{
			get
			{
				return this.entityData.BillingContactPostalCode; 
			}
			
			set
			{
				if (this.entityData.BillingContactPostalCode == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactPostalCode, this.entityData.BillingContactPostalCode);
				this.entityData.BillingContactPostalCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactPostalCode, this.entityData.BillingContactPostalCode);
				OnPropertyChanged("BillingContactPostalCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingContactFaxNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String BillingContactFaxNumber
		{
			get
			{
				return this.entityData.BillingContactFaxNumber; 
			}
			
			set
			{
				if (this.entityData.BillingContactFaxNumber == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingContactFaxNumber, this.entityData.BillingContactFaxNumber);
				this.entityData.BillingContactFaxNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingContactFaxNumber, this.entityData.BillingContactFaxNumber);
				OnPropertyChanged("BillingContactFaxNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WebsiteUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String WebsiteUrl
		{
			get
			{
				return this.entityData.WebsiteUrl; 
			}
			
			set
			{
				if (this.entityData.WebsiteUrl == value)
					return;
					
				OnColumnChanging(CustomerColumn.WebsiteUrl, this.entityData.WebsiteUrl);
				this.entityData.WebsiteUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.WebsiteUrl, this.entityData.WebsiteUrl);
				OnPropertyChanged("WebsiteUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesPersonId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SalesPersonId
		{
			get
			{
				return this.entityData.SalesPersonId; 
			}
			
			set
			{
				if (this.entityData.SalesPersonId == value)
					return;
					
				OnColumnChanging(CustomerColumn.SalesPersonId, this.entityData.SalesPersonId);
				this.entityData.SalesPersonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.SalesPersonId, this.entityData.SalesPersonId);
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the VerticalId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 VerticalId
		{
			get
			{
				return this.entityData.VerticalId; 
			}
			
			set
			{
				if (this.entityData.VerticalId == value)
					return;
					
				OnColumnChanging(CustomerColumn.VerticalId, this.entityData.VerticalId);
				this.entityData.VerticalId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.VerticalId, this.entityData.VerticalId);
				OnPropertyChanged("VerticalId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CompanyId
		{
			get
			{
				return this.entityData.CompanyId; 
			}
			
			set
			{
				if (this.entityData.CompanyId == value)
					return;
					
				OnColumnChanging(CustomerColumn.CompanyId, this.entityData.CompanyId);
				this.entityData.CompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.CompanyId, this.entityData.CompanyId);
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String CurrencyId
		{
			get
			{
				return this.entityData.CurrencyId; 
			}
			
			set
			{
				if (this.entityData.CurrencyId == value)
					return;
					
				OnColumnChanging(CustomerColumn.CurrencyId, this.entityData.CurrencyId);
				this.entityData.CurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.CurrencyId, this.entityData.CurrencyId);
				OnPropertyChanged("CurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingPeriodCutoff property. 
		///		Used to denote the day of the customers billing cycle. Only used/important if you support multiple billing cycles per month.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute("Used to denote the day of the customers billing cycle. Only used/important if you support multiple billing cycles per month."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 BillingPeriodCutoff
		{
			get
			{
				return this.entityData.BillingPeriodCutoff; 
			}
			
			set
			{
				if (this.entityData.BillingPeriodCutoff == value)
					return;
					
				OnColumnChanging(CustomerColumn.BillingPeriodCutoff, this.entityData.BillingPeriodCutoff);
				this.entityData.BillingPeriodCutoff = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.BillingPeriodCutoff, this.entityData.BillingPeriodCutoff);
				OnPropertyChanged("BillingPeriodCutoff");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxableId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TaxableId
		{
			get
			{
				return this.entityData.TaxableId; 
			}
			
			set
			{
				if (this.entityData.TaxableId == value)
					return;
					
				OnColumnChanging(CustomerColumn.TaxableId, this.entityData.TaxableId);
				this.entityData.TaxableId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.TaxableId, this.entityData.TaxableId);
				OnPropertyChanged("TaxableId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardNameOnCard property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String CreditCardNameOnCard
		{
			get
			{
				return this.entityData.CreditCardNameOnCard; 
			}
			
			set
			{
				if (this.entityData.CreditCardNameOnCard == value)
					return;
					
				OnColumnChanging(CustomerColumn.CreditCardNameOnCard, this.entityData.CreditCardNameOnCard);
				this.entityData.CreditCardNameOnCard = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.CreditCardNameOnCard, this.entityData.CreditCardNameOnCard);
				OnPropertyChanged("CreditCardNameOnCard");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String CreditCardNumber
		{
			get
			{
				return this.entityData.CreditCardNumber; 
			}
			
			set
			{
				if (this.entityData.CreditCardNumber == value)
					return;
					
				OnColumnChanging(CustomerColumn.CreditCardNumber, this.entityData.CreditCardNumber);
				this.entityData.CreditCardNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.CreditCardNumber, this.entityData.CreditCardNumber);
				OnPropertyChanged("CreditCardNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardExp property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 4)]
		public virtual System.String CreditCardExp
		{
			get
			{
				return this.entityData.CreditCardExp; 
			}
			
			set
			{
				if (this.entityData.CreditCardExp == value)
					return;
					
				OnColumnChanging(CustomerColumn.CreditCardExp, this.entityData.CreditCardExp);
				this.entityData.CreditCardExp = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.CreditCardExp, this.entityData.CreditCardExp);
				OnPropertyChanged("CreditCardExp");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardVerCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String CreditCardVerCode
		{
			get
			{
				return this.entityData.CreditCardVerCode; 
			}
			
			set
			{
				if (this.entityData.CreditCardVerCode == value)
					return;
					
				OnColumnChanging(CustomerColumn.CreditCardVerCode, this.entityData.CreditCardVerCode);
				this.entityData.CreditCardVerCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.CreditCardVerCode, this.entityData.CreditCardVerCode);
				OnPropertyChanged("CreditCardVerCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreditCardTypeName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String CreditCardTypeName
		{
			get
			{
				return this.entityData.CreditCardTypeName; 
			}
			
			set
			{
				if (this.entityData.CreditCardTypeName == value)
					return;
					
				OnColumnChanging(CustomerColumn.CreditCardTypeName, this.entityData.CreditCardTypeName);
				this.entityData.CreditCardTypeName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.CreditCardTypeName, this.entityData.CreditCardTypeName);
				OnPropertyChanged("CreditCardTypeName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(CustomerColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(CustomerColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueCustomerId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Guid UniqueCustomerId
		{
			get
			{
				return this.entityData.UniqueCustomerId; 
			}
			
			set
			{
				if (this.entityData.UniqueCustomerId == value)
					return;
					
				OnColumnChanging(CustomerColumn.UniqueCustomerId, this.entityData.UniqueCustomerId);
				this.entityData.UniqueCustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.UniqueCustomerId, this.entityData.UniqueCustomerId);
				OnPropertyChanged("UniqueCustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Enabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnabledNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Enabled
		{
			get
			{
				return this.entityData.Enabled; 
			}
			
			set
			{
				if (this.entityData.Enabled == value)
					return;
					
				OnColumnChanging(CustomerColumn.Enabled, this.entityData.Enabled);
				this.entityData.Enabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.Enabled, this.entityData.Enabled);
				OnPropertyChanged("Enabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(CustomerColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WebGroupId property. 
		///		Used by the Web API to store GroupID
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Used by the Web API to store GroupID"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String WebGroupId
		{
			get
			{
				return this.entityData.WebGroupId; 
			}
			
			set
			{
				if (this.entityData.WebGroupId == value)
					return;
					
				OnColumnChanging(CustomerColumn.WebGroupId, this.entityData.WebGroupId);
				this.entityData.WebGroupId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.WebGroupId, this.entityData.WebGroupId);
				OnPropertyChanged("WebGroupId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AccountManagerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AccountManagerId
		{
			get
			{
				return this.entityData.AccountManagerId; 
			}
			
			set
			{
				if (this.entityData.AccountManagerId == value)
					return;
					
				OnColumnChanging(CustomerColumn.AccountManagerId, this.entityData.AccountManagerId);
				this.entityData.AccountManagerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerColumn.AccountManagerId, this.entityData.AccountManagerId);
				OnPropertyChanged("AccountManagerId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for UserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual User UserIdSource
      	{
            get { return entityData.UserIdSource; }
            set { entityData.UserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Company"/>.
		/// </summary>
		/// <value>The source Company for CompanyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Company CompanyIdSource
      	{
            get { return entityData.CompanyIdSource; }
            set { entityData.CompanyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Currency"/>.
		/// </summary>
		/// <value>The source Currency for CurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Currency CurrencyIdSource
      	{
            get { return entityData.CurrencyIdSource; }
            set { entityData.CurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="AccountManager"/>.
		/// </summary>
		/// <value>The source AccountManager for AccountManagerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual AccountManager AccountManagerIdSource
      	{
            get { return entityData.AccountManagerIdSource; }
            set { entityData.AccountManagerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for BillingContactCountry.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Country BillingContactCountrySource
      	{
            get { return entityData.BillingContactCountrySource; }
            set { entityData.BillingContactCountrySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="State"/>.
		/// </summary>
		/// <value>The source State for BillingContactRegion.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual State BillingContactRegionSource
      	{
            get { return entityData.BillingContactRegionSource; }
            set { entityData.BillingContactRegionSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for PrimaryContactCountry.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Country PrimaryContactCountrySource
      	{
            get { return entityData.PrimaryContactCountrySource; }
            set { entityData.PrimaryContactCountrySource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="State"/>.
		/// </summary>
		/// <value>The source State for PrimaryContactRegion.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual State PrimaryContactRegionSource
      	{
            get { return entityData.PrimaryContactRegionSource; }
            set { entityData.PrimaryContactRegionSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return entityData.SalesPersonIdSource; }
            set { entityData.SalesPersonIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Taxable"/>.
		/// </summary>
		/// <value>The source Taxable for TaxableId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Taxable TaxableIdSource
      	{
            get { return entityData.TaxableIdSource; }
            set { entityData.TaxableIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Vertical"/>.
		/// </summary>
		/// <value>The source Vertical for VerticalId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Vertical VerticalIdSource
      	{
            get { return entityData.VerticalIdSource; }
            set { entityData.VerticalIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return entityData.WholesalerIdSource; }
            set { entityData.WholesalerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CustomerDocument objects
		///	which are related to this object through the relation Customer_CustomerDocument_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerDocument> CustomerDocumentCollection
		{
			get { return entityData.CustomerDocumentCollection; }
			set { entityData.CustomerDocumentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ProductRateValue objects
		///	which are related to this object through the relation Customer_ProductRateValue_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductRateValue> ProductRateValueCollection
		{
			get { return entityData.ProductRateValueCollection; }
			set { entityData.ProductRateValueCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Customer_Feature objects
		///	which are related to this object through the relation Customer_Customer_Feature_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Customer_Feature> Customer_FeatureCollection
		{
			get { return entityData.Customer_FeatureCollection; }
			set { entityData.Customer_FeatureCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CommissionCustomer objects
		///	which are related to this object through the relation Customer_CommissionCustomer_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CommissionCustomer> CommissionCustomerCollection
		{
			get { return entityData.CommissionCustomerCollection; }
			set { entityData.CommissionCustomerCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CustomerTransaction objects
		///	which are related to this object through the relation Customer_CustomerTransactions_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerTransaction> CustomerTransactionCollection
		{
			get { return entityData.CustomerTransactionCollection; }
			set { entityData.CustomerTransactionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of ParticipantList objects
		///	which are related to this object through the relation FK_ParticipantList_Customer
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ParticipantList> ParticipantListCollection
		{
			get { return entityData.ParticipantListCollection; }
			set { entityData.ParticipantListCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Department objects
		///	which are related to this object through the relation Customer_Department_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Department> DepartmentCollection
		{
			get { return entityData.DepartmentCollection; }
			set { entityData.DepartmentCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Customer_Dnis objects
		///	which are related to this object through the relation Customer_Customer_DNIS_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Customer_Dnis> Customer_DnisCollection
		{
			get { return entityData.Customer_DnisCollection; }
			set { entityData.Customer_DnisCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of InvoiceSummary objects
		///	which are related to this object through the relation FK_InvoiceSummary_Customer
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<InvoiceSummary> InvoiceSummaryCollection
		{
			get { return entityData.InvoiceSummaryCollection; }
			set { entityData.InvoiceSummaryCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of DnisFromCustomer_Dnis objects
		///	which are related to this object through the junction table Customer_Dnis
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Dnis> DnisidDnisCollection_From_Customer_Dnis
		{
			get { return entityData.DnisidDnisCollection_From_Customer_Dnis; }
			set { entityData.DnisidDnisCollection_From_Customer_Dnis = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Ticket objects
		///	which are related to this object through the relation FK_Ticket_Customer
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Ticket> TicketCollection
		{
			get { return entityData.TicketCollection; }
			set { entityData.TicketCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Commission objects
		///	which are related to this object through the relation Customer_Commission_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Commission> CommissionCollection
		{
			get { return entityData.CommissionCollection; }
			set { entityData.CommissionCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of EventManager objects
		///	which are related to this object through the relation FK_EventManager_Customer
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<EventManager> EventManagerCollection
		{
			get { return entityData.EventManagerCollection; }
			set { entityData.EventManagerCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Moderator objects
		///	which are related to this object through the relation FK_Moderator_Customer
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Moderator> ModeratorCollection
		{
			get { return entityData.ModeratorCollection; }
			set { entityData.ModeratorCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PriCustomerNumber", "Pri Customer Number"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PriCustomerNumber", "Pri Customer Number", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Description", "Description", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExternalCustomerNumber", "External Customer Number", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PrimaryContactName", "Primary Contact Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactName", "Primary Contact Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PrimaryContactPhoneNumber", "Primary Contact Phone Number"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactPhoneNumber", "Primary Contact Phone Number", 30));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PrimaryContactEmailAddress", "Primary Contact Email Address"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactEmailAddress", "Primary Contact Email Address", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactAddress1", "Primary Contact Address1", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactAddress2", "Primary Contact Address2", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactCity", "Primary Contact City", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactCountry", "Primary Contact Country", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactRegion", "Primary Contact Region", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactPostalCode", "Primary Contact Postal Code", 20));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PrimaryContactFaxNumber", "Primary Contact Fax Number", 30));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactName", "Billing Contact Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactPhoneNumber", "Billing Contact Phone Number", 30));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactEmailAddress", "Billing Contact Email Address", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactAddress1", "Billing Contact Address1", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactAddress2", "Billing Contact Address2", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactCity", "Billing Contact City", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactCountry", "Billing Contact Country", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactRegion", "Billing Contact Region", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactPostalCode", "Billing Contact Postal Code", 20));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingContactFaxNumber", "Billing Contact Fax Number", 30));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WebsiteUrl", "Website Url", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("CurrencyId", "Currency Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CurrencyId", "Currency Id", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CreditCardNameOnCard", "Credit Card Name On Card", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CreditCardNumber", "Credit Card Number", 20));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CreditCardExp", "Credit Card Exp", 4));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CreditCardVerCode", "Credit Card Ver Code", 6));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CreditCardTypeName", "Credit Card Type Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WebGroupId", "Web Group Id", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Customer"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WholesalerID", "PriCustomerNumber", "Description", "ExternalCustomerNumber", "PrimaryContactName", "PrimaryContactPhoneNumber", "PrimaryContactEmailAddress", "PrimaryContactAddress1", "PrimaryContactAddress2", "PrimaryContactCity", "PrimaryContactCountry", "PrimaryContactRegion", "PrimaryContactPostalCode", "PrimaryContactFaxNumber", "BillingContactName", "BillingContactPhoneNumber", "BillingContactEmailAddress", "BillingContactAddress1", "BillingContactAddress2", "BillingContactCity", "BillingContactCountry", "BillingContactRegion", "BillingContactPostalCode", "BillingContactFaxNumber", "WebsiteURL", "SalesPersonID", "VerticalID", "CompanyID", "CurrencyID", "BillingPeriodCutoff", "TaxableID", "CreditCardNameOnCard", "CreditCardNumber", "CreditCardExp", "CreditCardVerCode", "CreditCardTypeName", "CreatedDate", "LastModified", "UniqueCustomerID", "Enabled", "UserID", "WebGroupID", "AccountManagerID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomerEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Customer) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Customer>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Customer);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Customer Entity 
		///</summary>
		public virtual Customer Copy()
		{
			//shallow copy entity
			Customer copy = new Customer();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.WholesalerId = this.WholesalerId;
			copy.PriCustomerNumber = this.PriCustomerNumber;
			copy.Description = this.Description;
			copy.ExternalCustomerNumber = this.ExternalCustomerNumber;
			copy.PrimaryContactName = this.PrimaryContactName;
			copy.PrimaryContactPhoneNumber = this.PrimaryContactPhoneNumber;
			copy.PrimaryContactEmailAddress = this.PrimaryContactEmailAddress;
			copy.PrimaryContactAddress1 = this.PrimaryContactAddress1;
			copy.PrimaryContactAddress2 = this.PrimaryContactAddress2;
			copy.PrimaryContactCity = this.PrimaryContactCity;
			copy.PrimaryContactCountry = this.PrimaryContactCountry;
			copy.PrimaryContactRegion = this.PrimaryContactRegion;
			copy.PrimaryContactPostalCode = this.PrimaryContactPostalCode;
			copy.PrimaryContactFaxNumber = this.PrimaryContactFaxNumber;
			copy.BillingContactName = this.BillingContactName;
			copy.BillingContactPhoneNumber = this.BillingContactPhoneNumber;
			copy.BillingContactEmailAddress = this.BillingContactEmailAddress;
			copy.BillingContactAddress1 = this.BillingContactAddress1;
			copy.BillingContactAddress2 = this.BillingContactAddress2;
			copy.BillingContactCity = this.BillingContactCity;
			copy.BillingContactCountry = this.BillingContactCountry;
			copy.BillingContactRegion = this.BillingContactRegion;
			copy.BillingContactPostalCode = this.BillingContactPostalCode;
			copy.BillingContactFaxNumber = this.BillingContactFaxNumber;
			copy.WebsiteUrl = this.WebsiteUrl;
			copy.SalesPersonId = this.SalesPersonId;
			copy.VerticalId = this.VerticalId;
			copy.CompanyId = this.CompanyId;
			copy.CurrencyId = this.CurrencyId;
			copy.BillingPeriodCutoff = this.BillingPeriodCutoff;
			copy.TaxableId = this.TaxableId;
			copy.CreditCardNameOnCard = this.CreditCardNameOnCard;
			copy.CreditCardNumber = this.CreditCardNumber;
			copy.CreditCardExp = this.CreditCardExp;
			copy.CreditCardVerCode = this.CreditCardVerCode;
			copy.CreditCardTypeName = this.CreditCardTypeName;
			copy.CreatedDate = this.CreatedDate;
			copy.LastModified = this.LastModified;
			copy.UniqueCustomerId = this.UniqueCustomerId;
			copy.Enabled = this.Enabled;
			copy.UserId = this.UserId;
			copy.WebGroupId = this.WebGroupId;
			copy.AccountManagerId = this.AccountManagerId;
			
			copy.UserIdSource = MakeCopyOf(this.UserIdSource) as User;
			copy.CompanyIdSource = MakeCopyOf(this.CompanyIdSource) as Company;
			copy.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource) as Currency;
			copy.AccountManagerIdSource = MakeCopyOf(this.AccountManagerIdSource) as AccountManager;
			copy.BillingContactCountrySource = MakeCopyOf(this.BillingContactCountrySource) as Country;
			copy.BillingContactRegionSource = MakeCopyOf(this.BillingContactRegionSource) as State;
			copy.PrimaryContactCountrySource = MakeCopyOf(this.PrimaryContactCountrySource) as Country;
			copy.PrimaryContactRegionSource = MakeCopyOf(this.PrimaryContactRegionSource) as State;
			copy.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
			copy.TaxableIdSource = MakeCopyOf(this.TaxableIdSource) as Taxable;
			copy.VerticalIdSource = MakeCopyOf(this.VerticalIdSource) as Vertical;
			copy.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
		
			//deep copy nested objects
			copy.CustomerDocumentCollection = (TList<CustomerDocument>) MakeCopyOf(this.CustomerDocumentCollection); 
			copy.ProductRateValueCollection = (TList<ProductRateValue>) MakeCopyOf(this.ProductRateValueCollection); 
			copy.Customer_FeatureCollection = (TList<Customer_Feature>) MakeCopyOf(this.Customer_FeatureCollection); 
			copy.CommissionCustomerCollection = (TList<CommissionCustomer>) MakeCopyOf(this.CommissionCustomerCollection); 
			copy.CustomerTransactionCollection = (TList<CustomerTransaction>) MakeCopyOf(this.CustomerTransactionCollection); 
			copy.ParticipantListCollection = (TList<ParticipantList>) MakeCopyOf(this.ParticipantListCollection); 
			copy.DepartmentCollection = (TList<Department>) MakeCopyOf(this.DepartmentCollection); 
			copy.Customer_DnisCollection = (TList<Customer_Dnis>) MakeCopyOf(this.Customer_DnisCollection); 
			copy.InvoiceSummaryCollection = (TList<InvoiceSummary>) MakeCopyOf(this.InvoiceSummaryCollection); 
			copy.DnisidDnisCollection_From_Customer_Dnis = (TList<Dnis>) MakeCopyOf(this.DnisidDnisCollection_From_Customer_Dnis); 
			copy.TicketCollection = (TList<Ticket>) MakeCopyOf(this.TicketCollection); 
			copy.CommissionCollection = (TList<Commission>) MakeCopyOf(this.CommissionCollection); 
			copy.EventManagerCollection = (TList<EventManager>) MakeCopyOf(this.EventManagerCollection); 
			copy.ModeratorCollection = (TList<Moderator>) MakeCopyOf(this.ModeratorCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Customer Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Customer DeepCopy()
		{
			return EntityHelper.Clone<Customer>(this as Customer);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomerEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomerEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomerColumn column)
		{
			switch(column)
			{
					case CustomerColumn.Id:
					return entityData.Id != _originalData.Id;
					case CustomerColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case CustomerColumn.PriCustomerNumber:
					return entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
					case CustomerColumn.Description:
					return entityData.Description != _originalData.Description;
					case CustomerColumn.ExternalCustomerNumber:
					return entityData.ExternalCustomerNumber != _originalData.ExternalCustomerNumber;
					case CustomerColumn.PrimaryContactName:
					return entityData.PrimaryContactName != _originalData.PrimaryContactName;
					case CustomerColumn.PrimaryContactPhoneNumber:
					return entityData.PrimaryContactPhoneNumber != _originalData.PrimaryContactPhoneNumber;
					case CustomerColumn.PrimaryContactEmailAddress:
					return entityData.PrimaryContactEmailAddress != _originalData.PrimaryContactEmailAddress;
					case CustomerColumn.PrimaryContactAddress1:
					return entityData.PrimaryContactAddress1 != _originalData.PrimaryContactAddress1;
					case CustomerColumn.PrimaryContactAddress2:
					return entityData.PrimaryContactAddress2 != _originalData.PrimaryContactAddress2;
					case CustomerColumn.PrimaryContactCity:
					return entityData.PrimaryContactCity != _originalData.PrimaryContactCity;
					case CustomerColumn.PrimaryContactCountry:
					return entityData.PrimaryContactCountry != _originalData.PrimaryContactCountry;
					case CustomerColumn.PrimaryContactRegion:
					return entityData.PrimaryContactRegion != _originalData.PrimaryContactRegion;
					case CustomerColumn.PrimaryContactPostalCode:
					return entityData.PrimaryContactPostalCode != _originalData.PrimaryContactPostalCode;
					case CustomerColumn.PrimaryContactFaxNumber:
					return entityData.PrimaryContactFaxNumber != _originalData.PrimaryContactFaxNumber;
					case CustomerColumn.BillingContactName:
					return entityData.BillingContactName != _originalData.BillingContactName;
					case CustomerColumn.BillingContactPhoneNumber:
					return entityData.BillingContactPhoneNumber != _originalData.BillingContactPhoneNumber;
					case CustomerColumn.BillingContactEmailAddress:
					return entityData.BillingContactEmailAddress != _originalData.BillingContactEmailAddress;
					case CustomerColumn.BillingContactAddress1:
					return entityData.BillingContactAddress1 != _originalData.BillingContactAddress1;
					case CustomerColumn.BillingContactAddress2:
					return entityData.BillingContactAddress2 != _originalData.BillingContactAddress2;
					case CustomerColumn.BillingContactCity:
					return entityData.BillingContactCity != _originalData.BillingContactCity;
					case CustomerColumn.BillingContactCountry:
					return entityData.BillingContactCountry != _originalData.BillingContactCountry;
					case CustomerColumn.BillingContactRegion:
					return entityData.BillingContactRegion != _originalData.BillingContactRegion;
					case CustomerColumn.BillingContactPostalCode:
					return entityData.BillingContactPostalCode != _originalData.BillingContactPostalCode;
					case CustomerColumn.BillingContactFaxNumber:
					return entityData.BillingContactFaxNumber != _originalData.BillingContactFaxNumber;
					case CustomerColumn.WebsiteUrl:
					return entityData.WebsiteUrl != _originalData.WebsiteUrl;
					case CustomerColumn.SalesPersonId:
					return entityData.SalesPersonId != _originalData.SalesPersonId;
					case CustomerColumn.VerticalId:
					return entityData.VerticalId != _originalData.VerticalId;
					case CustomerColumn.CompanyId:
					return entityData.CompanyId != _originalData.CompanyId;
					case CustomerColumn.CurrencyId:
					return entityData.CurrencyId != _originalData.CurrencyId;
					case CustomerColumn.BillingPeriodCutoff:
					return entityData.BillingPeriodCutoff != _originalData.BillingPeriodCutoff;
					case CustomerColumn.TaxableId:
					return entityData.TaxableId != _originalData.TaxableId;
					case CustomerColumn.CreditCardNameOnCard:
					return entityData.CreditCardNameOnCard != _originalData.CreditCardNameOnCard;
					case CustomerColumn.CreditCardNumber:
					return entityData.CreditCardNumber != _originalData.CreditCardNumber;
					case CustomerColumn.CreditCardExp:
					return entityData.CreditCardExp != _originalData.CreditCardExp;
					case CustomerColumn.CreditCardVerCode:
					return entityData.CreditCardVerCode != _originalData.CreditCardVerCode;
					case CustomerColumn.CreditCardTypeName:
					return entityData.CreditCardTypeName != _originalData.CreditCardTypeName;
					case CustomerColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case CustomerColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case CustomerColumn.UniqueCustomerId:
					return entityData.UniqueCustomerId != _originalData.UniqueCustomerId;
					case CustomerColumn.Enabled:
					return entityData.Enabled != _originalData.Enabled;
					case CustomerColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case CustomerColumn.WebGroupId:
					return entityData.WebGroupId != _originalData.WebGroupId;
					case CustomerColumn.AccountManagerId:
					return entityData.AccountManagerId != _originalData.AccountManagerId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.ExternalCustomerNumber != _originalData.ExternalCustomerNumber;
			result = result || entityData.PrimaryContactName != _originalData.PrimaryContactName;
			result = result || entityData.PrimaryContactPhoneNumber != _originalData.PrimaryContactPhoneNumber;
			result = result || entityData.PrimaryContactEmailAddress != _originalData.PrimaryContactEmailAddress;
			result = result || entityData.PrimaryContactAddress1 != _originalData.PrimaryContactAddress1;
			result = result || entityData.PrimaryContactAddress2 != _originalData.PrimaryContactAddress2;
			result = result || entityData.PrimaryContactCity != _originalData.PrimaryContactCity;
			result = result || entityData.PrimaryContactCountry != _originalData.PrimaryContactCountry;
			result = result || entityData.PrimaryContactRegion != _originalData.PrimaryContactRegion;
			result = result || entityData.PrimaryContactPostalCode != _originalData.PrimaryContactPostalCode;
			result = result || entityData.PrimaryContactFaxNumber != _originalData.PrimaryContactFaxNumber;
			result = result || entityData.BillingContactName != _originalData.BillingContactName;
			result = result || entityData.BillingContactPhoneNumber != _originalData.BillingContactPhoneNumber;
			result = result || entityData.BillingContactEmailAddress != _originalData.BillingContactEmailAddress;
			result = result || entityData.BillingContactAddress1 != _originalData.BillingContactAddress1;
			result = result || entityData.BillingContactAddress2 != _originalData.BillingContactAddress2;
			result = result || entityData.BillingContactCity != _originalData.BillingContactCity;
			result = result || entityData.BillingContactCountry != _originalData.BillingContactCountry;
			result = result || entityData.BillingContactRegion != _originalData.BillingContactRegion;
			result = result || entityData.BillingContactPostalCode != _originalData.BillingContactPostalCode;
			result = result || entityData.BillingContactFaxNumber != _originalData.BillingContactFaxNumber;
			result = result || entityData.WebsiteUrl != _originalData.WebsiteUrl;
			result = result || entityData.SalesPersonId != _originalData.SalesPersonId;
			result = result || entityData.VerticalId != _originalData.VerticalId;
			result = result || entityData.CompanyId != _originalData.CompanyId;
			result = result || entityData.CurrencyId != _originalData.CurrencyId;
			result = result || entityData.BillingPeriodCutoff != _originalData.BillingPeriodCutoff;
			result = result || entityData.TaxableId != _originalData.TaxableId;
			result = result || entityData.CreditCardNameOnCard != _originalData.CreditCardNameOnCard;
			result = result || entityData.CreditCardNumber != _originalData.CreditCardNumber;
			result = result || entityData.CreditCardExp != _originalData.CreditCardExp;
			result = result || entityData.CreditCardVerCode != _originalData.CreditCardVerCode;
			result = result || entityData.CreditCardTypeName != _originalData.CreditCardTypeName;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.UniqueCustomerId != _originalData.UniqueCustomerId;
			result = result || entityData.Enabled != _originalData.Enabled;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.WebGroupId != _originalData.WebGroupId;
			result = result || entityData.AccountManagerId != _originalData.AccountManagerId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomerBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is CustomerBase)
				return Equals(this, (CustomerBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomerBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					this.PriCustomerNumber.GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.ExternalCustomerNumber == null) ? string.Empty : this.ExternalCustomerNumber.ToString()).GetHashCode() ^ 
					this.PrimaryContactName.GetHashCode() ^ 
					this.PrimaryContactPhoneNumber.GetHashCode() ^ 
					this.PrimaryContactEmailAddress.GetHashCode() ^ 
					((this.PrimaryContactAddress1 == null) ? string.Empty : this.PrimaryContactAddress1.ToString()).GetHashCode() ^ 
					((this.PrimaryContactAddress2 == null) ? string.Empty : this.PrimaryContactAddress2.ToString()).GetHashCode() ^ 
					((this.PrimaryContactCity == null) ? string.Empty : this.PrimaryContactCity.ToString()).GetHashCode() ^ 
					((this.PrimaryContactCountry == null) ? string.Empty : this.PrimaryContactCountry.ToString()).GetHashCode() ^ 
					((this.PrimaryContactRegion == null) ? string.Empty : this.PrimaryContactRegion.ToString()).GetHashCode() ^ 
					((this.PrimaryContactPostalCode == null) ? string.Empty : this.PrimaryContactPostalCode.ToString()).GetHashCode() ^ 
					((this.PrimaryContactFaxNumber == null) ? string.Empty : this.PrimaryContactFaxNumber.ToString()).GetHashCode() ^ 
					((this.BillingContactName == null) ? string.Empty : this.BillingContactName.ToString()).GetHashCode() ^ 
					((this.BillingContactPhoneNumber == null) ? string.Empty : this.BillingContactPhoneNumber.ToString()).GetHashCode() ^ 
					((this.BillingContactEmailAddress == null) ? string.Empty : this.BillingContactEmailAddress.ToString()).GetHashCode() ^ 
					((this.BillingContactAddress1 == null) ? string.Empty : this.BillingContactAddress1.ToString()).GetHashCode() ^ 
					((this.BillingContactAddress2 == null) ? string.Empty : this.BillingContactAddress2.ToString()).GetHashCode() ^ 
					((this.BillingContactCity == null) ? string.Empty : this.BillingContactCity.ToString()).GetHashCode() ^ 
					((this.BillingContactCountry == null) ? string.Empty : this.BillingContactCountry.ToString()).GetHashCode() ^ 
					((this.BillingContactRegion == null) ? string.Empty : this.BillingContactRegion.ToString()).GetHashCode() ^ 
					((this.BillingContactPostalCode == null) ? string.Empty : this.BillingContactPostalCode.ToString()).GetHashCode() ^ 
					((this.BillingContactFaxNumber == null) ? string.Empty : this.BillingContactFaxNumber.ToString()).GetHashCode() ^ 
					((this.WebsiteUrl == null) ? string.Empty : this.WebsiteUrl.ToString()).GetHashCode() ^ 
					this.SalesPersonId.GetHashCode() ^ 
					this.VerticalId.GetHashCode() ^ 
					this.CompanyId.GetHashCode() ^ 
					this.CurrencyId.GetHashCode() ^ 
					this.BillingPeriodCutoff.GetHashCode() ^ 
					this.TaxableId.GetHashCode() ^ 
					((this.CreditCardNameOnCard == null) ? string.Empty : this.CreditCardNameOnCard.ToString()).GetHashCode() ^ 
					((this.CreditCardNumber == null) ? string.Empty : this.CreditCardNumber.ToString()).GetHashCode() ^ 
					((this.CreditCardExp == null) ? string.Empty : this.CreditCardExp.ToString()).GetHashCode() ^ 
					((this.CreditCardVerCode == null) ? string.Empty : this.CreditCardVerCode.ToString()).GetHashCode() ^ 
					((this.CreditCardTypeName == null) ? string.Empty : this.CreditCardTypeName.ToString()).GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					this.UniqueCustomerId.GetHashCode() ^ 
					((this.Enabled == null) ? string.Empty : this.Enabled.ToString()).GetHashCode() ^ 
					((this.UserId == null) ? string.Empty : this.UserId.ToString()).GetHashCode() ^ 
					((this.WebGroupId == null) ? string.Empty : this.WebGroupId.ToString()).GetHashCode() ^ 
					this.AccountManagerId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomerBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomerBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CustomerBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CustomerBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomerBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CustomerBase Object1, CustomerBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.ExternalCustomerNumber != null && Object2.ExternalCustomerNumber != null )
			{
				if (Object1.ExternalCustomerNumber != Object2.ExternalCustomerNumber)
					equal = false;
			}
			else if (Object1.ExternalCustomerNumber == null ^ Object2.ExternalCustomerNumber == null )
			{
				equal = false;
			}
			if (Object1.PrimaryContactName != Object2.PrimaryContactName)
				equal = false;
			if (Object1.PrimaryContactPhoneNumber != Object2.PrimaryContactPhoneNumber)
				equal = false;
			if (Object1.PrimaryContactEmailAddress != Object2.PrimaryContactEmailAddress)
				equal = false;
			if ( Object1.PrimaryContactAddress1 != null && Object2.PrimaryContactAddress1 != null )
			{
				if (Object1.PrimaryContactAddress1 != Object2.PrimaryContactAddress1)
					equal = false;
			}
			else if (Object1.PrimaryContactAddress1 == null ^ Object2.PrimaryContactAddress1 == null )
			{
				equal = false;
			}
			if ( Object1.PrimaryContactAddress2 != null && Object2.PrimaryContactAddress2 != null )
			{
				if (Object1.PrimaryContactAddress2 != Object2.PrimaryContactAddress2)
					equal = false;
			}
			else if (Object1.PrimaryContactAddress2 == null ^ Object2.PrimaryContactAddress2 == null )
			{
				equal = false;
			}
			if ( Object1.PrimaryContactCity != null && Object2.PrimaryContactCity != null )
			{
				if (Object1.PrimaryContactCity != Object2.PrimaryContactCity)
					equal = false;
			}
			else if (Object1.PrimaryContactCity == null ^ Object2.PrimaryContactCity == null )
			{
				equal = false;
			}
			if ( Object1.PrimaryContactCountry != null && Object2.PrimaryContactCountry != null )
			{
				if (Object1.PrimaryContactCountry != Object2.PrimaryContactCountry)
					equal = false;
			}
			else if (Object1.PrimaryContactCountry == null ^ Object2.PrimaryContactCountry == null )
			{
				equal = false;
			}
			if ( Object1.PrimaryContactRegion != null && Object2.PrimaryContactRegion != null )
			{
				if (Object1.PrimaryContactRegion != Object2.PrimaryContactRegion)
					equal = false;
			}
			else if (Object1.PrimaryContactRegion == null ^ Object2.PrimaryContactRegion == null )
			{
				equal = false;
			}
			if ( Object1.PrimaryContactPostalCode != null && Object2.PrimaryContactPostalCode != null )
			{
				if (Object1.PrimaryContactPostalCode != Object2.PrimaryContactPostalCode)
					equal = false;
			}
			else if (Object1.PrimaryContactPostalCode == null ^ Object2.PrimaryContactPostalCode == null )
			{
				equal = false;
			}
			if ( Object1.PrimaryContactFaxNumber != null && Object2.PrimaryContactFaxNumber != null )
			{
				if (Object1.PrimaryContactFaxNumber != Object2.PrimaryContactFaxNumber)
					equal = false;
			}
			else if (Object1.PrimaryContactFaxNumber == null ^ Object2.PrimaryContactFaxNumber == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactName != null && Object2.BillingContactName != null )
			{
				if (Object1.BillingContactName != Object2.BillingContactName)
					equal = false;
			}
			else if (Object1.BillingContactName == null ^ Object2.BillingContactName == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactPhoneNumber != null && Object2.BillingContactPhoneNumber != null )
			{
				if (Object1.BillingContactPhoneNumber != Object2.BillingContactPhoneNumber)
					equal = false;
			}
			else if (Object1.BillingContactPhoneNumber == null ^ Object2.BillingContactPhoneNumber == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactEmailAddress != null && Object2.BillingContactEmailAddress != null )
			{
				if (Object1.BillingContactEmailAddress != Object2.BillingContactEmailAddress)
					equal = false;
			}
			else if (Object1.BillingContactEmailAddress == null ^ Object2.BillingContactEmailAddress == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactAddress1 != null && Object2.BillingContactAddress1 != null )
			{
				if (Object1.BillingContactAddress1 != Object2.BillingContactAddress1)
					equal = false;
			}
			else if (Object1.BillingContactAddress1 == null ^ Object2.BillingContactAddress1 == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactAddress2 != null && Object2.BillingContactAddress2 != null )
			{
				if (Object1.BillingContactAddress2 != Object2.BillingContactAddress2)
					equal = false;
			}
			else if (Object1.BillingContactAddress2 == null ^ Object2.BillingContactAddress2 == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactCity != null && Object2.BillingContactCity != null )
			{
				if (Object1.BillingContactCity != Object2.BillingContactCity)
					equal = false;
			}
			else if (Object1.BillingContactCity == null ^ Object2.BillingContactCity == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactCountry != null && Object2.BillingContactCountry != null )
			{
				if (Object1.BillingContactCountry != Object2.BillingContactCountry)
					equal = false;
			}
			else if (Object1.BillingContactCountry == null ^ Object2.BillingContactCountry == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactRegion != null && Object2.BillingContactRegion != null )
			{
				if (Object1.BillingContactRegion != Object2.BillingContactRegion)
					equal = false;
			}
			else if (Object1.BillingContactRegion == null ^ Object2.BillingContactRegion == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactPostalCode != null && Object2.BillingContactPostalCode != null )
			{
				if (Object1.BillingContactPostalCode != Object2.BillingContactPostalCode)
					equal = false;
			}
			else if (Object1.BillingContactPostalCode == null ^ Object2.BillingContactPostalCode == null )
			{
				equal = false;
			}
			if ( Object1.BillingContactFaxNumber != null && Object2.BillingContactFaxNumber != null )
			{
				if (Object1.BillingContactFaxNumber != Object2.BillingContactFaxNumber)
					equal = false;
			}
			else if (Object1.BillingContactFaxNumber == null ^ Object2.BillingContactFaxNumber == null )
			{
				equal = false;
			}
			if ( Object1.WebsiteUrl != null && Object2.WebsiteUrl != null )
			{
				if (Object1.WebsiteUrl != Object2.WebsiteUrl)
					equal = false;
			}
			else if (Object1.WebsiteUrl == null ^ Object2.WebsiteUrl == null )
			{
				equal = false;
			}
			if (Object1.SalesPersonId != Object2.SalesPersonId)
				equal = false;
			if (Object1.VerticalId != Object2.VerticalId)
				equal = false;
			if (Object1.CompanyId != Object2.CompanyId)
				equal = false;
			if (Object1.CurrencyId != Object2.CurrencyId)
				equal = false;
			if (Object1.BillingPeriodCutoff != Object2.BillingPeriodCutoff)
				equal = false;
			if (Object1.TaxableId != Object2.TaxableId)
				equal = false;
			if ( Object1.CreditCardNameOnCard != null && Object2.CreditCardNameOnCard != null )
			{
				if (Object1.CreditCardNameOnCard != Object2.CreditCardNameOnCard)
					equal = false;
			}
			else if (Object1.CreditCardNameOnCard == null ^ Object2.CreditCardNameOnCard == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardNumber != null && Object2.CreditCardNumber != null )
			{
				if (Object1.CreditCardNumber != Object2.CreditCardNumber)
					equal = false;
			}
			else if (Object1.CreditCardNumber == null ^ Object2.CreditCardNumber == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardExp != null && Object2.CreditCardExp != null )
			{
				if (Object1.CreditCardExp != Object2.CreditCardExp)
					equal = false;
			}
			else if (Object1.CreditCardExp == null ^ Object2.CreditCardExp == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardVerCode != null && Object2.CreditCardVerCode != null )
			{
				if (Object1.CreditCardVerCode != Object2.CreditCardVerCode)
					equal = false;
			}
			else if (Object1.CreditCardVerCode == null ^ Object2.CreditCardVerCode == null )
			{
				equal = false;
			}
			if ( Object1.CreditCardTypeName != null && Object2.CreditCardTypeName != null )
			{
				if (Object1.CreditCardTypeName != Object2.CreditCardTypeName)
					equal = false;
			}
			else if (Object1.CreditCardTypeName == null ^ Object2.CreditCardTypeName == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if (Object1.UniqueCustomerId != Object2.UniqueCustomerId)
				equal = false;
			if ( Object1.Enabled != null && Object2.Enabled != null )
			{
				if (Object1.Enabled != Object2.Enabled)
					equal = false;
			}
			else if (Object1.Enabled == null ^ Object2.Enabled == null )
			{
				equal = false;
			}
			if ( Object1.UserId != null && Object2.UserId != null )
			{
				if (Object1.UserId != Object2.UserId)
					equal = false;
			}
			else if (Object1.UserId == null ^ Object2.UserId == null )
			{
				equal = false;
			}
			if ( Object1.WebGroupId != null && Object2.WebGroupId != null )
			{
				if (Object1.WebGroupId != Object2.WebGroupId)
					equal = false;
			}
			else if (Object1.WebGroupId == null ^ Object2.WebGroupId == null )
			{
				equal = false;
			}
			if (Object1.AccountManagerId != Object2.AccountManagerId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomerBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomerComparer GetComparer()
        {
            return new CustomerComparer();
        }
        */

        // Comparer delegates back to Customer
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Customer rhs, CustomerColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomerColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CustomerColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case CustomerColumn.PriCustomerNumber:
            		return this.PriCustomerNumber.CompareTo(rhs.PriCustomerNumber);
            		
            		                 
            	
            	
            	case CustomerColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case CustomerColumn.ExternalCustomerNumber:
            		return this.ExternalCustomerNumber.CompareTo(rhs.ExternalCustomerNumber);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactName:
            		return this.PrimaryContactName.CompareTo(rhs.PrimaryContactName);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactPhoneNumber:
            		return this.PrimaryContactPhoneNumber.CompareTo(rhs.PrimaryContactPhoneNumber);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactEmailAddress:
            		return this.PrimaryContactEmailAddress.CompareTo(rhs.PrimaryContactEmailAddress);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactAddress1:
            		return this.PrimaryContactAddress1.CompareTo(rhs.PrimaryContactAddress1);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactAddress2:
            		return this.PrimaryContactAddress2.CompareTo(rhs.PrimaryContactAddress2);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactCity:
            		return this.PrimaryContactCity.CompareTo(rhs.PrimaryContactCity);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactCountry:
            		return this.PrimaryContactCountry.CompareTo(rhs.PrimaryContactCountry);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactRegion:
            		return this.PrimaryContactRegion.CompareTo(rhs.PrimaryContactRegion);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactPostalCode:
            		return this.PrimaryContactPostalCode.CompareTo(rhs.PrimaryContactPostalCode);
            		
            		                 
            	
            	
            	case CustomerColumn.PrimaryContactFaxNumber:
            		return this.PrimaryContactFaxNumber.CompareTo(rhs.PrimaryContactFaxNumber);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactName:
            		return this.BillingContactName.CompareTo(rhs.BillingContactName);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactPhoneNumber:
            		return this.BillingContactPhoneNumber.CompareTo(rhs.BillingContactPhoneNumber);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactEmailAddress:
            		return this.BillingContactEmailAddress.CompareTo(rhs.BillingContactEmailAddress);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactAddress1:
            		return this.BillingContactAddress1.CompareTo(rhs.BillingContactAddress1);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactAddress2:
            		return this.BillingContactAddress2.CompareTo(rhs.BillingContactAddress2);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactCity:
            		return this.BillingContactCity.CompareTo(rhs.BillingContactCity);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactCountry:
            		return this.BillingContactCountry.CompareTo(rhs.BillingContactCountry);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactRegion:
            		return this.BillingContactRegion.CompareTo(rhs.BillingContactRegion);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactPostalCode:
            		return this.BillingContactPostalCode.CompareTo(rhs.BillingContactPostalCode);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingContactFaxNumber:
            		return this.BillingContactFaxNumber.CompareTo(rhs.BillingContactFaxNumber);
            		
            		                 
            	
            	
            	case CustomerColumn.WebsiteUrl:
            		return this.WebsiteUrl.CompareTo(rhs.WebsiteUrl);
            		
            		                 
            	
            	
            	case CustomerColumn.SalesPersonId:
            		return this.SalesPersonId.CompareTo(rhs.SalesPersonId);
            		
            		                 
            	
            	
            	case CustomerColumn.VerticalId:
            		return this.VerticalId.CompareTo(rhs.VerticalId);
            		
            		                 
            	
            	
            	case CustomerColumn.CompanyId:
            		return this.CompanyId.CompareTo(rhs.CompanyId);
            		
            		                 
            	
            	
            	case CustomerColumn.CurrencyId:
            		return this.CurrencyId.CompareTo(rhs.CurrencyId);
            		
            		                 
            	
            	
            	case CustomerColumn.BillingPeriodCutoff:
            		return this.BillingPeriodCutoff.CompareTo(rhs.BillingPeriodCutoff);
            		
            		                 
            	
            	
            	case CustomerColumn.TaxableId:
            		return this.TaxableId.CompareTo(rhs.TaxableId);
            		
            		                 
            	
            	
            	case CustomerColumn.CreditCardNameOnCard:
            		return this.CreditCardNameOnCard.CompareTo(rhs.CreditCardNameOnCard);
            		
            		                 
            	
            	
            	case CustomerColumn.CreditCardNumber:
            		return this.CreditCardNumber.CompareTo(rhs.CreditCardNumber);
            		
            		                 
            	
            	
            	case CustomerColumn.CreditCardExp:
            		return this.CreditCardExp.CompareTo(rhs.CreditCardExp);
            		
            		                 
            	
            	
            	case CustomerColumn.CreditCardVerCode:
            		return this.CreditCardVerCode.CompareTo(rhs.CreditCardVerCode);
            		
            		                 
            	
            	
            	case CustomerColumn.CreditCardTypeName:
            		return this.CreditCardTypeName.CompareTo(rhs.CreditCardTypeName);
            		
            		                 
            	
            	
            	case CustomerColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case CustomerColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case CustomerColumn.UniqueCustomerId:
            		return this.UniqueCustomerId.CompareTo(rhs.UniqueCustomerId);
            		
            		                 
            	
            	
            	case CustomerColumn.Enabled:
            		return this.Enabled.Value.CompareTo(rhs.Enabled.Value);
            		
            		                 
            	
            	
            	case CustomerColumn.UserId:
            		return this.UserId.Value.CompareTo(rhs.UserId.Value);
            		
            		                 
            	
            	
            	case CustomerColumn.WebGroupId:
            		return this.WebGroupId.CompareTo(rhs.WebGroupId);
            		
            		                 
            	
            	
            	case CustomerColumn.AccountManagerId:
            		return this.AccountManagerId.CompareTo(rhs.AccountManagerId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomerKey> Members
		
		// member variable for the EntityId property
		private CustomerKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CustomerKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomerKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Customer")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{45}{44}- Id: {0}{44}- WholesalerId: {1}{44}- PriCustomerNumber: {2}{44}- Description: {3}{44}- ExternalCustomerNumber: {4}{44}- PrimaryContactName: {5}{44}- PrimaryContactPhoneNumber: {6}{44}- PrimaryContactEmailAddress: {7}{44}- PrimaryContactAddress1: {8}{44}- PrimaryContactAddress2: {9}{44}- PrimaryContactCity: {10}{44}- PrimaryContactCountry: {11}{44}- PrimaryContactRegion: {12}{44}- PrimaryContactPostalCode: {13}{44}- PrimaryContactFaxNumber: {14}{44}- BillingContactName: {15}{44}- BillingContactPhoneNumber: {16}{44}- BillingContactEmailAddress: {17}{44}- BillingContactAddress1: {18}{44}- BillingContactAddress2: {19}{44}- BillingContactCity: {20}{44}- BillingContactCountry: {21}{44}- BillingContactRegion: {22}{44}- BillingContactPostalCode: {23}{44}- BillingContactFaxNumber: {24}{44}- WebsiteUrl: {25}{44}- SalesPersonId: {26}{44}- VerticalId: {27}{44}- CompanyId: {28}{44}- CurrencyId: {29}{44}- BillingPeriodCutoff: {30}{44}- TaxableId: {31}{44}- CreditCardNameOnCard: {32}{44}- CreditCardNumber: {33}{44}- CreditCardExp: {34}{44}- CreditCardVerCode: {35}{44}- CreditCardTypeName: {36}{44}- CreatedDate: {37}{44}- LastModified: {38}{44}- UniqueCustomerId: {39}{44}- Enabled: {40}{44}- UserId: {41}{44}- WebGroupId: {42}{44}- AccountManagerId: {43}{44}", 
				this.Id,
				this.WholesalerId,
				this.PriCustomerNumber,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.ExternalCustomerNumber == null) ? string.Empty : this.ExternalCustomerNumber.ToString(),
				this.PrimaryContactName,
				this.PrimaryContactPhoneNumber,
				this.PrimaryContactEmailAddress,
				(this.PrimaryContactAddress1 == null) ? string.Empty : this.PrimaryContactAddress1.ToString(),
				(this.PrimaryContactAddress2 == null) ? string.Empty : this.PrimaryContactAddress2.ToString(),
				(this.PrimaryContactCity == null) ? string.Empty : this.PrimaryContactCity.ToString(),
				(this.PrimaryContactCountry == null) ? string.Empty : this.PrimaryContactCountry.ToString(),
				(this.PrimaryContactRegion == null) ? string.Empty : this.PrimaryContactRegion.ToString(),
				(this.PrimaryContactPostalCode == null) ? string.Empty : this.PrimaryContactPostalCode.ToString(),
				(this.PrimaryContactFaxNumber == null) ? string.Empty : this.PrimaryContactFaxNumber.ToString(),
				(this.BillingContactName == null) ? string.Empty : this.BillingContactName.ToString(),
				(this.BillingContactPhoneNumber == null) ? string.Empty : this.BillingContactPhoneNumber.ToString(),
				(this.BillingContactEmailAddress == null) ? string.Empty : this.BillingContactEmailAddress.ToString(),
				(this.BillingContactAddress1 == null) ? string.Empty : this.BillingContactAddress1.ToString(),
				(this.BillingContactAddress2 == null) ? string.Empty : this.BillingContactAddress2.ToString(),
				(this.BillingContactCity == null) ? string.Empty : this.BillingContactCity.ToString(),
				(this.BillingContactCountry == null) ? string.Empty : this.BillingContactCountry.ToString(),
				(this.BillingContactRegion == null) ? string.Empty : this.BillingContactRegion.ToString(),
				(this.BillingContactPostalCode == null) ? string.Empty : this.BillingContactPostalCode.ToString(),
				(this.BillingContactFaxNumber == null) ? string.Empty : this.BillingContactFaxNumber.ToString(),
				(this.WebsiteUrl == null) ? string.Empty : this.WebsiteUrl.ToString(),
				this.SalesPersonId,
				this.VerticalId,
				this.CompanyId,
				this.CurrencyId,
				this.BillingPeriodCutoff,
				this.TaxableId,
				(this.CreditCardNameOnCard == null) ? string.Empty : this.CreditCardNameOnCard.ToString(),
				(this.CreditCardNumber == null) ? string.Empty : this.CreditCardNumber.ToString(),
				(this.CreditCardExp == null) ? string.Empty : this.CreditCardExp.ToString(),
				(this.CreditCardVerCode == null) ? string.Empty : this.CreditCardVerCode.ToString(),
				(this.CreditCardTypeName == null) ? string.Empty : this.CreditCardTypeName.ToString(),
				this.CreatedDate,
				this.LastModified,
				this.UniqueCustomerId,
				(this.Enabled == null) ? string.Empty : this.Enabled.ToString(),
				(this.UserId == null) ? string.Empty : this.UserId.ToString(),
				(this.WebGroupId == null) ? string.Empty : this.WebGroupId.ToString(),
				this.AccountManagerId,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Customer' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomerEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Customer"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		public System.String		  PriCustomerNumber = string.Empty;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// ExternalCustomerNumber : 
		/// </summary>
		public System.String		  ExternalCustomerNumber = null;
		
		/// <summary>
		/// PrimaryContactName : 
		/// </summary>
		public System.String		  PrimaryContactName = string.Empty;
		
		/// <summary>
		/// PrimaryContactPhoneNumber : 
		/// </summary>
		public System.String		  PrimaryContactPhoneNumber = string.Empty;
		
		/// <summary>
		/// PrimaryContactEmailAddress : 
		/// </summary>
		public System.String		  PrimaryContactEmailAddress = string.Empty;
		
		/// <summary>
		/// PrimaryContactAddress1 : 
		/// </summary>
		public System.String		  PrimaryContactAddress1 = null;
		
		/// <summary>
		/// PrimaryContactAddress2 : 
		/// </summary>
		public System.String		  PrimaryContactAddress2 = null;
		
		/// <summary>
		/// PrimaryContactCity : 
		/// </summary>
		public System.String		  PrimaryContactCity = null;
		
		/// <summary>
		/// PrimaryContactCountry : 
		/// </summary>
		public System.String		  PrimaryContactCountry = null;
		
		/// <summary>
		/// PrimaryContactRegion : 
		/// </summary>
		public System.String		  PrimaryContactRegion = null;
		
		/// <summary>
		/// PrimaryContactPostalCode : 
		/// </summary>
		public System.String		  PrimaryContactPostalCode = null;
		
		/// <summary>
		/// PrimaryContactFaxNumber : 
		/// </summary>
		public System.String		  PrimaryContactFaxNumber = null;
		
		/// <summary>
		/// BillingContactName : 
		/// </summary>
		public System.String		  BillingContactName = null;
		
		/// <summary>
		/// BillingContactPhoneNumber : 
		/// </summary>
		public System.String		  BillingContactPhoneNumber = null;
		
		/// <summary>
		/// BillingContactEmailAddress : 
		/// </summary>
		public System.String		  BillingContactEmailAddress = null;
		
		/// <summary>
		/// BillingContactAddress1 : 
		/// </summary>
		public System.String		  BillingContactAddress1 = null;
		
		/// <summary>
		/// BillingContactAddress2 : 
		/// </summary>
		public System.String		  BillingContactAddress2 = null;
		
		/// <summary>
		/// BillingContactCity : 
		/// </summary>
		public System.String		  BillingContactCity = null;
		
		/// <summary>
		/// BillingContactCountry : 
		/// </summary>
		public System.String		  BillingContactCountry = null;
		
		/// <summary>
		/// BillingContactRegion : 
		/// </summary>
		public System.String		  BillingContactRegion = null;
		
		/// <summary>
		/// BillingContactPostalCode : 
		/// </summary>
		public System.String		  BillingContactPostalCode = null;
		
		/// <summary>
		/// BillingContactFaxNumber : 
		/// </summary>
		public System.String		  BillingContactFaxNumber = null;
		
		/// <summary>
		/// WebsiteURL : 
		/// </summary>
		public System.String		  WebsiteUrl = null;
		
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		public System.Int32		  SalesPersonId = (int)0;
		
		/// <summary>
		/// VerticalID : 
		/// </summary>
		public System.Int32		  VerticalId = (int)0;
		
		/// <summary>
		/// CompanyID : 
		/// </summary>
		public System.Int32		  CompanyId = (int)0;
		
		/// <summary>
		/// CurrencyID : 
		/// </summary>
		public System.String		  CurrencyId = string.Empty;
		
		/// <summary>
		/// BillingPeriodCutoff : Used to denote the day of the customers billing cycle. Only used/important if you support multiple billing cycles per month.
		/// </summary>
		public System.Int32		  BillingPeriodCutoff = (int)0;
		
		/// <summary>
		/// TaxableID : 
		/// </summary>
		public System.Int32		  TaxableId = (int)0;
		
		/// <summary>
		/// CreditCardNameOnCard : 
		/// </summary>
		public System.String		  CreditCardNameOnCard = null;
		
		/// <summary>
		/// CreditCardNumber : 
		/// </summary>
		public System.String		  CreditCardNumber = null;
		
		/// <summary>
		/// CreditCardExp : 
		/// </summary>
		public System.String		  CreditCardExp = null;
		
		/// <summary>
		/// CreditCardVerCode : 
		/// </summary>
		public System.String		  CreditCardVerCode = null;
		
		/// <summary>
		/// CreditCardTypeName : 
		/// </summary>
		public System.String		  CreditCardTypeName = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.Now;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.Now;
		
		/// <summary>
		/// UniqueCustomerID : 
		/// </summary>
		public System.Guid		  UniqueCustomerId = Guid.NewGuid();
		
		/// <summary>
		/// Enabled : 
		/// </summary>
		public System.Boolean?		  Enabled = null;
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Int32?		  UserId = null;
		
		/// <summary>
		/// WebGroupID : Used by the Web API to store GroupID
		/// </summary>
		public System.String		  WebGroupId = null;
		
		/// <summary>
		/// AccountManagerID : 
		/// </summary>
		public System.Int32		  AccountManagerId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private User _userIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for UserId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual User UserIdSource
      	{
            get { return this._userIdSource; }
            set { this._userIdSource = value; }
      	}
		private Company _companyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Company"/>.
		/// </summary>
		/// <value>The source Company for CompanyId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Company CompanyIdSource
      	{
            get { return this._companyIdSource; }
            set { this._companyIdSource = value; }
      	}
		private Currency _currencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Currency"/>.
		/// </summary>
		/// <value>The source Currency for CurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Currency CurrencyIdSource
      	{
            get { return this._currencyIdSource; }
            set { this._currencyIdSource = value; }
      	}
		private AccountManager _accountManagerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="AccountManager"/>.
		/// </summary>
		/// <value>The source AccountManager for AccountManagerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual AccountManager AccountManagerIdSource
      	{
            get { return this._accountManagerIdSource; }
            set { this._accountManagerIdSource = value; }
      	}
		private Country _billingContactCountrySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for BillingContactCountry.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Country BillingContactCountrySource
      	{
            get { return this._billingContactCountrySource; }
            set { this._billingContactCountrySource = value; }
      	}
		private State _billingContactRegionSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="State"/>.
		/// </summary>
		/// <value>The source State for BillingContactRegion.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual State BillingContactRegionSource
      	{
            get { return this._billingContactRegionSource; }
            set { this._billingContactRegionSource = value; }
      	}
		private Country _primaryContactCountrySource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for PrimaryContactCountry.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Country PrimaryContactCountrySource
      	{
            get { return this._primaryContactCountrySource; }
            set { this._primaryContactCountrySource = value; }
      	}
		private State _primaryContactRegionSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="State"/>.
		/// </summary>
		/// <value>The source State for PrimaryContactRegion.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual State PrimaryContactRegionSource
      	{
            get { return this._primaryContactRegionSource; }
            set { this._primaryContactRegionSource = value; }
      	}
		private SalesPerson _salesPersonIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return this._salesPersonIdSource; }
            set { this._salesPersonIdSource = value; }
      	}
		private Taxable _taxableIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Taxable"/>.
		/// </summary>
		/// <value>The source Taxable for TaxableId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Taxable TaxableIdSource
      	{
            get { return this._taxableIdSource; }
            set { this._taxableIdSource = value; }
      	}
		private Vertical _verticalIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Vertical"/>.
		/// </summary>
		/// <value>The source Vertical for VerticalId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Vertical VerticalIdSource
      	{
            get { return this._verticalIdSource; }
            set { this._verticalIdSource = value; }
      	}
		private Wholesaler _wholesalerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return this._wholesalerIdSource; }
            set { this._wholesalerIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CustomerDocumentCollection
		
		private TList<CustomerDocument> _customerDocumentCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerDocumentCustomerId
		/// </summary>	
		public TList<CustomerDocument> CustomerDocumentCollection
		{
			get
			{
				if (_customerDocumentCustomerId == null)
				{
				_customerDocumentCustomerId = new TList<CustomerDocument>();
				}
	
				return _customerDocumentCustomerId;
			}
			set { _customerDocumentCustomerId = value; }
		}
		
		#endregion

		#region ProductRateValueCollection
		
		private TList<ProductRateValue> _productRateValueCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productRateValueCustomerId
		/// </summary>	
		public TList<ProductRateValue> ProductRateValueCollection
		{
			get
			{
				if (_productRateValueCustomerId == null)
				{
				_productRateValueCustomerId = new TList<ProductRateValue>();
				}
	
				return _productRateValueCustomerId;
			}
			set { _productRateValueCustomerId = value; }
		}
		
		#endregion

		#region Customer_FeatureCollection
		
		private TList<Customer_Feature> _customer_FeatureCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customer_FeatureCustomerId
		/// </summary>	
		public TList<Customer_Feature> Customer_FeatureCollection
		{
			get
			{
				if (_customer_FeatureCustomerId == null)
				{
				_customer_FeatureCustomerId = new TList<Customer_Feature>();
				}
	
				return _customer_FeatureCustomerId;
			}
			set { _customer_FeatureCustomerId = value; }
		}
		
		#endregion

		#region CommissionCustomerCollection
		
		private TList<CommissionCustomer> _commissionCustomerCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _commissionCustomerCustomerId
		/// </summary>	
		public TList<CommissionCustomer> CommissionCustomerCollection
		{
			get
			{
				if (_commissionCustomerCustomerId == null)
				{
				_commissionCustomerCustomerId = new TList<CommissionCustomer>();
				}
	
				return _commissionCustomerCustomerId;
			}
			set { _commissionCustomerCustomerId = value; }
		}
		
		#endregion

		#region CustomerTransactionCollection
		
		private TList<CustomerTransaction> _customerTransactionCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerTransactionCustomerId
		/// </summary>	
		public TList<CustomerTransaction> CustomerTransactionCollection
		{
			get
			{
				if (_customerTransactionCustomerId == null)
				{
				_customerTransactionCustomerId = new TList<CustomerTransaction>();
				}
	
				return _customerTransactionCustomerId;
			}
			set { _customerTransactionCustomerId = value; }
		}
		
		#endregion

		#region ParticipantListCollection
		
		private TList<ParticipantList> _participantListCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _participantListCustomerId
		/// </summary>	
		public TList<ParticipantList> ParticipantListCollection
		{
			get
			{
				if (_participantListCustomerId == null)
				{
				_participantListCustomerId = new TList<ParticipantList>();
				}
	
				return _participantListCustomerId;
			}
			set { _participantListCustomerId = value; }
		}
		
		#endregion

		#region DepartmentCollection
		
		private TList<Department> _departmentCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _departmentCustomerId
		/// </summary>	
		public TList<Department> DepartmentCollection
		{
			get
			{
				if (_departmentCustomerId == null)
				{
				_departmentCustomerId = new TList<Department>();
				}
	
				return _departmentCustomerId;
			}
			set { _departmentCustomerId = value; }
		}
		
		#endregion

		#region Customer_DnisCollection
		
		private TList<Customer_Dnis> _customer_DnisCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customer_DnisCustomerId
		/// </summary>	
		public TList<Customer_Dnis> Customer_DnisCollection
		{
			get
			{
				if (_customer_DnisCustomerId == null)
				{
				_customer_DnisCustomerId = new TList<Customer_Dnis>();
				}
	
				return _customer_DnisCustomerId;
			}
			set { _customer_DnisCustomerId = value; }
		}
		
		#endregion

		#region InvoiceSummaryCollection
		
		private TList<InvoiceSummary> _invoiceSummaryCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _invoiceSummaryCustomerId
		/// </summary>	
		public TList<InvoiceSummary> InvoiceSummaryCollection
		{
			get
			{
				if (_invoiceSummaryCustomerId == null)
				{
				_invoiceSummaryCustomerId = new TList<InvoiceSummary>();
				}
	
				return _invoiceSummaryCustomerId;
			}
			set { _invoiceSummaryCustomerId = value; }
		}
		
		#endregion

		#region DnisidDnisCollection_From_Customer_Dnis
		
		private TList<Dnis> dnisidDnisCollection_From_Customer_Dnis;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table dnisidDnisCollection_From_Customer_Dnis
		/// </summary>	
		public TList<Dnis> DnisidDnisCollection_From_Customer_Dnis
		{
			get
			{
				if (dnisidDnisCollection_From_Customer_Dnis == null)
				{
				dnisidDnisCollection_From_Customer_Dnis = new TList<Dnis>();
				}
	
				return dnisidDnisCollection_From_Customer_Dnis;
			}
			set { dnisidDnisCollection_From_Customer_Dnis = value; }
		}
		
		#endregion 

		#region TicketCollection
		
		private TList<Ticket> _ticketCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ticketCustomerId
		/// </summary>	
		public TList<Ticket> TicketCollection
		{
			get
			{
				if (_ticketCustomerId == null)
				{
				_ticketCustomerId = new TList<Ticket>();
				}
	
				return _ticketCustomerId;
			}
			set { _ticketCustomerId = value; }
		}
		
		#endregion

		#region CommissionCollection
		
		private TList<Commission> _commissionCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _commissionCustomerId
		/// </summary>	
		public TList<Commission> CommissionCollection
		{
			get
			{
				if (_commissionCustomerId == null)
				{
				_commissionCustomerId = new TList<Commission>();
				}
	
				return _commissionCustomerId;
			}
			set { _commissionCustomerId = value; }
		}
		
		#endregion

		#region EventManagerCollection
		
		private TList<EventManager> _eventManagerCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _eventManagerCustomerId
		/// </summary>	
		public TList<EventManager> EventManagerCollection
		{
			get
			{
				if (_eventManagerCustomerId == null)
				{
				_eventManagerCustomerId = new TList<EventManager>();
				}
	
				return _eventManagerCustomerId;
			}
			set { _eventManagerCustomerId = value; }
		}
		
		#endregion

		#region ModeratorCollection
		
		private TList<Moderator> _moderatorCustomerId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _moderatorCustomerId
		/// </summary>	
		public TList<Moderator> ModeratorCollection
		{
			get
			{
				if (_moderatorCustomerId == null)
				{
				_moderatorCustomerId = new TList<Moderator>();
				}
	
				return _moderatorCustomerId;
			}
			set { _moderatorCustomerId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomerEntityData _tmp = new CustomerEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.PriCustomerNumber = this.PriCustomerNumber;
			_tmp.Description = this.Description;
			_tmp.ExternalCustomerNumber = this.ExternalCustomerNumber;
			_tmp.PrimaryContactName = this.PrimaryContactName;
			_tmp.PrimaryContactPhoneNumber = this.PrimaryContactPhoneNumber;
			_tmp.PrimaryContactEmailAddress = this.PrimaryContactEmailAddress;
			_tmp.PrimaryContactAddress1 = this.PrimaryContactAddress1;
			_tmp.PrimaryContactAddress2 = this.PrimaryContactAddress2;
			_tmp.PrimaryContactCity = this.PrimaryContactCity;
			_tmp.PrimaryContactCountry = this.PrimaryContactCountry;
			_tmp.PrimaryContactRegion = this.PrimaryContactRegion;
			_tmp.PrimaryContactPostalCode = this.PrimaryContactPostalCode;
			_tmp.PrimaryContactFaxNumber = this.PrimaryContactFaxNumber;
			_tmp.BillingContactName = this.BillingContactName;
			_tmp.BillingContactPhoneNumber = this.BillingContactPhoneNumber;
			_tmp.BillingContactEmailAddress = this.BillingContactEmailAddress;
			_tmp.BillingContactAddress1 = this.BillingContactAddress1;
			_tmp.BillingContactAddress2 = this.BillingContactAddress2;
			_tmp.BillingContactCity = this.BillingContactCity;
			_tmp.BillingContactCountry = this.BillingContactCountry;
			_tmp.BillingContactRegion = this.BillingContactRegion;
			_tmp.BillingContactPostalCode = this.BillingContactPostalCode;
			_tmp.BillingContactFaxNumber = this.BillingContactFaxNumber;
			_tmp.WebsiteUrl = this.WebsiteUrl;
			_tmp.SalesPersonId = this.SalesPersonId;
			_tmp.VerticalId = this.VerticalId;
			_tmp.CompanyId = this.CompanyId;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.BillingPeriodCutoff = this.BillingPeriodCutoff;
			_tmp.TaxableId = this.TaxableId;
			_tmp.CreditCardNameOnCard = this.CreditCardNameOnCard;
			_tmp.CreditCardNumber = this.CreditCardNumber;
			_tmp.CreditCardExp = this.CreditCardExp;
			_tmp.CreditCardVerCode = this.CreditCardVerCode;
			_tmp.CreditCardTypeName = this.CreditCardTypeName;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.LastModified = this.LastModified;
			_tmp.UniqueCustomerId = this.UniqueCustomerId;
			_tmp.Enabled = this.Enabled;
			_tmp.UserId = this.UserId;
			_tmp.WebGroupId = this.WebGroupId;
			_tmp.AccountManagerId = this.AccountManagerId;
			
			#region Source Parent Composite Entities
			if (this.UserIdSource != null)
				_tmp.UserIdSource = MakeCopyOf(this.UserIdSource) as User;
			if (this.CompanyIdSource != null)
				_tmp.CompanyIdSource = MakeCopyOf(this.CompanyIdSource) as Company;
			if (this.CurrencyIdSource != null)
				_tmp.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource) as Currency;
			if (this.AccountManagerIdSource != null)
				_tmp.AccountManagerIdSource = MakeCopyOf(this.AccountManagerIdSource) as AccountManager;
			if (this.BillingContactCountrySource != null)
				_tmp.BillingContactCountrySource = MakeCopyOf(this.BillingContactCountrySource) as Country;
			if (this.BillingContactRegionSource != null)
				_tmp.BillingContactRegionSource = MakeCopyOf(this.BillingContactRegionSource) as State;
			if (this.PrimaryContactCountrySource != null)
				_tmp.PrimaryContactCountrySource = MakeCopyOf(this.PrimaryContactCountrySource) as Country;
			if (this.PrimaryContactRegionSource != null)
				_tmp.PrimaryContactRegionSource = MakeCopyOf(this.PrimaryContactRegionSource) as State;
			if (this.SalesPersonIdSource != null)
				_tmp.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
			if (this.TaxableIdSource != null)
				_tmp.TaxableIdSource = MakeCopyOf(this.TaxableIdSource) as Taxable;
			if (this.VerticalIdSource != null)
				_tmp.VerticalIdSource = MakeCopyOf(this.VerticalIdSource) as Vertical;
			if (this.WholesalerIdSource != null)
				_tmp.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._customerDocumentCustomerId != null)
				_tmp.CustomerDocumentCollection = (TList<CustomerDocument>) MakeCopyOf(this.CustomerDocumentCollection); 
			if (this._productRateValueCustomerId != null)
				_tmp.ProductRateValueCollection = (TList<ProductRateValue>) MakeCopyOf(this.ProductRateValueCollection); 
			if (this._customer_FeatureCustomerId != null)
				_tmp.Customer_FeatureCollection = (TList<Customer_Feature>) MakeCopyOf(this.Customer_FeatureCollection); 
			if (this._commissionCustomerCustomerId != null)
				_tmp.CommissionCustomerCollection = (TList<CommissionCustomer>) MakeCopyOf(this.CommissionCustomerCollection); 
			if (this._customerTransactionCustomerId != null)
				_tmp.CustomerTransactionCollection = (TList<CustomerTransaction>) MakeCopyOf(this.CustomerTransactionCollection); 
			if (this._participantListCustomerId != null)
				_tmp.ParticipantListCollection = (TList<ParticipantList>) MakeCopyOf(this.ParticipantListCollection); 
			if (this._departmentCustomerId != null)
				_tmp.DepartmentCollection = (TList<Department>) MakeCopyOf(this.DepartmentCollection); 
			if (this._customer_DnisCustomerId != null)
				_tmp.Customer_DnisCollection = (TList<Customer_Dnis>) MakeCopyOf(this.Customer_DnisCollection); 
			if (this._invoiceSummaryCustomerId != null)
				_tmp.InvoiceSummaryCollection = (TList<InvoiceSummary>) MakeCopyOf(this.InvoiceSummaryCollection); 
			if (this.dnisidDnisCollection_From_Customer_Dnis != null)
				_tmp.DnisidDnisCollection_From_Customer_Dnis = (TList<Dnis>) MakeCopyOf(this.DnisidDnisCollection_From_Customer_Dnis); 
			if (this._ticketCustomerId != null)
				_tmp.TicketCollection = (TList<Ticket>) MakeCopyOf(this.TicketCollection); 
			if (this._commissionCustomerId != null)
				_tmp.CommissionCollection = (TList<Commission>) MakeCopyOf(this.CommissionCollection); 
			if (this._eventManagerCustomerId != null)
				_tmp.EventManagerCollection = (TList<EventManager>) MakeCopyOf(this.EventManagerCollection); 
			if (this._moderatorCustomerId != null)
				_tmp.ModeratorCollection = (TList<Moderator>) MakeCopyOf(this.ModeratorCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CustomerColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CustomerColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CustomerColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CustomerEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomerEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CustomerColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomerEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomerEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomerEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Customer"/> object.
	/// </remarks>
	public class CustomerEventArgs : System.EventArgs
	{
		private CustomerColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomerEventArgs class.
		///</summary>
		public CustomerEventArgs(CustomerColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomerEventArgs class.
		///</summary>
		public CustomerEventArgs(CustomerColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomerColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomerColumn" />
		public CustomerColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Customer related events.
	///</summary>
	public delegate void CustomerEventHandler(object sender, CustomerEventArgs e);
	
	#region CustomerComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomerComparer : System.Collections.Generic.IComparer<Customer>
	{
		CustomerColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerComparer"/> class.
        /// </summary>
		public CustomerComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomerComparer(CustomerColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Customer"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Customer"/> to compare.</param>
        /// <param name="b">The second <c>Customer</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Customer a, Customer b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Customer entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Customer a, Customer b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomerColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomerKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Customer"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomerKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomerKey class.
		/// </summary>
		public CustomerKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerKey class.
		/// </summary>
		public CustomerKey(CustomerBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerKey class.
		/// </summary>
		public CustomerKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomerBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomerBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomerColumn Enum
	
	/// <summary>
	/// Enumerate the Customer columns.
	/// </summary>
	[Serializable]
	public enum CustomerColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		PriCustomerNumber = 3,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Description = 4,
		/// <summary>
		/// ExternalCustomerNumber : 
		/// </summary>
		[EnumTextValue("ExternalCustomerNumber")]
		[ColumnEnum("ExternalCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ExternalCustomerNumber = 5,
		/// <summary>
		/// PrimaryContactName : 
		/// </summary>
		[EnumTextValue("PrimaryContactName")]
		[ColumnEnum("PrimaryContactName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		PrimaryContactName = 6,
		/// <summary>
		/// PrimaryContactPhoneNumber : 
		/// </summary>
		[EnumTextValue("PrimaryContactPhoneNumber")]
		[ColumnEnum("PrimaryContactPhoneNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		PrimaryContactPhoneNumber = 7,
		/// <summary>
		/// PrimaryContactEmailAddress : 
		/// </summary>
		[EnumTextValue("PrimaryContactEmailAddress")]
		[ColumnEnum("PrimaryContactEmailAddress", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 100)]
		PrimaryContactEmailAddress = 8,
		/// <summary>
		/// PrimaryContactAddress1 : 
		/// </summary>
		[EnumTextValue("PrimaryContactAddress1")]
		[ColumnEnum("PrimaryContactAddress1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		PrimaryContactAddress1 = 9,
		/// <summary>
		/// PrimaryContactAddress2 : 
		/// </summary>
		[EnumTextValue("PrimaryContactAddress2")]
		[ColumnEnum("PrimaryContactAddress2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		PrimaryContactAddress2 = 10,
		/// <summary>
		/// PrimaryContactCity : 
		/// </summary>
		[EnumTextValue("PrimaryContactCity")]
		[ColumnEnum("PrimaryContactCity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		PrimaryContactCity = 11,
		/// <summary>
		/// PrimaryContactCountry : 
		/// </summary>
		[EnumTextValue("PrimaryContactCountry")]
		[ColumnEnum("PrimaryContactCountry", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		PrimaryContactCountry = 12,
		/// <summary>
		/// PrimaryContactRegion : 
		/// </summary>
		[EnumTextValue("PrimaryContactRegion")]
		[ColumnEnum("PrimaryContactRegion", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		PrimaryContactRegion = 13,
		/// <summary>
		/// PrimaryContactPostalCode : 
		/// </summary>
		[EnumTextValue("PrimaryContactPostalCode")]
		[ColumnEnum("PrimaryContactPostalCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		PrimaryContactPostalCode = 14,
		/// <summary>
		/// PrimaryContactFaxNumber : 
		/// </summary>
		[EnumTextValue("PrimaryContactFaxNumber")]
		[ColumnEnum("PrimaryContactFaxNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		PrimaryContactFaxNumber = 15,
		/// <summary>
		/// BillingContactName : 
		/// </summary>
		[EnumTextValue("BillingContactName")]
		[ColumnEnum("BillingContactName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		BillingContactName = 16,
		/// <summary>
		/// BillingContactPhoneNumber : 
		/// </summary>
		[EnumTextValue("BillingContactPhoneNumber")]
		[ColumnEnum("BillingContactPhoneNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		BillingContactPhoneNumber = 17,
		/// <summary>
		/// BillingContactEmailAddress : 
		/// </summary>
		[EnumTextValue("BillingContactEmailAddress")]
		[ColumnEnum("BillingContactEmailAddress", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		BillingContactEmailAddress = 18,
		/// <summary>
		/// BillingContactAddress1 : 
		/// </summary>
		[EnumTextValue("BillingContactAddress1")]
		[ColumnEnum("BillingContactAddress1", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		BillingContactAddress1 = 19,
		/// <summary>
		/// BillingContactAddress2 : 
		/// </summary>
		[EnumTextValue("BillingContactAddress2")]
		[ColumnEnum("BillingContactAddress2", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		BillingContactAddress2 = 20,
		/// <summary>
		/// BillingContactCity : 
		/// </summary>
		[EnumTextValue("BillingContactCity")]
		[ColumnEnum("BillingContactCity", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		BillingContactCity = 21,
		/// <summary>
		/// BillingContactCountry : 
		/// </summary>
		[EnumTextValue("BillingContactCountry")]
		[ColumnEnum("BillingContactCountry", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		BillingContactCountry = 22,
		/// <summary>
		/// BillingContactRegion : 
		/// </summary>
		[EnumTextValue("BillingContactRegion")]
		[ColumnEnum("BillingContactRegion", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		BillingContactRegion = 23,
		/// <summary>
		/// BillingContactPostalCode : 
		/// </summary>
		[EnumTextValue("BillingContactPostalCode")]
		[ColumnEnum("BillingContactPostalCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		BillingContactPostalCode = 24,
		/// <summary>
		/// BillingContactFaxNumber : 
		/// </summary>
		[EnumTextValue("BillingContactFaxNumber")]
		[ColumnEnum("BillingContactFaxNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		BillingContactFaxNumber = 25,
		/// <summary>
		/// WebsiteUrl : 
		/// </summary>
		[EnumTextValue("WebsiteURL")]
		[ColumnEnum("WebsiteURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		WebsiteUrl = 26,
		/// <summary>
		/// SalesPersonId : 
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SalesPersonId = 27,
		/// <summary>
		/// VerticalId : 
		/// </summary>
		[EnumTextValue("VerticalID")]
		[ColumnEnum("VerticalID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		VerticalId = 28,
		/// <summary>
		/// CompanyId : 
		/// </summary>
		[EnumTextValue("CompanyID")]
		[ColumnEnum("CompanyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CompanyId = 29,
		/// <summary>
		/// CurrencyId : 
		/// </summary>
		[EnumTextValue("CurrencyID")]
		[ColumnEnum("CurrencyID", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 3)]
		CurrencyId = 30,
		/// <summary>
		/// BillingPeriodCutoff : Used to denote the day of the customers billing cycle. Only used/important if you support multiple billing cycles per month.
		/// </summary>
		[EnumTextValue("BillingPeriodCutoff")]
		[ColumnEnum("BillingPeriodCutoff", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		BillingPeriodCutoff = 31,
		/// <summary>
		/// TaxableId : 
		/// </summary>
		[EnumTextValue("TaxableID")]
		[ColumnEnum("TaxableID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TaxableId = 32,
		/// <summary>
		/// CreditCardNameOnCard : 
		/// </summary>
		[EnumTextValue("CreditCardNameOnCard")]
		[ColumnEnum("CreditCardNameOnCard", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		CreditCardNameOnCard = 33,
		/// <summary>
		/// CreditCardNumber : 
		/// </summary>
		[EnumTextValue("CreditCardNumber")]
		[ColumnEnum("CreditCardNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		CreditCardNumber = 34,
		/// <summary>
		/// CreditCardExp : 
		/// </summary>
		[EnumTextValue("CreditCardExp")]
		[ColumnEnum("CreditCardExp", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 4)]
		CreditCardExp = 35,
		/// <summary>
		/// CreditCardVerCode : 
		/// </summary>
		[EnumTextValue("CreditCardVerCode")]
		[ColumnEnum("CreditCardVerCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		CreditCardVerCode = 36,
		/// <summary>
		/// CreditCardTypeName : 
		/// </summary>
		[EnumTextValue("CreditCardTypeName")]
		[ColumnEnum("CreditCardTypeName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		CreditCardTypeName = 37,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 38,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 39,
		/// <summary>
		/// UniqueCustomerId : 
		/// </summary>
		[EnumTextValue("UniqueCustomerID")]
		[ColumnEnum("UniqueCustomerID", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		UniqueCustomerId = 40,
		/// <summary>
		/// Enabled : 
		/// </summary>
		[EnumTextValue("Enabled")]
		[ColumnEnum("Enabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Enabled = 41,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserId = 42,
		/// <summary>
		/// WebGroupId : Used by the Web API to store GroupID
		/// </summary>
		[EnumTextValue("WebGroupID")]
		[ColumnEnum("WebGroupID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		WebGroupId = 43,
		/// <summary>
		/// AccountManagerId : 
		/// </summary>
		[EnumTextValue("AccountManagerID")]
		[ColumnEnum("AccountManagerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AccountManagerId = 44
	}//End enum

	#endregion CustomerColumn Enum

} // end namespace
