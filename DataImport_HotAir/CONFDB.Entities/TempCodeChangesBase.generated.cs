
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file TempCodeChanges.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'tempCodeChanges' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class TempCodeChangesBase : EntityBase, CONFDB.Entities.ITempCodeChanges, IEntityId<TempCodeChangesKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TempCodeChangesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TempCodeChangesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TempCodeChangesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<TempCodeChanges> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event TempCodeChangesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TempCodeChangesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TempCodeChangesBase"/> instance.
		///</summary>
		public TempCodeChangesBase()
		{
			this.entityData = new TempCodeChangesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TempCodeChangesBase"/> instance.
		///</summary>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_origModCode"></param>
		///<param name="_origPassCode"></param>
		///<param name="_expectedOrigModCode"></param>
		///<param name="_expectedOrigPassCode"></param>
		///<param name="_newModCode"></param>
		///<param name="_newPassCode"></param>
		///<param name="_appliedDate"></param>
		public TempCodeChangesBase(System.String _priCustomerNumber, System.String _secCustomerNumber, 
			System.String _origModCode, System.String _origPassCode, System.String _expectedOrigModCode, 
			System.String _expectedOrigPassCode, System.String _newModCode, System.String _newPassCode, 
			System.DateTime _appliedDate)
		{
			this.entityData = new TempCodeChangesEntityData();
			this.backupData = null;

			this.PriCustomerNumber = _priCustomerNumber;
			this.SecCustomerNumber = _secCustomerNumber;
			this.OrigModCode = _origModCode;
			this.OrigPassCode = _origPassCode;
			this.ExpectedOrigModCode = _expectedOrigModCode;
			this.ExpectedOrigPassCode = _expectedOrigPassCode;
			this.NewModCode = _newModCode;
			this.NewPassCode = _newPassCode;
			this.AppliedDate = _appliedDate;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="TempCodeChanges"/> instance.
		///</summary>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_origModCode"></param>
		///<param name="_origPassCode"></param>
		///<param name="_expectedOrigModCode"></param>
		///<param name="_expectedOrigPassCode"></param>
		///<param name="_newModCode"></param>
		///<param name="_newPassCode"></param>
		///<param name="_appliedDate"></param>
		public static TempCodeChanges CreateTempCodeChanges(System.String _priCustomerNumber, System.String _secCustomerNumber, 
			System.String _origModCode, System.String _origPassCode, System.String _expectedOrigModCode, 
			System.String _expectedOrigPassCode, System.String _newModCode, System.String _newPassCode, 
			System.DateTime _appliedDate)
		{
			TempCodeChanges newTempCodeChanges = new TempCodeChanges();
			newTempCodeChanges.PriCustomerNumber = _priCustomerNumber;
			newTempCodeChanges.SecCustomerNumber = _secCustomerNumber;
			newTempCodeChanges.OrigModCode = _origModCode;
			newTempCodeChanges.OrigPassCode = _origPassCode;
			newTempCodeChanges.ExpectedOrigModCode = _expectedOrigModCode;
			newTempCodeChanges.ExpectedOrigPassCode = _expectedOrigPassCode;
			newTempCodeChanges.NewModCode = _newModCode;
			newTempCodeChanges.NewPassCode = _newPassCode;
			newTempCodeChanges.AppliedDate = _appliedDate;
			return newTempCodeChanges;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this.entityData.PriCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.PriCustomerNumber == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				this.entityData.PriCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 6)]
		public virtual System.String SecCustomerNumber
		{
			get
			{
				return this.entityData.SecCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.SecCustomerNumber == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				this.entityData.SecCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				OnPropertyChanged("SecCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrigModCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String OrigModCode
		{
			get
			{
				return this.entityData.OrigModCode; 
			}
			
			set
			{
				if (this.entityData.OrigModCode == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.OrigModCode, this.entityData.OrigModCode);
				this.entityData.OrigModCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.OrigModCode, this.entityData.OrigModCode);
				OnPropertyChanged("OrigModCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OrigPassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String OrigPassCode
		{
			get
			{
				return this.entityData.OrigPassCode; 
			}
			
			set
			{
				if (this.entityData.OrigPassCode == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.OrigPassCode, this.entityData.OrigPassCode);
				this.entityData.OrigPassCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.OrigPassCode, this.entityData.OrigPassCode);
				OnPropertyChanged("OrigPassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpectedOrigModCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8)]
		public virtual System.String ExpectedOrigModCode
		{
			get
			{
				return this.entityData.ExpectedOrigModCode; 
			}
			
			set
			{
				if (this.entityData.ExpectedOrigModCode == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.ExpectedOrigModCode, this.entityData.ExpectedOrigModCode);
				this.entityData.ExpectedOrigModCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.ExpectedOrigModCode, this.entityData.ExpectedOrigModCode);
				OnPropertyChanged("ExpectedOrigModCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpectedOrigPassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 8)]
		public virtual System.String ExpectedOrigPassCode
		{
			get
			{
				return this.entityData.ExpectedOrigPassCode; 
			}
			
			set
			{
				if (this.entityData.ExpectedOrigPassCode == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.ExpectedOrigPassCode, this.entityData.ExpectedOrigPassCode);
				this.entityData.ExpectedOrigPassCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.ExpectedOrigPassCode, this.entityData.ExpectedOrigPassCode);
				OnPropertyChanged("ExpectedOrigPassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewModCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String NewModCode
		{
			get
			{
				return this.entityData.NewModCode; 
			}
			
			set
			{
				if (this.entityData.NewModCode == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.NewModCode, this.entityData.NewModCode);
				this.entityData.NewModCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.NewModCode, this.entityData.NewModCode);
				OnPropertyChanged("NewModCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the NewPassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 8)]
		public virtual System.String NewPassCode
		{
			get
			{
				return this.entityData.NewPassCode; 
			}
			
			set
			{
				if (this.entityData.NewPassCode == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.NewPassCode, this.entityData.NewPassCode);
				this.entityData.NewPassCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.NewPassCode, this.entityData.NewPassCode);
				OnPropertyChanged("NewPassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AppliedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime AppliedDate
		{
			get
			{
				return this.entityData.AppliedDate; 
			}
			
			set
			{
				if (this.entityData.AppliedDate == value)
					return;
					
				OnColumnChanging(TempCodeChangesColumn.AppliedDate, this.entityData.AppliedDate);
				this.entityData.AppliedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TempCodeChangesColumn.AppliedDate, this.entityData.AppliedDate);
				OnPropertyChanged("AppliedDate");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PriCustomerNumber", "Pri Customer Number"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PriCustomerNumber", "Pri Customer Number", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("SecCustomerNumber", "Sec Customer Number"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SecCustomerNumber", "Sec Customer Number", 6));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("OrigModCode", "Orig Mod Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("OrigModCode", "Orig Mod Code", 8));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("OrigPassCode", "Orig Pass Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("OrigPassCode", "Orig Pass Code", 8));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExpectedOrigModCode", "Expected Orig Mod Code", 8));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExpectedOrigPassCode", "Expected Orig Pass Code", 8));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("NewModCode", "New Mod Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("NewModCode", "New Mod Code", 8));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("NewPassCode", "New Pass Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("NewPassCode", "New Pass Code", 8));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "tempCodeChanges"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "PriCustomerNumber", "SecCustomerNumber", "OrigModCode", "OrigPassCode", "ExpectedOrigModCode", "ExpectedOrigPassCode", "NewModCode", "NewPassCode", "AppliedDate"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TempCodeChangesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (TempCodeChanges) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<TempCodeChanges>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as TempCodeChanges);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed TempCodeChanges Entity 
		///</summary>
		public virtual TempCodeChanges Copy()
		{
			//shallow copy entity
			TempCodeChanges copy = new TempCodeChanges();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.PriCustomerNumber = this.PriCustomerNumber;
			copy.SecCustomerNumber = this.SecCustomerNumber;
			copy.OrigModCode = this.OrigModCode;
			copy.OrigPassCode = this.OrigPassCode;
			copy.ExpectedOrigModCode = this.ExpectedOrigModCode;
			copy.ExpectedOrigPassCode = this.ExpectedOrigPassCode;
			copy.NewModCode = this.NewModCode;
			copy.NewPassCode = this.NewPassCode;
			copy.AppliedDate = this.AppliedDate;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed TempCodeChanges Entity which is a deep copy of the current entity.
		///</summary>
		public virtual TempCodeChanges DeepCopy()
		{
			return EntityHelper.Clone<TempCodeChanges>(this as TempCodeChanges);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TempCodeChangesEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TempCodeChangesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TempCodeChangesColumn column)
		{
			switch(column)
			{
					case TempCodeChangesColumn.Id:
					return entityData.Id != _originalData.Id;
					case TempCodeChangesColumn.PriCustomerNumber:
					return entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
					case TempCodeChangesColumn.SecCustomerNumber:
					return entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
					case TempCodeChangesColumn.OrigModCode:
					return entityData.OrigModCode != _originalData.OrigModCode;
					case TempCodeChangesColumn.OrigPassCode:
					return entityData.OrigPassCode != _originalData.OrigPassCode;
					case TempCodeChangesColumn.ExpectedOrigModCode:
					return entityData.ExpectedOrigModCode != _originalData.ExpectedOrigModCode;
					case TempCodeChangesColumn.ExpectedOrigPassCode:
					return entityData.ExpectedOrigPassCode != _originalData.ExpectedOrigPassCode;
					case TempCodeChangesColumn.NewModCode:
					return entityData.NewModCode != _originalData.NewModCode;
					case TempCodeChangesColumn.NewPassCode:
					return entityData.NewPassCode != _originalData.NewPassCode;
					case TempCodeChangesColumn.AppliedDate:
					return entityData.AppliedDate != _originalData.AppliedDate;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
			result = result || entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
			result = result || entityData.OrigModCode != _originalData.OrigModCode;
			result = result || entityData.OrigPassCode != _originalData.OrigPassCode;
			result = result || entityData.ExpectedOrigModCode != _originalData.ExpectedOrigModCode;
			result = result || entityData.ExpectedOrigPassCode != _originalData.ExpectedOrigPassCode;
			result = result || entityData.NewModCode != _originalData.NewModCode;
			result = result || entityData.NewPassCode != _originalData.NewPassCode;
			result = result || entityData.AppliedDate != _originalData.AppliedDate;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TempCodeChangesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is TempCodeChangesBase)
				return Equals(this, (TempCodeChangesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TempCodeChangesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.PriCustomerNumber.GetHashCode() ^ 
					this.SecCustomerNumber.GetHashCode() ^ 
					this.OrigModCode.GetHashCode() ^ 
					this.OrigPassCode.GetHashCode() ^ 
					((this.ExpectedOrigModCode == null) ? string.Empty : this.ExpectedOrigModCode.ToString()).GetHashCode() ^ 
					((this.ExpectedOrigPassCode == null) ? string.Empty : this.ExpectedOrigPassCode.ToString()).GetHashCode() ^ 
					this.NewModCode.GetHashCode() ^ 
					this.NewPassCode.GetHashCode() ^ 
					this.AppliedDate.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TempCodeChangesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TempCodeChangesBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="TempCodeChangesBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="TempCodeChangesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TempCodeChangesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(TempCodeChangesBase Object1, TempCodeChangesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
				equal = false;
			if (Object1.SecCustomerNumber != Object2.SecCustomerNumber)
				equal = false;
			if (Object1.OrigModCode != Object2.OrigModCode)
				equal = false;
			if (Object1.OrigPassCode != Object2.OrigPassCode)
				equal = false;
			if ( Object1.ExpectedOrigModCode != null && Object2.ExpectedOrigModCode != null )
			{
				if (Object1.ExpectedOrigModCode != Object2.ExpectedOrigModCode)
					equal = false;
			}
			else if (Object1.ExpectedOrigModCode == null ^ Object2.ExpectedOrigModCode == null )
			{
				equal = false;
			}
			if ( Object1.ExpectedOrigPassCode != null && Object2.ExpectedOrigPassCode != null )
			{
				if (Object1.ExpectedOrigPassCode != Object2.ExpectedOrigPassCode)
					equal = false;
			}
			else if (Object1.ExpectedOrigPassCode == null ^ Object2.ExpectedOrigPassCode == null )
			{
				equal = false;
			}
			if (Object1.NewModCode != Object2.NewModCode)
				equal = false;
			if (Object1.NewPassCode != Object2.NewPassCode)
				equal = false;
			if (Object1.AppliedDate != Object2.AppliedDate)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TempCodeChangesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TempCodeChangesComparer GetComparer()
        {
            return new TempCodeChangesComparer();
        }
        */

        // Comparer delegates back to TempCodeChanges
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(TempCodeChanges rhs, TempCodeChangesColumn which)
        {
            switch (which)
            {
            	
            	
            	case TempCodeChangesColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.PriCustomerNumber:
            		return this.PriCustomerNumber.CompareTo(rhs.PriCustomerNumber);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.SecCustomerNumber:
            		return this.SecCustomerNumber.CompareTo(rhs.SecCustomerNumber);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.OrigModCode:
            		return this.OrigModCode.CompareTo(rhs.OrigModCode);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.OrigPassCode:
            		return this.OrigPassCode.CompareTo(rhs.OrigPassCode);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.ExpectedOrigModCode:
            		return this.ExpectedOrigModCode.CompareTo(rhs.ExpectedOrigModCode);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.ExpectedOrigPassCode:
            		return this.ExpectedOrigPassCode.CompareTo(rhs.ExpectedOrigPassCode);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.NewModCode:
            		return this.NewModCode.CompareTo(rhs.NewModCode);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.NewPassCode:
            		return this.NewPassCode.CompareTo(rhs.NewPassCode);
            		
            		                 
            	
            	
            	case TempCodeChangesColumn.AppliedDate:
            		return this.AppliedDate.CompareTo(rhs.AppliedDate);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TempCodeChangesKey> Members
		
		// member variable for the EntityId property
		private TempCodeChangesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TempCodeChangesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TempCodeChangesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("TempCodeChanges")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- Id: {0}{10}- PriCustomerNumber: {1}{10}- SecCustomerNumber: {2}{10}- OrigModCode: {3}{10}- OrigPassCode: {4}{10}- ExpectedOrigModCode: {5}{10}- ExpectedOrigPassCode: {6}{10}- NewModCode: {7}{10}- NewPassCode: {8}{10}- AppliedDate: {9}{10}", 
				this.Id,
				this.PriCustomerNumber,
				this.SecCustomerNumber,
				this.OrigModCode,
				this.OrigPassCode,
				(this.ExpectedOrigModCode == null) ? string.Empty : this.ExpectedOrigModCode.ToString(),
				(this.ExpectedOrigPassCode == null) ? string.Empty : this.ExpectedOrigPassCode.ToString(),
				this.NewModCode,
				this.NewPassCode,
				this.AppliedDate,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'tempCodeChanges' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TempCodeChangesEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "tempCodeChanges"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		public System.String		  PriCustomerNumber = string.Empty;
		
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		public System.String		  SecCustomerNumber = string.Empty;
		
		/// <summary>
		/// OrigModCode : 
		/// </summary>
		public System.String		  OrigModCode = string.Empty;
		
		/// <summary>
		/// OrigPassCode : 
		/// </summary>
		public System.String		  OrigPassCode = string.Empty;
		
		/// <summary>
		/// ExpectedOrigModCode : 
		/// </summary>
		public System.String		  ExpectedOrigModCode = null;
		
		/// <summary>
		/// ExpectedOrigPassCode : 
		/// </summary>
		public System.String		  ExpectedOrigPassCode = null;
		
		/// <summary>
		/// NewModCode : 
		/// </summary>
		public System.String		  NewModCode = string.Empty;
		
		/// <summary>
		/// NewPassCode : 
		/// </summary>
		public System.String		  NewPassCode = string.Empty;
		
		/// <summary>
		/// AppliedDate : 
		/// </summary>
		public System.DateTime		  AppliedDate = DateTime.MinValue;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TempCodeChangesEntityData _tmp = new TempCodeChangesEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.PriCustomerNumber = this.PriCustomerNumber;
			_tmp.SecCustomerNumber = this.SecCustomerNumber;
			_tmp.OrigModCode = this.OrigModCode;
			_tmp.OrigPassCode = this.OrigPassCode;
			_tmp.ExpectedOrigModCode = this.ExpectedOrigModCode;
			_tmp.ExpectedOrigPassCode = this.ExpectedOrigPassCode;
			_tmp.NewModCode = this.NewModCode;
			_tmp.NewPassCode = this.NewPassCode;
			_tmp.AppliedDate = this.AppliedDate;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TempCodeChangesColumn"/> which has raised the event.</param>
		public void OnColumnChanging(TempCodeChangesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TempCodeChangesColumn"/> which has raised the event.</param>
		public void OnColumnChanged(TempCodeChangesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TempCodeChangesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(TempCodeChangesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TempCodeChangesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TempCodeChangesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TempCodeChangesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(TempCodeChangesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TempCodeChangesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TempCodeChangesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TempCodeChangesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="TempCodeChanges"/> object.
	/// </remarks>
	public class TempCodeChangesEventArgs : System.EventArgs
	{
		private TempCodeChangesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TempCodeChangesEventArgs class.
		///</summary>
		public TempCodeChangesEventArgs(TempCodeChangesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TempCodeChangesEventArgs class.
		///</summary>
		public TempCodeChangesEventArgs(TempCodeChangesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TempCodeChangesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TempCodeChangesColumn" />
		public TempCodeChangesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all TempCodeChanges related events.
	///</summary>
	public delegate void TempCodeChangesEventHandler(object sender, TempCodeChangesEventArgs e);
	
	#region TempCodeChangesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TempCodeChangesComparer : System.Collections.Generic.IComparer<TempCodeChanges>
	{
		TempCodeChangesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TempCodeChangesComparer"/> class.
        /// </summary>
		public TempCodeChangesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TempCodeChangesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TempCodeChangesComparer(TempCodeChangesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="TempCodeChanges"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="TempCodeChanges"/> to compare.</param>
        /// <param name="b">The second <c>TempCodeChanges</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(TempCodeChanges a, TempCodeChanges b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(TempCodeChanges entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(TempCodeChanges a, TempCodeChanges b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TempCodeChangesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TempCodeChangesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="TempCodeChanges"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TempCodeChangesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TempCodeChangesKey class.
		/// </summary>
		public TempCodeChangesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TempCodeChangesKey class.
		/// </summary>
		public TempCodeChangesKey(TempCodeChangesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TempCodeChangesKey class.
		/// </summary>
		public TempCodeChangesKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TempCodeChangesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TempCodeChangesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TempCodeChangesColumn Enum
	
	/// <summary>
	/// Enumerate the TempCodeChanges columns.
	/// </summary>
	[Serializable]
	public enum TempCodeChangesColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		PriCustomerNumber = 2,
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		[EnumTextValue("SecCustomerNumber")]
		[ColumnEnum("SecCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 6)]
		SecCustomerNumber = 3,
		/// <summary>
		/// OrigModCode : 
		/// </summary>
		[EnumTextValue("OrigModCode")]
		[ColumnEnum("OrigModCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 8)]
		OrigModCode = 4,
		/// <summary>
		/// OrigPassCode : 
		/// </summary>
		[EnumTextValue("OrigPassCode")]
		[ColumnEnum("OrigPassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 8)]
		OrigPassCode = 5,
		/// <summary>
		/// ExpectedOrigModCode : 
		/// </summary>
		[EnumTextValue("ExpectedOrigModCode")]
		[ColumnEnum("ExpectedOrigModCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 8)]
		ExpectedOrigModCode = 6,
		/// <summary>
		/// ExpectedOrigPassCode : 
		/// </summary>
		[EnumTextValue("ExpectedOrigPassCode")]
		[ColumnEnum("ExpectedOrigPassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 8)]
		ExpectedOrigPassCode = 7,
		/// <summary>
		/// NewModCode : 
		/// </summary>
		[EnumTextValue("NewModCode")]
		[ColumnEnum("NewModCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 8)]
		NewModCode = 8,
		/// <summary>
		/// NewPassCode : 
		/// </summary>
		[EnumTextValue("NewPassCode")]
		[ColumnEnum("NewPassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 8)]
		NewPassCode = 9,
		/// <summary>
		/// AppliedDate : 
		/// </summary>
		[EnumTextValue("AppliedDate")]
		[ColumnEnum("AppliedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		AppliedDate = 10
	}//End enum

	#endregion TempCodeChangesColumn Enum

} // end namespace
