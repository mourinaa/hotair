
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CompanyInfo.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'CompanyInfo' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class CompanyInfoBase : EntityBase, CONFDB.Entities.ICompanyInfo, IEntityId<CompanyInfoKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CompanyInfoEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CompanyInfoEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CompanyInfoEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CompanyInfo> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CompanyInfoEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CompanyInfoEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CompanyInfoBase"/> instance.
		///</summary>
		public CompanyInfoBase()
		{
			this.entityData = new CompanyInfoEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CompanyInfoBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_leadId"></param>
		///<param name="_companyId"></param>
		///<param name="_slaEndDate"></param>
		///<param name="_address"></param>
		///<param name="_city"></param>
		///<param name="_countryId"></param>
		///<param name="_postal"></param>
		public CompanyInfoBase(System.Int32 _id, System.Int32 _leadId, System.Int32 _companyId, 
			System.DateTime _slaEndDate, System.String _address, System.String _city, System.String _countryId, 
			System.String _postal)
		{
			this.entityData = new CompanyInfoEntityData();
			this.backupData = null;

			this.Id = _id;
			this.LeadId = _leadId;
			this.CompanyId = _companyId;
			this.SlaEndDate = _slaEndDate;
			this.Address = _address;
			this.City = _city;
			this.CountryId = _countryId;
			this.Postal = _postal;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CompanyInfo"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_leadId"></param>
		///<param name="_companyId"></param>
		///<param name="_slaEndDate"></param>
		///<param name="_address"></param>
		///<param name="_city"></param>
		///<param name="_countryId"></param>
		///<param name="_postal"></param>
		public static CompanyInfo CreateCompanyInfo(System.Int32 _id, System.Int32 _leadId, System.Int32 _companyId, 
			System.DateTime _slaEndDate, System.String _address, System.String _city, System.String _countryId, 
			System.String _postal)
		{
			CompanyInfo newCompanyInfo = new CompanyInfo();
			newCompanyInfo.Id = _id;
			newCompanyInfo.LeadId = _leadId;
			newCompanyInfo.CompanyId = _companyId;
			newCompanyInfo.SlaEndDate = _slaEndDate;
			newCompanyInfo.Address = _address;
			newCompanyInfo.City = _city;
			newCompanyInfo.CountryId = _countryId;
			newCompanyInfo.Postal = _postal;
			return newCompanyInfo;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the LeadId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 LeadId
		{
			get
			{
				return this.entityData.LeadId; 
			}
			
			set
			{
				if (this.entityData.LeadId == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.LeadId, this.entityData.LeadId);
				this.entityData.LeadId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.LeadId, this.entityData.LeadId);
				OnPropertyChanged("LeadId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CompanyId
		{
			get
			{
				return this.entityData.CompanyId; 
			}
			
			set
			{
				if (this.entityData.CompanyId == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.CompanyId, this.entityData.CompanyId);
				this.entityData.CompanyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.CompanyId, this.entityData.CompanyId);
				OnPropertyChanged("CompanyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SlaEndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime SlaEndDate
		{
			get
			{
				return this.entityData.SlaEndDate; 
			}
			
			set
			{
				if (this.entityData.SlaEndDate == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.SlaEndDate, this.entityData.SlaEndDate);
				this.entityData.SlaEndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.SlaEndDate, this.entityData.SlaEndDate);
				OnPropertyChanged("SlaEndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Address property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Address
		{
			get
			{
				return this.entityData.Address; 
			}
			
			set
			{
				if (this.entityData.Address == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.Address, this.entityData.Address);
				this.entityData.Address = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.Address, this.entityData.Address);
				OnPropertyChanged("Address");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the City property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String City
		{
			get
			{
				return this.entityData.City; 
			}
			
			set
			{
				if (this.entityData.City == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.City, this.entityData.City);
				this.entityData.City = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.City, this.entityData.City);
				OnPropertyChanged("City");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Postal property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String Postal
		{
			get
			{
				return this.entityData.Postal; 
			}
			
			set
			{
				if (this.entityData.Postal == value)
					return;
					
				OnColumnChanging(CompanyInfoColumn.Postal, this.entityData.Postal);
				this.entityData.Postal = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CompanyInfoColumn.Postal, this.entityData.Postal);
				OnPropertyChanged("Postal");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for CountryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Country CountryIdSource
      	{
            get { return entityData.CountryIdSource; }
            set { entityData.CountryIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CompanyLeadTracking objects
		///	which are related to this object through the relation FK_CompanyLeadTracking_CompanyInfo
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CompanyLeadTracking> CompanyLeadTrackingCollection
		{
			get { return entityData.CompanyLeadTrackingCollection; }
			set { entityData.CompanyLeadTrackingCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Address", "Address", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("City", "City", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("CountryId", "Country Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CountryId", "Country Id", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Postal", "Postal", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CompanyInfo"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "LeadID", "CompanyID", "SLAEndDate", "Address", "City", "CountryID", "Postal"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CompanyInfoEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CompanyInfo) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CompanyInfo>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CompanyInfo);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CompanyInfo Entity 
		///</summary>
		public virtual CompanyInfo Copy()
		{
			//shallow copy entity
			CompanyInfo copy = new CompanyInfo();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.OriginalId = this.OriginalId;
			copy.LeadId = this.LeadId;
			copy.CompanyId = this.CompanyId;
			copy.SlaEndDate = this.SlaEndDate;
			copy.Address = this.Address;
			copy.City = this.City;
			copy.CountryId = this.CountryId;
			copy.Postal = this.Postal;
			
			copy.CountryIdSource = MakeCopyOf(this.CountryIdSource) as Country;
		
			//deep copy nested objects
			copy.CompanyLeadTrackingCollection = (TList<CompanyLeadTracking>) MakeCopyOf(this.CompanyLeadTrackingCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed CompanyInfo Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CompanyInfo DeepCopy()
		{
			return EntityHelper.Clone<CompanyInfo>(this as CompanyInfo);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CompanyInfoEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CompanyInfoEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CompanyInfoColumn column)
		{
			switch(column)
			{
					case CompanyInfoColumn.Id:
					return entityData.Id != _originalData.Id;
					case CompanyInfoColumn.LeadId:
					return entityData.LeadId != _originalData.LeadId;
					case CompanyInfoColumn.CompanyId:
					return entityData.CompanyId != _originalData.CompanyId;
					case CompanyInfoColumn.SlaEndDate:
					return entityData.SlaEndDate != _originalData.SlaEndDate;
					case CompanyInfoColumn.Address:
					return entityData.Address != _originalData.Address;
					case CompanyInfoColumn.City:
					return entityData.City != _originalData.City;
					case CompanyInfoColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
					case CompanyInfoColumn.Postal:
					return entityData.Postal != _originalData.Postal;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.LeadId != _originalData.LeadId;
			result = result || entityData.CompanyId != _originalData.CompanyId;
			result = result || entityData.SlaEndDate != _originalData.SlaEndDate;
			result = result || entityData.Address != _originalData.Address;
			result = result || entityData.City != _originalData.City;
			result = result || entityData.CountryId != _originalData.CountryId;
			result = result || entityData.Postal != _originalData.Postal;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CompanyInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is CompanyInfoBase)
				return Equals(this, (CompanyInfoBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CompanyInfoBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.LeadId.GetHashCode() ^ 
					this.CompanyId.GetHashCode() ^ 
					this.SlaEndDate.GetHashCode() ^ 
					((this.Address == null) ? string.Empty : this.Address.ToString()).GetHashCode() ^ 
					((this.City == null) ? string.Empty : this.City.ToString()).GetHashCode() ^ 
					this.CountryId.GetHashCode() ^ 
					((this.Postal == null) ? string.Empty : this.Postal.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CompanyInfoBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CompanyInfoBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CompanyInfoBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CompanyInfoBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CompanyInfoBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CompanyInfoBase Object1, CompanyInfoBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.LeadId != Object2.LeadId)
				equal = false;
			if (Object1.CompanyId != Object2.CompanyId)
				equal = false;
			if (Object1.SlaEndDate != Object2.SlaEndDate)
				equal = false;
			if ( Object1.Address != null && Object2.Address != null )
			{
				if (Object1.Address != Object2.Address)
					equal = false;
			}
			else if (Object1.Address == null ^ Object2.Address == null )
			{
				equal = false;
			}
			if ( Object1.City != null && Object2.City != null )
			{
				if (Object1.City != Object2.City)
					equal = false;
			}
			else if (Object1.City == null ^ Object2.City == null )
			{
				equal = false;
			}
			if (Object1.CountryId != Object2.CountryId)
				equal = false;
			if ( Object1.Postal != null && Object2.Postal != null )
			{
				if (Object1.Postal != Object2.Postal)
					equal = false;
			}
			else if (Object1.Postal == null ^ Object2.Postal == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CompanyInfoBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CompanyInfoComparer GetComparer()
        {
            return new CompanyInfoComparer();
        }
        */

        // Comparer delegates back to CompanyInfo
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CompanyInfo rhs, CompanyInfoColumn which)
        {
            switch (which)
            {
            	
            	
            	case CompanyInfoColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.LeadId:
            		return this.LeadId.CompareTo(rhs.LeadId);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.CompanyId:
            		return this.CompanyId.CompareTo(rhs.CompanyId);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.SlaEndDate:
            		return this.SlaEndDate.CompareTo(rhs.SlaEndDate);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.Address:
            		return this.Address.CompareTo(rhs.Address);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.City:
            		return this.City.CompareTo(rhs.City);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.CountryId:
            		return this.CountryId.CompareTo(rhs.CountryId);
            		
            		                 
            	
            	
            	case CompanyInfoColumn.Postal:
            		return this.Postal.CompareTo(rhs.Postal);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CompanyInfoKey> Members
		
		// member variable for the EntityId property
		private CompanyInfoKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CompanyInfoKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CompanyInfoKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CompanyInfo")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- Id: {0}{8}- LeadId: {1}{8}- CompanyId: {2}{8}- SlaEndDate: {3}{8}- Address: {4}{8}- City: {5}{8}- CountryId: {6}{8}- Postal: {7}{8}", 
				this.Id,
				this.LeadId,
				this.CompanyId,
				this.SlaEndDate,
				(this.Address == null) ? string.Empty : this.Address.ToString(),
				(this.City == null) ? string.Empty : this.City.ToString(),
				this.CountryId,
				(this.Postal == null) ? string.Empty : this.Postal.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CompanyInfo' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CompanyInfoEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "CompanyInfo"</remarks>
			public System.Int32 Id;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// LeadID : 
		/// </summary>
		public System.Int32		  LeadId = (int)0;
		
		/// <summary>
		/// CompanyID : 
		/// </summary>
		public System.Int32		  CompanyId = (int)0;
		
		/// <summary>
		/// SLAEndDate : 
		/// </summary>
		public System.DateTime		  SlaEndDate = DateTime.MinValue;
		
		/// <summary>
		/// Address : 
		/// </summary>
		public System.String		  Address = null;
		
		/// <summary>
		/// City : 
		/// </summary>
		public System.String		  City = null;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.String		  CountryId = string.Empty;
		
		/// <summary>
		/// Postal : 
		/// </summary>
		public System.String		  Postal = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Country _countryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for CountryId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Country CountryIdSource
      	{
            get { return this._countryIdSource; }
            set { this._countryIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CompanyLeadTrackingCollection
		
		private TList<CompanyLeadTracking> _companyLeadTrackingCompanyInfoId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _companyLeadTrackingCompanyInfoId
		/// </summary>	
		public TList<CompanyLeadTracking> CompanyLeadTrackingCollection
		{
			get
			{
				if (_companyLeadTrackingCompanyInfoId == null)
				{
				_companyLeadTrackingCompanyInfoId = new TList<CompanyLeadTracking>();
				}
	
				return _companyLeadTrackingCompanyInfoId;
			}
			set { _companyLeadTrackingCompanyInfoId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CompanyInfoEntityData _tmp = new CompanyInfoEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.LeadId = this.LeadId;
			_tmp.CompanyId = this.CompanyId;
			_tmp.SlaEndDate = this.SlaEndDate;
			_tmp.Address = this.Address;
			_tmp.City = this.City;
			_tmp.CountryId = this.CountryId;
			_tmp.Postal = this.Postal;
			
			#region Source Parent Composite Entities
			if (this.CountryIdSource != null)
				_tmp.CountryIdSource = MakeCopyOf(this.CountryIdSource) as Country;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._companyLeadTrackingCompanyInfoId != null)
				_tmp.CompanyLeadTrackingCollection = (TList<CompanyLeadTracking>) MakeCopyOf(this.CompanyLeadTrackingCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyInfoColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CompanyInfoColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyInfoColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CompanyInfoColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CompanyInfoColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CompanyInfoEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CompanyInfoEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CompanyInfoColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CompanyInfoColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CompanyInfoEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CompanyInfoEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CompanyInfoEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CompanyInfo"/> object.
	/// </remarks>
	public class CompanyInfoEventArgs : System.EventArgs
	{
		private CompanyInfoColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CompanyInfoEventArgs class.
		///</summary>
		public CompanyInfoEventArgs(CompanyInfoColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CompanyInfoEventArgs class.
		///</summary>
		public CompanyInfoEventArgs(CompanyInfoColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CompanyInfoColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CompanyInfoColumn" />
		public CompanyInfoColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CompanyInfo related events.
	///</summary>
	public delegate void CompanyInfoEventHandler(object sender, CompanyInfoEventArgs e);
	
	#region CompanyInfoComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CompanyInfoComparer : System.Collections.Generic.IComparer<CompanyInfo>
	{
		CompanyInfoColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CompanyInfoComparer"/> class.
        /// </summary>
		public CompanyInfoComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CompanyInfoComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CompanyInfoComparer(CompanyInfoColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CompanyInfo"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CompanyInfo"/> to compare.</param>
        /// <param name="b">The second <c>CompanyInfo</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CompanyInfo a, CompanyInfo b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CompanyInfo entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CompanyInfo a, CompanyInfo b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CompanyInfoColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CompanyInfoKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CompanyInfo"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CompanyInfoKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CompanyInfoKey class.
		/// </summary>
		public CompanyInfoKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CompanyInfoKey class.
		/// </summary>
		public CompanyInfoKey(CompanyInfoBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CompanyInfoKey class.
		/// </summary>
		public CompanyInfoKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CompanyInfoBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CompanyInfoBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CompanyInfoColumn Enum
	
	/// <summary>
	/// Enumerate the CompanyInfo columns.
	/// </summary>
	[Serializable]
	public enum CompanyInfoColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		Id = 1,
		/// <summary>
		/// LeadId : 
		/// </summary>
		[EnumTextValue("LeadID")]
		[ColumnEnum("LeadID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		LeadId = 2,
		/// <summary>
		/// CompanyId : 
		/// </summary>
		[EnumTextValue("CompanyID")]
		[ColumnEnum("CompanyID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CompanyId = 3,
		/// <summary>
		/// SlaEndDate : 
		/// </summary>
		[EnumTextValue("SLAEndDate")]
		[ColumnEnum("SLAEndDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		SlaEndDate = 4,
		/// <summary>
		/// Address : 
		/// </summary>
		[EnumTextValue("Address")]
		[ColumnEnum("Address", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Address = 5,
		/// <summary>
		/// City : 
		/// </summary>
		[EnumTextValue("City")]
		[ColumnEnum("City", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		City = 6,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("CountryID")]
		[ColumnEnum("CountryID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 3)]
		CountryId = 7,
		/// <summary>
		/// Postal : 
		/// </summary>
		[EnumTextValue("Postal")]
		[ColumnEnum("Postal", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		Postal = 8
	}//End enum

	#endregion CompanyInfoColumn Enum

} // end namespace
