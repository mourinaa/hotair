
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Commission.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'Commission' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class CommissionBase : EntityBase, CONFDB.Entities.ICommission, IEntityId<CommissionKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CommissionEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CommissionEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CommissionEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Commission> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CommissionEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CommissionEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CommissionBase"/> instance.
		///</summary>
		public CommissionBase()
		{
			this.entityData = new CommissionEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CommissionBase"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_billedDate">The invoice date this commission is for.</param>
		///<param name="_totalCredits"></param>
		///<param name="_productCharges"></param>
		///<param name="_miscCharges"></param>
		///<param name="_totalAmount"></param>
		///<param name="_commissionRate"></param>
		///<param name="_totalCommission"></param>
		///<param name="_currencyId"></param>
		public CommissionBase(System.String _wholesalerId, System.Int32 _customerId, System.Int32 _salesPersonId, 
			System.DateTime? _billedDate, System.Decimal? _totalCredits, System.Decimal? _productCharges, 
			System.Decimal? _miscCharges, System.Decimal? _totalAmount, System.Decimal? _commissionRate, 
			System.Decimal? _totalCommission, System.String _currencyId)
		{
			this.entityData = new CommissionEntityData();
			this.backupData = null;

			this.WholesalerId = _wholesalerId;
			this.CustomerId = _customerId;
			this.SalesPersonId = _salesPersonId;
			this.BilledDate = _billedDate;
			this.TotalCredits = _totalCredits;
			this.ProductCharges = _productCharges;
			this.MiscCharges = _miscCharges;
			this.TotalAmount = _totalAmount;
			this.CommissionRate = _commissionRate;
			this.TotalCommission = _totalCommission;
			this.CurrencyId = _currencyId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Commission"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_billedDate">The invoice date this commission is for.</param>
		///<param name="_totalCredits"></param>
		///<param name="_productCharges"></param>
		///<param name="_miscCharges"></param>
		///<param name="_totalAmount"></param>
		///<param name="_commissionRate"></param>
		///<param name="_totalCommission"></param>
		///<param name="_currencyId"></param>
		public static Commission CreateCommission(System.String _wholesalerId, System.Int32 _customerId, System.Int32 _salesPersonId, 
			System.DateTime? _billedDate, System.Decimal? _totalCredits, System.Decimal? _productCharges, 
			System.Decimal? _miscCharges, System.Decimal? _totalAmount, System.Decimal? _commissionRate, 
			System.Decimal? _totalCommission, System.String _currencyId)
		{
			Commission newCommission = new Commission();
			newCommission.WholesalerId = _wholesalerId;
			newCommission.CustomerId = _customerId;
			newCommission.SalesPersonId = _salesPersonId;
			newCommission.BilledDate = _billedDate;
			newCommission.TotalCredits = _totalCredits;
			newCommission.ProductCharges = _productCharges;
			newCommission.MiscCharges = _miscCharges;
			newCommission.TotalAmount = _totalAmount;
			newCommission.CommissionRate = _commissionRate;
			newCommission.TotalCommission = _totalCommission;
			newCommission.CurrencyId = _currencyId;
			return newCommission;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CommissionColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(CommissionColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(CommissionColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesPersonId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SalesPersonId
		{
			get
			{
				return this.entityData.SalesPersonId; 
			}
			
			set
			{
				if (this.entityData.SalesPersonId == value)
					return;
					
				OnColumnChanging(CommissionColumn.SalesPersonId, this.entityData.SalesPersonId);
				this.entityData.SalesPersonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.SalesPersonId, this.entityData.SalesPersonId);
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BilledDate property. 
		///		The invoice date this commission is for.
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsBilledDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("The invoice date this commission is for."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? BilledDate
		{
			get
			{
				return this.entityData.BilledDate; 
			}
			
			set
			{
				if (this.entityData.BilledDate == value)
					return;
					
				OnColumnChanging(CommissionColumn.BilledDate, this.entityData.BilledDate);
				this.entityData.BilledDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.BilledDate, this.entityData.BilledDate);
				OnPropertyChanged("BilledDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalCredits property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalCreditsNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalCredits
		{
			get
			{
				return this.entityData.TotalCredits; 
			}
			
			set
			{
				if (this.entityData.TotalCredits == value)
					return;
					
				OnColumnChanging(CommissionColumn.TotalCredits, this.entityData.TotalCredits);
				this.entityData.TotalCredits = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.TotalCredits, this.entityData.TotalCredits);
				OnPropertyChanged("TotalCredits");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductCharges property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsProductChargesNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ProductCharges
		{
			get
			{
				return this.entityData.ProductCharges; 
			}
			
			set
			{
				if (this.entityData.ProductCharges == value)
					return;
					
				OnColumnChanging(CommissionColumn.ProductCharges, this.entityData.ProductCharges);
				this.entityData.ProductCharges = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.ProductCharges, this.entityData.ProductCharges);
				OnPropertyChanged("ProductCharges");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MiscCharges property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMiscChargesNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MiscCharges
		{
			get
			{
				return this.entityData.MiscCharges; 
			}
			
			set
			{
				if (this.entityData.MiscCharges == value)
					return;
					
				OnColumnChanging(CommissionColumn.MiscCharges, this.entityData.MiscCharges);
				this.entityData.MiscCharges = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.MiscCharges, this.entityData.MiscCharges);
				OnPropertyChanged("MiscCharges");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalAmount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalAmount
		{
			get
			{
				return this.entityData.TotalAmount; 
			}
			
			set
			{
				if (this.entityData.TotalAmount == value)
					return;
					
				OnColumnChanging(CommissionColumn.TotalAmount, this.entityData.TotalAmount);
				this.entityData.TotalAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.TotalAmount, this.entityData.TotalAmount);
				OnPropertyChanged("TotalAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CommissionRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsCommissionRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? CommissionRate
		{
			get
			{
				return this.entityData.CommissionRate; 
			}
			
			set
			{
				if (this.entityData.CommissionRate == value)
					return;
					
				OnColumnChanging(CommissionColumn.CommissionRate, this.entityData.CommissionRate);
				this.entityData.CommissionRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.CommissionRate, this.entityData.CommissionRate);
				OnPropertyChanged("CommissionRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalCommission property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalCommissionNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalCommission
		{
			get
			{
				return this.entityData.TotalCommission; 
			}
			
			set
			{
				if (this.entityData.TotalCommission == value)
					return;
					
				OnColumnChanging(CommissionColumn.TotalCommission, this.entityData.TotalCommission);
				this.entityData.TotalCommission = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.TotalCommission, this.entityData.TotalCommission);
				OnPropertyChanged("TotalCommission");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String CurrencyId
		{
			get
			{
				return this.entityData.CurrencyId; 
			}
			
			set
			{
				if (this.entityData.CurrencyId == value)
					return;
					
				OnColumnChanging(CommissionColumn.CurrencyId, this.entityData.CurrencyId);
				this.entityData.CurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CommissionColumn.CurrencyId, this.entityData.CurrencyId);
				OnPropertyChanged("CurrencyId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Currency"/>.
		/// </summary>
		/// <value>The source Currency for CurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Currency CurrencyIdSource
      	{
            get { return entityData.CurrencyIdSource; }
            set { entityData.CurrencyIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return entityData.SalesPersonIdSource; }
            set { entityData.SalesPersonIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return entityData.WholesalerIdSource; }
            set { entityData.WholesalerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customer CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("CurrencyId", "Currency Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CurrencyId", "Currency Id", 3));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Commission"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WholesalerID", "CustomerID", "SalesPersonID", "BilledDate", "TotalCredits", "ProductCharges", "MiscCharges", "TotalAmount", "CommissionRate", "TotalCommission", "CurrencyID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CommissionEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Commission) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Commission>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Commission);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Commission Entity 
		///</summary>
		public virtual Commission Copy()
		{
			//shallow copy entity
			Commission copy = new Commission();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.WholesalerId = this.WholesalerId;
			copy.CustomerId = this.CustomerId;
			copy.SalesPersonId = this.SalesPersonId;
			copy.BilledDate = this.BilledDate;
			copy.TotalCredits = this.TotalCredits;
			copy.ProductCharges = this.ProductCharges;
			copy.MiscCharges = this.MiscCharges;
			copy.TotalAmount = this.TotalAmount;
			copy.CommissionRate = this.CommissionRate;
			copy.TotalCommission = this.TotalCommission;
			copy.CurrencyId = this.CurrencyId;
			
			copy.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource) as Currency;
			copy.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
			copy.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Commission Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Commission DeepCopy()
		{
			return EntityHelper.Clone<Commission>(this as Commission);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CommissionEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CommissionEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CommissionColumn column)
		{
			switch(column)
			{
					case CommissionColumn.Id:
					return entityData.Id != _originalData.Id;
					case CommissionColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case CommissionColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case CommissionColumn.SalesPersonId:
					return entityData.SalesPersonId != _originalData.SalesPersonId;
					case CommissionColumn.BilledDate:
					return entityData.BilledDate != _originalData.BilledDate;
					case CommissionColumn.TotalCredits:
					return entityData.TotalCredits != _originalData.TotalCredits;
					case CommissionColumn.ProductCharges:
					return entityData.ProductCharges != _originalData.ProductCharges;
					case CommissionColumn.MiscCharges:
					return entityData.MiscCharges != _originalData.MiscCharges;
					case CommissionColumn.TotalAmount:
					return entityData.TotalAmount != _originalData.TotalAmount;
					case CommissionColumn.CommissionRate:
					return entityData.CommissionRate != _originalData.CommissionRate;
					case CommissionColumn.TotalCommission:
					return entityData.TotalCommission != _originalData.TotalCommission;
					case CommissionColumn.CurrencyId:
					return entityData.CurrencyId != _originalData.CurrencyId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.SalesPersonId != _originalData.SalesPersonId;
			result = result || entityData.BilledDate != _originalData.BilledDate;
			result = result || entityData.TotalCredits != _originalData.TotalCredits;
			result = result || entityData.ProductCharges != _originalData.ProductCharges;
			result = result || entityData.MiscCharges != _originalData.MiscCharges;
			result = result || entityData.TotalAmount != _originalData.TotalAmount;
			result = result || entityData.CommissionRate != _originalData.CommissionRate;
			result = result || entityData.TotalCommission != _originalData.TotalCommission;
			result = result || entityData.CurrencyId != _originalData.CurrencyId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CommissionBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is CommissionBase)
				return Equals(this, (CommissionBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CommissionBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					this.CustomerId.GetHashCode() ^ 
					this.SalesPersonId.GetHashCode() ^ 
					((this.BilledDate == null) ? string.Empty : this.BilledDate.ToString()).GetHashCode() ^ 
					((this.TotalCredits == null) ? string.Empty : this.TotalCredits.ToString()).GetHashCode() ^ 
					((this.ProductCharges == null) ? string.Empty : this.ProductCharges.ToString()).GetHashCode() ^ 
					((this.MiscCharges == null) ? string.Empty : this.MiscCharges.ToString()).GetHashCode() ^ 
					((this.TotalAmount == null) ? string.Empty : this.TotalAmount.ToString()).GetHashCode() ^ 
					((this.CommissionRate == null) ? string.Empty : this.CommissionRate.ToString()).GetHashCode() ^ 
					((this.TotalCommission == null) ? string.Empty : this.TotalCommission.ToString()).GetHashCode() ^ 
					this.CurrencyId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CommissionBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CommissionBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CommissionBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CommissionBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CommissionBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CommissionBase Object1, CommissionBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.SalesPersonId != Object2.SalesPersonId)
				equal = false;
			if ( Object1.BilledDate != null && Object2.BilledDate != null )
			{
				if (Object1.BilledDate != Object2.BilledDate)
					equal = false;
			}
			else if (Object1.BilledDate == null ^ Object2.BilledDate == null )
			{
				equal = false;
			}
			if ( Object1.TotalCredits != null && Object2.TotalCredits != null )
			{
				if (Object1.TotalCredits != Object2.TotalCredits)
					equal = false;
			}
			else if (Object1.TotalCredits == null ^ Object2.TotalCredits == null )
			{
				equal = false;
			}
			if ( Object1.ProductCharges != null && Object2.ProductCharges != null )
			{
				if (Object1.ProductCharges != Object2.ProductCharges)
					equal = false;
			}
			else if (Object1.ProductCharges == null ^ Object2.ProductCharges == null )
			{
				equal = false;
			}
			if ( Object1.MiscCharges != null && Object2.MiscCharges != null )
			{
				if (Object1.MiscCharges != Object2.MiscCharges)
					equal = false;
			}
			else if (Object1.MiscCharges == null ^ Object2.MiscCharges == null )
			{
				equal = false;
			}
			if ( Object1.TotalAmount != null && Object2.TotalAmount != null )
			{
				if (Object1.TotalAmount != Object2.TotalAmount)
					equal = false;
			}
			else if (Object1.TotalAmount == null ^ Object2.TotalAmount == null )
			{
				equal = false;
			}
			if ( Object1.CommissionRate != null && Object2.CommissionRate != null )
			{
				if (Object1.CommissionRate != Object2.CommissionRate)
					equal = false;
			}
			else if (Object1.CommissionRate == null ^ Object2.CommissionRate == null )
			{
				equal = false;
			}
			if ( Object1.TotalCommission != null && Object2.TotalCommission != null )
			{
				if (Object1.TotalCommission != Object2.TotalCommission)
					equal = false;
			}
			else if (Object1.TotalCommission == null ^ Object2.TotalCommission == null )
			{
				equal = false;
			}
			if (Object1.CurrencyId != Object2.CurrencyId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CommissionBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CommissionComparer GetComparer()
        {
            return new CommissionComparer();
        }
        */

        // Comparer delegates back to Commission
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Commission rhs, CommissionColumn which)
        {
            switch (which)
            {
            	
            	
            	case CommissionColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CommissionColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case CommissionColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case CommissionColumn.SalesPersonId:
            		return this.SalesPersonId.CompareTo(rhs.SalesPersonId);
            		
            		                 
            	
            	
            	case CommissionColumn.BilledDate:
            		return this.BilledDate.Value.CompareTo(rhs.BilledDate.Value);
            		
            		                 
            	
            	
            	case CommissionColumn.TotalCredits:
            		return this.TotalCredits.Value.CompareTo(rhs.TotalCredits.Value);
            		
            		                 
            	
            	
            	case CommissionColumn.ProductCharges:
            		return this.ProductCharges.Value.CompareTo(rhs.ProductCharges.Value);
            		
            		                 
            	
            	
            	case CommissionColumn.MiscCharges:
            		return this.MiscCharges.Value.CompareTo(rhs.MiscCharges.Value);
            		
            		                 
            	
            	
            	case CommissionColumn.TotalAmount:
            		return this.TotalAmount.Value.CompareTo(rhs.TotalAmount.Value);
            		
            		                 
            	
            	
            	case CommissionColumn.CommissionRate:
            		return this.CommissionRate.Value.CompareTo(rhs.CommissionRate.Value);
            		
            		                 
            	
            	
            	case CommissionColumn.TotalCommission:
            		return this.TotalCommission.Value.CompareTo(rhs.TotalCommission.Value);
            		
            		                 
            	
            	
            	case CommissionColumn.CurrencyId:
            		return this.CurrencyId.CompareTo(rhs.CurrencyId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CommissionKey> Members
		
		// member variable for the EntityId property
		private CommissionKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CommissionKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CommissionKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Commission")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- Id: {0}{12}- WholesalerId: {1}{12}- CustomerId: {2}{12}- SalesPersonId: {3}{12}- BilledDate: {4}{12}- TotalCredits: {5}{12}- ProductCharges: {6}{12}- MiscCharges: {7}{12}- TotalAmount: {8}{12}- CommissionRate: {9}{12}- TotalCommission: {10}{12}- CurrencyId: {11}{12}", 
				this.Id,
				this.WholesalerId,
				this.CustomerId,
				this.SalesPersonId,
				(this.BilledDate == null) ? string.Empty : this.BilledDate.ToString(),
				(this.TotalCredits == null) ? string.Empty : this.TotalCredits.ToString(),
				(this.ProductCharges == null) ? string.Empty : this.ProductCharges.ToString(),
				(this.MiscCharges == null) ? string.Empty : this.MiscCharges.ToString(),
				(this.TotalAmount == null) ? string.Empty : this.TotalAmount.ToString(),
				(this.CommissionRate == null) ? string.Empty : this.CommissionRate.ToString(),
				(this.TotalCommission == null) ? string.Empty : this.TotalCommission.ToString(),
				this.CurrencyId,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Commission' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CommissionEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Commission"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32		  CustomerId = (int)0;
		
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		public System.Int32		  SalesPersonId = (int)0;
		
		/// <summary>
		/// BilledDate : The invoice date this commission is for.
		/// </summary>
		public System.DateTime?		  BilledDate = null;
		
		/// <summary>
		/// TotalCredits : 
		/// </summary>
		public System.Decimal?		  TotalCredits = null;
		
		/// <summary>
		/// ProductCharges : 
		/// </summary>
		public System.Decimal?		  ProductCharges = null;
		
		/// <summary>
		/// MiscCharges : 
		/// </summary>
		public System.Decimal?		  MiscCharges = null;
		
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		public System.Decimal?		  TotalAmount = null;
		
		/// <summary>
		/// CommissionRate : 
		/// </summary>
		public System.Decimal?		  CommissionRate = null;
		
		/// <summary>
		/// TotalCommission : 
		/// </summary>
		public System.Decimal?		  TotalCommission = null;
		
		/// <summary>
		/// CurrencyID : 
		/// </summary>
		public System.String		  CurrencyId = string.Empty;
		#endregion
			
		#region Source Foreign Key Property
				
		private Currency _currencyIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Currency"/>.
		/// </summary>
		/// <value>The source Currency for CurrencyId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Currency CurrencyIdSource
      	{
            get { return this._currencyIdSource; }
            set { this._currencyIdSource = value; }
      	}
		private SalesPerson _salesPersonIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return this._salesPersonIdSource; }
            set { this._salesPersonIdSource = value; }
      	}
		private Wholesaler _wholesalerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return this._wholesalerIdSource; }
            set { this._wholesalerIdSource = value; }
      	}
		private Customer _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Customer CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CommissionEntityData _tmp = new CommissionEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.SalesPersonId = this.SalesPersonId;
			_tmp.BilledDate = this.BilledDate;
			_tmp.TotalCredits = this.TotalCredits;
			_tmp.ProductCharges = this.ProductCharges;
			_tmp.MiscCharges = this.MiscCharges;
			_tmp.TotalAmount = this.TotalAmount;
			_tmp.CommissionRate = this.CommissionRate;
			_tmp.TotalCommission = this.TotalCommission;
			_tmp.CurrencyId = this.CurrencyId;
			
			#region Source Parent Composite Entities
			if (this.CurrencyIdSource != null)
				_tmp.CurrencyIdSource = MakeCopyOf(this.CurrencyIdSource) as Currency;
			if (this.SalesPersonIdSource != null)
				_tmp.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
			if (this.WholesalerIdSource != null)
				_tmp.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CommissionColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CommissionColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CommissionColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CommissionColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CommissionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CommissionColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CommissionEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CommissionEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CommissionColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CommissionColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CommissionEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CommissionEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CommissionEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Commission"/> object.
	/// </remarks>
	public class CommissionEventArgs : System.EventArgs
	{
		private CommissionColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CommissionEventArgs class.
		///</summary>
		public CommissionEventArgs(CommissionColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CommissionEventArgs class.
		///</summary>
		public CommissionEventArgs(CommissionColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CommissionColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CommissionColumn" />
		public CommissionColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Commission related events.
	///</summary>
	public delegate void CommissionEventHandler(object sender, CommissionEventArgs e);
	
	#region CommissionComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CommissionComparer : System.Collections.Generic.IComparer<Commission>
	{
		CommissionColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CommissionComparer"/> class.
        /// </summary>
		public CommissionComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CommissionComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CommissionComparer(CommissionColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Commission"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Commission"/> to compare.</param>
        /// <param name="b">The second <c>Commission</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Commission a, Commission b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Commission entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Commission a, Commission b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CommissionColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CommissionKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Commission"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CommissionKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CommissionKey class.
		/// </summary>
		public CommissionKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CommissionKey class.
		/// </summary>
		public CommissionKey(CommissionBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CommissionKey class.
		/// </summary>
		public CommissionKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CommissionBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CommissionBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CommissionColumn Enum
	
	/// <summary>
	/// Enumerate the Commission columns.
	/// </summary>
	[Serializable]
	public enum CommissionColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerId = 3,
		/// <summary>
		/// SalesPersonId : 
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SalesPersonId = 4,
		/// <summary>
		/// BilledDate : The invoice date this commission is for.
		/// </summary>
		[EnumTextValue("BilledDate")]
		[ColumnEnum("BilledDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		BilledDate = 5,
		/// <summary>
		/// TotalCredits : 
		/// </summary>
		[EnumTextValue("TotalCredits")]
		[ColumnEnum("TotalCredits", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalCredits = 6,
		/// <summary>
		/// ProductCharges : 
		/// </summary>
		[EnumTextValue("ProductCharges")]
		[ColumnEnum("ProductCharges", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ProductCharges = 7,
		/// <summary>
		/// MiscCharges : 
		/// </summary>
		[EnumTextValue("MiscCharges")]
		[ColumnEnum("MiscCharges", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MiscCharges = 8,
		/// <summary>
		/// TotalAmount : 
		/// </summary>
		[EnumTextValue("TotalAmount")]
		[ColumnEnum("TotalAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalAmount = 9,
		/// <summary>
		/// CommissionRate : 
		/// </summary>
		[EnumTextValue("CommissionRate")]
		[ColumnEnum("CommissionRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		CommissionRate = 10,
		/// <summary>
		/// TotalCommission : 
		/// </summary>
		[EnumTextValue("TotalCommission")]
		[ColumnEnum("TotalCommission", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalCommission = 11,
		/// <summary>
		/// CurrencyId : 
		/// </summary>
		[EnumTextValue("CurrencyID")]
		[ColumnEnum("CurrencyID", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 3)]
		CurrencyId = 12
	}//End enum

	#endregion CommissionColumn Enum

} // end namespace
