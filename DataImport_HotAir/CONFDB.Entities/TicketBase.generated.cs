
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Ticket.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'Ticket' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class TicketBase : EntityBase, CONFDB.Entities.ITicket, IEntityId<TicketKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private TicketEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private TicketEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private TicketEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Ticket> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event TicketEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event TicketEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="TicketBase"/> instance.
		///</summary>
		public TicketBase()
		{
			this.entityData = new TicketEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="TicketBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_title"></param>
		///<param name="_issueDescription"></param>
		///<param name="_clientContactInfo"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_statusId"></param>
		///<param name="_resolutionText"></param>
		///<param name="_ticketPriorityId"></param>
		///<param name="_createdByUserId"></param>
		///<param name="_createdDate"></param>
		///<param name="_assignedToUserId"></param>
		///<param name="_assignedDate"></param>
		///<param name="_fixedByUserId"></param>
		///<param name="_fixedDate"></param>
		///<param name="_closedByUserId"></param>
		///<param name="_closedDate"></param>
		///<param name="_ticketProductId"></param>
		///<param name="_ticketCategoryId"></param>
		///<param name="_duplicateTicketId"></param>
		public TicketBase(System.Int32 _id, System.String _title, System.String _issueDescription, 
			System.String _clientContactInfo, System.String _wholesalerId, System.Int32 _customerId, System.Int32 _moderatorId, 
			System.Int32 _statusId, System.String _resolutionText, System.Int32 _ticketPriorityId, System.Int32 _createdByUserId, 
			System.DateTime _createdDate, System.Int32 _assignedToUserId, System.DateTime _assignedDate, System.Int32 _fixedByUserId, 
			System.DateTime _fixedDate, System.Int32 _closedByUserId, System.DateTime _closedDate, System.Int32 _ticketProductId, 
			System.Int32 _ticketCategoryId, System.Int32 _duplicateTicketId)
		{
			this.entityData = new TicketEntityData();
			this.backupData = null;

			this.Id = _id;
			this.Title = _title;
			this.IssueDescription = _issueDescription;
			this.ClientContactInfo = _clientContactInfo;
			this.WholesalerId = _wholesalerId;
			this.CustomerId = _customerId;
			this.ModeratorId = _moderatorId;
			this.StatusId = _statusId;
			this.ResolutionText = _resolutionText;
			this.TicketPriorityId = _ticketPriorityId;
			this.CreatedByUserId = _createdByUserId;
			this.CreatedDate = _createdDate;
			this.AssignedToUserId = _assignedToUserId;
			this.AssignedDate = _assignedDate;
			this.FixedByUserId = _fixedByUserId;
			this.FixedDate = _fixedDate;
			this.ClosedByUserId = _closedByUserId;
			this.ClosedDate = _closedDate;
			this.TicketProductId = _ticketProductId;
			this.TicketCategoryId = _ticketCategoryId;
			this.DuplicateTicketId = _duplicateTicketId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Ticket"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_title"></param>
		///<param name="_issueDescription"></param>
		///<param name="_clientContactInfo"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_statusId"></param>
		///<param name="_resolutionText"></param>
		///<param name="_ticketPriorityId"></param>
		///<param name="_createdByUserId"></param>
		///<param name="_createdDate"></param>
		///<param name="_assignedToUserId"></param>
		///<param name="_assignedDate"></param>
		///<param name="_fixedByUserId"></param>
		///<param name="_fixedDate"></param>
		///<param name="_closedByUserId"></param>
		///<param name="_closedDate"></param>
		///<param name="_ticketProductId"></param>
		///<param name="_ticketCategoryId"></param>
		///<param name="_duplicateTicketId"></param>
		public static Ticket CreateTicket(System.Int32 _id, System.String _title, System.String _issueDescription, 
			System.String _clientContactInfo, System.String _wholesalerId, System.Int32 _customerId, System.Int32 _moderatorId, 
			System.Int32 _statusId, System.String _resolutionText, System.Int32 _ticketPriorityId, System.Int32 _createdByUserId, 
			System.DateTime _createdDate, System.Int32 _assignedToUserId, System.DateTime _assignedDate, System.Int32 _fixedByUserId, 
			System.DateTime _fixedDate, System.Int32 _closedByUserId, System.DateTime _closedDate, System.Int32 _ticketProductId, 
			System.Int32 _ticketCategoryId, System.Int32 _duplicateTicketId)
		{
			Ticket newTicket = new Ticket();
			newTicket.Id = _id;
			newTicket.Title = _title;
			newTicket.IssueDescription = _issueDescription;
			newTicket.ClientContactInfo = _clientContactInfo;
			newTicket.WholesalerId = _wholesalerId;
			newTicket.CustomerId = _customerId;
			newTicket.ModeratorId = _moderatorId;
			newTicket.StatusId = _statusId;
			newTicket.ResolutionText = _resolutionText;
			newTicket.TicketPriorityId = _ticketPriorityId;
			newTicket.CreatedByUserId = _createdByUserId;
			newTicket.CreatedDate = _createdDate;
			newTicket.AssignedToUserId = _assignedToUserId;
			newTicket.AssignedDate = _assignedDate;
			newTicket.FixedByUserId = _fixedByUserId;
			newTicket.FixedDate = _fixedDate;
			newTicket.ClosedByUserId = _closedByUserId;
			newTicket.ClosedDate = _closedDate;
			newTicket.TicketProductId = _ticketProductId;
			newTicket.TicketCategoryId = _ticketCategoryId;
			newTicket.DuplicateTicketId = _duplicateTicketId;
			return newTicket;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(TicketColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the Title property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Title
		{
			get
			{
				return this.entityData.Title; 
			}
			
			set
			{
				if (this.entityData.Title == value)
					return;
					
				OnColumnChanging(TicketColumn.Title, this.entityData.Title);
				this.entityData.Title = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.Title, this.entityData.Title);
				OnPropertyChanged("Title");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the IssueDescription property. 
		///		
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String IssueDescription
		{
			get
			{
				return this.entityData.IssueDescription; 
			}
			
			set
			{
				if (this.entityData.IssueDescription == value)
					return;
					
				OnColumnChanging(TicketColumn.IssueDescription, this.entityData.IssueDescription);
				this.entityData.IssueDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.IssueDescription, this.entityData.IssueDescription);
				OnPropertyChanged("IssueDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClientContactInfo property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String ClientContactInfo
		{
			get
			{
				return this.entityData.ClientContactInfo; 
			}
			
			set
			{
				if (this.entityData.ClientContactInfo == value)
					return;
					
				OnColumnChanging(TicketColumn.ClientContactInfo, this.entityData.ClientContactInfo);
				this.entityData.ClientContactInfo = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.ClientContactInfo, this.entityData.ClientContactInfo);
				OnPropertyChanged("ClientContactInfo");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(TicketColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(TicketColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(TicketColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StatusId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 StatusId
		{
			get
			{
				return this.entityData.StatusId; 
			}
			
			set
			{
				if (this.entityData.StatusId == value)
					return;
					
				OnColumnChanging(TicketColumn.StatusId, this.entityData.StatusId);
				this.entityData.StatusId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.StatusId, this.entityData.StatusId);
				OnPropertyChanged("StatusId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ResolutionText property. 
		///		
		/// </summary>
		/// <value>This type is text.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.String ResolutionText
		{
			get
			{
				return this.entityData.ResolutionText; 
			}
			
			set
			{
				if (this.entityData.ResolutionText == value)
					return;
					
				OnColumnChanging(TicketColumn.ResolutionText, this.entityData.ResolutionText);
				this.entityData.ResolutionText = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.ResolutionText, this.entityData.ResolutionText);
				OnPropertyChanged("ResolutionText");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TicketPriorityId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TicketPriorityId
		{
			get
			{
				return this.entityData.TicketPriorityId; 
			}
			
			set
			{
				if (this.entityData.TicketPriorityId == value)
					return;
					
				OnColumnChanging(TicketColumn.TicketPriorityId, this.entityData.TicketPriorityId);
				this.entityData.TicketPriorityId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.TicketPriorityId, this.entityData.TicketPriorityId);
				OnPropertyChanged("TicketPriorityId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedByUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CreatedByUserId
		{
			get
			{
				return this.entityData.CreatedByUserId; 
			}
			
			set
			{
				if (this.entityData.CreatedByUserId == value)
					return;
					
				OnColumnChanging(TicketColumn.CreatedByUserId, this.entityData.CreatedByUserId);
				this.entityData.CreatedByUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.CreatedByUserId, this.entityData.CreatedByUserId);
				OnPropertyChanged("CreatedByUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(TicketColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssignedToUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 AssignedToUserId
		{
			get
			{
				return this.entityData.AssignedToUserId; 
			}
			
			set
			{
				if (this.entityData.AssignedToUserId == value)
					return;
					
				OnColumnChanging(TicketColumn.AssignedToUserId, this.entityData.AssignedToUserId);
				this.entityData.AssignedToUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.AssignedToUserId, this.entityData.AssignedToUserId);
				OnPropertyChanged("AssignedToUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssignedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime AssignedDate
		{
			get
			{
				return this.entityData.AssignedDate; 
			}
			
			set
			{
				if (this.entityData.AssignedDate == value)
					return;
					
				OnColumnChanging(TicketColumn.AssignedDate, this.entityData.AssignedDate);
				this.entityData.AssignedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.AssignedDate, this.entityData.AssignedDate);
				OnPropertyChanged("AssignedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FixedByUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 FixedByUserId
		{
			get
			{
				return this.entityData.FixedByUserId; 
			}
			
			set
			{
				if (this.entityData.FixedByUserId == value)
					return;
					
				OnColumnChanging(TicketColumn.FixedByUserId, this.entityData.FixedByUserId);
				this.entityData.FixedByUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.FixedByUserId, this.entityData.FixedByUserId);
				OnPropertyChanged("FixedByUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FixedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime FixedDate
		{
			get
			{
				return this.entityData.FixedDate; 
			}
			
			set
			{
				if (this.entityData.FixedDate == value)
					return;
					
				OnColumnChanging(TicketColumn.FixedDate, this.entityData.FixedDate);
				this.entityData.FixedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.FixedDate, this.entityData.FixedDate);
				OnPropertyChanged("FixedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClosedByUserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ClosedByUserId
		{
			get
			{
				return this.entityData.ClosedByUserId; 
			}
			
			set
			{
				if (this.entityData.ClosedByUserId == value)
					return;
					
				OnColumnChanging(TicketColumn.ClosedByUserId, this.entityData.ClosedByUserId);
				this.entityData.ClosedByUserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.ClosedByUserId, this.entityData.ClosedByUserId);
				OnPropertyChanged("ClosedByUserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ClosedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ClosedDate
		{
			get
			{
				return this.entityData.ClosedDate; 
			}
			
			set
			{
				if (this.entityData.ClosedDate == value)
					return;
					
				OnColumnChanging(TicketColumn.ClosedDate, this.entityData.ClosedDate);
				this.entityData.ClosedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.ClosedDate, this.entityData.ClosedDate);
				OnPropertyChanged("ClosedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TicketProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TicketProductId
		{
			get
			{
				return this.entityData.TicketProductId; 
			}
			
			set
			{
				if (this.entityData.TicketProductId == value)
					return;
					
				OnColumnChanging(TicketColumn.TicketProductId, this.entityData.TicketProductId);
				this.entityData.TicketProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.TicketProductId, this.entityData.TicketProductId);
				OnPropertyChanged("TicketProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TicketCategoryId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TicketCategoryId
		{
			get
			{
				return this.entityData.TicketCategoryId; 
			}
			
			set
			{
				if (this.entityData.TicketCategoryId == value)
					return;
					
				OnColumnChanging(TicketColumn.TicketCategoryId, this.entityData.TicketCategoryId);
				this.entityData.TicketCategoryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.TicketCategoryId, this.entityData.TicketCategoryId);
				OnPropertyChanged("TicketCategoryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DuplicateTicketId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DuplicateTicketId
		{
			get
			{
				return this.entityData.DuplicateTicketId; 
			}
			
			set
			{
				if (this.entityData.DuplicateTicketId == value)
					return;
					
				OnColumnChanging(TicketColumn.DuplicateTicketId, this.entityData.DuplicateTicketId);
				this.entityData.DuplicateTicketId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(TicketColumn.DuplicateTicketId, this.entityData.DuplicateTicketId);
				OnPropertyChanged("DuplicateTicketId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customer CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return entityData.WholesalerIdSource; }
            set { entityData.WholesalerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="TicketProduct"/>.
		/// </summary>
		/// <value>The source TicketProduct for TicketProductId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TicketProduct TicketProductIdSource
      	{
            get { return entityData.TicketProductIdSource; }
            set { entityData.TicketProductIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="TicketStatus"/>.
		/// </summary>
		/// <value>The source TicketStatus for StatusId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TicketStatus StatusIdSource
      	{
            get { return entityData.StatusIdSource; }
            set { entityData.StatusIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="TicketPriority"/>.
		/// </summary>
		/// <value>The source TicketPriority for TicketPriorityId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TicketPriority TicketPriorityIdSource
      	{
            get { return entityData.TicketPriorityIdSource; }
            set { entityData.TicketPriorityIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="TicketCategory"/>.
		/// </summary>
		/// <value>The source TicketCategory for TicketCategoryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TicketCategory TicketCategoryIdSource
      	{
            get { return entityData.TicketCategoryIdSource; }
            set { entityData.TicketCategoryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Moderator"/>.
		/// </summary>
		/// <value>The source Moderator for ModeratorId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Moderator ModeratorIdSource
      	{
            get { return entityData.ModeratorIdSource; }
            set { entityData.ModeratorIdSource = value; }
      	}
		#endregion
		
		#region Children Collections

		/// <summary>
		///	Holds a TicketStatusHistory object
		///	which is related to this object through the relation TicketStatusHistory
		/// </summary>
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TicketStatusHistory TicketStatusHistory
		{
			get { return entityData.TicketStatusHistory; }
			set { entityData.TicketStatusHistory = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Title", "Title", 200));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ClientContactInfo", "Client Contact Info", 200));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Ticket"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "Title", "IssueDescription", "ClientContactInfo", "WholesalerID", "CustomerID", "ModeratorID", "StatusID", "ResolutionText", "TicketPriorityID", "CreatedByUserID", "CreatedDate", "AssignedToUserID", "AssignedDate", "FixedByUserID", "FixedDate", "ClosedByUserID", "ClosedDate", "TicketProductID", "TicketCategoryID", "DuplicateTicketID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as TicketEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Ticket) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Ticket>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Ticket);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Ticket Entity 
		///</summary>
		public virtual Ticket Copy()
		{
			//shallow copy entity
			Ticket copy = new Ticket();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.OriginalId = this.OriginalId;
			copy.Title = this.Title;
			copy.IssueDescription = this.IssueDescription;
			copy.ClientContactInfo = this.ClientContactInfo;
			copy.WholesalerId = this.WholesalerId;
			copy.CustomerId = this.CustomerId;
			copy.ModeratorId = this.ModeratorId;
			copy.StatusId = this.StatusId;
			copy.ResolutionText = this.ResolutionText;
			copy.TicketPriorityId = this.TicketPriorityId;
			copy.CreatedByUserId = this.CreatedByUserId;
			copy.CreatedDate = this.CreatedDate;
			copy.AssignedToUserId = this.AssignedToUserId;
			copy.AssignedDate = this.AssignedDate;
			copy.FixedByUserId = this.FixedByUserId;
			copy.FixedDate = this.FixedDate;
			copy.ClosedByUserId = this.ClosedByUserId;
			copy.ClosedDate = this.ClosedDate;
			copy.TicketProductId = this.TicketProductId;
			copy.TicketCategoryId = this.TicketCategoryId;
			copy.DuplicateTicketId = this.DuplicateTicketId;
			
			copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
			copy.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			copy.TicketProductIdSource = MakeCopyOf(this.TicketProductIdSource) as TicketProduct;
			copy.StatusIdSource = MakeCopyOf(this.StatusIdSource) as TicketStatus;
			copy.TicketPriorityIdSource = MakeCopyOf(this.TicketPriorityIdSource) as TicketPriority;
			copy.TicketCategoryIdSource = MakeCopyOf(this.TicketCategoryIdSource) as TicketCategory;
			copy.ModeratorIdSource = MakeCopyOf(this.ModeratorIdSource) as Moderator;
		
			//deep copy nested objects
			copy.TicketStatusHistory = (TicketStatusHistory) MakeCopyOf(this.TicketStatusHistory); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Ticket Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Ticket DeepCopy()
		{
			return EntityHelper.Clone<Ticket>(this as Ticket);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as TicketEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as TicketEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(TicketColumn column)
		{
			switch(column)
			{
					case TicketColumn.Id:
					return entityData.Id != _originalData.Id;
					case TicketColumn.Title:
					return entityData.Title != _originalData.Title;
					case TicketColumn.IssueDescription:
					return entityData.IssueDescription != _originalData.IssueDescription;
					case TicketColumn.ClientContactInfo:
					return entityData.ClientContactInfo != _originalData.ClientContactInfo;
					case TicketColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case TicketColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case TicketColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case TicketColumn.StatusId:
					return entityData.StatusId != _originalData.StatusId;
					case TicketColumn.ResolutionText:
					return entityData.ResolutionText != _originalData.ResolutionText;
					case TicketColumn.TicketPriorityId:
					return entityData.TicketPriorityId != _originalData.TicketPriorityId;
					case TicketColumn.CreatedByUserId:
					return entityData.CreatedByUserId != _originalData.CreatedByUserId;
					case TicketColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case TicketColumn.AssignedToUserId:
					return entityData.AssignedToUserId != _originalData.AssignedToUserId;
					case TicketColumn.AssignedDate:
					return entityData.AssignedDate != _originalData.AssignedDate;
					case TicketColumn.FixedByUserId:
					return entityData.FixedByUserId != _originalData.FixedByUserId;
					case TicketColumn.FixedDate:
					return entityData.FixedDate != _originalData.FixedDate;
					case TicketColumn.ClosedByUserId:
					return entityData.ClosedByUserId != _originalData.ClosedByUserId;
					case TicketColumn.ClosedDate:
					return entityData.ClosedDate != _originalData.ClosedDate;
					case TicketColumn.TicketProductId:
					return entityData.TicketProductId != _originalData.TicketProductId;
					case TicketColumn.TicketCategoryId:
					return entityData.TicketCategoryId != _originalData.TicketCategoryId;
					case TicketColumn.DuplicateTicketId:
					return entityData.DuplicateTicketId != _originalData.DuplicateTicketId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Title != _originalData.Title;
			result = result || entityData.IssueDescription != _originalData.IssueDescription;
			result = result || entityData.ClientContactInfo != _originalData.ClientContactInfo;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.StatusId != _originalData.StatusId;
			result = result || entityData.ResolutionText != _originalData.ResolutionText;
			result = result || entityData.TicketPriorityId != _originalData.TicketPriorityId;
			result = result || entityData.CreatedByUserId != _originalData.CreatedByUserId;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.AssignedToUserId != _originalData.AssignedToUserId;
			result = result || entityData.AssignedDate != _originalData.AssignedDate;
			result = result || entityData.FixedByUserId != _originalData.FixedByUserId;
			result = result || entityData.FixedDate != _originalData.FixedDate;
			result = result || entityData.ClosedByUserId != _originalData.ClosedByUserId;
			result = result || entityData.ClosedDate != _originalData.ClosedDate;
			result = result || entityData.TicketProductId != _originalData.TicketProductId;
			result = result || entityData.TicketCategoryId != _originalData.TicketCategoryId;
			result = result || entityData.DuplicateTicketId != _originalData.DuplicateTicketId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="TicketBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is TicketBase)
				return Equals(this, (TicketBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="TicketBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.Title == null) ? string.Empty : this.Title.ToString()).GetHashCode() ^ 
					((this.IssueDescription == null) ? string.Empty : this.IssueDescription.ToString()).GetHashCode() ^ 
					((this.ClientContactInfo == null) ? string.Empty : this.ClientContactInfo.ToString()).GetHashCode() ^ 
					((this.WholesalerId == null) ? string.Empty : this.WholesalerId.ToString()).GetHashCode() ^ 
					this.CustomerId.GetHashCode() ^ 
					this.ModeratorId.GetHashCode() ^ 
					this.StatusId.GetHashCode() ^ 
					((this.ResolutionText == null) ? string.Empty : this.ResolutionText.ToString()).GetHashCode() ^ 
					this.TicketPriorityId.GetHashCode() ^ 
					this.CreatedByUserId.GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					this.AssignedToUserId.GetHashCode() ^ 
					this.AssignedDate.GetHashCode() ^ 
					this.FixedByUserId.GetHashCode() ^ 
					this.FixedDate.GetHashCode() ^ 
					this.ClosedByUserId.GetHashCode() ^ 
					this.ClosedDate.GetHashCode() ^ 
					this.TicketProductId.GetHashCode() ^ 
					this.TicketCategoryId.GetHashCode() ^ 
					this.DuplicateTicketId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="TicketBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(TicketBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="TicketBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="TicketBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="TicketBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(TicketBase Object1, TicketBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.Title != null && Object2.Title != null )
			{
				if (Object1.Title != Object2.Title)
					equal = false;
			}
			else if (Object1.Title == null ^ Object2.Title == null )
			{
				equal = false;
			}
			if ( Object1.IssueDescription != null && Object2.IssueDescription != null )
			{
				if (Object1.IssueDescription != Object2.IssueDescription)
					equal = false;
			}
			else if (Object1.IssueDescription == null ^ Object2.IssueDescription == null )
			{
				equal = false;
			}
			if ( Object1.ClientContactInfo != null && Object2.ClientContactInfo != null )
			{
				if (Object1.ClientContactInfo != Object2.ClientContactInfo)
					equal = false;
			}
			else if (Object1.ClientContactInfo == null ^ Object2.ClientContactInfo == null )
			{
				equal = false;
			}
			if ( Object1.WholesalerId != null && Object2.WholesalerId != null )
			{
				if (Object1.WholesalerId != Object2.WholesalerId)
					equal = false;
			}
			else if (Object1.WholesalerId == null ^ Object2.WholesalerId == null )
			{
				equal = false;
			}
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.ModeratorId != Object2.ModeratorId)
				equal = false;
			if (Object1.StatusId != Object2.StatusId)
				equal = false;
			if ( Object1.ResolutionText != null && Object2.ResolutionText != null )
			{
				if (Object1.ResolutionText != Object2.ResolutionText)
					equal = false;
			}
			else if (Object1.ResolutionText == null ^ Object2.ResolutionText == null )
			{
				equal = false;
			}
			if (Object1.TicketPriorityId != Object2.TicketPriorityId)
				equal = false;
			if (Object1.CreatedByUserId != Object2.CreatedByUserId)
				equal = false;
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if (Object1.AssignedToUserId != Object2.AssignedToUserId)
				equal = false;
			if (Object1.AssignedDate != Object2.AssignedDate)
				equal = false;
			if (Object1.FixedByUserId != Object2.FixedByUserId)
				equal = false;
			if (Object1.FixedDate != Object2.FixedDate)
				equal = false;
			if (Object1.ClosedByUserId != Object2.ClosedByUserId)
				equal = false;
			if (Object1.ClosedDate != Object2.ClosedDate)
				equal = false;
			if (Object1.TicketProductId != Object2.TicketProductId)
				equal = false;
			if (Object1.TicketCategoryId != Object2.TicketCategoryId)
				equal = false;
			if (Object1.DuplicateTicketId != Object2.DuplicateTicketId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((TicketBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static TicketComparer GetComparer()
        {
            return new TicketComparer();
        }
        */

        // Comparer delegates back to Ticket
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Ticket rhs, TicketColumn which)
        {
            switch (which)
            {
            	
            	
            	case TicketColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case TicketColumn.Title:
            		return this.Title.CompareTo(rhs.Title);
            		
            		                 
            	
            	
            	case TicketColumn.IssueDescription:
            		return this.IssueDescription.CompareTo(rhs.IssueDescription);
            		
            		                 
            	
            	
            	case TicketColumn.ClientContactInfo:
            		return this.ClientContactInfo.CompareTo(rhs.ClientContactInfo);
            		
            		                 
            	
            	
            	case TicketColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case TicketColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case TicketColumn.ModeratorId:
            		return this.ModeratorId.CompareTo(rhs.ModeratorId);
            		
            		                 
            	
            	
            	case TicketColumn.StatusId:
            		return this.StatusId.CompareTo(rhs.StatusId);
            		
            		                 
            	
            	
            	case TicketColumn.ResolutionText:
            		return this.ResolutionText.CompareTo(rhs.ResolutionText);
            		
            		                 
            	
            	
            	case TicketColumn.TicketPriorityId:
            		return this.TicketPriorityId.CompareTo(rhs.TicketPriorityId);
            		
            		                 
            	
            	
            	case TicketColumn.CreatedByUserId:
            		return this.CreatedByUserId.CompareTo(rhs.CreatedByUserId);
            		
            		                 
            	
            	
            	case TicketColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case TicketColumn.AssignedToUserId:
            		return this.AssignedToUserId.CompareTo(rhs.AssignedToUserId);
            		
            		                 
            	
            	
            	case TicketColumn.AssignedDate:
            		return this.AssignedDate.CompareTo(rhs.AssignedDate);
            		
            		                 
            	
            	
            	case TicketColumn.FixedByUserId:
            		return this.FixedByUserId.CompareTo(rhs.FixedByUserId);
            		
            		                 
            	
            	
            	case TicketColumn.FixedDate:
            		return this.FixedDate.CompareTo(rhs.FixedDate);
            		
            		                 
            	
            	
            	case TicketColumn.ClosedByUserId:
            		return this.ClosedByUserId.CompareTo(rhs.ClosedByUserId);
            		
            		                 
            	
            	
            	case TicketColumn.ClosedDate:
            		return this.ClosedDate.CompareTo(rhs.ClosedDate);
            		
            		                 
            	
            	
            	case TicketColumn.TicketProductId:
            		return this.TicketProductId.CompareTo(rhs.TicketProductId);
            		
            		                 
            	
            	
            	case TicketColumn.TicketCategoryId:
            		return this.TicketCategoryId.CompareTo(rhs.TicketCategoryId);
            		
            		                 
            	
            	
            	case TicketColumn.DuplicateTicketId:
            		return this.DuplicateTicketId.CompareTo(rhs.DuplicateTicketId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<TicketKey> Members
		
		// member variable for the EntityId property
		private TicketKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual TicketKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new TicketKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Ticket")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{22}{21}- Id: {0}{21}- Title: {1}{21}- IssueDescription: {2}{21}- ClientContactInfo: {3}{21}- WholesalerId: {4}{21}- CustomerId: {5}{21}- ModeratorId: {6}{21}- StatusId: {7}{21}- ResolutionText: {8}{21}- TicketPriorityId: {9}{21}- CreatedByUserId: {10}{21}- CreatedDate: {11}{21}- AssignedToUserId: {12}{21}- AssignedDate: {13}{21}- FixedByUserId: {14}{21}- FixedDate: {15}{21}- ClosedByUserId: {16}{21}- ClosedDate: {17}{21}- TicketProductId: {18}{21}- TicketCategoryId: {19}{21}- DuplicateTicketId: {20}{21}", 
				this.Id,
				(this.Title == null) ? string.Empty : this.Title.ToString(),
				(this.IssueDescription == null) ? string.Empty : this.IssueDescription.ToString(),
				(this.ClientContactInfo == null) ? string.Empty : this.ClientContactInfo.ToString(),
				(this.WholesalerId == null) ? string.Empty : this.WholesalerId.ToString(),
				this.CustomerId,
				this.ModeratorId,
				this.StatusId,
				(this.ResolutionText == null) ? string.Empty : this.ResolutionText.ToString(),
				this.TicketPriorityId,
				this.CreatedByUserId,
				this.CreatedDate,
				this.AssignedToUserId,
				this.AssignedDate,
				this.FixedByUserId,
				this.FixedDate,
				this.ClosedByUserId,
				this.ClosedDate,
				this.TicketProductId,
				this.TicketCategoryId,
				this.DuplicateTicketId,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Ticket' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class TicketEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Ticket"</remarks>
			public System.Int32 Id;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Title : 
		/// </summary>
		public System.String		  Title = null;
		
		/// <summary>
		/// IssueDescription : 
		/// </summary>
		public System.String		  IssueDescription = null;
		
		/// <summary>
		/// ClientContactInfo : 
		/// </summary>
		public System.String		  ClientContactInfo = null;
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = null;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32		  CustomerId = (int)0;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32		  ModeratorId = (int)0;
		
		/// <summary>
		/// StatusID : 
		/// </summary>
		public System.Int32		  StatusId = (int)0;
		
		/// <summary>
		/// ResolutionText : 
		/// </summary>
		public System.String		  ResolutionText = null;
		
		/// <summary>
		/// TicketPriorityID : 
		/// </summary>
		public System.Int32		  TicketPriorityId = (int)0;
		
		/// <summary>
		/// CreatedByUserID : 
		/// </summary>
		public System.Int32		  CreatedByUserId = (int)0;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// AssignedToUserID : 
		/// </summary>
		public System.Int32		  AssignedToUserId = (int)0;
		
		/// <summary>
		/// AssignedDate : 
		/// </summary>
		public System.DateTime		  AssignedDate = DateTime.MinValue;
		
		/// <summary>
		/// FixedByUserID : 
		/// </summary>
		public System.Int32		  FixedByUserId = (int)0;
		
		/// <summary>
		/// FixedDate : 
		/// </summary>
		public System.DateTime		  FixedDate = DateTime.MinValue;
		
		/// <summary>
		/// ClosedByUserID : 
		/// </summary>
		public System.Int32		  ClosedByUserId = (int)0;
		
		/// <summary>
		/// ClosedDate : 
		/// </summary>
		public System.DateTime		  ClosedDate = DateTime.MinValue;
		
		/// <summary>
		/// TicketProductID : 
		/// </summary>
		public System.Int32		  TicketProductId = (int)0;
		
		/// <summary>
		/// TicketCategoryID : 
		/// </summary>
		public System.Int32		  TicketCategoryId = (int)0;
		
		/// <summary>
		/// DuplicateTicketID : 
		/// </summary>
		public System.Int32		  DuplicateTicketId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private Customer _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Customer CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		private Wholesaler _wholesalerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return this._wholesalerIdSource; }
            set { this._wholesalerIdSource = value; }
      	}
		private TicketProduct _ticketProductIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="TicketProduct"/>.
		/// </summary>
		/// <value>The source TicketProduct for TicketProductId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual TicketProduct TicketProductIdSource
      	{
            get { return this._ticketProductIdSource; }
            set { this._ticketProductIdSource = value; }
      	}
		private TicketStatus _statusIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="TicketStatus"/>.
		/// </summary>
		/// <value>The source TicketStatus for StatusId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual TicketStatus StatusIdSource
      	{
            get { return this._statusIdSource; }
            set { this._statusIdSource = value; }
      	}
		private TicketPriority _ticketPriorityIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="TicketPriority"/>.
		/// </summary>
		/// <value>The source TicketPriority for TicketPriorityId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual TicketPriority TicketPriorityIdSource
      	{
            get { return this._ticketPriorityIdSource; }
            set { this._ticketPriorityIdSource = value; }
      	}
		private TicketCategory _ticketCategoryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="TicketCategory"/>.
		/// </summary>
		/// <value>The source TicketCategory for TicketCategoryId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual TicketCategory TicketCategoryIdSource
      	{
            get { return this._ticketCategoryIdSource; }
            set { this._ticketCategoryIdSource = value; }
      	}
		private Moderator _moderatorIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Moderator"/>.
		/// </summary>
		/// <value>The source Moderator for ModeratorId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Moderator ModeratorIdSource
      	{
            get { return this._moderatorIdSource; }
            set { this._moderatorIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region TicketStatusHistory
		
		private TicketStatusHistory _ticketStatusHistoryTicketId;
		
		/// <summary>
		///	Holds a  TicketStatusHistory entity object
		///	which is related to this object through the relation _ticketStatusHistoryTicketId
		/// </summary>
		public TicketStatusHistory TicketStatusHistory
		{
			get {		return _ticketStatusHistoryTicketId;		}
			set { 	_ticketStatusHistoryTicketId = value; 	}
		}
		
		#endregion 

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			TicketEntityData _tmp = new TicketEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.Title = this.Title;
			_tmp.IssueDescription = this.IssueDescription;
			_tmp.ClientContactInfo = this.ClientContactInfo;
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.StatusId = this.StatusId;
			_tmp.ResolutionText = this.ResolutionText;
			_tmp.TicketPriorityId = this.TicketPriorityId;
			_tmp.CreatedByUserId = this.CreatedByUserId;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.AssignedToUserId = this.AssignedToUserId;
			_tmp.AssignedDate = this.AssignedDate;
			_tmp.FixedByUserId = this.FixedByUserId;
			_tmp.FixedDate = this.FixedDate;
			_tmp.ClosedByUserId = this.ClosedByUserId;
			_tmp.ClosedDate = this.ClosedDate;
			_tmp.TicketProductId = this.TicketProductId;
			_tmp.TicketCategoryId = this.TicketCategoryId;
			_tmp.DuplicateTicketId = this.DuplicateTicketId;
			
			#region Source Parent Composite Entities
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
			if (this.WholesalerIdSource != null)
				_tmp.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			if (this.TicketProductIdSource != null)
				_tmp.TicketProductIdSource = MakeCopyOf(this.TicketProductIdSource) as TicketProduct;
			if (this.StatusIdSource != null)
				_tmp.StatusIdSource = MakeCopyOf(this.StatusIdSource) as TicketStatus;
			if (this.TicketPriorityIdSource != null)
				_tmp.TicketPriorityIdSource = MakeCopyOf(this.TicketPriorityIdSource) as TicketPriority;
			if (this.TicketCategoryIdSource != null)
				_tmp.TicketCategoryIdSource = MakeCopyOf(this.TicketCategoryIdSource) as TicketCategory;
			if (this.ModeratorIdSource != null)
				_tmp.ModeratorIdSource = MakeCopyOf(this.ModeratorIdSource) as Moderator;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._ticketStatusHistoryTicketId != null)
				_tmp.TicketStatusHistory = (TicketStatusHistory) MakeCopyOf(this.TicketStatusHistory); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TicketColumn"/> which has raised the event.</param>
		public void OnColumnChanging(TicketColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TicketColumn"/> which has raised the event.</param>
		public void OnColumnChanged(TicketColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TicketColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(TicketColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				TicketEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new TicketEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="TicketColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(TicketColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				TicketEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new TicketEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region TicketEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Ticket"/> object.
	/// </remarks>
	public class TicketEventArgs : System.EventArgs
	{
		private TicketColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the TicketEventArgs class.
		///</summary>
		public TicketEventArgs(TicketColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the TicketEventArgs class.
		///</summary>
		public TicketEventArgs(TicketColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The TicketColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="TicketColumn" />
		public TicketColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Ticket related events.
	///</summary>
	public delegate void TicketEventHandler(object sender, TicketEventArgs e);
	
	#region TicketComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class TicketComparer : System.Collections.Generic.IComparer<Ticket>
	{
		TicketColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:TicketComparer"/> class.
        /// </summary>
		public TicketComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:TicketComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public TicketComparer(TicketColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Ticket"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Ticket"/> to compare.</param>
        /// <param name="b">The second <c>Ticket</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Ticket a, Ticket b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Ticket entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Ticket a, Ticket b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public TicketColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region TicketKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Ticket"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class TicketKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the TicketKey class.
		/// </summary>
		public TicketKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the TicketKey class.
		/// </summary>
		public TicketKey(TicketBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the TicketKey class.
		/// </summary>
		public TicketKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private TicketBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public TicketBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region TicketColumn Enum
	
	/// <summary>
	/// Enumerate the Ticket columns.
	/// </summary>
	[Serializable]
	public enum TicketColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		Id = 1,
		/// <summary>
		/// Title : 
		/// </summary>
		[EnumTextValue("Title")]
		[ColumnEnum("Title", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		Title = 2,
		/// <summary>
		/// IssueDescription : 
		/// </summary>
		[EnumTextValue("IssueDescription")]
		[ColumnEnum("IssueDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		IssueDescription = 3,
		/// <summary>
		/// ClientContactInfo : 
		/// </summary>
		[EnumTextValue("ClientContactInfo")]
		[ColumnEnum("ClientContactInfo", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		ClientContactInfo = 4,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		WholesalerId = 5,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerId = 6,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ModeratorId = 7,
		/// <summary>
		/// StatusId : 
		/// </summary>
		[EnumTextValue("StatusID")]
		[ColumnEnum("StatusID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		StatusId = 8,
		/// <summary>
		/// ResolutionText : 
		/// </summary>
		[EnumTextValue("ResolutionText")]
		[ColumnEnum("ResolutionText", typeof(System.String), System.Data.DbType.AnsiString, false, false, true)]
		ResolutionText = 9,
		/// <summary>
		/// TicketPriorityId : 
		/// </summary>
		[EnumTextValue("TicketPriorityID")]
		[ColumnEnum("TicketPriorityID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TicketPriorityId = 10,
		/// <summary>
		/// CreatedByUserId : 
		/// </summary>
		[EnumTextValue("CreatedByUserID")]
		[ColumnEnum("CreatedByUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CreatedByUserId = 11,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 12,
		/// <summary>
		/// AssignedToUserId : 
		/// </summary>
		[EnumTextValue("AssignedToUserID")]
		[ColumnEnum("AssignedToUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		AssignedToUserId = 13,
		/// <summary>
		/// AssignedDate : 
		/// </summary>
		[EnumTextValue("AssignedDate")]
		[ColumnEnum("AssignedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		AssignedDate = 14,
		/// <summary>
		/// FixedByUserId : 
		/// </summary>
		[EnumTextValue("FixedByUserID")]
		[ColumnEnum("FixedByUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		FixedByUserId = 15,
		/// <summary>
		/// FixedDate : 
		/// </summary>
		[EnumTextValue("FixedDate")]
		[ColumnEnum("FixedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		FixedDate = 16,
		/// <summary>
		/// ClosedByUserId : 
		/// </summary>
		[EnumTextValue("ClosedByUserID")]
		[ColumnEnum("ClosedByUserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ClosedByUserId = 17,
		/// <summary>
		/// ClosedDate : 
		/// </summary>
		[EnumTextValue("ClosedDate")]
		[ColumnEnum("ClosedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ClosedDate = 18,
		/// <summary>
		/// TicketProductId : 
		/// </summary>
		[EnumTextValue("TicketProductID")]
		[ColumnEnum("TicketProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TicketProductId = 19,
		/// <summary>
		/// TicketCategoryId : 
		/// </summary>
		[EnumTextValue("TicketCategoryID")]
		[ColumnEnum("TicketCategoryID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TicketCategoryId = 20,
		/// <summary>
		/// DuplicateTicketId : 
		/// </summary>
		[EnumTextValue("DuplicateTicketID")]
		[ColumnEnum("DuplicateTicketID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DuplicateTicketId = 21
	}//End enum

	#endregion TicketColumn Enum

} // end namespace
