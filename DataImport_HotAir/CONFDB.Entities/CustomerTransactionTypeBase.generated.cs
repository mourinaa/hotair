
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CustomerTransactionType.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'CustomerTransactionType' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class CustomerTransactionTypeBase : EntityBase, CONFDB.Entities.ICustomerTransactionType, IEntityId<CustomerTransactionTypeKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomerTransactionTypeEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomerTransactionTypeEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomerTransactionTypeEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CustomerTransactionType> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CustomerTransactionTypeEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomerTransactionTypeEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomerTransactionTypeBase"/> instance.
		///</summary>
		public CustomerTransactionTypeBase()
		{
			this.entityData = new CustomerTransactionTypeEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomerTransactionTypeBase"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_displayName"></param>
		///<param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
		///<param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
		///<param name="_displayOrder"></param>
		///<param name="_visible"></param>
		public CustomerTransactionTypeBase(System.String _name, System.String _description, 
			System.String _displayName, System.Int32? _glPostingTypeId, System.Int32? _actionValue, 
			System.Int32? _displayOrder, System.Boolean? _visible)
		{
			this.entityData = new CustomerTransactionTypeEntityData();
			this.backupData = null;

			this.Name = _name;
			this.Description = _description;
			this.DisplayName = _displayName;
			this.GlPostingTypeId = _glPostingTypeId;
			this.ActionValue = _actionValue;
			this.DisplayOrder = _displayOrder;
			this.Visible = _visible;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CustomerTransactionType"/> instance.
		///</summary>
		///<param name="_name"></param>
		///<param name="_description"></param>
		///<param name="_displayName"></param>
		///<param name="_glPostingTypeId">Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc</param>
		///<param name="_actionValue">Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.</param>
		///<param name="_displayOrder"></param>
		///<param name="_visible"></param>
		public static CustomerTransactionType CreateCustomerTransactionType(System.String _name, System.String _description, 
			System.String _displayName, System.Int32? _glPostingTypeId, System.Int32? _actionValue, 
			System.Int32? _displayOrder, System.Boolean? _visible)
		{
			CustomerTransactionType newCustomerTransactionType = new CustomerTransactionType();
			newCustomerTransactionType.Name = _name;
			newCustomerTransactionType.Description = _description;
			newCustomerTransactionType.DisplayName = _displayName;
			newCustomerTransactionType.GlPostingTypeId = _glPostingTypeId;
			newCustomerTransactionType.ActionValue = _actionValue;
			newCustomerTransactionType.DisplayOrder = _displayOrder;
			newCustomerTransactionType.Visible = _visible;
			return newCustomerTransactionType;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CustomerTransactionTypeColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionTypeColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(CustomerTransactionTypeColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionTypeColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 200)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(CustomerTransactionTypeColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionTypeColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DisplayName
		{
			get
			{
				return this.entityData.DisplayName; 
			}
			
			set
			{
				if (this.entityData.DisplayName == value)
					return;
					
				OnColumnChanging(CustomerTransactionTypeColumn.DisplayName, this.entityData.DisplayName);
				this.entityData.DisplayName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionTypeColumn.DisplayName, this.entityData.DisplayName);
				OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the GlPostingTypeId property. 
		///		Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsGlPostingTypeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? GlPostingTypeId
		{
			get
			{
				return this.entityData.GlPostingTypeId; 
			}
			
			set
			{
				if (this.entityData.GlPostingTypeId == value)
					return;
					
				OnColumnChanging(CustomerTransactionTypeColumn.GlPostingTypeId, this.entityData.GlPostingTypeId);
				this.entityData.GlPostingTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionTypeColumn.GlPostingTypeId, this.entityData.GlPostingTypeId);
				OnPropertyChanged("GlPostingTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ActionValue property. 
		///		Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsActionValueNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ActionValue
		{
			get
			{
				return this.entityData.ActionValue; 
			}
			
			set
			{
				if (this.entityData.ActionValue == value)
					return;
					
				OnColumnChanging(CustomerTransactionTypeColumn.ActionValue, this.entityData.ActionValue);
				this.entityData.ActionValue = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionTypeColumn.ActionValue, this.entityData.ActionValue);
				OnPropertyChanged("ActionValue");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDisplayOrderNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
				OnColumnChanging(CustomerTransactionTypeColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionTypeColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Visible property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsVisibleNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Visible
		{
			get
			{
				return this.entityData.Visible; 
			}
			
			set
			{
				if (this.entityData.Visible == value)
					return;
					
				OnColumnChanging(CustomerTransactionTypeColumn.Visible, this.entityData.Visible);
				this.entityData.Visible = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionTypeColumn.Visible, this.entityData.Visible);
				OnPropertyChanged("Visible");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="GlPostingType"/>.
		/// </summary>
		/// <value>The source GlPostingType for GlPostingTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual GlPostingType GlPostingTypeIdSource
      	{
            get { return entityData.GlPostingTypeIdSource; }
            set { entityData.GlPostingTypeIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of CustomerTransaction objects
		///	which are related to this object through the relation CustomerTransactionType_CustomerTransactions_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerTransaction> CustomerTransactionCollection
		{
			get { return entityData.CustomerTransactionCollection; }
			set { entityData.CustomerTransactionCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Description", "Description", 200));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DisplayName", "Display Name", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CustomerTransactionType"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "Name", "Description", "DisplayName", "GLPostingTypeID", "ActionValue", "DisplayOrder", "Visible"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomerTransactionTypeEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CustomerTransactionType) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CustomerTransactionType>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CustomerTransactionType);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CustomerTransactionType Entity 
		///</summary>
		public virtual CustomerTransactionType Copy()
		{
			//shallow copy entity
			CustomerTransactionType copy = new CustomerTransactionType();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.Name = this.Name;
			copy.Description = this.Description;
			copy.DisplayName = this.DisplayName;
			copy.GlPostingTypeId = this.GlPostingTypeId;
			copy.ActionValue = this.ActionValue;
			copy.DisplayOrder = this.DisplayOrder;
			copy.Visible = this.Visible;
			
			copy.GlPostingTypeIdSource = MakeCopyOf(this.GlPostingTypeIdSource) as GlPostingType;
		
			//deep copy nested objects
			copy.CustomerTransactionCollection = (TList<CustomerTransaction>) MakeCopyOf(this.CustomerTransactionCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed CustomerTransactionType Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CustomerTransactionType DeepCopy()
		{
			return EntityHelper.Clone<CustomerTransactionType>(this as CustomerTransactionType);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomerTransactionTypeEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomerTransactionTypeEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomerTransactionTypeColumn column)
		{
			switch(column)
			{
					case CustomerTransactionTypeColumn.Id:
					return entityData.Id != _originalData.Id;
					case CustomerTransactionTypeColumn.Name:
					return entityData.Name != _originalData.Name;
					case CustomerTransactionTypeColumn.Description:
					return entityData.Description != _originalData.Description;
					case CustomerTransactionTypeColumn.DisplayName:
					return entityData.DisplayName != _originalData.DisplayName;
					case CustomerTransactionTypeColumn.GlPostingTypeId:
					return entityData.GlPostingTypeId != _originalData.GlPostingTypeId;
					case CustomerTransactionTypeColumn.ActionValue:
					return entityData.ActionValue != _originalData.ActionValue;
					case CustomerTransactionTypeColumn.DisplayOrder:
					return entityData.DisplayOrder != _originalData.DisplayOrder;
					case CustomerTransactionTypeColumn.Visible:
					return entityData.Visible != _originalData.Visible;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.DisplayName != _originalData.DisplayName;
			result = result || entityData.GlPostingTypeId != _originalData.GlPostingTypeId;
			result = result || entityData.ActionValue != _originalData.ActionValue;
			result = result || entityData.DisplayOrder != _originalData.DisplayOrder;
			result = result || entityData.Visible != _originalData.Visible;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomerTransactionTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is CustomerTransactionTypeBase)
				return Equals(this, (CustomerTransactionTypeBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomerTransactionTypeBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.DisplayName == null) ? string.Empty : this.DisplayName.ToString()).GetHashCode() ^ 
					((this.GlPostingTypeId == null) ? string.Empty : this.GlPostingTypeId.ToString()).GetHashCode() ^ 
					((this.ActionValue == null) ? string.Empty : this.ActionValue.ToString()).GetHashCode() ^ 
					((this.DisplayOrder == null) ? string.Empty : this.DisplayOrder.ToString()).GetHashCode() ^ 
					((this.Visible == null) ? string.Empty : this.Visible.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomerTransactionTypeBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomerTransactionTypeBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CustomerTransactionTypeBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CustomerTransactionTypeBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomerTransactionTypeBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CustomerTransactionTypeBase Object1, CustomerTransactionTypeBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.DisplayName != null && Object2.DisplayName != null )
			{
				if (Object1.DisplayName != Object2.DisplayName)
					equal = false;
			}
			else if (Object1.DisplayName == null ^ Object2.DisplayName == null )
			{
				equal = false;
			}
			if ( Object1.GlPostingTypeId != null && Object2.GlPostingTypeId != null )
			{
				if (Object1.GlPostingTypeId != Object2.GlPostingTypeId)
					equal = false;
			}
			else if (Object1.GlPostingTypeId == null ^ Object2.GlPostingTypeId == null )
			{
				equal = false;
			}
			if ( Object1.ActionValue != null && Object2.ActionValue != null )
			{
				if (Object1.ActionValue != Object2.ActionValue)
					equal = false;
			}
			else if (Object1.ActionValue == null ^ Object2.ActionValue == null )
			{
				equal = false;
			}
			if ( Object1.DisplayOrder != null && Object2.DisplayOrder != null )
			{
				if (Object1.DisplayOrder != Object2.DisplayOrder)
					equal = false;
			}
			else if (Object1.DisplayOrder == null ^ Object2.DisplayOrder == null )
			{
				equal = false;
			}
			if ( Object1.Visible != null && Object2.Visible != null )
			{
				if (Object1.Visible != Object2.Visible)
					equal = false;
			}
			else if (Object1.Visible == null ^ Object2.Visible == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomerTransactionTypeBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomerTransactionTypeComparer GetComparer()
        {
            return new CustomerTransactionTypeComparer();
        }
        */

        // Comparer delegates back to CustomerTransactionType
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CustomerTransactionType rhs, CustomerTransactionTypeColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomerTransactionTypeColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CustomerTransactionTypeColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case CustomerTransactionTypeColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case CustomerTransactionTypeColumn.DisplayName:
            		return this.DisplayName.CompareTo(rhs.DisplayName);
            		
            		                 
            	
            	
            	case CustomerTransactionTypeColumn.GlPostingTypeId:
            		return this.GlPostingTypeId.Value.CompareTo(rhs.GlPostingTypeId.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionTypeColumn.ActionValue:
            		return this.ActionValue.Value.CompareTo(rhs.ActionValue.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionTypeColumn.DisplayOrder:
            		return this.DisplayOrder.Value.CompareTo(rhs.DisplayOrder.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionTypeColumn.Visible:
            		return this.Visible.Value.CompareTo(rhs.Visible.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomerTransactionTypeKey> Members
		
		// member variable for the EntityId property
		private CustomerTransactionTypeKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CustomerTransactionTypeKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomerTransactionTypeKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CustomerTransactionType")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{9}{8}- Id: {0}{8}- Name: {1}{8}- Description: {2}{8}- DisplayName: {3}{8}- GlPostingTypeId: {4}{8}- ActionValue: {5}{8}- DisplayOrder: {6}{8}- Visible: {7}{8}", 
				this.Id,
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.DisplayName == null) ? string.Empty : this.DisplayName.ToString(),
				(this.GlPostingTypeId == null) ? string.Empty : this.GlPostingTypeId.ToString(),
				(this.ActionValue == null) ? string.Empty : this.ActionValue.ToString(),
				(this.DisplayOrder == null) ? string.Empty : this.DisplayOrder.ToString(),
				(this.Visible == null) ? string.Empty : this.Visible.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CustomerTransactionType' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomerTransactionTypeEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "CustomerTransactionType"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// DisplayName : 
		/// </summary>
		public System.String		  DisplayName = null;
		
		/// <summary>
		/// GLPostingTypeID : Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc
		/// </summary>
		public System.Int32?		  GlPostingTypeId = null;
		
		/// <summary>
		/// ActionValue : Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.
		/// </summary>
		public System.Int32?		  ActionValue = null;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Int32?		  DisplayOrder = null;
		
		/// <summary>
		/// Visible : 
		/// </summary>
		public System.Boolean?		  Visible = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private GlPostingType _glPostingTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="GlPostingType"/>.
		/// </summary>
		/// <value>The source GlPostingType for GlPostingTypeId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual GlPostingType GlPostingTypeIdSource
      	{
            get { return this._glPostingTypeIdSource; }
            set { this._glPostingTypeIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CustomerTransactionCollection
		
		private TList<CustomerTransaction> _customerTransactionCustomerTransactionTypeId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerTransactionCustomerTransactionTypeId
		/// </summary>	
		public TList<CustomerTransaction> CustomerTransactionCollection
		{
			get
			{
				if (_customerTransactionCustomerTransactionTypeId == null)
				{
				_customerTransactionCustomerTransactionTypeId = new TList<CustomerTransaction>();
				}
	
				return _customerTransactionCustomerTransactionTypeId;
			}
			set { _customerTransactionCustomerTransactionTypeId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomerTransactionTypeEntityData _tmp = new CustomerTransactionTypeEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.Name = this.Name;
			_tmp.Description = this.Description;
			_tmp.DisplayName = this.DisplayName;
			_tmp.GlPostingTypeId = this.GlPostingTypeId;
			_tmp.ActionValue = this.ActionValue;
			_tmp.DisplayOrder = this.DisplayOrder;
			_tmp.Visible = this.Visible;
			
			#region Source Parent Composite Entities
			if (this.GlPostingTypeIdSource != null)
				_tmp.GlPostingTypeIdSource = MakeCopyOf(this.GlPostingTypeIdSource) as GlPostingType;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._customerTransactionCustomerTransactionTypeId != null)
				_tmp.CustomerTransactionCollection = (TList<CustomerTransaction>) MakeCopyOf(this.CustomerTransactionCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionTypeColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CustomerTransactionTypeColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionTypeColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CustomerTransactionTypeColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionTypeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CustomerTransactionTypeColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CustomerTransactionTypeEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomerTransactionTypeEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionTypeColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CustomerTransactionTypeColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomerTransactionTypeEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomerTransactionTypeEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomerTransactionTypeEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CustomerTransactionType"/> object.
	/// </remarks>
	public class CustomerTransactionTypeEventArgs : System.EventArgs
	{
		private CustomerTransactionTypeColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomerTransactionTypeEventArgs class.
		///</summary>
		public CustomerTransactionTypeEventArgs(CustomerTransactionTypeColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomerTransactionTypeEventArgs class.
		///</summary>
		public CustomerTransactionTypeEventArgs(CustomerTransactionTypeColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomerTransactionTypeColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomerTransactionTypeColumn" />
		public CustomerTransactionTypeColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CustomerTransactionType related events.
	///</summary>
	public delegate void CustomerTransactionTypeEventHandler(object sender, CustomerTransactionTypeEventArgs e);
	
	#region CustomerTransactionTypeComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomerTransactionTypeComparer : System.Collections.Generic.IComparer<CustomerTransactionType>
	{
		CustomerTransactionTypeColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerTransactionTypeComparer"/> class.
        /// </summary>
		public CustomerTransactionTypeComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerTransactionTypeComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomerTransactionTypeComparer(CustomerTransactionTypeColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CustomerTransactionType"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CustomerTransactionType"/> to compare.</param>
        /// <param name="b">The second <c>CustomerTransactionType</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CustomerTransactionType a, CustomerTransactionType b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CustomerTransactionType entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CustomerTransactionType a, CustomerTransactionType b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomerTransactionTypeColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomerTransactionTypeKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CustomerTransactionType"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomerTransactionTypeKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionTypeKey class.
		/// </summary>
		public CustomerTransactionTypeKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionTypeKey class.
		/// </summary>
		public CustomerTransactionTypeKey(CustomerTransactionTypeBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionTypeKey class.
		/// </summary>
		public CustomerTransactionTypeKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomerTransactionTypeBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomerTransactionTypeBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomerTransactionTypeColumn Enum
	
	/// <summary>
	/// Enumerate the CustomerTransactionType columns.
	/// </summary>
	[Serializable]
	public enum CustomerTransactionTypeColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Name = 2,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 200)]
		Description = 3,
		/// <summary>
		/// DisplayName : 
		/// </summary>
		[EnumTextValue("DisplayName")]
		[ColumnEnum("DisplayName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		DisplayName = 4,
		/// <summary>
		/// GlPostingTypeId : Accounting categories used to group transactions together based on similar posting logic. i.e. all credits, charges, etc
		/// </summary>
		[EnumTextValue("GLPostingTypeID")]
		[ColumnEnum("GLPostingTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		GlPostingTypeId = 5,
		/// <summary>
		/// ActionValue : Used when importing a batch file. The Action numbers are used by end users to specify the type of transaction they are posting. Easier to standardize.
		/// </summary>
		[EnumTextValue("ActionValue")]
		[ColumnEnum("ActionValue", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ActionValue = 6,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DisplayOrder = 7,
		/// <summary>
		/// Visible : 
		/// </summary>
		[EnumTextValue("Visible")]
		[ColumnEnum("Visible", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Visible = 8
	}//End enum

	#endregion CustomerTransactionTypeColumn Enum

} // end namespace
