
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Lead.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'Lead' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class LeadBase : EntityBase, CONFDB.Entities.ILead, IEntityId<LeadKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private LeadEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private LeadEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private LeadEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Lead> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event LeadEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event LeadEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="LeadBase"/> instance.
		///</summary>
		public LeadBase()
		{
			this.entityData = new LeadEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="LeadBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_companyName"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_createdDate"></param>
		///<param name="_assignedDate"></param>
		///<param name="_expiryDate"></param>
		///<param name="_contactName"></param>
		///<param name="_contactNumber"></param>
		///<param name="_contactEmail"></param>
		public LeadBase(System.Int32 _id, System.String _wholesalerId, System.String _companyName, 
			System.Int32 _salesPersonId, System.DateTime _createdDate, System.DateTime _assignedDate, System.DateTime _expiryDate, 
			System.String _contactName, System.String _contactNumber, System.String _contactEmail)
		{
			this.entityData = new LeadEntityData();
			this.backupData = null;

			this.Id = _id;
			this.WholesalerId = _wholesalerId;
			this.CompanyName = _companyName;
			this.SalesPersonId = _salesPersonId;
			this.CreatedDate = _createdDate;
			this.AssignedDate = _assignedDate;
			this.ExpiryDate = _expiryDate;
			this.ContactName = _contactName;
			this.ContactNumber = _contactNumber;
			this.ContactEmail = _contactEmail;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Lead"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_companyName"></param>
		///<param name="_salesPersonId"></param>
		///<param name="_createdDate"></param>
		///<param name="_assignedDate"></param>
		///<param name="_expiryDate"></param>
		///<param name="_contactName"></param>
		///<param name="_contactNumber"></param>
		///<param name="_contactEmail"></param>
		public static Lead CreateLead(System.Int32 _id, System.String _wholesalerId, System.String _companyName, 
			System.Int32 _salesPersonId, System.DateTime _createdDate, System.DateTime _assignedDate, System.DateTime _expiryDate, 
			System.String _contactName, System.String _contactNumber, System.String _contactEmail)
		{
			Lead newLead = new Lead();
			newLead.Id = _id;
			newLead.WholesalerId = _wholesalerId;
			newLead.CompanyName = _companyName;
			newLead.SalesPersonId = _salesPersonId;
			newLead.CreatedDate = _createdDate;
			newLead.AssignedDate = _assignedDate;
			newLead.ExpiryDate = _expiryDate;
			newLead.ContactName = _contactName;
			newLead.ContactNumber = _contactNumber;
			newLead.ContactEmail = _contactEmail;
			return newLead;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(LeadColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(LeadColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 50)]
		public virtual System.String CompanyName
		{
			get
			{
				return this.entityData.CompanyName; 
			}
			
			set
			{
				if (this.entityData.CompanyName == value)
					return;
					
				OnColumnChanging(LeadColumn.CompanyName, this.entityData.CompanyName);
				this.entityData.CompanyName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.CompanyName, this.entityData.CompanyName);
				OnPropertyChanged("CompanyName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SalesPersonId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 SalesPersonId
		{
			get
			{
				return this.entityData.SalesPersonId; 
			}
			
			set
			{
				if (this.entityData.SalesPersonId == value)
					return;
					
				OnColumnChanging(LeadColumn.SalesPersonId, this.entityData.SalesPersonId);
				this.entityData.SalesPersonId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.SalesPersonId, this.entityData.SalesPersonId);
				OnPropertyChanged("SalesPersonId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(LeadColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AssignedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime AssignedDate
		{
			get
			{
				return this.entityData.AssignedDate; 
			}
			
			set
			{
				if (this.entityData.AssignedDate == value)
					return;
					
				OnColumnChanging(LeadColumn.AssignedDate, this.entityData.AssignedDate);
				this.entityData.AssignedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.AssignedDate, this.entityData.AssignedDate);
				OnPropertyChanged("AssignedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExpiryDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime ExpiryDate
		{
			get
			{
				return this.entityData.ExpiryDate; 
			}
			
			set
			{
				if (this.entityData.ExpiryDate == value)
					return;
					
				OnColumnChanging(LeadColumn.ExpiryDate, this.entityData.ExpiryDate);
				this.entityData.ExpiryDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.ExpiryDate, this.entityData.ExpiryDate);
				OnPropertyChanged("ExpiryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ContactName
		{
			get
			{
				return this.entityData.ContactName; 
			}
			
			set
			{
				if (this.entityData.ContactName == value)
					return;
					
				OnColumnChanging(LeadColumn.ContactName, this.entityData.ContactName);
				this.entityData.ContactName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.ContactName, this.entityData.ContactName);
				OnPropertyChanged("ContactName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String ContactNumber
		{
			get
			{
				return this.entityData.ContactNumber; 
			}
			
			set
			{
				if (this.entityData.ContactNumber == value)
					return;
					
				OnColumnChanging(LeadColumn.ContactNumber, this.entityData.ContactNumber);
				this.entityData.ContactNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.ContactNumber, this.entityData.ContactNumber);
				OnPropertyChanged("ContactNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ContactEmail property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ContactEmail
		{
			get
			{
				return this.entityData.ContactEmail; 
			}
			
			set
			{
				if (this.entityData.ContactEmail == value)
					return;
					
				OnColumnChanging(LeadColumn.ContactEmail, this.entityData.ContactEmail);
				this.entityData.ContactEmail = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(LeadColumn.ContactEmail, this.entityData.ContactEmail);
				OnPropertyChanged("ContactEmail");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return entityData.WholesalerIdSource; }
            set { entityData.WholesalerIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return entityData.SalesPersonIdSource; }
            set { entityData.SalesPersonIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("CompanyName", "Company Name"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CompanyName", "Company Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ContactName", "Contact Name", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ContactNumber", "Contact Number", 30));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ContactEmail", "Contact Email", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Lead"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WholesalerID", "CompanyName", "SalesPersonID", "CreatedDate", "AssignedDate", "ExpiryDate", "ContactName", "ContactNumber", "ContactEmail"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as LeadEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Lead) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Lead>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Lead);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Lead Entity 
		///</summary>
		public virtual Lead Copy()
		{
			//shallow copy entity
			Lead copy = new Lead();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.OriginalId = this.OriginalId;
			copy.WholesalerId = this.WholesalerId;
			copy.CompanyName = this.CompanyName;
			copy.SalesPersonId = this.SalesPersonId;
			copy.CreatedDate = this.CreatedDate;
			copy.AssignedDate = this.AssignedDate;
			copy.ExpiryDate = this.ExpiryDate;
			copy.ContactName = this.ContactName;
			copy.ContactNumber = this.ContactNumber;
			copy.ContactEmail = this.ContactEmail;
			
			copy.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			copy.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Lead Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Lead DeepCopy()
		{
			return EntityHelper.Clone<Lead>(this as Lead);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as LeadEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as LeadEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(LeadColumn column)
		{
			switch(column)
			{
					case LeadColumn.Id:
					return entityData.Id != _originalData.Id;
					case LeadColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case LeadColumn.CompanyName:
					return entityData.CompanyName != _originalData.CompanyName;
					case LeadColumn.SalesPersonId:
					return entityData.SalesPersonId != _originalData.SalesPersonId;
					case LeadColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case LeadColumn.AssignedDate:
					return entityData.AssignedDate != _originalData.AssignedDate;
					case LeadColumn.ExpiryDate:
					return entityData.ExpiryDate != _originalData.ExpiryDate;
					case LeadColumn.ContactName:
					return entityData.ContactName != _originalData.ContactName;
					case LeadColumn.ContactNumber:
					return entityData.ContactNumber != _originalData.ContactNumber;
					case LeadColumn.ContactEmail:
					return entityData.ContactEmail != _originalData.ContactEmail;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.CompanyName != _originalData.CompanyName;
			result = result || entityData.SalesPersonId != _originalData.SalesPersonId;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.AssignedDate != _originalData.AssignedDate;
			result = result || entityData.ExpiryDate != _originalData.ExpiryDate;
			result = result || entityData.ContactName != _originalData.ContactName;
			result = result || entityData.ContactNumber != _originalData.ContactNumber;
			result = result || entityData.ContactEmail != _originalData.ContactEmail;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="LeadBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is LeadBase)
				return Equals(this, (LeadBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="LeadBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					this.CompanyName.GetHashCode() ^ 
					this.SalesPersonId.GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					this.AssignedDate.GetHashCode() ^ 
					this.ExpiryDate.GetHashCode() ^ 
					((this.ContactName == null) ? string.Empty : this.ContactName.ToString()).GetHashCode() ^ 
					((this.ContactNumber == null) ? string.Empty : this.ContactNumber.ToString()).GetHashCode() ^ 
					((this.ContactEmail == null) ? string.Empty : this.ContactEmail.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="LeadBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(LeadBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="LeadBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="LeadBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="LeadBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(LeadBase Object1, LeadBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.CompanyName != Object2.CompanyName)
				equal = false;
			if (Object1.SalesPersonId != Object2.SalesPersonId)
				equal = false;
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if (Object1.AssignedDate != Object2.AssignedDate)
				equal = false;
			if (Object1.ExpiryDate != Object2.ExpiryDate)
				equal = false;
			if ( Object1.ContactName != null && Object2.ContactName != null )
			{
				if (Object1.ContactName != Object2.ContactName)
					equal = false;
			}
			else if (Object1.ContactName == null ^ Object2.ContactName == null )
			{
				equal = false;
			}
			if ( Object1.ContactNumber != null && Object2.ContactNumber != null )
			{
				if (Object1.ContactNumber != Object2.ContactNumber)
					equal = false;
			}
			else if (Object1.ContactNumber == null ^ Object2.ContactNumber == null )
			{
				equal = false;
			}
			if ( Object1.ContactEmail != null && Object2.ContactEmail != null )
			{
				if (Object1.ContactEmail != Object2.ContactEmail)
					equal = false;
			}
			else if (Object1.ContactEmail == null ^ Object2.ContactEmail == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((LeadBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static LeadComparer GetComparer()
        {
            return new LeadComparer();
        }
        */

        // Comparer delegates back to Lead
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Lead rhs, LeadColumn which)
        {
            switch (which)
            {
            	
            	
            	case LeadColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case LeadColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case LeadColumn.CompanyName:
            		return this.CompanyName.CompareTo(rhs.CompanyName);
            		
            		                 
            	
            	
            	case LeadColumn.SalesPersonId:
            		return this.SalesPersonId.CompareTo(rhs.SalesPersonId);
            		
            		                 
            	
            	
            	case LeadColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case LeadColumn.AssignedDate:
            		return this.AssignedDate.CompareTo(rhs.AssignedDate);
            		
            		                 
            	
            	
            	case LeadColumn.ExpiryDate:
            		return this.ExpiryDate.CompareTo(rhs.ExpiryDate);
            		
            		                 
            	
            	
            	case LeadColumn.ContactName:
            		return this.ContactName.CompareTo(rhs.ContactName);
            		
            		                 
            	
            	
            	case LeadColumn.ContactNumber:
            		return this.ContactNumber.CompareTo(rhs.ContactNumber);
            		
            		                 
            	
            	
            	case LeadColumn.ContactEmail:
            		return this.ContactEmail.CompareTo(rhs.ContactEmail);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<LeadKey> Members
		
		// member variable for the EntityId property
		private LeadKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual LeadKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new LeadKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Lead")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{11}{10}- Id: {0}{10}- WholesalerId: {1}{10}- CompanyName: {2}{10}- SalesPersonId: {3}{10}- CreatedDate: {4}{10}- AssignedDate: {5}{10}- ExpiryDate: {6}{10}- ContactName: {7}{10}- ContactNumber: {8}{10}- ContactEmail: {9}{10}", 
				this.Id,
				this.WholesalerId,
				this.CompanyName,
				this.SalesPersonId,
				this.CreatedDate,
				this.AssignedDate,
				this.ExpiryDate,
				(this.ContactName == null) ? string.Empty : this.ContactName.ToString(),
				(this.ContactNumber == null) ? string.Empty : this.ContactNumber.ToString(),
				(this.ContactEmail == null) ? string.Empty : this.ContactEmail.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Lead' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class LeadEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Lead"</remarks>
			public System.Int32 Id;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// CompanyName : 
		/// </summary>
		public System.String		  CompanyName = string.Empty;
		
		/// <summary>
		/// SalesPersonID : 
		/// </summary>
		public System.Int32		  SalesPersonId = (int)0;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.MinValue;
		
		/// <summary>
		/// AssignedDate : 
		/// </summary>
		public System.DateTime		  AssignedDate = DateTime.MinValue;
		
		/// <summary>
		/// ExpiryDate : 
		/// </summary>
		public System.DateTime		  ExpiryDate = DateTime.MinValue;
		
		/// <summary>
		/// ContactName : 
		/// </summary>
		public System.String		  ContactName = null;
		
		/// <summary>
		/// ContactNumber : 
		/// </summary>
		public System.String		  ContactNumber = null;
		
		/// <summary>
		/// ContactEmail : 
		/// </summary>
		public System.String		  ContactEmail = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Wholesaler _wholesalerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Wholesaler"/>.
		/// </summary>
		/// <value>The source Wholesaler for WholesalerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Wholesaler WholesalerIdSource
      	{
            get { return this._wholesalerIdSource; }
            set { this._wholesalerIdSource = value; }
      	}
		private SalesPerson _salesPersonIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="SalesPerson"/>.
		/// </summary>
		/// <value>The source SalesPerson for SalesPersonId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual SalesPerson SalesPersonIdSource
      	{
            get { return this._salesPersonIdSource; }
            set { this._salesPersonIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			LeadEntityData _tmp = new LeadEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.CompanyName = this.CompanyName;
			_tmp.SalesPersonId = this.SalesPersonId;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.AssignedDate = this.AssignedDate;
			_tmp.ExpiryDate = this.ExpiryDate;
			_tmp.ContactName = this.ContactName;
			_tmp.ContactNumber = this.ContactNumber;
			_tmp.ContactEmail = this.ContactEmail;
			
			#region Source Parent Composite Entities
			if (this.WholesalerIdSource != null)
				_tmp.WholesalerIdSource = MakeCopyOf(this.WholesalerIdSource) as Wholesaler;
			if (this.SalesPersonIdSource != null)
				_tmp.SalesPersonIdSource = MakeCopyOf(this.SalesPersonIdSource) as SalesPerson;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LeadColumn"/> which has raised the event.</param>
		public void OnColumnChanging(LeadColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LeadColumn"/> which has raised the event.</param>
		public void OnColumnChanged(LeadColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LeadColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(LeadColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				LeadEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new LeadEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="LeadColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(LeadColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				LeadEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new LeadEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region LeadEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Lead"/> object.
	/// </remarks>
	public class LeadEventArgs : System.EventArgs
	{
		private LeadColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the LeadEventArgs class.
		///</summary>
		public LeadEventArgs(LeadColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the LeadEventArgs class.
		///</summary>
		public LeadEventArgs(LeadColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The LeadColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="LeadColumn" />
		public LeadColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Lead related events.
	///</summary>
	public delegate void LeadEventHandler(object sender, LeadEventArgs e);
	
	#region LeadComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class LeadComparer : System.Collections.Generic.IComparer<Lead>
	{
		LeadColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:LeadComparer"/> class.
        /// </summary>
		public LeadComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:LeadComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public LeadComparer(LeadColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Lead"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Lead"/> to compare.</param>
        /// <param name="b">The second <c>Lead</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Lead a, Lead b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Lead entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Lead a, Lead b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public LeadColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region LeadKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Lead"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class LeadKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the LeadKey class.
		/// </summary>
		public LeadKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the LeadKey class.
		/// </summary>
		public LeadKey(LeadBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the LeadKey class.
		/// </summary>
		public LeadKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private LeadBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public LeadBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region LeadColumn Enum
	
	/// <summary>
	/// Enumerate the Lead columns.
	/// </summary>
	[Serializable]
	public enum LeadColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		Id = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// CompanyName : 
		/// </summary>
		[EnumTextValue("CompanyName")]
		[ColumnEnum("CompanyName", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 50)]
		CompanyName = 3,
		/// <summary>
		/// SalesPersonId : 
		/// </summary>
		[EnumTextValue("SalesPersonID")]
		[ColumnEnum("SalesPersonID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		SalesPersonId = 4,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 5,
		/// <summary>
		/// AssignedDate : 
		/// </summary>
		[EnumTextValue("AssignedDate")]
		[ColumnEnum("AssignedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		AssignedDate = 6,
		/// <summary>
		/// ExpiryDate : 
		/// </summary>
		[EnumTextValue("ExpiryDate")]
		[ColumnEnum("ExpiryDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		ExpiryDate = 7,
		/// <summary>
		/// ContactName : 
		/// </summary>
		[EnumTextValue("ContactName")]
		[ColumnEnum("ContactName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ContactName = 8,
		/// <summary>
		/// ContactNumber : 
		/// </summary>
		[EnumTextValue("ContactNumber")]
		[ColumnEnum("ContactNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		ContactNumber = 9,
		/// <summary>
		/// ContactEmail : 
		/// </summary>
		[EnumTextValue("ContactEmail")]
		[ColumnEnum("ContactEmail", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ContactEmail = 10
	}//End enum

	#endregion LeadColumn Enum

} // end namespace
