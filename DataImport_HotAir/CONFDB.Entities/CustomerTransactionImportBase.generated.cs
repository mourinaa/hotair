
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file CustomerTransactionImport.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'CustomerTransactionImport' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class CustomerTransactionImportBase : EntityBase, CONFDB.Entities.ICustomerTransactionImport, IEntityId<CustomerTransactionImportKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private CustomerTransactionImportEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private CustomerTransactionImportEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private CustomerTransactionImportEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<CustomerTransactionImport> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event CustomerTransactionImportEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event CustomerTransactionImportEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="CustomerTransactionImportBase"/> instance.
		///</summary>
		public CustomerTransactionImportBase()
		{
			this.entityData = new CustomerTransactionImportEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="CustomerTransactionImportBase"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_transactionDate"></param>
		///<param name="_transactionAmount"></param>
		///<param name="_transactionDescription"></param>
		///<param name="_customerTransactionTypeId"></param>
		///<param name="_wholesaler_ProductId"></param>
		///<param name="_productRateId"></param>
		///<param name="_quantity"></param>
		///<param name="_sellRate"></param>
		///<param name="_buyRate">Used to track WS costs</param>
		///<param name="_wsTransactionAmount">Used to track WS costs</param>
		///<param name="_modifiedBy"></param>
		///<param name="_createdDate"></param>
		///<param name="_postedToCustTrans"></param>
		///<param name="_postedToCustTransDate"></param>
		///<param name="_importType"></param>
		///<param name="_errorCodesId"></param>
		///<param name="_referenceNumber">Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.</param>
		///<param name="_uniqueConferenceId">Optional: Used to link the transaction to a specific conference.</param>
		///<param name="_localTaxRate"></param>
		///<param name="_federalTaxRate"></param>
		///<param name="_localTaxAmount">Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.</param>
		///<param name="_federalTaxAmount">Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.</param>
		///<param name="_elapsedTimeSeconds">Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.</param>
		public CustomerTransactionImportBase(System.String _wholesalerId, System.Int32? _customerId, 
			System.Int32? _moderatorId, System.String _priCustomerNumber, System.String _secCustomerNumber, 
			System.DateTime _transactionDate, System.Decimal _transactionAmount, System.String _transactionDescription, 
			System.Int32 _customerTransactionTypeId, System.Int32? _wholesaler_ProductId, 
			System.Int32? _productRateId, System.Int32? _quantity, System.Decimal? _sellRate, 
			System.Decimal? _buyRate, System.Decimal? _wsTransactionAmount, System.String _modifiedBy, 
			System.DateTime? _createdDate, System.Boolean _postedToCustTrans, System.DateTime? _postedToCustTransDate, 
			System.String _importType, System.Int32 _errorCodesId, System.String _referenceNumber, 
			System.String _uniqueConferenceId, System.Decimal? _localTaxRate, System.Decimal? _federalTaxRate, 
			System.Decimal? _localTaxAmount, System.Decimal? _federalTaxAmount, System.Int32? _elapsedTimeSeconds)
		{
			this.entityData = new CustomerTransactionImportEntityData();
			this.backupData = null;

			this.WholesalerId = _wholesalerId;
			this.CustomerId = _customerId;
			this.ModeratorId = _moderatorId;
			this.PriCustomerNumber = _priCustomerNumber;
			this.SecCustomerNumber = _secCustomerNumber;
			this.TransactionDate = _transactionDate;
			this.TransactionAmount = _transactionAmount;
			this.TransactionDescription = _transactionDescription;
			this.CustomerTransactionTypeId = _customerTransactionTypeId;
			this.Wholesaler_ProductId = _wholesaler_ProductId;
			this.ProductRateId = _productRateId;
			this.Quantity = _quantity;
			this.SellRate = _sellRate;
			this.BuyRate = _buyRate;
			this.WsTransactionAmount = _wsTransactionAmount;
			this.ModifiedBy = _modifiedBy;
			this.CreatedDate = _createdDate;
			this.PostedToCustTrans = _postedToCustTrans;
			this.PostedToCustTransDate = _postedToCustTransDate;
			this.ImportType = _importType;
			this.ErrorCodesId = _errorCodesId;
			this.ReferenceNumber = _referenceNumber;
			this.UniqueConferenceId = _uniqueConferenceId;
			this.LocalTaxRate = _localTaxRate;
			this.FederalTaxRate = _federalTaxRate;
			this.LocalTaxAmount = _localTaxAmount;
			this.FederalTaxAmount = _federalTaxAmount;
			this.ElapsedTimeSeconds = _elapsedTimeSeconds;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="CustomerTransactionImport"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_transactionDate"></param>
		///<param name="_transactionAmount"></param>
		///<param name="_transactionDescription"></param>
		///<param name="_customerTransactionTypeId"></param>
		///<param name="_wholesaler_ProductId"></param>
		///<param name="_productRateId"></param>
		///<param name="_quantity"></param>
		///<param name="_sellRate"></param>
		///<param name="_buyRate">Used to track WS costs</param>
		///<param name="_wsTransactionAmount">Used to track WS costs</param>
		///<param name="_modifiedBy"></param>
		///<param name="_createdDate"></param>
		///<param name="_postedToCustTrans"></param>
		///<param name="_postedToCustTransDate"></param>
		///<param name="_importType"></param>
		///<param name="_errorCodesId"></param>
		///<param name="_referenceNumber">Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.</param>
		///<param name="_uniqueConferenceId">Optional: Used to link the transaction to a specific conference.</param>
		///<param name="_localTaxRate"></param>
		///<param name="_federalTaxRate"></param>
		///<param name="_localTaxAmount">Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.</param>
		///<param name="_federalTaxAmount">Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.</param>
		///<param name="_elapsedTimeSeconds">Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.</param>
		public static CustomerTransactionImport CreateCustomerTransactionImport(System.String _wholesalerId, System.Int32? _customerId, 
			System.Int32? _moderatorId, System.String _priCustomerNumber, System.String _secCustomerNumber, 
			System.DateTime _transactionDate, System.Decimal _transactionAmount, System.String _transactionDescription, 
			System.Int32 _customerTransactionTypeId, System.Int32? _wholesaler_ProductId, 
			System.Int32? _productRateId, System.Int32? _quantity, System.Decimal? _sellRate, 
			System.Decimal? _buyRate, System.Decimal? _wsTransactionAmount, System.String _modifiedBy, 
			System.DateTime? _createdDate, System.Boolean _postedToCustTrans, System.DateTime? _postedToCustTransDate, 
			System.String _importType, System.Int32 _errorCodesId, System.String _referenceNumber, 
			System.String _uniqueConferenceId, System.Decimal? _localTaxRate, System.Decimal? _federalTaxRate, 
			System.Decimal? _localTaxAmount, System.Decimal? _federalTaxAmount, System.Int32? _elapsedTimeSeconds)
		{
			CustomerTransactionImport newCustomerTransactionImport = new CustomerTransactionImport();
			newCustomerTransactionImport.WholesalerId = _wholesalerId;
			newCustomerTransactionImport.CustomerId = _customerId;
			newCustomerTransactionImport.ModeratorId = _moderatorId;
			newCustomerTransactionImport.PriCustomerNumber = _priCustomerNumber;
			newCustomerTransactionImport.SecCustomerNumber = _secCustomerNumber;
			newCustomerTransactionImport.TransactionDate = _transactionDate;
			newCustomerTransactionImport.TransactionAmount = _transactionAmount;
			newCustomerTransactionImport.TransactionDescription = _transactionDescription;
			newCustomerTransactionImport.CustomerTransactionTypeId = _customerTransactionTypeId;
			newCustomerTransactionImport.Wholesaler_ProductId = _wholesaler_ProductId;
			newCustomerTransactionImport.ProductRateId = _productRateId;
			newCustomerTransactionImport.Quantity = _quantity;
			newCustomerTransactionImport.SellRate = _sellRate;
			newCustomerTransactionImport.BuyRate = _buyRate;
			newCustomerTransactionImport.WsTransactionAmount = _wsTransactionAmount;
			newCustomerTransactionImport.ModifiedBy = _modifiedBy;
			newCustomerTransactionImport.CreatedDate = _createdDate;
			newCustomerTransactionImport.PostedToCustTrans = _postedToCustTrans;
			newCustomerTransactionImport.PostedToCustTransDate = _postedToCustTransDate;
			newCustomerTransactionImport.ImportType = _importType;
			newCustomerTransactionImport.ErrorCodesId = _errorCodesId;
			newCustomerTransactionImport.ReferenceNumber = _referenceNumber;
			newCustomerTransactionImport.UniqueConferenceId = _uniqueConferenceId;
			newCustomerTransactionImport.LocalTaxRate = _localTaxRate;
			newCustomerTransactionImport.FederalTaxRate = _federalTaxRate;
			newCustomerTransactionImport.LocalTaxAmount = _localTaxAmount;
			newCustomerTransactionImport.FederalTaxAmount = _federalTaxAmount;
			newCustomerTransactionImport.ElapsedTimeSeconds = _elapsedTimeSeconds;
			return newCustomerTransactionImport;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is bigint.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int64 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsCustomerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsModeratorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 10)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this.entityData.PriCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.PriCustomerNumber == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				this.entityData.PriCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String SecCustomerNumber
		{
			get
			{
				return this.entityData.SecCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.SecCustomerNumber == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				this.entityData.SecCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				OnPropertyChanged("SecCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime TransactionDate
		{
			get
			{
				return this.entityData.TransactionDate; 
			}
			
			set
			{
				if (this.entityData.TransactionDate == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.TransactionDate, this.entityData.TransactionDate);
				this.entityData.TransactionDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.TransactionDate, this.entityData.TransactionDate);
				OnPropertyChanged("TransactionDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionAmount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Decimal TransactionAmount
		{
			get
			{
				return this.entityData.TransactionAmount; 
			}
			
			set
			{
				if (this.entityData.TransactionAmount == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.TransactionAmount, this.entityData.TransactionAmount);
				this.entityData.TransactionAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.TransactionAmount, this.entityData.TransactionAmount);
				OnPropertyChanged("TransactionAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TransactionDescription property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String TransactionDescription
		{
			get
			{
				return this.entityData.TransactionDescription; 
			}
			
			set
			{
				if (this.entityData.TransactionDescription == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.TransactionDescription, this.entityData.TransactionDescription);
				this.entityData.TransactionDescription = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.TransactionDescription, this.entityData.TransactionDescription);
				OnPropertyChanged("TransactionDescription");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerTransactionTypeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerTransactionTypeId
		{
			get
			{
				return this.entityData.CustomerTransactionTypeId; 
			}
			
			set
			{
				if (this.entityData.CustomerTransactionTypeId == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.CustomerTransactionTypeId, this.entityData.CustomerTransactionTypeId);
				this.entityData.CustomerTransactionTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.CustomerTransactionTypeId, this.entityData.CustomerTransactionTypeId);
				OnPropertyChanged("CustomerTransactionTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Wholesaler_ProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWholesaler_ProductIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Wholesaler_ProductId
		{
			get
			{
				return this.entityData.Wholesaler_ProductId; 
			}
			
			set
			{
				if (this.entityData.Wholesaler_ProductId == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.Wholesaler_ProductId, this.entityData.Wholesaler_ProductId);
				this.entityData.Wholesaler_ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.Wholesaler_ProductId, this.entityData.Wholesaler_ProductId);
				OnPropertyChanged("Wholesaler_ProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductRateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsProductRateIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ProductRateId
		{
			get
			{
				return this.entityData.ProductRateId; 
			}
			
			set
			{
				if (this.entityData.ProductRateId == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.ProductRateId, this.entityData.ProductRateId);
				this.entityData.ProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.ProductRateId, this.entityData.ProductRateId);
				OnPropertyChanged("ProductRateId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Quantity property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsQuantityNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Quantity
		{
			get
			{
				return this.entityData.Quantity; 
			}
			
			set
			{
				if (this.entityData.Quantity == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.Quantity, this.entityData.Quantity);
				this.entityData.Quantity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.Quantity, this.entityData.Quantity);
				OnPropertyChanged("Quantity");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SellRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsSellRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? SellRate
		{
			get
			{
				return this.entityData.SellRate; 
			}
			
			set
			{
				if (this.entityData.SellRate == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.SellRate, this.entityData.SellRate);
				this.entityData.SellRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.SellRate, this.entityData.SellRate);
				OnPropertyChanged("SellRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BuyRate property. 
		///		Used to track WS costs
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBuyRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to track WS costs"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BuyRate
		{
			get
			{
				return this.entityData.BuyRate; 
			}
			
			set
			{
				if (this.entityData.BuyRate == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.BuyRate, this.entityData.BuyRate);
				this.entityData.BuyRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.BuyRate, this.entityData.BuyRate);
				OnPropertyChanged("BuyRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WsTransactionAmount property. 
		///		Used to track WS costs
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWsTransactionAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to track WS costs"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WsTransactionAmount
		{
			get
			{
				return this.entityData.WsTransactionAmount; 
			}
			
			set
			{
				if (this.entityData.WsTransactionAmount == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.WsTransactionAmount, this.entityData.WsTransactionAmount);
				this.entityData.WsTransactionAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.WsTransactionAmount, this.entityData.WsTransactionAmount);
				OnPropertyChanged("WsTransactionAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String ModifiedBy
		{
			get
			{
				return this.entityData.ModifiedBy; 
			}
			
			set
			{
				if (this.entityData.ModifiedBy == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.ModifiedBy, this.entityData.ModifiedBy);
				this.entityData.ModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.ModifiedBy, this.entityData.ModifiedBy);
				OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.Now. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostedToCustTrans property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean PostedToCustTrans
		{
			get
			{
				return this.entityData.PostedToCustTrans; 
			}
			
			set
			{
				if (this.entityData.PostedToCustTrans == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.PostedToCustTrans, this.entityData.PostedToCustTrans);
				this.entityData.PostedToCustTrans = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.PostedToCustTrans, this.entityData.PostedToCustTrans);
				OnPropertyChanged("PostedToCustTrans");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PostedToCustTransDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsPostedToCustTransDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? PostedToCustTransDate
		{
			get
			{
				return this.entityData.PostedToCustTransDate; 
			}
			
			set
			{
				if (this.entityData.PostedToCustTransDate == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.PostedToCustTransDate, this.entityData.PostedToCustTransDate);
				this.entityData.PostedToCustTransDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.PostedToCustTransDate, this.entityData.PostedToCustTransDate);
				OnPropertyChanged("PostedToCustTransDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ImportType property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ImportType
		{
			get
			{
				return this.entityData.ImportType; 
			}
			
			set
			{
				if (this.entityData.ImportType == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.ImportType, this.entityData.ImportType);
				this.entityData.ImportType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.ImportType, this.entityData.ImportType);
				OnPropertyChanged("ImportType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ErrorCodesId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ErrorCodesId
		{
			get
			{
				return this.entityData.ErrorCodesId; 
			}
			
			set
			{
				if (this.entityData.ErrorCodesId == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.ErrorCodesId, this.entityData.ErrorCodesId);
				this.entityData.ErrorCodesId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.ErrorCodesId, this.entityData.ErrorCodesId);
				OnPropertyChanged("ErrorCodesId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReferenceNumber property. 
		///		Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ReferenceNumber
		{
			get
			{
				return this.entityData.ReferenceNumber; 
			}
			
			set
			{
				if (this.entityData.ReferenceNumber == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.ReferenceNumber, this.entityData.ReferenceNumber);
				this.entityData.ReferenceNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.ReferenceNumber, this.entityData.ReferenceNumber);
				OnPropertyChanged("ReferenceNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueConferenceId property. 
		///		Optional: Used to link the transaction to a specific conference.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Optional: Used to link the transaction to a specific conference."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String UniqueConferenceId
		{
			get
			{
				return this.entityData.UniqueConferenceId; 
			}
			
			set
			{
				if (this.entityData.UniqueConferenceId == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				this.entityData.UniqueConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				OnPropertyChanged("UniqueConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLocalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LocalTaxRate
		{
			get
			{
				return this.entityData.LocalTaxRate; 
			}
			
			set
			{
				if (this.entityData.LocalTaxRate == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.LocalTaxRate, this.entityData.LocalTaxRate);
				this.entityData.LocalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.LocalTaxRate, this.entityData.LocalTaxRate);
				OnPropertyChanged("LocalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FederalTaxRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFederalTaxRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FederalTaxRate
		{
			get
			{
				return this.entityData.FederalTaxRate; 
			}
			
			set
			{
				if (this.entityData.FederalTaxRate == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.FederalTaxRate, this.entityData.FederalTaxRate);
				this.entityData.FederalTaxRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.FederalTaxRate, this.entityData.FederalTaxRate);
				OnPropertyChanged("FederalTaxRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalTaxAmount property. 
		///		Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLocalTaxAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LocalTaxAmount
		{
			get
			{
				return this.entityData.LocalTaxAmount; 
			}
			
			set
			{
				if (this.entityData.LocalTaxAmount == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.LocalTaxAmount, this.entityData.LocalTaxAmount);
				this.entityData.LocalTaxAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.LocalTaxAmount, this.entityData.LocalTaxAmount);
				OnPropertyChanged("LocalTaxAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FederalTaxAmount property. 
		///		Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFederalTaxAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FederalTaxAmount
		{
			get
			{
				return this.entityData.FederalTaxAmount; 
			}
			
			set
			{
				if (this.entityData.FederalTaxAmount == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.FederalTaxAmount, this.entityData.FederalTaxAmount);
				this.entityData.FederalTaxAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.FederalTaxAmount, this.entityData.FederalTaxAmount);
				OnPropertyChanged("FederalTaxAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ElapsedTimeSeconds property. 
		///		Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsElapsedTimeSecondsNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ElapsedTimeSeconds
		{
			get
			{
				return this.entityData.ElapsedTimeSeconds; 
			}
			
			set
			{
				if (this.entityData.ElapsedTimeSeconds == value)
					return;
					
				OnColumnChanging(CustomerTransactionImportColumn.ElapsedTimeSeconds, this.entityData.ElapsedTimeSeconds);
				this.entityData.ElapsedTimeSeconds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(CustomerTransactionImportColumn.ElapsedTimeSeconds, this.entityData.ElapsedTimeSeconds);
				OnPropertyChanged("ElapsedTimeSeconds");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PriCustomerNumber", "Pri Customer Number", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SecCustomerNumber", "Sec Customer Number", 6));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("TransactionDescription", "Transaction Description", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModifiedBy", "Modified By", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ImportType", "Import Type", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ReferenceNumber", "Reference Number", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("UniqueConferenceId", "Unique Conference Id", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "CustomerTransactionImport"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WholesalerID", "CustomerID", "ModeratorID", "PriCustomerNumber", "SecCustomerNumber", "TransactionDate", "TransactionAmount", "TransactionDescription", "CustomerTransactionTypeID", "Wholesaler_ProductID", "ProductRateID", "Quantity", "SellRate", "BuyRate", "WSTransactionAmount", "ModifiedBy", "CreatedDate", "PostedToCustTrans", "PostedToCustTransDate", "ImportType", "ErrorCodesID", "ReferenceNumber", "UniqueConferenceID", "LocalTaxRate", "FederalTaxRate", "LocalTaxAmount", "FederalTaxAmount", "ElapsedTimeSeconds"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as CustomerTransactionImportEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (CustomerTransactionImport) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<CustomerTransactionImport>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as CustomerTransactionImport);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed CustomerTransactionImport Entity 
		///</summary>
		public virtual CustomerTransactionImport Copy()
		{
			//shallow copy entity
			CustomerTransactionImport copy = new CustomerTransactionImport();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.WholesalerId = this.WholesalerId;
			copy.CustomerId = this.CustomerId;
			copy.ModeratorId = this.ModeratorId;
			copy.PriCustomerNumber = this.PriCustomerNumber;
			copy.SecCustomerNumber = this.SecCustomerNumber;
			copy.TransactionDate = this.TransactionDate;
			copy.TransactionAmount = this.TransactionAmount;
			copy.TransactionDescription = this.TransactionDescription;
			copy.CustomerTransactionTypeId = this.CustomerTransactionTypeId;
			copy.Wholesaler_ProductId = this.Wholesaler_ProductId;
			copy.ProductRateId = this.ProductRateId;
			copy.Quantity = this.Quantity;
			copy.SellRate = this.SellRate;
			copy.BuyRate = this.BuyRate;
			copy.WsTransactionAmount = this.WsTransactionAmount;
			copy.ModifiedBy = this.ModifiedBy;
			copy.CreatedDate = this.CreatedDate;
			copy.PostedToCustTrans = this.PostedToCustTrans;
			copy.PostedToCustTransDate = this.PostedToCustTransDate;
			copy.ImportType = this.ImportType;
			copy.ErrorCodesId = this.ErrorCodesId;
			copy.ReferenceNumber = this.ReferenceNumber;
			copy.UniqueConferenceId = this.UniqueConferenceId;
			copy.LocalTaxRate = this.LocalTaxRate;
			copy.FederalTaxRate = this.FederalTaxRate;
			copy.LocalTaxAmount = this.LocalTaxAmount;
			copy.FederalTaxAmount = this.FederalTaxAmount;
			copy.ElapsedTimeSeconds = this.ElapsedTimeSeconds;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed CustomerTransactionImport Entity which is a deep copy of the current entity.
		///</summary>
		public virtual CustomerTransactionImport DeepCopy()
		{
			return EntityHelper.Clone<CustomerTransactionImport>(this as CustomerTransactionImport);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as CustomerTransactionImportEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as CustomerTransactionImportEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(CustomerTransactionImportColumn column)
		{
			switch(column)
			{
					case CustomerTransactionImportColumn.Id:
					return entityData.Id != _originalData.Id;
					case CustomerTransactionImportColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case CustomerTransactionImportColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case CustomerTransactionImportColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case CustomerTransactionImportColumn.PriCustomerNumber:
					return entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
					case CustomerTransactionImportColumn.SecCustomerNumber:
					return entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
					case CustomerTransactionImportColumn.TransactionDate:
					return entityData.TransactionDate != _originalData.TransactionDate;
					case CustomerTransactionImportColumn.TransactionAmount:
					return entityData.TransactionAmount != _originalData.TransactionAmount;
					case CustomerTransactionImportColumn.TransactionDescription:
					return entityData.TransactionDescription != _originalData.TransactionDescription;
					case CustomerTransactionImportColumn.CustomerTransactionTypeId:
					return entityData.CustomerTransactionTypeId != _originalData.CustomerTransactionTypeId;
					case CustomerTransactionImportColumn.Wholesaler_ProductId:
					return entityData.Wholesaler_ProductId != _originalData.Wholesaler_ProductId;
					case CustomerTransactionImportColumn.ProductRateId:
					return entityData.ProductRateId != _originalData.ProductRateId;
					case CustomerTransactionImportColumn.Quantity:
					return entityData.Quantity != _originalData.Quantity;
					case CustomerTransactionImportColumn.SellRate:
					return entityData.SellRate != _originalData.SellRate;
					case CustomerTransactionImportColumn.BuyRate:
					return entityData.BuyRate != _originalData.BuyRate;
					case CustomerTransactionImportColumn.WsTransactionAmount:
					return entityData.WsTransactionAmount != _originalData.WsTransactionAmount;
					case CustomerTransactionImportColumn.ModifiedBy:
					return entityData.ModifiedBy != _originalData.ModifiedBy;
					case CustomerTransactionImportColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case CustomerTransactionImportColumn.PostedToCustTrans:
					return entityData.PostedToCustTrans != _originalData.PostedToCustTrans;
					case CustomerTransactionImportColumn.PostedToCustTransDate:
					return entityData.PostedToCustTransDate != _originalData.PostedToCustTransDate;
					case CustomerTransactionImportColumn.ImportType:
					return entityData.ImportType != _originalData.ImportType;
					case CustomerTransactionImportColumn.ErrorCodesId:
					return entityData.ErrorCodesId != _originalData.ErrorCodesId;
					case CustomerTransactionImportColumn.ReferenceNumber:
					return entityData.ReferenceNumber != _originalData.ReferenceNumber;
					case CustomerTransactionImportColumn.UniqueConferenceId:
					return entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
					case CustomerTransactionImportColumn.LocalTaxRate:
					return entityData.LocalTaxRate != _originalData.LocalTaxRate;
					case CustomerTransactionImportColumn.FederalTaxRate:
					return entityData.FederalTaxRate != _originalData.FederalTaxRate;
					case CustomerTransactionImportColumn.LocalTaxAmount:
					return entityData.LocalTaxAmount != _originalData.LocalTaxAmount;
					case CustomerTransactionImportColumn.FederalTaxAmount:
					return entityData.FederalTaxAmount != _originalData.FederalTaxAmount;
					case CustomerTransactionImportColumn.ElapsedTimeSeconds:
					return entityData.ElapsedTimeSeconds != _originalData.ElapsedTimeSeconds;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
			result = result || entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
			result = result || entityData.TransactionDate != _originalData.TransactionDate;
			result = result || entityData.TransactionAmount != _originalData.TransactionAmount;
			result = result || entityData.TransactionDescription != _originalData.TransactionDescription;
			result = result || entityData.CustomerTransactionTypeId != _originalData.CustomerTransactionTypeId;
			result = result || entityData.Wholesaler_ProductId != _originalData.Wholesaler_ProductId;
			result = result || entityData.ProductRateId != _originalData.ProductRateId;
			result = result || entityData.Quantity != _originalData.Quantity;
			result = result || entityData.SellRate != _originalData.SellRate;
			result = result || entityData.BuyRate != _originalData.BuyRate;
			result = result || entityData.WsTransactionAmount != _originalData.WsTransactionAmount;
			result = result || entityData.ModifiedBy != _originalData.ModifiedBy;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.PostedToCustTrans != _originalData.PostedToCustTrans;
			result = result || entityData.PostedToCustTransDate != _originalData.PostedToCustTransDate;
			result = result || entityData.ImportType != _originalData.ImportType;
			result = result || entityData.ErrorCodesId != _originalData.ErrorCodesId;
			result = result || entityData.ReferenceNumber != _originalData.ReferenceNumber;
			result = result || entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
			result = result || entityData.LocalTaxRate != _originalData.LocalTaxRate;
			result = result || entityData.FederalTaxRate != _originalData.FederalTaxRate;
			result = result || entityData.LocalTaxAmount != _originalData.LocalTaxAmount;
			result = result || entityData.FederalTaxAmount != _originalData.FederalTaxAmount;
			result = result || entityData.ElapsedTimeSeconds != _originalData.ElapsedTimeSeconds;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="CustomerTransactionImportBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is CustomerTransactionImportBase)
				return Equals(this, (CustomerTransactionImportBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="CustomerTransactionImportBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					((this.CustomerId == null) ? string.Empty : this.CustomerId.ToString()).GetHashCode() ^ 
					((this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString()).GetHashCode() ^ 
					((this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString()).GetHashCode() ^ 
					((this.SecCustomerNumber == null) ? string.Empty : this.SecCustomerNumber.ToString()).GetHashCode() ^ 
					this.TransactionDate.GetHashCode() ^ 
					this.TransactionAmount.GetHashCode() ^ 
					((this.TransactionDescription == null) ? string.Empty : this.TransactionDescription.ToString()).GetHashCode() ^ 
					this.CustomerTransactionTypeId.GetHashCode() ^ 
					((this.Wholesaler_ProductId == null) ? string.Empty : this.Wholesaler_ProductId.ToString()).GetHashCode() ^ 
					((this.ProductRateId == null) ? string.Empty : this.ProductRateId.ToString()).GetHashCode() ^ 
					((this.Quantity == null) ? string.Empty : this.Quantity.ToString()).GetHashCode() ^ 
					((this.SellRate == null) ? string.Empty : this.SellRate.ToString()).GetHashCode() ^ 
					((this.BuyRate == null) ? string.Empty : this.BuyRate.ToString()).GetHashCode() ^ 
					((this.WsTransactionAmount == null) ? string.Empty : this.WsTransactionAmount.ToString()).GetHashCode() ^ 
					((this.ModifiedBy == null) ? string.Empty : this.ModifiedBy.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					this.PostedToCustTrans.GetHashCode() ^ 
					((this.PostedToCustTransDate == null) ? string.Empty : this.PostedToCustTransDate.ToString()).GetHashCode() ^ 
					((this.ImportType == null) ? string.Empty : this.ImportType.ToString()).GetHashCode() ^ 
					this.ErrorCodesId.GetHashCode() ^ 
					((this.ReferenceNumber == null) ? string.Empty : this.ReferenceNumber.ToString()).GetHashCode() ^ 
					((this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString()).GetHashCode() ^ 
					((this.LocalTaxRate == null) ? string.Empty : this.LocalTaxRate.ToString()).GetHashCode() ^ 
					((this.FederalTaxRate == null) ? string.Empty : this.FederalTaxRate.ToString()).GetHashCode() ^ 
					((this.LocalTaxAmount == null) ? string.Empty : this.LocalTaxAmount.ToString()).GetHashCode() ^ 
					((this.FederalTaxAmount == null) ? string.Empty : this.FederalTaxAmount.ToString()).GetHashCode() ^ 
					((this.ElapsedTimeSeconds == null) ? string.Empty : this.ElapsedTimeSeconds.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="CustomerTransactionImportBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(CustomerTransactionImportBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="CustomerTransactionImportBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="CustomerTransactionImportBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="CustomerTransactionImportBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(CustomerTransactionImportBase Object1, CustomerTransactionImportBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if ( Object1.CustomerId != null && Object2.CustomerId != null )
			{
				if (Object1.CustomerId != Object2.CustomerId)
					equal = false;
			}
			else if (Object1.CustomerId == null ^ Object2.CustomerId == null )
			{
				equal = false;
			}
			if ( Object1.ModeratorId != null && Object2.ModeratorId != null )
			{
				if (Object1.ModeratorId != Object2.ModeratorId)
					equal = false;
			}
			else if (Object1.ModeratorId == null ^ Object2.ModeratorId == null )
			{
				equal = false;
			}
			if ( Object1.PriCustomerNumber != null && Object2.PriCustomerNumber != null )
			{
				if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
					equal = false;
			}
			else if (Object1.PriCustomerNumber == null ^ Object2.PriCustomerNumber == null )
			{
				equal = false;
			}
			if ( Object1.SecCustomerNumber != null && Object2.SecCustomerNumber != null )
			{
				if (Object1.SecCustomerNumber != Object2.SecCustomerNumber)
					equal = false;
			}
			else if (Object1.SecCustomerNumber == null ^ Object2.SecCustomerNumber == null )
			{
				equal = false;
			}
			if (Object1.TransactionDate != Object2.TransactionDate)
				equal = false;
			if (Object1.TransactionAmount != Object2.TransactionAmount)
				equal = false;
			if ( Object1.TransactionDescription != null && Object2.TransactionDescription != null )
			{
				if (Object1.TransactionDescription != Object2.TransactionDescription)
					equal = false;
			}
			else if (Object1.TransactionDescription == null ^ Object2.TransactionDescription == null )
			{
				equal = false;
			}
			if (Object1.CustomerTransactionTypeId != Object2.CustomerTransactionTypeId)
				equal = false;
			if ( Object1.Wholesaler_ProductId != null && Object2.Wholesaler_ProductId != null )
			{
				if (Object1.Wholesaler_ProductId != Object2.Wholesaler_ProductId)
					equal = false;
			}
			else if (Object1.Wholesaler_ProductId == null ^ Object2.Wholesaler_ProductId == null )
			{
				equal = false;
			}
			if ( Object1.ProductRateId != null && Object2.ProductRateId != null )
			{
				if (Object1.ProductRateId != Object2.ProductRateId)
					equal = false;
			}
			else if (Object1.ProductRateId == null ^ Object2.ProductRateId == null )
			{
				equal = false;
			}
			if ( Object1.Quantity != null && Object2.Quantity != null )
			{
				if (Object1.Quantity != Object2.Quantity)
					equal = false;
			}
			else if (Object1.Quantity == null ^ Object2.Quantity == null )
			{
				equal = false;
			}
			if ( Object1.SellRate != null && Object2.SellRate != null )
			{
				if (Object1.SellRate != Object2.SellRate)
					equal = false;
			}
			else if (Object1.SellRate == null ^ Object2.SellRate == null )
			{
				equal = false;
			}
			if ( Object1.BuyRate != null && Object2.BuyRate != null )
			{
				if (Object1.BuyRate != Object2.BuyRate)
					equal = false;
			}
			else if (Object1.BuyRate == null ^ Object2.BuyRate == null )
			{
				equal = false;
			}
			if ( Object1.WsTransactionAmount != null && Object2.WsTransactionAmount != null )
			{
				if (Object1.WsTransactionAmount != Object2.WsTransactionAmount)
					equal = false;
			}
			else if (Object1.WsTransactionAmount == null ^ Object2.WsTransactionAmount == null )
			{
				equal = false;
			}
			if ( Object1.ModifiedBy != null && Object2.ModifiedBy != null )
			{
				if (Object1.ModifiedBy != Object2.ModifiedBy)
					equal = false;
			}
			else if (Object1.ModifiedBy == null ^ Object2.ModifiedBy == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if (Object1.PostedToCustTrans != Object2.PostedToCustTrans)
				equal = false;
			if ( Object1.PostedToCustTransDate != null && Object2.PostedToCustTransDate != null )
			{
				if (Object1.PostedToCustTransDate != Object2.PostedToCustTransDate)
					equal = false;
			}
			else if (Object1.PostedToCustTransDate == null ^ Object2.PostedToCustTransDate == null )
			{
				equal = false;
			}
			if ( Object1.ImportType != null && Object2.ImportType != null )
			{
				if (Object1.ImportType != Object2.ImportType)
					equal = false;
			}
			else if (Object1.ImportType == null ^ Object2.ImportType == null )
			{
				equal = false;
			}
			if (Object1.ErrorCodesId != Object2.ErrorCodesId)
				equal = false;
			if ( Object1.ReferenceNumber != null && Object2.ReferenceNumber != null )
			{
				if (Object1.ReferenceNumber != Object2.ReferenceNumber)
					equal = false;
			}
			else if (Object1.ReferenceNumber == null ^ Object2.ReferenceNumber == null )
			{
				equal = false;
			}
			if ( Object1.UniqueConferenceId != null && Object2.UniqueConferenceId != null )
			{
				if (Object1.UniqueConferenceId != Object2.UniqueConferenceId)
					equal = false;
			}
			else if (Object1.UniqueConferenceId == null ^ Object2.UniqueConferenceId == null )
			{
				equal = false;
			}
			if ( Object1.LocalTaxRate != null && Object2.LocalTaxRate != null )
			{
				if (Object1.LocalTaxRate != Object2.LocalTaxRate)
					equal = false;
			}
			else if (Object1.LocalTaxRate == null ^ Object2.LocalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.FederalTaxRate != null && Object2.FederalTaxRate != null )
			{
				if (Object1.FederalTaxRate != Object2.FederalTaxRate)
					equal = false;
			}
			else if (Object1.FederalTaxRate == null ^ Object2.FederalTaxRate == null )
			{
				equal = false;
			}
			if ( Object1.LocalTaxAmount != null && Object2.LocalTaxAmount != null )
			{
				if (Object1.LocalTaxAmount != Object2.LocalTaxAmount)
					equal = false;
			}
			else if (Object1.LocalTaxAmount == null ^ Object2.LocalTaxAmount == null )
			{
				equal = false;
			}
			if ( Object1.FederalTaxAmount != null && Object2.FederalTaxAmount != null )
			{
				if (Object1.FederalTaxAmount != Object2.FederalTaxAmount)
					equal = false;
			}
			else if (Object1.FederalTaxAmount == null ^ Object2.FederalTaxAmount == null )
			{
				equal = false;
			}
			if ( Object1.ElapsedTimeSeconds != null && Object2.ElapsedTimeSeconds != null )
			{
				if (Object1.ElapsedTimeSeconds != Object2.ElapsedTimeSeconds)
					equal = false;
			}
			else if (Object1.ElapsedTimeSeconds == null ^ Object2.ElapsedTimeSeconds == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((CustomerTransactionImportBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static CustomerTransactionImportComparer GetComparer()
        {
            return new CustomerTransactionImportComparer();
        }
        */

        // Comparer delegates back to CustomerTransactionImport
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(CustomerTransactionImport rhs, CustomerTransactionImportColumn which)
        {
            switch (which)
            {
            	
            	
            	case CustomerTransactionImportColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.CustomerId:
            		return this.CustomerId.Value.CompareTo(rhs.CustomerId.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.ModeratorId:
            		return this.ModeratorId.Value.CompareTo(rhs.ModeratorId.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.PriCustomerNumber:
            		return this.PriCustomerNumber.CompareTo(rhs.PriCustomerNumber);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.SecCustomerNumber:
            		return this.SecCustomerNumber.CompareTo(rhs.SecCustomerNumber);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.TransactionDate:
            		return this.TransactionDate.CompareTo(rhs.TransactionDate);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.TransactionAmount:
            		return this.TransactionAmount.CompareTo(rhs.TransactionAmount);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.TransactionDescription:
            		return this.TransactionDescription.CompareTo(rhs.TransactionDescription);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.CustomerTransactionTypeId:
            		return this.CustomerTransactionTypeId.CompareTo(rhs.CustomerTransactionTypeId);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.Wholesaler_ProductId:
            		return this.Wholesaler_ProductId.Value.CompareTo(rhs.Wholesaler_ProductId.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.ProductRateId:
            		return this.ProductRateId.Value.CompareTo(rhs.ProductRateId.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.Quantity:
            		return this.Quantity.Value.CompareTo(rhs.Quantity.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.SellRate:
            		return this.SellRate.Value.CompareTo(rhs.SellRate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.BuyRate:
            		return this.BuyRate.Value.CompareTo(rhs.BuyRate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.WsTransactionAmount:
            		return this.WsTransactionAmount.Value.CompareTo(rhs.WsTransactionAmount.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.ModifiedBy:
            		return this.ModifiedBy.CompareTo(rhs.ModifiedBy);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.PostedToCustTrans:
            		return this.PostedToCustTrans.CompareTo(rhs.PostedToCustTrans);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.PostedToCustTransDate:
            		return this.PostedToCustTransDate.Value.CompareTo(rhs.PostedToCustTransDate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.ImportType:
            		return this.ImportType.CompareTo(rhs.ImportType);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.ErrorCodesId:
            		return this.ErrorCodesId.CompareTo(rhs.ErrorCodesId);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.ReferenceNumber:
            		return this.ReferenceNumber.CompareTo(rhs.ReferenceNumber);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.UniqueConferenceId:
            		return this.UniqueConferenceId.CompareTo(rhs.UniqueConferenceId);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.LocalTaxRate:
            		return this.LocalTaxRate.Value.CompareTo(rhs.LocalTaxRate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.FederalTaxRate:
            		return this.FederalTaxRate.Value.CompareTo(rhs.FederalTaxRate.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.LocalTaxAmount:
            		return this.LocalTaxAmount.Value.CompareTo(rhs.LocalTaxAmount.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.FederalTaxAmount:
            		return this.FederalTaxAmount.Value.CompareTo(rhs.FederalTaxAmount.Value);
            		
            		                 
            	
            	
            	case CustomerTransactionImportColumn.ElapsedTimeSeconds:
            		return this.ElapsedTimeSeconds.Value.CompareTo(rhs.ElapsedTimeSeconds.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<CustomerTransactionImportKey> Members
		
		// member variable for the EntityId property
		private CustomerTransactionImportKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual CustomerTransactionImportKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new CustomerTransactionImportKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("CustomerTransactionImport")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{30}{29}- Id: {0}{29}- WholesalerId: {1}{29}- CustomerId: {2}{29}- ModeratorId: {3}{29}- PriCustomerNumber: {4}{29}- SecCustomerNumber: {5}{29}- TransactionDate: {6}{29}- TransactionAmount: {7}{29}- TransactionDescription: {8}{29}- CustomerTransactionTypeId: {9}{29}- Wholesaler_ProductId: {10}{29}- ProductRateId: {11}{29}- Quantity: {12}{29}- SellRate: {13}{29}- BuyRate: {14}{29}- WsTransactionAmount: {15}{29}- ModifiedBy: {16}{29}- CreatedDate: {17}{29}- PostedToCustTrans: {18}{29}- PostedToCustTransDate: {19}{29}- ImportType: {20}{29}- ErrorCodesId: {21}{29}- ReferenceNumber: {22}{29}- UniqueConferenceId: {23}{29}- LocalTaxRate: {24}{29}- FederalTaxRate: {25}{29}- LocalTaxAmount: {26}{29}- FederalTaxAmount: {27}{29}- ElapsedTimeSeconds: {28}{29}", 
				this.Id,
				this.WholesalerId,
				(this.CustomerId == null) ? string.Empty : this.CustomerId.ToString(),
				(this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString(),
				(this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString(),
				(this.SecCustomerNumber == null) ? string.Empty : this.SecCustomerNumber.ToString(),
				this.TransactionDate,
				this.TransactionAmount,
				(this.TransactionDescription == null) ? string.Empty : this.TransactionDescription.ToString(),
				this.CustomerTransactionTypeId,
				(this.Wholesaler_ProductId == null) ? string.Empty : this.Wholesaler_ProductId.ToString(),
				(this.ProductRateId == null) ? string.Empty : this.ProductRateId.ToString(),
				(this.Quantity == null) ? string.Empty : this.Quantity.ToString(),
				(this.SellRate == null) ? string.Empty : this.SellRate.ToString(),
				(this.BuyRate == null) ? string.Empty : this.BuyRate.ToString(),
				(this.WsTransactionAmount == null) ? string.Empty : this.WsTransactionAmount.ToString(),
				(this.ModifiedBy == null) ? string.Empty : this.ModifiedBy.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				this.PostedToCustTrans,
				(this.PostedToCustTransDate == null) ? string.Empty : this.PostedToCustTransDate.ToString(),
				(this.ImportType == null) ? string.Empty : this.ImportType.ToString(),
				this.ErrorCodesId,
				(this.ReferenceNumber == null) ? string.Empty : this.ReferenceNumber.ToString(),
				(this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString(),
				(this.LocalTaxRate == null) ? string.Empty : this.LocalTaxRate.ToString(),
				(this.FederalTaxRate == null) ? string.Empty : this.FederalTaxRate.ToString(),
				(this.LocalTaxAmount == null) ? string.Empty : this.LocalTaxAmount.ToString(),
				(this.FederalTaxAmount == null) ? string.Empty : this.FederalTaxAmount.ToString(),
				(this.ElapsedTimeSeconds == null) ? string.Empty : this.ElapsedTimeSeconds.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'CustomerTransactionImport' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class CustomerTransactionImportEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "CustomerTransactionImport"</remarks>
			public System.Int64 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32?		  CustomerId = null;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32?		  ModeratorId = null;
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		public System.String		  PriCustomerNumber = null;
		
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		public System.String		  SecCustomerNumber = null;
		
		/// <summary>
		/// TransactionDate : 
		/// </summary>
		public System.DateTime		  TransactionDate = DateTime.MinValue;
		
		/// <summary>
		/// TransactionAmount : 
		/// </summary>
		public System.Decimal		  TransactionAmount = 0.0m;
		
		/// <summary>
		/// TransactionDescription : 
		/// </summary>
		public System.String		  TransactionDescription = null;
		
		/// <summary>
		/// CustomerTransactionTypeID : 
		/// </summary>
		public System.Int32		  CustomerTransactionTypeId = (int)0;
		
		/// <summary>
		/// Wholesaler_ProductID : 
		/// </summary>
		public System.Int32?		  Wholesaler_ProductId = null;
		
		/// <summary>
		/// ProductRateID : 
		/// </summary>
		public System.Int32?		  ProductRateId = null;
		
		/// <summary>
		/// Quantity : 
		/// </summary>
		public System.Int32?		  Quantity = null;
		
		/// <summary>
		/// SellRate : 
		/// </summary>
		public System.Decimal?		  SellRate = null;
		
		/// <summary>
		/// BuyRate : Used to track WS costs
		/// </summary>
		public System.Decimal?		  BuyRate = null;
		
		/// <summary>
		/// WSTransactionAmount : Used to track WS costs
		/// </summary>
		public System.Decimal?		  WsTransactionAmount = null;
		
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		public System.String		  ModifiedBy = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime?		  CreatedDate = DateTime.Now;
		
		/// <summary>
		/// PostedToCustTrans : 
		/// </summary>
		public System.Boolean		  PostedToCustTrans = false;
		
		/// <summary>
		/// PostedToCustTransDate : 
		/// </summary>
		public System.DateTime?		  PostedToCustTransDate = null;
		
		/// <summary>
		/// ImportType : 
		/// </summary>
		public System.String		  ImportType = null;
		
		/// <summary>
		/// ErrorCodesID : 
		/// </summary>
		public System.Int32		  ErrorCodesId = (int)0;
		
		/// <summary>
		/// ReferenceNumber : Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.
		/// </summary>
		public System.String		  ReferenceNumber = null;
		
		/// <summary>
		/// UniqueConferenceID : Optional: Used to link the transaction to a specific conference.
		/// </summary>
		public System.String		  UniqueConferenceId = null;
		
		/// <summary>
		/// LocalTaxRate : 
		/// </summary>
		public System.Decimal?		  LocalTaxRate = null;
		
		/// <summary>
		/// FederalTaxRate : 
		/// </summary>
		public System.Decimal?		  FederalTaxRate = null;
		
		/// <summary>
		/// LocalTaxAmount : Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		public System.Decimal?		  LocalTaxAmount = null;
		
		/// <summary>
		/// FederalTaxAmount : Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		public System.Decimal?		  FederalTaxAmount = null;
		
		/// <summary>
		/// ElapsedTimeSeconds : Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.
		/// </summary>
		public System.Int32?		  ElapsedTimeSeconds = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			CustomerTransactionImportEntityData _tmp = new CustomerTransactionImportEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.PriCustomerNumber = this.PriCustomerNumber;
			_tmp.SecCustomerNumber = this.SecCustomerNumber;
			_tmp.TransactionDate = this.TransactionDate;
			_tmp.TransactionAmount = this.TransactionAmount;
			_tmp.TransactionDescription = this.TransactionDescription;
			_tmp.CustomerTransactionTypeId = this.CustomerTransactionTypeId;
			_tmp.Wholesaler_ProductId = this.Wholesaler_ProductId;
			_tmp.ProductRateId = this.ProductRateId;
			_tmp.Quantity = this.Quantity;
			_tmp.SellRate = this.SellRate;
			_tmp.BuyRate = this.BuyRate;
			_tmp.WsTransactionAmount = this.WsTransactionAmount;
			_tmp.ModifiedBy = this.ModifiedBy;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.PostedToCustTrans = this.PostedToCustTrans;
			_tmp.PostedToCustTransDate = this.PostedToCustTransDate;
			_tmp.ImportType = this.ImportType;
			_tmp.ErrorCodesId = this.ErrorCodesId;
			_tmp.ReferenceNumber = this.ReferenceNumber;
			_tmp.UniqueConferenceId = this.UniqueConferenceId;
			_tmp.LocalTaxRate = this.LocalTaxRate;
			_tmp.FederalTaxRate = this.FederalTaxRate;
			_tmp.LocalTaxAmount = this.LocalTaxAmount;
			_tmp.FederalTaxAmount = this.FederalTaxAmount;
			_tmp.ElapsedTimeSeconds = this.ElapsedTimeSeconds;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionImportColumn"/> which has raised the event.</param>
		public void OnColumnChanging(CustomerTransactionImportColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionImportColumn"/> which has raised the event.</param>
		public void OnColumnChanged(CustomerTransactionImportColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionImportColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(CustomerTransactionImportColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				CustomerTransactionImportEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new CustomerTransactionImportEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="CustomerTransactionImportColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(CustomerTransactionImportColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				CustomerTransactionImportEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new CustomerTransactionImportEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region CustomerTransactionImportEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="CustomerTransactionImport"/> object.
	/// </remarks>
	public class CustomerTransactionImportEventArgs : System.EventArgs
	{
		private CustomerTransactionImportColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the CustomerTransactionImportEventArgs class.
		///</summary>
		public CustomerTransactionImportEventArgs(CustomerTransactionImportColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the CustomerTransactionImportEventArgs class.
		///</summary>
		public CustomerTransactionImportEventArgs(CustomerTransactionImportColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The CustomerTransactionImportColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="CustomerTransactionImportColumn" />
		public CustomerTransactionImportColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all CustomerTransactionImport related events.
	///</summary>
	public delegate void CustomerTransactionImportEventHandler(object sender, CustomerTransactionImportEventArgs e);
	
	#region CustomerTransactionImportComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class CustomerTransactionImportComparer : System.Collections.Generic.IComparer<CustomerTransactionImport>
	{
		CustomerTransactionImportColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerTransactionImportComparer"/> class.
        /// </summary>
		public CustomerTransactionImportComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:CustomerTransactionImportComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public CustomerTransactionImportComparer(CustomerTransactionImportColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="CustomerTransactionImport"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="CustomerTransactionImport"/> to compare.</param>
        /// <param name="b">The second <c>CustomerTransactionImport</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(CustomerTransactionImport a, CustomerTransactionImport b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(CustomerTransactionImport entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(CustomerTransactionImport a, CustomerTransactionImport b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public CustomerTransactionImportColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region CustomerTransactionImportKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="CustomerTransactionImport"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class CustomerTransactionImportKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionImportKey class.
		/// </summary>
		public CustomerTransactionImportKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionImportKey class.
		/// </summary>
		public CustomerTransactionImportKey(CustomerTransactionImportBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the CustomerTransactionImportKey class.
		/// </summary>
		public CustomerTransactionImportKey(System.Int64 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private CustomerTransactionImportBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public CustomerTransactionImportBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int64 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int64 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int64) EntityUtil.ChangeType(values["Id"], typeof(System.Int64)) : (long)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region CustomerTransactionImportColumn Enum
	
	/// <summary>
	/// Enumerate the CustomerTransactionImport columns.
	/// </summary>
	[Serializable]
	public enum CustomerTransactionImportColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int64), System.Data.DbType.Int64, true, true, false)]
		Id = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		CustomerId = 3,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ModeratorId = 4,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 10)]
		PriCustomerNumber = 5,
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		[EnumTextValue("SecCustomerNumber")]
		[ColumnEnum("SecCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		SecCustomerNumber = 6,
		/// <summary>
		/// TransactionDate : 
		/// </summary>
		[EnumTextValue("TransactionDate")]
		[ColumnEnum("TransactionDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		TransactionDate = 7,
		/// <summary>
		/// TransactionAmount : 
		/// </summary>
		[EnumTextValue("TransactionAmount")]
		[ColumnEnum("TransactionAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, false)]
		TransactionAmount = 8,
		/// <summary>
		/// TransactionDescription : 
		/// </summary>
		[EnumTextValue("TransactionDescription")]
		[ColumnEnum("TransactionDescription", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		TransactionDescription = 9,
		/// <summary>
		/// CustomerTransactionTypeId : 
		/// </summary>
		[EnumTextValue("CustomerTransactionTypeID")]
		[ColumnEnum("CustomerTransactionTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerTransactionTypeId = 10,
		/// <summary>
		/// Wholesaler_ProductId : 
		/// </summary>
		[EnumTextValue("Wholesaler_ProductID")]
		[ColumnEnum("Wholesaler_ProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Wholesaler_ProductId = 11,
		/// <summary>
		/// ProductRateId : 
		/// </summary>
		[EnumTextValue("ProductRateID")]
		[ColumnEnum("ProductRateID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ProductRateId = 12,
		/// <summary>
		/// Quantity : 
		/// </summary>
		[EnumTextValue("Quantity")]
		[ColumnEnum("Quantity", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Quantity = 13,
		/// <summary>
		/// SellRate : 
		/// </summary>
		[EnumTextValue("SellRate")]
		[ColumnEnum("SellRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		SellRate = 14,
		/// <summary>
		/// BuyRate : Used to track WS costs
		/// </summary>
		[EnumTextValue("BuyRate")]
		[ColumnEnum("BuyRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BuyRate = 15,
		/// <summary>
		/// WsTransactionAmount : Used to track WS costs
		/// </summary>
		[EnumTextValue("WSTransactionAmount")]
		[ColumnEnum("WSTransactionAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WsTransactionAmount = 16,
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		[EnumTextValue("ModifiedBy")]
		[ColumnEnum("ModifiedBy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		ModifiedBy = 17,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 18,
		/// <summary>
		/// PostedToCustTrans : 
		/// </summary>
		[EnumTextValue("PostedToCustTrans")]
		[ColumnEnum("PostedToCustTrans", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		PostedToCustTrans = 19,
		/// <summary>
		/// PostedToCustTransDate : 
		/// </summary>
		[EnumTextValue("PostedToCustTransDate")]
		[ColumnEnum("PostedToCustTransDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		PostedToCustTransDate = 20,
		/// <summary>
		/// ImportType : 
		/// </summary>
		[EnumTextValue("ImportType")]
		[ColumnEnum("ImportType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ImportType = 21,
		/// <summary>
		/// ErrorCodesId : 
		/// </summary>
		[EnumTextValue("ErrorCodesID")]
		[ColumnEnum("ErrorCodesID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ErrorCodesId = 22,
		/// <summary>
		/// ReferenceNumber : Optional: Used to store reference numbers that are meanful to customers or external systems or could be used to link transaction to a Call based on this. eg. Law Firms ref numbers, Check Numbers, etc.
		/// </summary>
		[EnumTextValue("ReferenceNumber")]
		[ColumnEnum("ReferenceNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ReferenceNumber = 23,
		/// <summary>
		/// UniqueConferenceId : Optional: Used to link the transaction to a specific conference.
		/// </summary>
		[EnumTextValue("UniqueConferenceID")]
		[ColumnEnum("UniqueConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		UniqueConferenceId = 24,
		/// <summary>
		/// LocalTaxRate : 
		/// </summary>
		[EnumTextValue("LocalTaxRate")]
		[ColumnEnum("LocalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LocalTaxRate = 25,
		/// <summary>
		/// FederalTaxRate : 
		/// </summary>
		[EnumTextValue("FederalTaxRate")]
		[ColumnEnum("FederalTaxRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FederalTaxRate = 26,
		/// <summary>
		/// LocalTaxAmount : Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		[EnumTextValue("LocalTaxAmount")]
		[ColumnEnum("LocalTaxAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LocalTaxAmount = 27,
		/// <summary>
		/// FederalTaxAmount : Used to store the taxes for the given transaction. It could be zero since some services or customers are tax exempt.
		/// </summary>
		[EnumTextValue("FederalTaxAmount")]
		[ColumnEnum("FederalTaxAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FederalTaxAmount = 28,
		/// <summary>
		/// ElapsedTimeSeconds : Used to store the number of seconds for Conferencing Services when posted to Customer Transactions. This makes it easier for the Invoices to report the number of number of minutes used for the given items eg. teleconferencing, web, LD etc.
		/// </summary>
		[EnumTextValue("ElapsedTimeSeconds")]
		[ColumnEnum("ElapsedTimeSeconds", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ElapsedTimeSeconds = 29
	}//End enum

	#endregion CustomerTransactionImportColumn Enum

} // end namespace
