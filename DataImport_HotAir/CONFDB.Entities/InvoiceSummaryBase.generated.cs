
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file InvoiceSummary.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'InvoiceSummary' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class InvoiceSummaryBase : EntityBase, CONFDB.Entities.IInvoiceSummary, IEntityId<InvoiceSummaryKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private InvoiceSummaryEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private InvoiceSummaryEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private InvoiceSummaryEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<InvoiceSummary> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event InvoiceSummaryEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event InvoiceSummaryEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="InvoiceSummaryBase"/> instance.
		///</summary>
		public InvoiceSummaryBase()
		{
			this.entityData = new InvoiceSummaryEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="InvoiceSummaryBase"/> instance.
		///</summary>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		///<param name="_customerId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_invoiceNumber"></param>
		///<param name="_amountOfLastBill"></param>
		///<param name="_payment1"></param>
		///<param name="_totalCredits">All misc. credits except Free Conferencing Credits.</param>
		///<param name="_totalLatePaymentCharges"></param>
		///<param name="_balForward">BalForward is the subtotal of AmountOfLastBill - (sum payments dec bal) - (total credits dec bal) + (TotalLatePayments inc bal)</param>
		///<param name="_productCharges"></param>
		///<param name="_miscCharges"></param>
		///<param name="_localTaxAmount"></param>
		///<param name="_federalTaxAmount"></param>
		///<param name="_totalCurrent"></param>
		///<param name="_balanceForward"></param>
		///<param name="_invoiceDate"></param>
		///<param name="_dueDate"></param>
		///<param name="_currencyId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_totalFreeCredits"></param>
		///<param name="_wholesaler_ProductId">The Wholesalers Product offering/service which had the Free Conferencing Credit. i.e. Audio, web</param>
		///<param name="_bpayCustomerRefNumber">Stores the customers unique BPay Customer reference number.</param>
		public InvoiceSummaryBase(System.DateTime _startDate, System.DateTime _endDate, 
			System.Int32 _customerId, System.String _priCustomerNumber, System.String _invoiceNumber, 
			System.Decimal? _amountOfLastBill, System.Decimal? _payment1, System.Decimal? _totalCredits, 
			System.Decimal? _totalLatePaymentCharges, System.Decimal? _balForward, System.Decimal? _productCharges, 
			System.Decimal? _miscCharges, System.Decimal? _localTaxAmount, System.Decimal? _federalTaxAmount, 
			System.Decimal? _totalCurrent, System.Decimal? _balanceForward, System.DateTime _invoiceDate, 
			System.DateTime _dueDate, System.String _currencyId, System.String _wholesalerId, 
			System.Decimal? _totalFreeCredits, System.Int32? _wholesaler_ProductId, System.String _bpayCustomerRefNumber)
		{
			this.entityData = new InvoiceSummaryEntityData();
			this.backupData = null;

			this.StartDate = _startDate;
			this.EndDate = _endDate;
			this.CustomerId = _customerId;
			this.PriCustomerNumber = _priCustomerNumber;
			this.InvoiceNumber = _invoiceNumber;
			this.AmountOfLastBill = _amountOfLastBill;
			this.Payment1 = _payment1;
			this.TotalCredits = _totalCredits;
			this.TotalLatePaymentCharges = _totalLatePaymentCharges;
			this.BalForward = _balForward;
			this.ProductCharges = _productCharges;
			this.MiscCharges = _miscCharges;
			this.LocalTaxAmount = _localTaxAmount;
			this.FederalTaxAmount = _federalTaxAmount;
			this.TotalCurrent = _totalCurrent;
			this.BalanceForward = _balanceForward;
			this.InvoiceDate = _invoiceDate;
			this.DueDate = _dueDate;
			this.CurrencyId = _currencyId;
			this.WholesalerId = _wholesalerId;
			this.TotalFreeCredits = _totalFreeCredits;
			this.Wholesaler_ProductId = _wholesaler_ProductId;
			this.BpayCustomerRefNumber = _bpayCustomerRefNumber;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="InvoiceSummary"/> instance.
		///</summary>
		///<param name="_startDate"></param>
		///<param name="_endDate"></param>
		///<param name="_customerId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_invoiceNumber"></param>
		///<param name="_amountOfLastBill"></param>
		///<param name="_payment1"></param>
		///<param name="_totalCredits">All misc. credits except Free Conferencing Credits.</param>
		///<param name="_totalLatePaymentCharges"></param>
		///<param name="_balForward">BalForward is the subtotal of AmountOfLastBill - (sum payments dec bal) - (total credits dec bal) + (TotalLatePayments inc bal)</param>
		///<param name="_productCharges"></param>
		///<param name="_miscCharges"></param>
		///<param name="_localTaxAmount"></param>
		///<param name="_federalTaxAmount"></param>
		///<param name="_totalCurrent"></param>
		///<param name="_balanceForward"></param>
		///<param name="_invoiceDate"></param>
		///<param name="_dueDate"></param>
		///<param name="_currencyId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_totalFreeCredits"></param>
		///<param name="_wholesaler_ProductId">The Wholesalers Product offering/service which had the Free Conferencing Credit. i.e. Audio, web</param>
		///<param name="_bpayCustomerRefNumber">Stores the customers unique BPay Customer reference number.</param>
		public static InvoiceSummary CreateInvoiceSummary(System.DateTime _startDate, System.DateTime _endDate, 
			System.Int32 _customerId, System.String _priCustomerNumber, System.String _invoiceNumber, 
			System.Decimal? _amountOfLastBill, System.Decimal? _payment1, System.Decimal? _totalCredits, 
			System.Decimal? _totalLatePaymentCharges, System.Decimal? _balForward, System.Decimal? _productCharges, 
			System.Decimal? _miscCharges, System.Decimal? _localTaxAmount, System.Decimal? _federalTaxAmount, 
			System.Decimal? _totalCurrent, System.Decimal? _balanceForward, System.DateTime _invoiceDate, 
			System.DateTime _dueDate, System.String _currencyId, System.String _wholesalerId, 
			System.Decimal? _totalFreeCredits, System.Int32? _wholesaler_ProductId, System.String _bpayCustomerRefNumber)
		{
			InvoiceSummary newInvoiceSummary = new InvoiceSummary();
			newInvoiceSummary.StartDate = _startDate;
			newInvoiceSummary.EndDate = _endDate;
			newInvoiceSummary.CustomerId = _customerId;
			newInvoiceSummary.PriCustomerNumber = _priCustomerNumber;
			newInvoiceSummary.InvoiceNumber = _invoiceNumber;
			newInvoiceSummary.AmountOfLastBill = _amountOfLastBill;
			newInvoiceSummary.Payment1 = _payment1;
			newInvoiceSummary.TotalCredits = _totalCredits;
			newInvoiceSummary.TotalLatePaymentCharges = _totalLatePaymentCharges;
			newInvoiceSummary.BalForward = _balForward;
			newInvoiceSummary.ProductCharges = _productCharges;
			newInvoiceSummary.MiscCharges = _miscCharges;
			newInvoiceSummary.LocalTaxAmount = _localTaxAmount;
			newInvoiceSummary.FederalTaxAmount = _federalTaxAmount;
			newInvoiceSummary.TotalCurrent = _totalCurrent;
			newInvoiceSummary.BalanceForward = _balanceForward;
			newInvoiceSummary.InvoiceDate = _invoiceDate;
			newInvoiceSummary.DueDate = _dueDate;
			newInvoiceSummary.CurrencyId = _currencyId;
			newInvoiceSummary.WholesalerId = _wholesalerId;
			newInvoiceSummary.TotalFreeCredits = _totalFreeCredits;
			newInvoiceSummary.Wholesaler_ProductId = _wholesaler_ProductId;
			newInvoiceSummary.BpayCustomerRefNumber = _bpayCustomerRefNumber;
			return newInvoiceSummary;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StartDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime StartDate
		{
			get
			{
				return this.entityData.StartDate; 
			}
			
			set
			{
				if (this.entityData.StartDate == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.StartDate, this.entityData.StartDate);
				this.entityData.StartDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.StartDate, this.entityData.StartDate);
				OnPropertyChanged("StartDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EndDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime EndDate
		{
			get
			{
				return this.entityData.EndDate; 
			}
			
			set
			{
				if (this.entityData.EndDate == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.EndDate, this.entityData.EndDate);
				this.entityData.EndDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.EndDate, this.entityData.EndDate);
				OnPropertyChanged("EndDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this.entityData.PriCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.PriCustomerNumber == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				this.entityData.PriCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvoiceNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 30)]
		public virtual System.String InvoiceNumber
		{
			get
			{
				return this.entityData.InvoiceNumber; 
			}
			
			set
			{
				if (this.entityData.InvoiceNumber == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.InvoiceNumber, this.entityData.InvoiceNumber);
				this.entityData.InvoiceNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.InvoiceNumber, this.entityData.InvoiceNumber);
				OnPropertyChanged("InvoiceNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AmountOfLastBill property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAmountOfLastBillNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AmountOfLastBill
		{
			get
			{
				return this.entityData.AmountOfLastBill; 
			}
			
			set
			{
				if (this.entityData.AmountOfLastBill == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.AmountOfLastBill, this.entityData.AmountOfLastBill);
				this.entityData.AmountOfLastBill = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.AmountOfLastBill, this.entityData.AmountOfLastBill);
				OnPropertyChanged("AmountOfLastBill");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Payment1 property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsPayment1Null() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? Payment1
		{
			get
			{
				return this.entityData.Payment1; 
			}
			
			set
			{
				if (this.entityData.Payment1 == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.Payment1, this.entityData.Payment1);
				this.entityData.Payment1 = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.Payment1, this.entityData.Payment1);
				OnPropertyChanged("Payment1");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalCredits property. 
		///		All misc. credits except Free Conferencing Credits.
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalCreditsNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("All misc. credits except Free Conferencing Credits."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalCredits
		{
			get
			{
				return this.entityData.TotalCredits; 
			}
			
			set
			{
				if (this.entityData.TotalCredits == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.TotalCredits, this.entityData.TotalCredits);
				this.entityData.TotalCredits = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.TotalCredits, this.entityData.TotalCredits);
				OnPropertyChanged("TotalCredits");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalLatePaymentCharges property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalLatePaymentChargesNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalLatePaymentCharges
		{
			get
			{
				return this.entityData.TotalLatePaymentCharges; 
			}
			
			set
			{
				if (this.entityData.TotalLatePaymentCharges == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.TotalLatePaymentCharges, this.entityData.TotalLatePaymentCharges);
				this.entityData.TotalLatePaymentCharges = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.TotalLatePaymentCharges, this.entityData.TotalLatePaymentCharges);
				OnPropertyChanged("TotalLatePaymentCharges");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BalForward property. 
		///		BalForward is the subtotal of AmountOfLastBill - (sum payments dec bal) - (total credits dec bal) + (TotalLatePayments inc bal)
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBalForwardNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("BalForward is the subtotal of AmountOfLastBill - (sum payments dec bal) - (total credits dec bal) + (TotalLatePayments inc bal)"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BalForward
		{
			get
			{
				return this.entityData.BalForward; 
			}
			
			set
			{
				if (this.entityData.BalForward == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.BalForward, this.entityData.BalForward);
				this.entityData.BalForward = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.BalForward, this.entityData.BalForward);
				OnPropertyChanged("BalForward");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductCharges property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsProductChargesNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? ProductCharges
		{
			get
			{
				return this.entityData.ProductCharges; 
			}
			
			set
			{
				if (this.entityData.ProductCharges == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.ProductCharges, this.entityData.ProductCharges);
				this.entityData.ProductCharges = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.ProductCharges, this.entityData.ProductCharges);
				OnPropertyChanged("ProductCharges");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MiscCharges property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMiscChargesNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MiscCharges
		{
			get
			{
				return this.entityData.MiscCharges; 
			}
			
			set
			{
				if (this.entityData.MiscCharges == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.MiscCharges, this.entityData.MiscCharges);
				this.entityData.MiscCharges = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.MiscCharges, this.entityData.MiscCharges);
				OnPropertyChanged("MiscCharges");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalTaxAmount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLocalTaxAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LocalTaxAmount
		{
			get
			{
				return this.entityData.LocalTaxAmount; 
			}
			
			set
			{
				if (this.entityData.LocalTaxAmount == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.LocalTaxAmount, this.entityData.LocalTaxAmount);
				this.entityData.LocalTaxAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.LocalTaxAmount, this.entityData.LocalTaxAmount);
				OnPropertyChanged("LocalTaxAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FederalTaxAmount property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFederalTaxAmountNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FederalTaxAmount
		{
			get
			{
				return this.entityData.FederalTaxAmount; 
			}
			
			set
			{
				if (this.entityData.FederalTaxAmount == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.FederalTaxAmount, this.entityData.FederalTaxAmount);
				this.entityData.FederalTaxAmount = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.FederalTaxAmount, this.entityData.FederalTaxAmount);
				OnPropertyChanged("FederalTaxAmount");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalCurrent property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalCurrentNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalCurrent
		{
			get
			{
				return this.entityData.TotalCurrent; 
			}
			
			set
			{
				if (this.entityData.TotalCurrent == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.TotalCurrent, this.entityData.TotalCurrent);
				this.entityData.TotalCurrent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.TotalCurrent, this.entityData.TotalCurrent);
				OnPropertyChanged("TotalCurrent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BalanceForward property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsBalanceForwardNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? BalanceForward
		{
			get
			{
				return this.entityData.BalanceForward; 
			}
			
			set
			{
				if (this.entityData.BalanceForward == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.BalanceForward, this.entityData.BalanceForward);
				this.entityData.BalanceForward = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.BalanceForward, this.entityData.BalanceForward);
				OnPropertyChanged("BalanceForward");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the InvoiceDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime InvoiceDate
		{
			get
			{
				return this.entityData.InvoiceDate; 
			}
			
			set
			{
				if (this.entityData.InvoiceDate == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.InvoiceDate, this.entityData.InvoiceDate);
				this.entityData.InvoiceDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.InvoiceDate, this.entityData.InvoiceDate);
				OnPropertyChanged("InvoiceDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DueDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime DueDate
		{
			get
			{
				return this.entityData.DueDate; 
			}
			
			set
			{
				if (this.entityData.DueDate == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.DueDate, this.entityData.DueDate);
				this.entityData.DueDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.DueDate, this.entityData.DueDate);
				OnPropertyChanged("DueDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CurrencyId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String CurrencyId
		{
			get
			{
				return this.entityData.CurrencyId; 
			}
			
			set
			{
				if (this.entityData.CurrencyId == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.CurrencyId, this.entityData.CurrencyId);
				this.entityData.CurrencyId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.CurrencyId, this.entityData.CurrencyId);
				OnPropertyChanged("CurrencyId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TotalFreeCredits property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsTotalFreeCreditsNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? TotalFreeCredits
		{
			get
			{
				return this.entityData.TotalFreeCredits; 
			}
			
			set
			{
				if (this.entityData.TotalFreeCredits == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.TotalFreeCredits, this.entityData.TotalFreeCredits);
				this.entityData.TotalFreeCredits = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.TotalFreeCredits, this.entityData.TotalFreeCredits);
				OnPropertyChanged("TotalFreeCredits");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Wholesaler_ProductId property. 
		///		The Wholesalers Product offering/service which had the Free Conferencing Credit. i.e. Audio, web
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsWholesaler_ProductIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute("The Wholesalers Product offering/service which had the Free Conferencing Credit. i.e. Audio, web"), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Wholesaler_ProductId
		{
			get
			{
				return this.entityData.Wholesaler_ProductId; 
			}
			
			set
			{
				if (this.entityData.Wholesaler_ProductId == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.Wholesaler_ProductId, this.entityData.Wholesaler_ProductId);
				this.entityData.Wholesaler_ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.Wholesaler_ProductId, this.entityData.Wholesaler_ProductId);
				OnPropertyChanged("Wholesaler_ProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BpayCustomerRefNumber property. 
		///		Stores the customers unique BPay Customer reference number.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Stores the customers unique BPay Customer reference number."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 30)]
		public virtual System.String BpayCustomerRefNumber
		{
			get
			{
				return this.entityData.BpayCustomerRefNumber; 
			}
			
			set
			{
				if (this.entityData.BpayCustomerRefNumber == value)
					return;
					
				OnColumnChanging(InvoiceSummaryColumn.BpayCustomerRefNumber, this.entityData.BpayCustomerRefNumber);
				this.entityData.BpayCustomerRefNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(InvoiceSummaryColumn.BpayCustomerRefNumber, this.entityData.BpayCustomerRefNumber);
				OnPropertyChanged("BpayCustomerRefNumber");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customer CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PriCustomerNumber", "Pri Customer Number"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PriCustomerNumber", "Pri Customer Number", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("InvoiceNumber", "Invoice Number"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("InvoiceNumber", "Invoice Number", 30));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("CurrencyId", "Currency Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CurrencyId", "Currency Id", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BpayCustomerRefNumber", "Bpay Customer Ref Number", 30));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "InvoiceSummary"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "StartDate", "EndDate", "CustomerID", "PriCustomerNumber", "InvoiceNumber", "AmountOfLastBill", "Payment1", "TotalCredits", "TotalLatePaymentCharges", "BalForward", "ProductCharges", "MiscCharges", "LocalTaxAmount", "FederalTaxAmount", "TotalCurrent", "BalanceForward", "InvoiceDate", "DueDate", "CurrencyID", "WholesalerID", "TotalFreeCredits", "Wholesaler_ProductID", "BPayCustomerRefNumber"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as InvoiceSummaryEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (InvoiceSummary) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<InvoiceSummary>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as InvoiceSummary);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed InvoiceSummary Entity 
		///</summary>
		public virtual InvoiceSummary Copy()
		{
			//shallow copy entity
			InvoiceSummary copy = new InvoiceSummary();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.StartDate = this.StartDate;
			copy.EndDate = this.EndDate;
			copy.CustomerId = this.CustomerId;
			copy.PriCustomerNumber = this.PriCustomerNumber;
			copy.InvoiceNumber = this.InvoiceNumber;
			copy.AmountOfLastBill = this.AmountOfLastBill;
			copy.Payment1 = this.Payment1;
			copy.TotalCredits = this.TotalCredits;
			copy.TotalLatePaymentCharges = this.TotalLatePaymentCharges;
			copy.BalForward = this.BalForward;
			copy.ProductCharges = this.ProductCharges;
			copy.MiscCharges = this.MiscCharges;
			copy.LocalTaxAmount = this.LocalTaxAmount;
			copy.FederalTaxAmount = this.FederalTaxAmount;
			copy.TotalCurrent = this.TotalCurrent;
			copy.BalanceForward = this.BalanceForward;
			copy.InvoiceDate = this.InvoiceDate;
			copy.DueDate = this.DueDate;
			copy.CurrencyId = this.CurrencyId;
			copy.WholesalerId = this.WholesalerId;
			copy.TotalFreeCredits = this.TotalFreeCredits;
			copy.Wholesaler_ProductId = this.Wholesaler_ProductId;
			copy.BpayCustomerRefNumber = this.BpayCustomerRefNumber;
			
			copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed InvoiceSummary Entity which is a deep copy of the current entity.
		///</summary>
		public virtual InvoiceSummary DeepCopy()
		{
			return EntityHelper.Clone<InvoiceSummary>(this as InvoiceSummary);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as InvoiceSummaryEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as InvoiceSummaryEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(InvoiceSummaryColumn column)
		{
			switch(column)
			{
					case InvoiceSummaryColumn.Id:
					return entityData.Id != _originalData.Id;
					case InvoiceSummaryColumn.StartDate:
					return entityData.StartDate != _originalData.StartDate;
					case InvoiceSummaryColumn.EndDate:
					return entityData.EndDate != _originalData.EndDate;
					case InvoiceSummaryColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case InvoiceSummaryColumn.PriCustomerNumber:
					return entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
					case InvoiceSummaryColumn.InvoiceNumber:
					return entityData.InvoiceNumber != _originalData.InvoiceNumber;
					case InvoiceSummaryColumn.AmountOfLastBill:
					return entityData.AmountOfLastBill != _originalData.AmountOfLastBill;
					case InvoiceSummaryColumn.Payment1:
					return entityData.Payment1 != _originalData.Payment1;
					case InvoiceSummaryColumn.TotalCredits:
					return entityData.TotalCredits != _originalData.TotalCredits;
					case InvoiceSummaryColumn.TotalLatePaymentCharges:
					return entityData.TotalLatePaymentCharges != _originalData.TotalLatePaymentCharges;
					case InvoiceSummaryColumn.BalForward:
					return entityData.BalForward != _originalData.BalForward;
					case InvoiceSummaryColumn.ProductCharges:
					return entityData.ProductCharges != _originalData.ProductCharges;
					case InvoiceSummaryColumn.MiscCharges:
					return entityData.MiscCharges != _originalData.MiscCharges;
					case InvoiceSummaryColumn.LocalTaxAmount:
					return entityData.LocalTaxAmount != _originalData.LocalTaxAmount;
					case InvoiceSummaryColumn.FederalTaxAmount:
					return entityData.FederalTaxAmount != _originalData.FederalTaxAmount;
					case InvoiceSummaryColumn.TotalCurrent:
					return entityData.TotalCurrent != _originalData.TotalCurrent;
					case InvoiceSummaryColumn.BalanceForward:
					return entityData.BalanceForward != _originalData.BalanceForward;
					case InvoiceSummaryColumn.InvoiceDate:
					return entityData.InvoiceDate != _originalData.InvoiceDate;
					case InvoiceSummaryColumn.DueDate:
					return entityData.DueDate != _originalData.DueDate;
					case InvoiceSummaryColumn.CurrencyId:
					return entityData.CurrencyId != _originalData.CurrencyId;
					case InvoiceSummaryColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case InvoiceSummaryColumn.TotalFreeCredits:
					return entityData.TotalFreeCredits != _originalData.TotalFreeCredits;
					case InvoiceSummaryColumn.Wholesaler_ProductId:
					return entityData.Wholesaler_ProductId != _originalData.Wholesaler_ProductId;
					case InvoiceSummaryColumn.BpayCustomerRefNumber:
					return entityData.BpayCustomerRefNumber != _originalData.BpayCustomerRefNumber;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.StartDate != _originalData.StartDate;
			result = result || entityData.EndDate != _originalData.EndDate;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
			result = result || entityData.InvoiceNumber != _originalData.InvoiceNumber;
			result = result || entityData.AmountOfLastBill != _originalData.AmountOfLastBill;
			result = result || entityData.Payment1 != _originalData.Payment1;
			result = result || entityData.TotalCredits != _originalData.TotalCredits;
			result = result || entityData.TotalLatePaymentCharges != _originalData.TotalLatePaymentCharges;
			result = result || entityData.BalForward != _originalData.BalForward;
			result = result || entityData.ProductCharges != _originalData.ProductCharges;
			result = result || entityData.MiscCharges != _originalData.MiscCharges;
			result = result || entityData.LocalTaxAmount != _originalData.LocalTaxAmount;
			result = result || entityData.FederalTaxAmount != _originalData.FederalTaxAmount;
			result = result || entityData.TotalCurrent != _originalData.TotalCurrent;
			result = result || entityData.BalanceForward != _originalData.BalanceForward;
			result = result || entityData.InvoiceDate != _originalData.InvoiceDate;
			result = result || entityData.DueDate != _originalData.DueDate;
			result = result || entityData.CurrencyId != _originalData.CurrencyId;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.TotalFreeCredits != _originalData.TotalFreeCredits;
			result = result || entityData.Wholesaler_ProductId != _originalData.Wholesaler_ProductId;
			result = result || entityData.BpayCustomerRefNumber != _originalData.BpayCustomerRefNumber;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="InvoiceSummaryBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is InvoiceSummaryBase)
				return Equals(this, (InvoiceSummaryBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="InvoiceSummaryBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.StartDate.GetHashCode() ^ 
					this.EndDate.GetHashCode() ^ 
					this.CustomerId.GetHashCode() ^ 
					this.PriCustomerNumber.GetHashCode() ^ 
					this.InvoiceNumber.GetHashCode() ^ 
					((this.AmountOfLastBill == null) ? string.Empty : this.AmountOfLastBill.ToString()).GetHashCode() ^ 
					((this.Payment1 == null) ? string.Empty : this.Payment1.ToString()).GetHashCode() ^ 
					((this.TotalCredits == null) ? string.Empty : this.TotalCredits.ToString()).GetHashCode() ^ 
					((this.TotalLatePaymentCharges == null) ? string.Empty : this.TotalLatePaymentCharges.ToString()).GetHashCode() ^ 
					((this.BalForward == null) ? string.Empty : this.BalForward.ToString()).GetHashCode() ^ 
					((this.ProductCharges == null) ? string.Empty : this.ProductCharges.ToString()).GetHashCode() ^ 
					((this.MiscCharges == null) ? string.Empty : this.MiscCharges.ToString()).GetHashCode() ^ 
					((this.LocalTaxAmount == null) ? string.Empty : this.LocalTaxAmount.ToString()).GetHashCode() ^ 
					((this.FederalTaxAmount == null) ? string.Empty : this.FederalTaxAmount.ToString()).GetHashCode() ^ 
					((this.TotalCurrent == null) ? string.Empty : this.TotalCurrent.ToString()).GetHashCode() ^ 
					((this.BalanceForward == null) ? string.Empty : this.BalanceForward.ToString()).GetHashCode() ^ 
					this.InvoiceDate.GetHashCode() ^ 
					this.DueDate.GetHashCode() ^ 
					this.CurrencyId.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					((this.TotalFreeCredits == null) ? string.Empty : this.TotalFreeCredits.ToString()).GetHashCode() ^ 
					((this.Wholesaler_ProductId == null) ? string.Empty : this.Wholesaler_ProductId.ToString()).GetHashCode() ^ 
					((this.BpayCustomerRefNumber == null) ? string.Empty : this.BpayCustomerRefNumber.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="InvoiceSummaryBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(InvoiceSummaryBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="InvoiceSummaryBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="InvoiceSummaryBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="InvoiceSummaryBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(InvoiceSummaryBase Object1, InvoiceSummaryBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.StartDate != Object2.StartDate)
				equal = false;
			if (Object1.EndDate != Object2.EndDate)
				equal = false;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
				equal = false;
			if (Object1.InvoiceNumber != Object2.InvoiceNumber)
				equal = false;
			if ( Object1.AmountOfLastBill != null && Object2.AmountOfLastBill != null )
			{
				if (Object1.AmountOfLastBill != Object2.AmountOfLastBill)
					equal = false;
			}
			else if (Object1.AmountOfLastBill == null ^ Object2.AmountOfLastBill == null )
			{
				equal = false;
			}
			if ( Object1.Payment1 != null && Object2.Payment1 != null )
			{
				if (Object1.Payment1 != Object2.Payment1)
					equal = false;
			}
			else if (Object1.Payment1 == null ^ Object2.Payment1 == null )
			{
				equal = false;
			}
			if ( Object1.TotalCredits != null && Object2.TotalCredits != null )
			{
				if (Object1.TotalCredits != Object2.TotalCredits)
					equal = false;
			}
			else if (Object1.TotalCredits == null ^ Object2.TotalCredits == null )
			{
				equal = false;
			}
			if ( Object1.TotalLatePaymentCharges != null && Object2.TotalLatePaymentCharges != null )
			{
				if (Object1.TotalLatePaymentCharges != Object2.TotalLatePaymentCharges)
					equal = false;
			}
			else if (Object1.TotalLatePaymentCharges == null ^ Object2.TotalLatePaymentCharges == null )
			{
				equal = false;
			}
			if ( Object1.BalForward != null && Object2.BalForward != null )
			{
				if (Object1.BalForward != Object2.BalForward)
					equal = false;
			}
			else if (Object1.BalForward == null ^ Object2.BalForward == null )
			{
				equal = false;
			}
			if ( Object1.ProductCharges != null && Object2.ProductCharges != null )
			{
				if (Object1.ProductCharges != Object2.ProductCharges)
					equal = false;
			}
			else if (Object1.ProductCharges == null ^ Object2.ProductCharges == null )
			{
				equal = false;
			}
			if ( Object1.MiscCharges != null && Object2.MiscCharges != null )
			{
				if (Object1.MiscCharges != Object2.MiscCharges)
					equal = false;
			}
			else if (Object1.MiscCharges == null ^ Object2.MiscCharges == null )
			{
				equal = false;
			}
			if ( Object1.LocalTaxAmount != null && Object2.LocalTaxAmount != null )
			{
				if (Object1.LocalTaxAmount != Object2.LocalTaxAmount)
					equal = false;
			}
			else if (Object1.LocalTaxAmount == null ^ Object2.LocalTaxAmount == null )
			{
				equal = false;
			}
			if ( Object1.FederalTaxAmount != null && Object2.FederalTaxAmount != null )
			{
				if (Object1.FederalTaxAmount != Object2.FederalTaxAmount)
					equal = false;
			}
			else if (Object1.FederalTaxAmount == null ^ Object2.FederalTaxAmount == null )
			{
				equal = false;
			}
			if ( Object1.TotalCurrent != null && Object2.TotalCurrent != null )
			{
				if (Object1.TotalCurrent != Object2.TotalCurrent)
					equal = false;
			}
			else if (Object1.TotalCurrent == null ^ Object2.TotalCurrent == null )
			{
				equal = false;
			}
			if ( Object1.BalanceForward != null && Object2.BalanceForward != null )
			{
				if (Object1.BalanceForward != Object2.BalanceForward)
					equal = false;
			}
			else if (Object1.BalanceForward == null ^ Object2.BalanceForward == null )
			{
				equal = false;
			}
			if (Object1.InvoiceDate != Object2.InvoiceDate)
				equal = false;
			if (Object1.DueDate != Object2.DueDate)
				equal = false;
			if (Object1.CurrencyId != Object2.CurrencyId)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if ( Object1.TotalFreeCredits != null && Object2.TotalFreeCredits != null )
			{
				if (Object1.TotalFreeCredits != Object2.TotalFreeCredits)
					equal = false;
			}
			else if (Object1.TotalFreeCredits == null ^ Object2.TotalFreeCredits == null )
			{
				equal = false;
			}
			if ( Object1.Wholesaler_ProductId != null && Object2.Wholesaler_ProductId != null )
			{
				if (Object1.Wholesaler_ProductId != Object2.Wholesaler_ProductId)
					equal = false;
			}
			else if (Object1.Wholesaler_ProductId == null ^ Object2.Wholesaler_ProductId == null )
			{
				equal = false;
			}
			if ( Object1.BpayCustomerRefNumber != null && Object2.BpayCustomerRefNumber != null )
			{
				if (Object1.BpayCustomerRefNumber != Object2.BpayCustomerRefNumber)
					equal = false;
			}
			else if (Object1.BpayCustomerRefNumber == null ^ Object2.BpayCustomerRefNumber == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((InvoiceSummaryBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static InvoiceSummaryComparer GetComparer()
        {
            return new InvoiceSummaryComparer();
        }
        */

        // Comparer delegates back to InvoiceSummary
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(InvoiceSummary rhs, InvoiceSummaryColumn which)
        {
            switch (which)
            {
            	
            	
            	case InvoiceSummaryColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.StartDate:
            		return this.StartDate.CompareTo(rhs.StartDate);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.EndDate:
            		return this.EndDate.CompareTo(rhs.EndDate);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.PriCustomerNumber:
            		return this.PriCustomerNumber.CompareTo(rhs.PriCustomerNumber);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.InvoiceNumber:
            		return this.InvoiceNumber.CompareTo(rhs.InvoiceNumber);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.AmountOfLastBill:
            		return this.AmountOfLastBill.Value.CompareTo(rhs.AmountOfLastBill.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.Payment1:
            		return this.Payment1.Value.CompareTo(rhs.Payment1.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.TotalCredits:
            		return this.TotalCredits.Value.CompareTo(rhs.TotalCredits.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.TotalLatePaymentCharges:
            		return this.TotalLatePaymentCharges.Value.CompareTo(rhs.TotalLatePaymentCharges.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.BalForward:
            		return this.BalForward.Value.CompareTo(rhs.BalForward.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.ProductCharges:
            		return this.ProductCharges.Value.CompareTo(rhs.ProductCharges.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.MiscCharges:
            		return this.MiscCharges.Value.CompareTo(rhs.MiscCharges.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.LocalTaxAmount:
            		return this.LocalTaxAmount.Value.CompareTo(rhs.LocalTaxAmount.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.FederalTaxAmount:
            		return this.FederalTaxAmount.Value.CompareTo(rhs.FederalTaxAmount.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.TotalCurrent:
            		return this.TotalCurrent.Value.CompareTo(rhs.TotalCurrent.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.BalanceForward:
            		return this.BalanceForward.Value.CompareTo(rhs.BalanceForward.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.InvoiceDate:
            		return this.InvoiceDate.CompareTo(rhs.InvoiceDate);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.DueDate:
            		return this.DueDate.CompareTo(rhs.DueDate);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.CurrencyId:
            		return this.CurrencyId.CompareTo(rhs.CurrencyId);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.TotalFreeCredits:
            		return this.TotalFreeCredits.Value.CompareTo(rhs.TotalFreeCredits.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.Wholesaler_ProductId:
            		return this.Wholesaler_ProductId.Value.CompareTo(rhs.Wholesaler_ProductId.Value);
            		
            		                 
            	
            	
            	case InvoiceSummaryColumn.BpayCustomerRefNumber:
            		return this.BpayCustomerRefNumber.CompareTo(rhs.BpayCustomerRefNumber);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<InvoiceSummaryKey> Members
		
		// member variable for the EntityId property
		private InvoiceSummaryKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual InvoiceSummaryKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new InvoiceSummaryKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("InvoiceSummary")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{25}{24}- Id: {0}{24}- StartDate: {1}{24}- EndDate: {2}{24}- CustomerId: {3}{24}- PriCustomerNumber: {4}{24}- InvoiceNumber: {5}{24}- AmountOfLastBill: {6}{24}- Payment1: {7}{24}- TotalCredits: {8}{24}- TotalLatePaymentCharges: {9}{24}- BalForward: {10}{24}- ProductCharges: {11}{24}- MiscCharges: {12}{24}- LocalTaxAmount: {13}{24}- FederalTaxAmount: {14}{24}- TotalCurrent: {15}{24}- BalanceForward: {16}{24}- InvoiceDate: {17}{24}- DueDate: {18}{24}- CurrencyId: {19}{24}- WholesalerId: {20}{24}- TotalFreeCredits: {21}{24}- Wholesaler_ProductId: {22}{24}- BpayCustomerRefNumber: {23}{24}", 
				this.Id,
				this.StartDate,
				this.EndDate,
				this.CustomerId,
				this.PriCustomerNumber,
				this.InvoiceNumber,
				(this.AmountOfLastBill == null) ? string.Empty : this.AmountOfLastBill.ToString(),
				(this.Payment1 == null) ? string.Empty : this.Payment1.ToString(),
				(this.TotalCredits == null) ? string.Empty : this.TotalCredits.ToString(),
				(this.TotalLatePaymentCharges == null) ? string.Empty : this.TotalLatePaymentCharges.ToString(),
				(this.BalForward == null) ? string.Empty : this.BalForward.ToString(),
				(this.ProductCharges == null) ? string.Empty : this.ProductCharges.ToString(),
				(this.MiscCharges == null) ? string.Empty : this.MiscCharges.ToString(),
				(this.LocalTaxAmount == null) ? string.Empty : this.LocalTaxAmount.ToString(),
				(this.FederalTaxAmount == null) ? string.Empty : this.FederalTaxAmount.ToString(),
				(this.TotalCurrent == null) ? string.Empty : this.TotalCurrent.ToString(),
				(this.BalanceForward == null) ? string.Empty : this.BalanceForward.ToString(),
				this.InvoiceDate,
				this.DueDate,
				this.CurrencyId,
				this.WholesalerId,
				(this.TotalFreeCredits == null) ? string.Empty : this.TotalFreeCredits.ToString(),
				(this.Wholesaler_ProductId == null) ? string.Empty : this.Wholesaler_ProductId.ToString(),
				(this.BpayCustomerRefNumber == null) ? string.Empty : this.BpayCustomerRefNumber.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'InvoiceSummary' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class InvoiceSummaryEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "InvoiceSummary"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// StartDate : 
		/// </summary>
		public System.DateTime		  StartDate = DateTime.MinValue;
		
		/// <summary>
		/// EndDate : 
		/// </summary>
		public System.DateTime		  EndDate = DateTime.MinValue;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32		  CustomerId = (int)0;
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		public System.String		  PriCustomerNumber = string.Empty;
		
		/// <summary>
		/// InvoiceNumber : 
		/// </summary>
		public System.String		  InvoiceNumber = string.Empty;
		
		/// <summary>
		/// AmountOfLastBill : 
		/// </summary>
		public System.Decimal?		  AmountOfLastBill = null;
		
		/// <summary>
		/// Payment1 : 
		/// </summary>
		public System.Decimal?		  Payment1 = null;
		
		/// <summary>
		/// TotalCredits : All misc. credits except Free Conferencing Credits.
		/// </summary>
		public System.Decimal?		  TotalCredits = null;
		
		/// <summary>
		/// TotalLatePaymentCharges : 
		/// </summary>
		public System.Decimal?		  TotalLatePaymentCharges = null;
		
		/// <summary>
		/// BalForward : BalForward is the subtotal of AmountOfLastBill - (sum payments dec bal) - (total credits dec bal) + (TotalLatePayments inc bal)
		/// </summary>
		public System.Decimal?		  BalForward = null;
		
		/// <summary>
		/// ProductCharges : 
		/// </summary>
		public System.Decimal?		  ProductCharges = null;
		
		/// <summary>
		/// MiscCharges : 
		/// </summary>
		public System.Decimal?		  MiscCharges = null;
		
		/// <summary>
		/// LocalTaxAmount : 
		/// </summary>
		public System.Decimal?		  LocalTaxAmount = null;
		
		/// <summary>
		/// FederalTaxAmount : 
		/// </summary>
		public System.Decimal?		  FederalTaxAmount = null;
		
		/// <summary>
		/// TotalCurrent : 
		/// </summary>
		public System.Decimal?		  TotalCurrent = null;
		
		/// <summary>
		/// BalanceForward : 
		/// </summary>
		public System.Decimal?		  BalanceForward = null;
		
		/// <summary>
		/// InvoiceDate : 
		/// </summary>
		public System.DateTime		  InvoiceDate = DateTime.MinValue;
		
		/// <summary>
		/// DueDate : 
		/// </summary>
		public System.DateTime		  DueDate = DateTime.MinValue;
		
		/// <summary>
		/// CurrencyID : 
		/// </summary>
		public System.String		  CurrencyId = string.Empty;
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// TotalFreeCredits : 
		/// </summary>
		public System.Decimal?		  TotalFreeCredits = null;
		
		/// <summary>
		/// Wholesaler_ProductID : The Wholesalers Product offering/service which had the Free Conferencing Credit. i.e. Audio, web
		/// </summary>
		public System.Int32?		  Wholesaler_ProductId = null;
		
		/// <summary>
		/// BPayCustomerRefNumber : Stores the customers unique BPay Customer reference number.
		/// </summary>
		public System.String		  BpayCustomerRefNumber = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private Customer _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Customer CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			InvoiceSummaryEntityData _tmp = new InvoiceSummaryEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.StartDate = this.StartDate;
			_tmp.EndDate = this.EndDate;
			_tmp.CustomerId = this.CustomerId;
			_tmp.PriCustomerNumber = this.PriCustomerNumber;
			_tmp.InvoiceNumber = this.InvoiceNumber;
			_tmp.AmountOfLastBill = this.AmountOfLastBill;
			_tmp.Payment1 = this.Payment1;
			_tmp.TotalCredits = this.TotalCredits;
			_tmp.TotalLatePaymentCharges = this.TotalLatePaymentCharges;
			_tmp.BalForward = this.BalForward;
			_tmp.ProductCharges = this.ProductCharges;
			_tmp.MiscCharges = this.MiscCharges;
			_tmp.LocalTaxAmount = this.LocalTaxAmount;
			_tmp.FederalTaxAmount = this.FederalTaxAmount;
			_tmp.TotalCurrent = this.TotalCurrent;
			_tmp.BalanceForward = this.BalanceForward;
			_tmp.InvoiceDate = this.InvoiceDate;
			_tmp.DueDate = this.DueDate;
			_tmp.CurrencyId = this.CurrencyId;
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.TotalFreeCredits = this.TotalFreeCredits;
			_tmp.Wholesaler_ProductId = this.Wholesaler_ProductId;
			_tmp.BpayCustomerRefNumber = this.BpayCustomerRefNumber;
			
			#region Source Parent Composite Entities
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="InvoiceSummaryColumn"/> which has raised the event.</param>
		public void OnColumnChanging(InvoiceSummaryColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="InvoiceSummaryColumn"/> which has raised the event.</param>
		public void OnColumnChanged(InvoiceSummaryColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="InvoiceSummaryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(InvoiceSummaryColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				InvoiceSummaryEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new InvoiceSummaryEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="InvoiceSummaryColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(InvoiceSummaryColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				InvoiceSummaryEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new InvoiceSummaryEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region InvoiceSummaryEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="InvoiceSummary"/> object.
	/// </remarks>
	public class InvoiceSummaryEventArgs : System.EventArgs
	{
		private InvoiceSummaryColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the InvoiceSummaryEventArgs class.
		///</summary>
		public InvoiceSummaryEventArgs(InvoiceSummaryColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the InvoiceSummaryEventArgs class.
		///</summary>
		public InvoiceSummaryEventArgs(InvoiceSummaryColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The InvoiceSummaryColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="InvoiceSummaryColumn" />
		public InvoiceSummaryColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all InvoiceSummary related events.
	///</summary>
	public delegate void InvoiceSummaryEventHandler(object sender, InvoiceSummaryEventArgs e);
	
	#region InvoiceSummaryComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class InvoiceSummaryComparer : System.Collections.Generic.IComparer<InvoiceSummary>
	{
		InvoiceSummaryColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:InvoiceSummaryComparer"/> class.
        /// </summary>
		public InvoiceSummaryComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:InvoiceSummaryComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public InvoiceSummaryComparer(InvoiceSummaryColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="InvoiceSummary"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="InvoiceSummary"/> to compare.</param>
        /// <param name="b">The second <c>InvoiceSummary</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(InvoiceSummary a, InvoiceSummary b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(InvoiceSummary entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(InvoiceSummary a, InvoiceSummary b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public InvoiceSummaryColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region InvoiceSummaryKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="InvoiceSummary"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class InvoiceSummaryKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the InvoiceSummaryKey class.
		/// </summary>
		public InvoiceSummaryKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the InvoiceSummaryKey class.
		/// </summary>
		public InvoiceSummaryKey(InvoiceSummaryBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the InvoiceSummaryKey class.
		/// </summary>
		public InvoiceSummaryKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private InvoiceSummaryBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public InvoiceSummaryBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region InvoiceSummaryColumn Enum
	
	/// <summary>
	/// Enumerate the InvoiceSummary columns.
	/// </summary>
	[Serializable]
	public enum InvoiceSummaryColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// StartDate : 
		/// </summary>
		[EnumTextValue("StartDate")]
		[ColumnEnum("StartDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		StartDate = 2,
		/// <summary>
		/// EndDate : 
		/// </summary>
		[EnumTextValue("EndDate")]
		[ColumnEnum("EndDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		EndDate = 3,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerId = 4,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		PriCustomerNumber = 5,
		/// <summary>
		/// InvoiceNumber : 
		/// </summary>
		[EnumTextValue("InvoiceNumber")]
		[ColumnEnum("InvoiceNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 30)]
		InvoiceNumber = 6,
		/// <summary>
		/// AmountOfLastBill : 
		/// </summary>
		[EnumTextValue("AmountOfLastBill")]
		[ColumnEnum("AmountOfLastBill", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AmountOfLastBill = 7,
		/// <summary>
		/// Payment1 : 
		/// </summary>
		[EnumTextValue("Payment1")]
		[ColumnEnum("Payment1", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		Payment1 = 8,
		/// <summary>
		/// TotalCredits : All misc. credits except Free Conferencing Credits.
		/// </summary>
		[EnumTextValue("TotalCredits")]
		[ColumnEnum("TotalCredits", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalCredits = 9,
		/// <summary>
		/// TotalLatePaymentCharges : 
		/// </summary>
		[EnumTextValue("TotalLatePaymentCharges")]
		[ColumnEnum("TotalLatePaymentCharges", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalLatePaymentCharges = 10,
		/// <summary>
		/// BalForward : BalForward is the subtotal of AmountOfLastBill - (sum payments dec bal) - (total credits dec bal) + (TotalLatePayments inc bal)
		/// </summary>
		[EnumTextValue("BalForward")]
		[ColumnEnum("BalForward", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BalForward = 11,
		/// <summary>
		/// ProductCharges : 
		/// </summary>
		[EnumTextValue("ProductCharges")]
		[ColumnEnum("ProductCharges", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		ProductCharges = 12,
		/// <summary>
		/// MiscCharges : 
		/// </summary>
		[EnumTextValue("MiscCharges")]
		[ColumnEnum("MiscCharges", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MiscCharges = 13,
		/// <summary>
		/// LocalTaxAmount : 
		/// </summary>
		[EnumTextValue("LocalTaxAmount")]
		[ColumnEnum("LocalTaxAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LocalTaxAmount = 14,
		/// <summary>
		/// FederalTaxAmount : 
		/// </summary>
		[EnumTextValue("FederalTaxAmount")]
		[ColumnEnum("FederalTaxAmount", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FederalTaxAmount = 15,
		/// <summary>
		/// TotalCurrent : 
		/// </summary>
		[EnumTextValue("TotalCurrent")]
		[ColumnEnum("TotalCurrent", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalCurrent = 16,
		/// <summary>
		/// BalanceForward : 
		/// </summary>
		[EnumTextValue("BalanceForward")]
		[ColumnEnum("BalanceForward", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		BalanceForward = 17,
		/// <summary>
		/// InvoiceDate : 
		/// </summary>
		[EnumTextValue("InvoiceDate")]
		[ColumnEnum("InvoiceDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		InvoiceDate = 18,
		/// <summary>
		/// DueDate : 
		/// </summary>
		[EnumTextValue("DueDate")]
		[ColumnEnum("DueDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		DueDate = 19,
		/// <summary>
		/// CurrencyId : 
		/// </summary>
		[EnumTextValue("CurrencyID")]
		[ColumnEnum("CurrencyID", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, false, 3)]
		CurrencyId = 20,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 21,
		/// <summary>
		/// TotalFreeCredits : 
		/// </summary>
		[EnumTextValue("TotalFreeCredits")]
		[ColumnEnum("TotalFreeCredits", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		TotalFreeCredits = 22,
		/// <summary>
		/// Wholesaler_ProductId : The Wholesalers Product offering/service which had the Free Conferencing Credit. i.e. Audio, web
		/// </summary>
		[EnumTextValue("Wholesaler_ProductID")]
		[ColumnEnum("Wholesaler_ProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Wholesaler_ProductId = 23,
		/// <summary>
		/// BpayCustomerRefNumber : Stores the customers unique BPay Customer reference number.
		/// </summary>
		[EnumTextValue("BPayCustomerRefNumber")]
		[ColumnEnum("BPayCustomerRefNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 30)]
		BpayCustomerRefNumber = 24
	}//End enum

	#endregion InvoiceSummaryColumn Enum

} // end namespace
