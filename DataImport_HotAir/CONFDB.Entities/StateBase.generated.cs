
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file State.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'State' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class StateBase : EntityBase, CONFDB.Entities.IState, IEntityId<StateKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private StateEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private StateEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private StateEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<State> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event StateEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event StateEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="StateBase"/> instance.
		///</summary>
		public StateBase()
		{
			this.entityData = new StateEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="StateBase"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_countryId"></param>
		///<param name="_longName"></param>
		///<param name="_federalTax"></param>
		///<param name="_localTax"></param>
		///<param name="_displayOrder"></param>
		///<param name="_localOnFederalTax">Is local tax charged on top of federal tax.</param>
		public StateBase(System.String _id, System.String _countryId, System.String _longName, 
			System.Decimal? _federalTax, System.Decimal? _localTax, System.Int16? _displayOrder, System.Boolean _localOnFederalTax)
		{
			this.entityData = new StateEntityData();
			this.backupData = null;

			this.Id = _id;
			this.CountryId = _countryId;
			this.LongName = _longName;
			this.FederalTax = _federalTax;
			this.LocalTax = _localTax;
			this.DisplayOrder = _displayOrder;
			this.LocalOnFederalTax = _localOnFederalTax;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="State"/> instance.
		///</summary>
		///<param name="_id"></param>
		///<param name="_countryId"></param>
		///<param name="_longName"></param>
		///<param name="_federalTax"></param>
		///<param name="_localTax"></param>
		///<param name="_displayOrder"></param>
		///<param name="_localOnFederalTax">Is local tax charged on top of federal tax.</param>
		public static State CreateState(System.String _id, System.String _countryId, System.String _longName, 
			System.Decimal? _federalTax, System.Decimal? _localTax, System.Int16? _displayOrder, System.Boolean _localOnFederalTax)
		{
			State newState = new State();
			newState.Id = _id;
			newState.CountryId = _countryId;
			newState.LongName = _longName;
			newState.FederalTax = _federalTax;
			newState.LocalTax = _localTax;
			newState.DisplayOrder = _displayOrder;
			newState.LocalOnFederalTax = _localOnFederalTax;
			return newState;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 3)]
		public virtual System.String Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(StateColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StateColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ID property.</remarks>
		/// <value>This type is varchar</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalId
		{
			get { return this.entityData.OriginalId; }
			set { this.entityData.OriginalId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 3)]
		public virtual System.String CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
					
				OnColumnChanging(StateColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StateColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LongName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String LongName
		{
			get
			{
				return this.entityData.LongName; 
			}
			
			set
			{
				if (this.entityData.LongName == value)
					return;
					
				OnColumnChanging(StateColumn.LongName, this.entityData.LongName);
				this.entityData.LongName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StateColumn.LongName, this.entityData.LongName);
				OnPropertyChanged("LongName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the FederalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsFederalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? FederalTax
		{
			get
			{
				return this.entityData.FederalTax; 
			}
			
			set
			{
				if (this.entityData.FederalTax == value)
					return;
					
				OnColumnChanging(StateColumn.FederalTax, this.entityData.FederalTax);
				this.entityData.FederalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StateColumn.FederalTax, this.entityData.FederalTax);
				OnPropertyChanged("FederalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalTax property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsLocalTaxNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? LocalTax
		{
			get
			{
				return this.entityData.LocalTax; 
			}
			
			set
			{
				if (this.entityData.LocalTax == value)
					return;
					
				OnColumnChanging(StateColumn.LocalTax, this.entityData.LocalTax);
				this.entityData.LocalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StateColumn.LocalTax, this.entityData.LocalTax);
				OnPropertyChanged("LocalTax");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsDisplayOrderNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
				OnColumnChanging(StateColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StateColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LocalOnFederalTax property. 
		///		Is local tax charged on top of federal tax.
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute("Is local tax charged on top of federal tax."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Boolean LocalOnFederalTax
		{
			get
			{
				return this.entityData.LocalOnFederalTax; 
			}
			
			set
			{
				if (this.entityData.LocalOnFederalTax == value)
					return;
					
				OnColumnChanging(StateColumn.LocalOnFederalTax, this.entityData.LocalOnFederalTax);
				this.entityData.LocalOnFederalTax = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(StateColumn.LocalOnFederalTax, this.entityData.LocalOnFederalTax);
				OnPropertyChanged("LocalOnFederalTax");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for CountryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Country CountryIdSource
      	{
            get { return entityData.CountryIdSource; }
            set { entityData.CountryIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Customer objects
		///	which are related to this object through the relation FK_Customer_PrimaryContactRegion
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Customer> CustomerCollectionGetByPrimaryContactRegion
		{
			get { return entityData.CustomerCollectionGetByPrimaryContactRegion; }
			set { entityData.CustomerCollectionGetByPrimaryContactRegion = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Wholesaler objects
		///	which are related to this object through the relation FK_Wholesaler_State
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Wholesaler> WholesalerCollection
		{
			get { return entityData.WholesalerCollection; }
			set { entityData.WholesalerCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Customer objects
		///	which are related to this object through the relation FK_Customer_BillingContactRegion
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Customer> CustomerCollectionGetByBillingContactRegion
		{
			get { return entityData.CustomerCollectionGetByBillingContactRegion; }
			set { entityData.CustomerCollectionGetByBillingContactRegion = value; }	
		}
	
		/// <summary>
		///	Holds a collection of User objects
		///	which are related to this object through the relation FK_User_State
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<User> UserCollection
		{
			get { return entityData.UserCollection; }
			set { entityData.UserCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("Id", "Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Id", "Id", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("CountryId", "Country Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CountryId", "Country Id", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("LongName", "Long Name", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "State"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "CountryID", "LongName", "FederalTax", "LocalTax", "DisplayOrder", "LocalOnFederalTax"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as StateEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (State) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<State>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as State);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed State Entity 
		///</summary>
		public virtual State Copy()
		{
			//shallow copy entity
			State copy = new State();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.OriginalId = this.OriginalId;
			copy.CountryId = this.CountryId;
			copy.LongName = this.LongName;
			copy.FederalTax = this.FederalTax;
			copy.LocalTax = this.LocalTax;
			copy.DisplayOrder = this.DisplayOrder;
			copy.LocalOnFederalTax = this.LocalOnFederalTax;
			
			copy.CountryIdSource = MakeCopyOf(this.CountryIdSource) as Country;
		
			//deep copy nested objects
			copy.CustomerCollectionGetByPrimaryContactRegion = (TList<Customer>) MakeCopyOf(this.CustomerCollectionGetByPrimaryContactRegion); 
			copy.WholesalerCollection = (TList<Wholesaler>) MakeCopyOf(this.WholesalerCollection); 
			copy.CustomerCollectionGetByBillingContactRegion = (TList<Customer>) MakeCopyOf(this.CustomerCollectionGetByBillingContactRegion); 
			copy.UserCollection = (TList<User>) MakeCopyOf(this.UserCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed State Entity which is a deep copy of the current entity.
		///</summary>
		public virtual State DeepCopy()
		{
			return EntityHelper.Clone<State>(this as State);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as StateEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as StateEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(StateColumn column)
		{
			switch(column)
			{
					case StateColumn.Id:
					return entityData.Id != _originalData.Id;
					case StateColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
					case StateColumn.LongName:
					return entityData.LongName != _originalData.LongName;
					case StateColumn.FederalTax:
					return entityData.FederalTax != _originalData.FederalTax;
					case StateColumn.LocalTax:
					return entityData.LocalTax != _originalData.LocalTax;
					case StateColumn.DisplayOrder:
					return entityData.DisplayOrder != _originalData.DisplayOrder;
					case StateColumn.LocalOnFederalTax:
					return entityData.LocalOnFederalTax != _originalData.LocalOnFederalTax;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.CountryId != _originalData.CountryId;
			result = result || entityData.LongName != _originalData.LongName;
			result = result || entityData.FederalTax != _originalData.FederalTax;
			result = result || entityData.LocalTax != _originalData.LocalTax;
			result = result || entityData.DisplayOrder != _originalData.DisplayOrder;
			result = result || entityData.LocalOnFederalTax != _originalData.LocalOnFederalTax;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="StateBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is StateBase)
				return Equals(this, (StateBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="StateBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.CountryId.GetHashCode() ^ 
					((this.LongName == null) ? string.Empty : this.LongName.ToString()).GetHashCode() ^ 
					((this.FederalTax == null) ? string.Empty : this.FederalTax.ToString()).GetHashCode() ^ 
					((this.LocalTax == null) ? string.Empty : this.LocalTax.ToString()).GetHashCode() ^ 
					((this.DisplayOrder == null) ? string.Empty : this.DisplayOrder.ToString()).GetHashCode() ^ 
					this.LocalOnFederalTax.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="StateBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(StateBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="StateBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="StateBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="StateBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(StateBase Object1, StateBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.CountryId != Object2.CountryId)
				equal = false;
			if ( Object1.LongName != null && Object2.LongName != null )
			{
				if (Object1.LongName != Object2.LongName)
					equal = false;
			}
			else if (Object1.LongName == null ^ Object2.LongName == null )
			{
				equal = false;
			}
			if ( Object1.FederalTax != null && Object2.FederalTax != null )
			{
				if (Object1.FederalTax != Object2.FederalTax)
					equal = false;
			}
			else if (Object1.FederalTax == null ^ Object2.FederalTax == null )
			{
				equal = false;
			}
			if ( Object1.LocalTax != null && Object2.LocalTax != null )
			{
				if (Object1.LocalTax != Object2.LocalTax)
					equal = false;
			}
			else if (Object1.LocalTax == null ^ Object2.LocalTax == null )
			{
				equal = false;
			}
			if ( Object1.DisplayOrder != null && Object2.DisplayOrder != null )
			{
				if (Object1.DisplayOrder != Object2.DisplayOrder)
					equal = false;
			}
			else if (Object1.DisplayOrder == null ^ Object2.DisplayOrder == null )
			{
				equal = false;
			}
			if (Object1.LocalOnFederalTax != Object2.LocalOnFederalTax)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((StateBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static StateComparer GetComparer()
        {
            return new StateComparer();
        }
        */

        // Comparer delegates back to State
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(State rhs, StateColumn which)
        {
            switch (which)
            {
            	
            	
            	case StateColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case StateColumn.CountryId:
            		return this.CountryId.CompareTo(rhs.CountryId);
            		
            		                 
            	
            	
            	case StateColumn.LongName:
            		return this.LongName.CompareTo(rhs.LongName);
            		
            		                 
            	
            	
            	case StateColumn.FederalTax:
            		return this.FederalTax.Value.CompareTo(rhs.FederalTax.Value);
            		
            		                 
            	
            	
            	case StateColumn.LocalTax:
            		return this.LocalTax.Value.CompareTo(rhs.LocalTax.Value);
            		
            		                 
            	
            	
            	case StateColumn.DisplayOrder:
            		return this.DisplayOrder.Value.CompareTo(rhs.DisplayOrder.Value);
            		
            		                 
            	
            	
            	case StateColumn.LocalOnFederalTax:
            		return this.LocalOnFederalTax.CompareTo(rhs.LocalOnFederalTax);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<StateKey> Members
		
		// member variable for the EntityId property
		private StateKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual StateKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new StateKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("State")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{8}{7}- Id: {0}{7}- CountryId: {1}{7}- LongName: {2}{7}- FederalTax: {3}{7}- LocalTax: {4}{7}- DisplayOrder: {5}{7}- LocalOnFederalTax: {6}{7}", 
				this.Id,
				this.CountryId,
				(this.LongName == null) ? string.Empty : this.LongName.ToString(),
				(this.FederalTax == null) ? string.Empty : this.FederalTax.ToString(),
				(this.LocalTax == null) ? string.Empty : this.LocalTax.ToString(),
				(this.DisplayOrder == null) ? string.Empty : this.DisplayOrder.ToString(),
				this.LocalOnFederalTax,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'State' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class StateEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "State"</remarks>
			public System.String Id;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.String		  CountryId = string.Empty;
		
		/// <summary>
		/// LongName : 
		/// </summary>
		public System.String		  LongName = null;
		
		/// <summary>
		/// FederalTax : 
		/// </summary>
		public System.Decimal?		  FederalTax = null;
		
		/// <summary>
		/// LocalTax : 
		/// </summary>
		public System.Decimal?		  LocalTax = null;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Int16?		  DisplayOrder = null;
		
		/// <summary>
		/// LocalOnFederalTax : Is local tax charged on top of federal tax.
		/// </summary>
		public System.Boolean		  LocalOnFederalTax = false;
		#endregion
			
		#region Source Foreign Key Property
				
		private Country _countryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for CountryId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Country CountryIdSource
      	{
            get { return this._countryIdSource; }
            set { this._countryIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region CustomerCollectionGetByPrimaryContactRegion
		
		private TList<Customer> _customerPrimaryContactRegionGetByPrimaryContactRegion;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerPrimaryContactRegionGetByPrimaryContactRegion
		/// </summary>	
		public TList<Customer> CustomerCollectionGetByPrimaryContactRegion
		{
			get
			{
				if (_customerPrimaryContactRegionGetByPrimaryContactRegion == null)
				{
				_customerPrimaryContactRegionGetByPrimaryContactRegion = new TList<Customer>();
				}
	
				return _customerPrimaryContactRegionGetByPrimaryContactRegion;
			}
			set { _customerPrimaryContactRegionGetByPrimaryContactRegion = value; }
		}
		
		#endregion

		#region WholesalerCollection
		
		private TList<Wholesaler> _wholesalerBillingRegion;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _wholesalerBillingRegion
		/// </summary>	
		public TList<Wholesaler> WholesalerCollection
		{
			get
			{
				if (_wholesalerBillingRegion == null)
				{
				_wholesalerBillingRegion = new TList<Wholesaler>();
				}
	
				return _wholesalerBillingRegion;
			}
			set { _wholesalerBillingRegion = value; }
		}
		
		#endregion

		#region CustomerCollectionGetByBillingContactRegion
		
		private TList<Customer> _customerPrimaryContactRegionGetByBillingContactRegion;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerPrimaryContactRegionGetByBillingContactRegion
		/// </summary>	
		public TList<Customer> CustomerCollectionGetByBillingContactRegion
		{
			get
			{
				if (_customerPrimaryContactRegionGetByBillingContactRegion == null)
				{
				_customerPrimaryContactRegionGetByBillingContactRegion = new TList<Customer>();
				}
	
				return _customerPrimaryContactRegionGetByBillingContactRegion;
			}
			set { _customerPrimaryContactRegionGetByBillingContactRegion = value; }
		}
		
		#endregion

		#region UserCollection
		
		private TList<User> _userRegion;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _userRegion
		/// </summary>	
		public TList<User> UserCollection
		{
			get
			{
				if (_userRegion == null)
				{
				_userRegion = new TList<User>();
				}
	
				return _userRegion;
			}
			set { _userRegion = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			StateEntityData _tmp = new StateEntityData();
						
			_tmp.Id = this.Id;
			_tmp.OriginalId = this.OriginalId;
			
			_tmp.CountryId = this.CountryId;
			_tmp.LongName = this.LongName;
			_tmp.FederalTax = this.FederalTax;
			_tmp.LocalTax = this.LocalTax;
			_tmp.DisplayOrder = this.DisplayOrder;
			_tmp.LocalOnFederalTax = this.LocalOnFederalTax;
			
			#region Source Parent Composite Entities
			if (this.CountryIdSource != null)
				_tmp.CountryIdSource = MakeCopyOf(this.CountryIdSource) as Country;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._customerPrimaryContactRegionGetByPrimaryContactRegion != null)
				_tmp.CustomerCollectionGetByPrimaryContactRegion = (TList<Customer>) MakeCopyOf(this.CustomerCollectionGetByPrimaryContactRegion); 
			if (this._wholesalerBillingRegion != null)
				_tmp.WholesalerCollection = (TList<Wholesaler>) MakeCopyOf(this.WholesalerCollection); 
			if (this._customerPrimaryContactRegionGetByBillingContactRegion != null)
				_tmp.CustomerCollectionGetByBillingContactRegion = (TList<Customer>) MakeCopyOf(this.CustomerCollectionGetByBillingContactRegion); 
			if (this._userRegion != null)
				_tmp.UserCollection = (TList<User>) MakeCopyOf(this.UserCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StateColumn"/> which has raised the event.</param>
		public void OnColumnChanging(StateColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StateColumn"/> which has raised the event.</param>
		public void OnColumnChanged(StateColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StateColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(StateColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				StateEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new StateEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="StateColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(StateColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				StateEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new StateEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region StateEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="State"/> object.
	/// </remarks>
	public class StateEventArgs : System.EventArgs
	{
		private StateColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the StateEventArgs class.
		///</summary>
		public StateEventArgs(StateColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the StateEventArgs class.
		///</summary>
		public StateEventArgs(StateColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The StateColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="StateColumn" />
		public StateColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all State related events.
	///</summary>
	public delegate void StateEventHandler(object sender, StateEventArgs e);
	
	#region StateComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class StateComparer : System.Collections.Generic.IComparer<State>
	{
		StateColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:StateComparer"/> class.
        /// </summary>
		public StateComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:StateComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public StateComparer(StateColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="State"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="State"/> to compare.</param>
        /// <param name="b">The second <c>State</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(State a, State b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(State entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(State a, State b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public StateColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region StateKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="State"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class StateKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the StateKey class.
		/// </summary>
		public StateKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the StateKey class.
		/// </summary>
		public StateKey(StateBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the StateKey class.
		/// </summary>
		public StateKey(System.String _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private StateBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public StateBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.String _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.String Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.String) EntityUtil.ChangeType(values["Id"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region StateColumn Enum
	
	/// <summary>
	/// Enumerate the State columns.
	/// </summary>
	[Serializable]
	public enum StateColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.String), System.Data.DbType.AnsiString, true, false, false, 3)]
		Id = 1,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("CountryID")]
		[ColumnEnum("CountryID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 3)]
		CountryId = 2,
		/// <summary>
		/// LongName : 
		/// </summary>
		[EnumTextValue("LongName")]
		[ColumnEnum("LongName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		LongName = 3,
		/// <summary>
		/// FederalTax : 
		/// </summary>
		[EnumTextValue("FederalTax")]
		[ColumnEnum("FederalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		FederalTax = 4,
		/// <summary>
		/// LocalTax : 
		/// </summary>
		[EnumTextValue("LocalTax")]
		[ColumnEnum("LocalTax", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		LocalTax = 5,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		DisplayOrder = 6,
		/// <summary>
		/// LocalOnFederalTax : Is local tax charged on top of federal tax.
		/// </summary>
		[EnumTextValue("LocalOnFederalTax")]
		[ColumnEnum("LocalOnFederalTax", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, false)]
		LocalOnFederalTax = 7
	}//End enum

	#endregion StateColumn Enum

} // end namespace
