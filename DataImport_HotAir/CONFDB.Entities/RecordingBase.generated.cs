
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Recording.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'Recording' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class RecordingBase : EntityBase, CONFDB.Entities.IRecording, IEntityId<RecordingKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private RecordingEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private RecordingEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private RecordingEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Recording> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event RecordingEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event RecordingEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="RecordingBase"/> instance.
		///</summary>
		public RecordingBase()
		{
			this.entityData = new RecordingEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="RecordingBase"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_bridgeId"></param>
		///<param name="_recordingStartTime"></param>
		///<param name="_recordingEndTime"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_recordingDirectory"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_replayCode"></param>
		///<param name="_createdDate"></param>
		///<param name="_processFlag"></param>
		///<param name="_emailSent"></param>
		///<param name="_rpFileNumber"></param>
		///<param name="_moderatorId"></param>
		///<param name="_notes"></param>
		///<param name="_mp3Flag"></param>
		///<param name="_mp3SizeInKb"></param>
		///<param name="_enabled"></param>
		///<param name="_storageDuration"></param>
		///<param name="_billingDuration"></param>
		///<param name="_billingId"></param>
		///<param name="_durationSec"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_mediaType"></param>
		///<param name="_hostedLinkExpiryDate"></param>
		///<param name="_hostedLinkType"></param>
		///<param name="_hostedLinkUrl"></param>
		///<param name="_extendRecordingDate"></param>
		///<param name="_recordingGuid"></param>
		public RecordingBase(System.String _wholesalerId, System.Int32? _bridgeId, System.DateTime? _recordingStartTime, 
			System.DateTime? _recordingEndTime, System.String _moderatorCode, System.String _passCode, System.String _priCustomerNumber, 
			System.String _secCustomerNumber, System.String _recordingDirectory, System.String _uniqueConferenceId, 
			System.String _replayCode, System.DateTime? _createdDate, System.String _processFlag, System.Boolean? _emailSent, 
			System.String _rpFileNumber, System.Int32? _moderatorId, System.String _notes, System.String _mp3Flag, 
			System.Int32? _mp3SizeInKb, System.Boolean? _enabled, System.Int16? _storageDuration, System.Int16? _billingDuration, 
			System.String _billingId, System.Int32? _durationSec, System.String _auxiliaryConferenceId, System.String _mediaType, 
			System.DateTime? _hostedLinkExpiryDate, System.String _hostedLinkType, System.String _hostedLinkUrl, 
			System.DateTime? _extendRecordingDate, System.String _recordingGuid)
		{
			this.entityData = new RecordingEntityData();
			this.backupData = null;

			this.WholesalerId = _wholesalerId;
			this.BridgeId = _bridgeId;
			this.RecordingStartTime = _recordingStartTime;
			this.RecordingEndTime = _recordingEndTime;
			this.ModeratorCode = _moderatorCode;
			this.PassCode = _passCode;
			this.PriCustomerNumber = _priCustomerNumber;
			this.SecCustomerNumber = _secCustomerNumber;
			this.RecordingDirectory = _recordingDirectory;
			this.UniqueConferenceId = _uniqueConferenceId;
			this.ReplayCode = _replayCode;
			this.CreatedDate = _createdDate;
			this.ProcessFlag = _processFlag;
			this.EmailSent = _emailSent;
			this.RpFileNumber = _rpFileNumber;
			this.ModeratorId = _moderatorId;
			this.Notes = _notes;
			this.Mp3Flag = _mp3Flag;
			this.Mp3SizeInKb = _mp3SizeInKb;
			this.Enabled = _enabled;
			this.StorageDuration = _storageDuration;
			this.BillingDuration = _billingDuration;
			this.BillingId = _billingId;
			this.DurationSec = _durationSec;
			this.AuxiliaryConferenceId = _auxiliaryConferenceId;
			this.MediaType = _mediaType;
			this.HostedLinkExpiryDate = _hostedLinkExpiryDate;
			this.HostedLinkType = _hostedLinkType;
			this.HostedLinkUrl = _hostedLinkUrl;
			this.ExtendRecordingDate = _extendRecordingDate;
			this.RecordingGuid = _recordingGuid;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Recording"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_bridgeId"></param>
		///<param name="_recordingStartTime"></param>
		///<param name="_recordingEndTime"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_recordingDirectory"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_replayCode"></param>
		///<param name="_createdDate"></param>
		///<param name="_processFlag"></param>
		///<param name="_emailSent"></param>
		///<param name="_rpFileNumber"></param>
		///<param name="_moderatorId"></param>
		///<param name="_notes"></param>
		///<param name="_mp3Flag"></param>
		///<param name="_mp3SizeInKb"></param>
		///<param name="_enabled"></param>
		///<param name="_storageDuration"></param>
		///<param name="_billingDuration"></param>
		///<param name="_billingId"></param>
		///<param name="_durationSec"></param>
		///<param name="_auxiliaryConferenceId"></param>
		///<param name="_mediaType"></param>
		///<param name="_hostedLinkExpiryDate"></param>
		///<param name="_hostedLinkType"></param>
		///<param name="_hostedLinkUrl"></param>
		///<param name="_extendRecordingDate"></param>
		///<param name="_recordingGuid"></param>
		public static Recording CreateRecording(System.String _wholesalerId, System.Int32? _bridgeId, System.DateTime? _recordingStartTime, 
			System.DateTime? _recordingEndTime, System.String _moderatorCode, System.String _passCode, System.String _priCustomerNumber, 
			System.String _secCustomerNumber, System.String _recordingDirectory, System.String _uniqueConferenceId, 
			System.String _replayCode, System.DateTime? _createdDate, System.String _processFlag, System.Boolean? _emailSent, 
			System.String _rpFileNumber, System.Int32? _moderatorId, System.String _notes, System.String _mp3Flag, 
			System.Int32? _mp3SizeInKb, System.Boolean? _enabled, System.Int16? _storageDuration, System.Int16? _billingDuration, 
			System.String _billingId, System.Int32? _durationSec, System.String _auxiliaryConferenceId, System.String _mediaType, 
			System.DateTime? _hostedLinkExpiryDate, System.String _hostedLinkType, System.String _hostedLinkUrl, 
			System.DateTime? _extendRecordingDate, System.String _recordingGuid)
		{
			Recording newRecording = new Recording();
			newRecording.WholesalerId = _wholesalerId;
			newRecording.BridgeId = _bridgeId;
			newRecording.RecordingStartTime = _recordingStartTime;
			newRecording.RecordingEndTime = _recordingEndTime;
			newRecording.ModeratorCode = _moderatorCode;
			newRecording.PassCode = _passCode;
			newRecording.PriCustomerNumber = _priCustomerNumber;
			newRecording.SecCustomerNumber = _secCustomerNumber;
			newRecording.RecordingDirectory = _recordingDirectory;
			newRecording.UniqueConferenceId = _uniqueConferenceId;
			newRecording.ReplayCode = _replayCode;
			newRecording.CreatedDate = _createdDate;
			newRecording.ProcessFlag = _processFlag;
			newRecording.EmailSent = _emailSent;
			newRecording.RpFileNumber = _rpFileNumber;
			newRecording.ModeratorId = _moderatorId;
			newRecording.Notes = _notes;
			newRecording.Mp3Flag = _mp3Flag;
			newRecording.Mp3SizeInKb = _mp3SizeInKb;
			newRecording.Enabled = _enabled;
			newRecording.StorageDuration = _storageDuration;
			newRecording.BillingDuration = _billingDuration;
			newRecording.BillingId = _billingId;
			newRecording.DurationSec = _durationSec;
			newRecording.AuxiliaryConferenceId = _auxiliaryConferenceId;
			newRecording.MediaType = _mediaType;
			newRecording.HostedLinkExpiryDate = _hostedLinkExpiryDate;
			newRecording.HostedLinkType = _hostedLinkType;
			newRecording.HostedLinkUrl = _hostedLinkUrl;
			newRecording.ExtendRecordingDate = _extendRecordingDate;
			newRecording.RecordingGuid = _recordingGuid;
			return newRecording;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(RecordingColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(RecordingColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BridgeId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsBridgeIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? BridgeId
		{
			get
			{
				return this.entityData.BridgeId; 
			}
			
			set
			{
				if (this.entityData.BridgeId == value)
					return;
					
				OnColumnChanging(RecordingColumn.BridgeId, this.entityData.BridgeId);
				this.entityData.BridgeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.BridgeId, this.entityData.BridgeId);
				OnPropertyChanged("BridgeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RecordingStartTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRecordingStartTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RecordingStartTime
		{
			get
			{
				return this.entityData.RecordingStartTime; 
			}
			
			set
			{
				if (this.entityData.RecordingStartTime == value)
					return;
					
				OnColumnChanging(RecordingColumn.RecordingStartTime, this.entityData.RecordingStartTime);
				this.entityData.RecordingStartTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.RecordingStartTime, this.entityData.RecordingStartTime);
				OnPropertyChanged("RecordingStartTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RecordingEndTime property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsRecordingEndTimeNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? RecordingEndTime
		{
			get
			{
				return this.entityData.RecordingEndTime; 
			}
			
			set
			{
				if (this.entityData.RecordingEndTime == value)
					return;
					
				OnColumnChanging(RecordingColumn.RecordingEndTime, this.entityData.RecordingEndTime);
				this.entityData.RecordingEndTime = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.RecordingEndTime, this.entityData.RecordingEndTime);
				OnPropertyChanged("RecordingEndTime");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 16)]
		public virtual System.String ModeratorCode
		{
			get
			{
				return this.entityData.ModeratorCode; 
			}
			
			set
			{
				if (this.entityData.ModeratorCode == value)
					return;
					
				OnColumnChanging(RecordingColumn.ModeratorCode, this.entityData.ModeratorCode);
				this.entityData.ModeratorCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.ModeratorCode, this.entityData.ModeratorCode);
				OnPropertyChanged("ModeratorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 16)]
		public virtual System.String PassCode
		{
			get
			{
				return this.entityData.PassCode; 
			}
			
			set
			{
				if (this.entityData.PassCode == value)
					return;
					
				OnColumnChanging(RecordingColumn.PassCode, this.entityData.PassCode);
				this.entityData.PassCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.PassCode, this.entityData.PassCode);
				OnPropertyChanged("PassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this.entityData.PriCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.PriCustomerNumber == value)
					return;
					
				OnColumnChanging(RecordingColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				this.entityData.PriCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 6)]
		public virtual System.String SecCustomerNumber
		{
			get
			{
				return this.entityData.SecCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.SecCustomerNumber == value)
					return;
					
				OnColumnChanging(RecordingColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				this.entityData.SecCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				OnPropertyChanged("SecCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RecordingDirectory property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String RecordingDirectory
		{
			get
			{
				return this.entityData.RecordingDirectory; 
			}
			
			set
			{
				if (this.entityData.RecordingDirectory == value)
					return;
					
				OnColumnChanging(RecordingColumn.RecordingDirectory, this.entityData.RecordingDirectory);
				this.entityData.RecordingDirectory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.RecordingDirectory, this.entityData.RecordingDirectory);
				OnPropertyChanged("RecordingDirectory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String UniqueConferenceId
		{
			get
			{
				return this.entityData.UniqueConferenceId; 
			}
			
			set
			{
				if (this.entityData.UniqueConferenceId == value)
					return;
					
				OnColumnChanging(RecordingColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				this.entityData.UniqueConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				OnPropertyChanged("UniqueConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ReplayCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String ReplayCode
		{
			get
			{
				return this.entityData.ReplayCode; 
			}
			
			set
			{
				if (this.entityData.ReplayCode == value)
					return;
					
				OnColumnChanging(RecordingColumn.ReplayCode, this.entityData.ReplayCode);
				this.entityData.ReplayCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.ReplayCode, this.entityData.ReplayCode);
				OnPropertyChanged("ReplayCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsCreatedDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(RecordingColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProcessFlag property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String ProcessFlag
		{
			get
			{
				return this.entityData.ProcessFlag; 
			}
			
			set
			{
				if (this.entityData.ProcessFlag == value)
					return;
					
				OnColumnChanging(RecordingColumn.ProcessFlag, this.entityData.ProcessFlag);
				this.entityData.ProcessFlag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.ProcessFlag, this.entityData.ProcessFlag);
				OnPropertyChanged("ProcessFlag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the EmailSent property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEmailSentNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? EmailSent
		{
			get
			{
				return this.entityData.EmailSent; 
			}
			
			set
			{
				if (this.entityData.EmailSent == value)
					return;
					
				OnColumnChanging(RecordingColumn.EmailSent, this.entityData.EmailSent);
				this.entityData.EmailSent = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.EmailSent, this.entityData.EmailSent);
				OnPropertyChanged("EmailSent");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RpFileNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String RpFileNumber
		{
			get
			{
				return this.entityData.RpFileNumber; 
			}
			
			set
			{
				if (this.entityData.RpFileNumber == value)
					return;
					
				OnColumnChanging(RecordingColumn.RpFileNumber, this.entityData.RpFileNumber);
				this.entityData.RpFileNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.RpFileNumber, this.entityData.RpFileNumber);
				OnPropertyChanged("RpFileNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsModeratorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(RecordingColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Notes property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Notes
		{
			get
			{
				return this.entityData.Notes; 
			}
			
			set
			{
				if (this.entityData.Notes == value)
					return;
					
				OnColumnChanging(RecordingColumn.Notes, this.entityData.Notes);
				this.entityData.Notes = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.Notes, this.entityData.Notes);
				OnPropertyChanged("Notes");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mp3Flag property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String Mp3Flag
		{
			get
			{
				return this.entityData.Mp3Flag; 
			}
			
			set
			{
				if (this.entityData.Mp3Flag == value)
					return;
					
				OnColumnChanging(RecordingColumn.Mp3Flag, this.entityData.Mp3Flag);
				this.entityData.Mp3Flag = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.Mp3Flag, this.entityData.Mp3Flag);
				OnPropertyChanged("Mp3Flag");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Mp3SizeInKb property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMp3SizeInKbNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Mp3SizeInKb
		{
			get
			{
				return this.entityData.Mp3SizeInKb; 
			}
			
			set
			{
				if (this.entityData.Mp3SizeInKb == value)
					return;
					
				OnColumnChanging(RecordingColumn.Mp3SizeInKb, this.entityData.Mp3SizeInKb);
				this.entityData.Mp3SizeInKb = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.Mp3SizeInKb, this.entityData.Mp3SizeInKb);
				OnPropertyChanged("Mp3SizeInKb");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Enabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnabledNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Enabled
		{
			get
			{
				return this.entityData.Enabled; 
			}
			
			set
			{
				if (this.entityData.Enabled == value)
					return;
					
				OnColumnChanging(RecordingColumn.Enabled, this.entityData.Enabled);
				this.entityData.Enabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.Enabled, this.entityData.Enabled);
				OnPropertyChanged("Enabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the StorageDuration property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsStorageDurationNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? StorageDuration
		{
			get
			{
				return this.entityData.StorageDuration; 
			}
			
			set
			{
				if (this.entityData.StorageDuration == value)
					return;
					
				OnColumnChanging(RecordingColumn.StorageDuration, this.entityData.StorageDuration);
				this.entityData.StorageDuration = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.StorageDuration, this.entityData.StorageDuration);
				OnPropertyChanged("StorageDuration");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingDuration property. 
		///		
		/// </summary>
		/// <value>This type is smallint.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (short)0. It is up to the developer
		/// to check the value of IsBillingDurationNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int16? BillingDuration
		{
			get
			{
				return this.entityData.BillingDuration; 
			}
			
			set
			{
				if (this.entityData.BillingDuration == value)
					return;
					
				OnColumnChanging(RecordingColumn.BillingDuration, this.entityData.BillingDuration);
				this.entityData.BillingDuration = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.BillingDuration, this.entityData.BillingDuration);
				OnPropertyChanged("BillingDuration");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the BillingId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String BillingId
		{
			get
			{
				return this.entityData.BillingId; 
			}
			
			set
			{
				if (this.entityData.BillingId == value)
					return;
					
				OnColumnChanging(RecordingColumn.BillingId, this.entityData.BillingId);
				this.entityData.BillingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.BillingId, this.entityData.BillingId);
				OnPropertyChanged("BillingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DurationSec property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDurationSecNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DurationSec
		{
			get
			{
				return this.entityData.DurationSec; 
			}
			
			set
			{
				if (this.entityData.DurationSec == value)
					return;
					
				OnColumnChanging(RecordingColumn.DurationSec, this.entityData.DurationSec);
				this.entityData.DurationSec = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.DurationSec, this.entityData.DurationSec);
				OnPropertyChanged("DurationSec");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AuxiliaryConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String AuxiliaryConferenceId
		{
			get
			{
				return this.entityData.AuxiliaryConferenceId; 
			}
			
			set
			{
				if (this.entityData.AuxiliaryConferenceId == value)
					return;
					
				OnColumnChanging(RecordingColumn.AuxiliaryConferenceId, this.entityData.AuxiliaryConferenceId);
				this.entityData.AuxiliaryConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.AuxiliaryConferenceId, this.entityData.AuxiliaryConferenceId);
				OnPropertyChanged("AuxiliaryConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MediaType property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 20)]
		public virtual System.String MediaType
		{
			get
			{
				return this.entityData.MediaType; 
			}
			
			set
			{
				if (this.entityData.MediaType == value)
					return;
					
				OnColumnChanging(RecordingColumn.MediaType, this.entityData.MediaType);
				this.entityData.MediaType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.MediaType, this.entityData.MediaType);
				OnPropertyChanged("MediaType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostedLinkExpiryDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsHostedLinkExpiryDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? HostedLinkExpiryDate
		{
			get
			{
				return this.entityData.HostedLinkExpiryDate; 
			}
			
			set
			{
				if (this.entityData.HostedLinkExpiryDate == value)
					return;
					
				OnColumnChanging(RecordingColumn.HostedLinkExpiryDate, this.entityData.HostedLinkExpiryDate);
				this.entityData.HostedLinkExpiryDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.HostedLinkExpiryDate, this.entityData.HostedLinkExpiryDate);
				OnPropertyChanged("HostedLinkExpiryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostedLinkType property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 1)]
		public virtual System.String HostedLinkType
		{
			get
			{
				return this.entityData.HostedLinkType; 
			}
			
			set
			{
				if (this.entityData.HostedLinkType == value)
					return;
					
				OnColumnChanging(RecordingColumn.HostedLinkType, this.entityData.HostedLinkType);
				this.entityData.HostedLinkType = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.HostedLinkType, this.entityData.HostedLinkType);
				OnPropertyChanged("HostedLinkType");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostedLinkUrl property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 500)]
		public virtual System.String HostedLinkUrl
		{
			get
			{
				return this.entityData.HostedLinkUrl; 
			}
			
			set
			{
				if (this.entityData.HostedLinkUrl == value)
					return;
					
				OnColumnChanging(RecordingColumn.HostedLinkUrl, this.entityData.HostedLinkUrl);
				this.entityData.HostedLinkUrl = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.HostedLinkUrl, this.entityData.HostedLinkUrl);
				OnPropertyChanged("HostedLinkUrl");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExtendRecordingDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsExtendRecordingDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? ExtendRecordingDate
		{
			get
			{
				return this.entityData.ExtendRecordingDate; 
			}
			
			set
			{
				if (this.entityData.ExtendRecordingDate == value)
					return;
					
				OnColumnChanging(RecordingColumn.ExtendRecordingDate, this.entityData.ExtendRecordingDate);
				this.entityData.ExtendRecordingDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.ExtendRecordingDate, this.entityData.ExtendRecordingDate);
				OnPropertyChanged("ExtendRecordingDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RecordingGuid property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String RecordingGuid
		{
			get
			{
				return this.entityData.RecordingGuid; 
			}
			
			set
			{
				if (this.entityData.RecordingGuid == value)
					return;
					
				OnColumnChanging(RecordingColumn.RecordingGuid, this.entityData.RecordingGuid);
				this.entityData.RecordingGuid = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(RecordingColumn.RecordingGuid, this.entityData.RecordingGuid);
				OnPropertyChanged("RecordingGuid");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of RecordingParticipantUsage objects
		///	which are related to this object through the relation FK_RecordingParticipantList_Recording1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RecordingParticipantUsage> RecordingParticipantUsageCollection
		{
			get { return entityData.RecordingParticipantUsageCollection; }
			set { entityData.RecordingParticipantUsageCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModeratorCode", "Moderator Code", 16));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PassCode", "Pass Code", 16));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PriCustomerNumber", "Pri Customer Number", 20));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SecCustomerNumber", "Sec Customer Number", 6));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RecordingDirectory", "Recording Directory", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("UniqueConferenceId", "Unique Conference Id", 40));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ReplayCode", "Replay Code", 20));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ProcessFlag", "Process Flag", 1));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RpFileNumber", "Rp File Number", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Notes", "Notes", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Mp3Flag", "Mp3 Flag", 1));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("BillingId", "Billing Id", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("AuxiliaryConferenceId", "Auxiliary Conference Id", 40));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MediaType", "Media Type", 20));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("HostedLinkType", "Hosted Link Type", 1));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("HostedLinkUrl", "Hosted Link Url", 500));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RecordingGuid", "Recording Guid", 40));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Recording"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WholesalerID", "BridgeID", "RecordingStartTime", "RecordingEndTime", "ModeratorCode", "PassCode", "PriCustomerNumber", "SecCustomerNumber", "RecordingDirectory", "UniqueConferenceID", "ReplayCode", "CreatedDate", "ProcessFlag", "EmailSent", "RPFileNumber", "ModeratorID", "Notes", "Mp3Flag", "Mp3SizeInKB", "Enabled", "StorageDuration", "BillingDuration", "BillingID", "DurationSec", "AuxiliaryConferenceID", "MediaType", "HostedLinkExpiryDate", "HostedLinkType", "HostedLinkURL", "ExtendRecordingDate", "RecordingGuid"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as RecordingEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Recording) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Recording>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Recording);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Recording Entity 
		///</summary>
		public virtual Recording Copy()
		{
			//shallow copy entity
			Recording copy = new Recording();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.WholesalerId = this.WholesalerId;
			copy.BridgeId = this.BridgeId;
			copy.RecordingStartTime = this.RecordingStartTime;
			copy.RecordingEndTime = this.RecordingEndTime;
			copy.ModeratorCode = this.ModeratorCode;
			copy.PassCode = this.PassCode;
			copy.PriCustomerNumber = this.PriCustomerNumber;
			copy.SecCustomerNumber = this.SecCustomerNumber;
			copy.RecordingDirectory = this.RecordingDirectory;
			copy.UniqueConferenceId = this.UniqueConferenceId;
			copy.ReplayCode = this.ReplayCode;
			copy.CreatedDate = this.CreatedDate;
			copy.ProcessFlag = this.ProcessFlag;
			copy.EmailSent = this.EmailSent;
			copy.RpFileNumber = this.RpFileNumber;
			copy.ModeratorId = this.ModeratorId;
			copy.Notes = this.Notes;
			copy.Mp3Flag = this.Mp3Flag;
			copy.Mp3SizeInKb = this.Mp3SizeInKb;
			copy.Enabled = this.Enabled;
			copy.StorageDuration = this.StorageDuration;
			copy.BillingDuration = this.BillingDuration;
			copy.BillingId = this.BillingId;
			copy.DurationSec = this.DurationSec;
			copy.AuxiliaryConferenceId = this.AuxiliaryConferenceId;
			copy.MediaType = this.MediaType;
			copy.HostedLinkExpiryDate = this.HostedLinkExpiryDate;
			copy.HostedLinkType = this.HostedLinkType;
			copy.HostedLinkUrl = this.HostedLinkUrl;
			copy.ExtendRecordingDate = this.ExtendRecordingDate;
			copy.RecordingGuid = this.RecordingGuid;
			
		
			//deep copy nested objects
			copy.RecordingParticipantUsageCollection = (TList<RecordingParticipantUsage>) MakeCopyOf(this.RecordingParticipantUsageCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Recording Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Recording DeepCopy()
		{
			return EntityHelper.Clone<Recording>(this as Recording);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as RecordingEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as RecordingEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(RecordingColumn column)
		{
			switch(column)
			{
					case RecordingColumn.Id:
					return entityData.Id != _originalData.Id;
					case RecordingColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case RecordingColumn.BridgeId:
					return entityData.BridgeId != _originalData.BridgeId;
					case RecordingColumn.RecordingStartTime:
					return entityData.RecordingStartTime != _originalData.RecordingStartTime;
					case RecordingColumn.RecordingEndTime:
					return entityData.RecordingEndTime != _originalData.RecordingEndTime;
					case RecordingColumn.ModeratorCode:
					return entityData.ModeratorCode != _originalData.ModeratorCode;
					case RecordingColumn.PassCode:
					return entityData.PassCode != _originalData.PassCode;
					case RecordingColumn.PriCustomerNumber:
					return entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
					case RecordingColumn.SecCustomerNumber:
					return entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
					case RecordingColumn.RecordingDirectory:
					return entityData.RecordingDirectory != _originalData.RecordingDirectory;
					case RecordingColumn.UniqueConferenceId:
					return entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
					case RecordingColumn.ReplayCode:
					return entityData.ReplayCode != _originalData.ReplayCode;
					case RecordingColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case RecordingColumn.ProcessFlag:
					return entityData.ProcessFlag != _originalData.ProcessFlag;
					case RecordingColumn.EmailSent:
					return entityData.EmailSent != _originalData.EmailSent;
					case RecordingColumn.RpFileNumber:
					return entityData.RpFileNumber != _originalData.RpFileNumber;
					case RecordingColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case RecordingColumn.Notes:
					return entityData.Notes != _originalData.Notes;
					case RecordingColumn.Mp3Flag:
					return entityData.Mp3Flag != _originalData.Mp3Flag;
					case RecordingColumn.Mp3SizeInKb:
					return entityData.Mp3SizeInKb != _originalData.Mp3SizeInKb;
					case RecordingColumn.Enabled:
					return entityData.Enabled != _originalData.Enabled;
					case RecordingColumn.StorageDuration:
					return entityData.StorageDuration != _originalData.StorageDuration;
					case RecordingColumn.BillingDuration:
					return entityData.BillingDuration != _originalData.BillingDuration;
					case RecordingColumn.BillingId:
					return entityData.BillingId != _originalData.BillingId;
					case RecordingColumn.DurationSec:
					return entityData.DurationSec != _originalData.DurationSec;
					case RecordingColumn.AuxiliaryConferenceId:
					return entityData.AuxiliaryConferenceId != _originalData.AuxiliaryConferenceId;
					case RecordingColumn.MediaType:
					return entityData.MediaType != _originalData.MediaType;
					case RecordingColumn.HostedLinkExpiryDate:
					return entityData.HostedLinkExpiryDate != _originalData.HostedLinkExpiryDate;
					case RecordingColumn.HostedLinkType:
					return entityData.HostedLinkType != _originalData.HostedLinkType;
					case RecordingColumn.HostedLinkUrl:
					return entityData.HostedLinkUrl != _originalData.HostedLinkUrl;
					case RecordingColumn.ExtendRecordingDate:
					return entityData.ExtendRecordingDate != _originalData.ExtendRecordingDate;
					case RecordingColumn.RecordingGuid:
					return entityData.RecordingGuid != _originalData.RecordingGuid;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.BridgeId != _originalData.BridgeId;
			result = result || entityData.RecordingStartTime != _originalData.RecordingStartTime;
			result = result || entityData.RecordingEndTime != _originalData.RecordingEndTime;
			result = result || entityData.ModeratorCode != _originalData.ModeratorCode;
			result = result || entityData.PassCode != _originalData.PassCode;
			result = result || entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
			result = result || entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
			result = result || entityData.RecordingDirectory != _originalData.RecordingDirectory;
			result = result || entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
			result = result || entityData.ReplayCode != _originalData.ReplayCode;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.ProcessFlag != _originalData.ProcessFlag;
			result = result || entityData.EmailSent != _originalData.EmailSent;
			result = result || entityData.RpFileNumber != _originalData.RpFileNumber;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.Notes != _originalData.Notes;
			result = result || entityData.Mp3Flag != _originalData.Mp3Flag;
			result = result || entityData.Mp3SizeInKb != _originalData.Mp3SizeInKb;
			result = result || entityData.Enabled != _originalData.Enabled;
			result = result || entityData.StorageDuration != _originalData.StorageDuration;
			result = result || entityData.BillingDuration != _originalData.BillingDuration;
			result = result || entityData.BillingId != _originalData.BillingId;
			result = result || entityData.DurationSec != _originalData.DurationSec;
			result = result || entityData.AuxiliaryConferenceId != _originalData.AuxiliaryConferenceId;
			result = result || entityData.MediaType != _originalData.MediaType;
			result = result || entityData.HostedLinkExpiryDate != _originalData.HostedLinkExpiryDate;
			result = result || entityData.HostedLinkType != _originalData.HostedLinkType;
			result = result || entityData.HostedLinkUrl != _originalData.HostedLinkUrl;
			result = result || entityData.ExtendRecordingDate != _originalData.ExtendRecordingDate;
			result = result || entityData.RecordingGuid != _originalData.RecordingGuid;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="RecordingBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is RecordingBase)
				return Equals(this, (RecordingBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="RecordingBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					((this.BridgeId == null) ? string.Empty : this.BridgeId.ToString()).GetHashCode() ^ 
					((this.RecordingStartTime == null) ? string.Empty : this.RecordingStartTime.ToString()).GetHashCode() ^ 
					((this.RecordingEndTime == null) ? string.Empty : this.RecordingEndTime.ToString()).GetHashCode() ^ 
					((this.ModeratorCode == null) ? string.Empty : this.ModeratorCode.ToString()).GetHashCode() ^ 
					((this.PassCode == null) ? string.Empty : this.PassCode.ToString()).GetHashCode() ^ 
					((this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString()).GetHashCode() ^ 
					((this.SecCustomerNumber == null) ? string.Empty : this.SecCustomerNumber.ToString()).GetHashCode() ^ 
					((this.RecordingDirectory == null) ? string.Empty : this.RecordingDirectory.ToString()).GetHashCode() ^ 
					((this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString()).GetHashCode() ^ 
					((this.ReplayCode == null) ? string.Empty : this.ReplayCode.ToString()).GetHashCode() ^ 
					((this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString()).GetHashCode() ^ 
					((this.ProcessFlag == null) ? string.Empty : this.ProcessFlag.ToString()).GetHashCode() ^ 
					((this.EmailSent == null) ? string.Empty : this.EmailSent.ToString()).GetHashCode() ^ 
					((this.RpFileNumber == null) ? string.Empty : this.RpFileNumber.ToString()).GetHashCode() ^ 
					((this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString()).GetHashCode() ^ 
					((this.Notes == null) ? string.Empty : this.Notes.ToString()).GetHashCode() ^ 
					((this.Mp3Flag == null) ? string.Empty : this.Mp3Flag.ToString()).GetHashCode() ^ 
					((this.Mp3SizeInKb == null) ? string.Empty : this.Mp3SizeInKb.ToString()).GetHashCode() ^ 
					((this.Enabled == null) ? string.Empty : this.Enabled.ToString()).GetHashCode() ^ 
					((this.StorageDuration == null) ? string.Empty : this.StorageDuration.ToString()).GetHashCode() ^ 
					((this.BillingDuration == null) ? string.Empty : this.BillingDuration.ToString()).GetHashCode() ^ 
					((this.BillingId == null) ? string.Empty : this.BillingId.ToString()).GetHashCode() ^ 
					((this.DurationSec == null) ? string.Empty : this.DurationSec.ToString()).GetHashCode() ^ 
					((this.AuxiliaryConferenceId == null) ? string.Empty : this.AuxiliaryConferenceId.ToString()).GetHashCode() ^ 
					((this.MediaType == null) ? string.Empty : this.MediaType.ToString()).GetHashCode() ^ 
					((this.HostedLinkExpiryDate == null) ? string.Empty : this.HostedLinkExpiryDate.ToString()).GetHashCode() ^ 
					((this.HostedLinkType == null) ? string.Empty : this.HostedLinkType.ToString()).GetHashCode() ^ 
					((this.HostedLinkUrl == null) ? string.Empty : this.HostedLinkUrl.ToString()).GetHashCode() ^ 
					((this.ExtendRecordingDate == null) ? string.Empty : this.ExtendRecordingDate.ToString()).GetHashCode() ^ 
					((this.RecordingGuid == null) ? string.Empty : this.RecordingGuid.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="RecordingBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(RecordingBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="RecordingBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="RecordingBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="RecordingBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(RecordingBase Object1, RecordingBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if ( Object1.BridgeId != null && Object2.BridgeId != null )
			{
				if (Object1.BridgeId != Object2.BridgeId)
					equal = false;
			}
			else if (Object1.BridgeId == null ^ Object2.BridgeId == null )
			{
				equal = false;
			}
			if ( Object1.RecordingStartTime != null && Object2.RecordingStartTime != null )
			{
				if (Object1.RecordingStartTime != Object2.RecordingStartTime)
					equal = false;
			}
			else if (Object1.RecordingStartTime == null ^ Object2.RecordingStartTime == null )
			{
				equal = false;
			}
			if ( Object1.RecordingEndTime != null && Object2.RecordingEndTime != null )
			{
				if (Object1.RecordingEndTime != Object2.RecordingEndTime)
					equal = false;
			}
			else if (Object1.RecordingEndTime == null ^ Object2.RecordingEndTime == null )
			{
				equal = false;
			}
			if ( Object1.ModeratorCode != null && Object2.ModeratorCode != null )
			{
				if (Object1.ModeratorCode != Object2.ModeratorCode)
					equal = false;
			}
			else if (Object1.ModeratorCode == null ^ Object2.ModeratorCode == null )
			{
				equal = false;
			}
			if ( Object1.PassCode != null && Object2.PassCode != null )
			{
				if (Object1.PassCode != Object2.PassCode)
					equal = false;
			}
			else if (Object1.PassCode == null ^ Object2.PassCode == null )
			{
				equal = false;
			}
			if ( Object1.PriCustomerNumber != null && Object2.PriCustomerNumber != null )
			{
				if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
					equal = false;
			}
			else if (Object1.PriCustomerNumber == null ^ Object2.PriCustomerNumber == null )
			{
				equal = false;
			}
			if ( Object1.SecCustomerNumber != null && Object2.SecCustomerNumber != null )
			{
				if (Object1.SecCustomerNumber != Object2.SecCustomerNumber)
					equal = false;
			}
			else if (Object1.SecCustomerNumber == null ^ Object2.SecCustomerNumber == null )
			{
				equal = false;
			}
			if ( Object1.RecordingDirectory != null && Object2.RecordingDirectory != null )
			{
				if (Object1.RecordingDirectory != Object2.RecordingDirectory)
					equal = false;
			}
			else if (Object1.RecordingDirectory == null ^ Object2.RecordingDirectory == null )
			{
				equal = false;
			}
			if ( Object1.UniqueConferenceId != null && Object2.UniqueConferenceId != null )
			{
				if (Object1.UniqueConferenceId != Object2.UniqueConferenceId)
					equal = false;
			}
			else if (Object1.UniqueConferenceId == null ^ Object2.UniqueConferenceId == null )
			{
				equal = false;
			}
			if ( Object1.ReplayCode != null && Object2.ReplayCode != null )
			{
				if (Object1.ReplayCode != Object2.ReplayCode)
					equal = false;
			}
			else if (Object1.ReplayCode == null ^ Object2.ReplayCode == null )
			{
				equal = false;
			}
			if ( Object1.CreatedDate != null && Object2.CreatedDate != null )
			{
				if (Object1.CreatedDate != Object2.CreatedDate)
					equal = false;
			}
			else if (Object1.CreatedDate == null ^ Object2.CreatedDate == null )
			{
				equal = false;
			}
			if ( Object1.ProcessFlag != null && Object2.ProcessFlag != null )
			{
				if (Object1.ProcessFlag != Object2.ProcessFlag)
					equal = false;
			}
			else if (Object1.ProcessFlag == null ^ Object2.ProcessFlag == null )
			{
				equal = false;
			}
			if ( Object1.EmailSent != null && Object2.EmailSent != null )
			{
				if (Object1.EmailSent != Object2.EmailSent)
					equal = false;
			}
			else if (Object1.EmailSent == null ^ Object2.EmailSent == null )
			{
				equal = false;
			}
			if ( Object1.RpFileNumber != null && Object2.RpFileNumber != null )
			{
				if (Object1.RpFileNumber != Object2.RpFileNumber)
					equal = false;
			}
			else if (Object1.RpFileNumber == null ^ Object2.RpFileNumber == null )
			{
				equal = false;
			}
			if ( Object1.ModeratorId != null && Object2.ModeratorId != null )
			{
				if (Object1.ModeratorId != Object2.ModeratorId)
					equal = false;
			}
			else if (Object1.ModeratorId == null ^ Object2.ModeratorId == null )
			{
				equal = false;
			}
			if ( Object1.Notes != null && Object2.Notes != null )
			{
				if (Object1.Notes != Object2.Notes)
					equal = false;
			}
			else if (Object1.Notes == null ^ Object2.Notes == null )
			{
				equal = false;
			}
			if ( Object1.Mp3Flag != null && Object2.Mp3Flag != null )
			{
				if (Object1.Mp3Flag != Object2.Mp3Flag)
					equal = false;
			}
			else if (Object1.Mp3Flag == null ^ Object2.Mp3Flag == null )
			{
				equal = false;
			}
			if ( Object1.Mp3SizeInKb != null && Object2.Mp3SizeInKb != null )
			{
				if (Object1.Mp3SizeInKb != Object2.Mp3SizeInKb)
					equal = false;
			}
			else if (Object1.Mp3SizeInKb == null ^ Object2.Mp3SizeInKb == null )
			{
				equal = false;
			}
			if ( Object1.Enabled != null && Object2.Enabled != null )
			{
				if (Object1.Enabled != Object2.Enabled)
					equal = false;
			}
			else if (Object1.Enabled == null ^ Object2.Enabled == null )
			{
				equal = false;
			}
			if ( Object1.StorageDuration != null && Object2.StorageDuration != null )
			{
				if (Object1.StorageDuration != Object2.StorageDuration)
					equal = false;
			}
			else if (Object1.StorageDuration == null ^ Object2.StorageDuration == null )
			{
				equal = false;
			}
			if ( Object1.BillingDuration != null && Object2.BillingDuration != null )
			{
				if (Object1.BillingDuration != Object2.BillingDuration)
					equal = false;
			}
			else if (Object1.BillingDuration == null ^ Object2.BillingDuration == null )
			{
				equal = false;
			}
			if ( Object1.BillingId != null && Object2.BillingId != null )
			{
				if (Object1.BillingId != Object2.BillingId)
					equal = false;
			}
			else if (Object1.BillingId == null ^ Object2.BillingId == null )
			{
				equal = false;
			}
			if ( Object1.DurationSec != null && Object2.DurationSec != null )
			{
				if (Object1.DurationSec != Object2.DurationSec)
					equal = false;
			}
			else if (Object1.DurationSec == null ^ Object2.DurationSec == null )
			{
				equal = false;
			}
			if ( Object1.AuxiliaryConferenceId != null && Object2.AuxiliaryConferenceId != null )
			{
				if (Object1.AuxiliaryConferenceId != Object2.AuxiliaryConferenceId)
					equal = false;
			}
			else if (Object1.AuxiliaryConferenceId == null ^ Object2.AuxiliaryConferenceId == null )
			{
				equal = false;
			}
			if ( Object1.MediaType != null && Object2.MediaType != null )
			{
				if (Object1.MediaType != Object2.MediaType)
					equal = false;
			}
			else if (Object1.MediaType == null ^ Object2.MediaType == null )
			{
				equal = false;
			}
			if ( Object1.HostedLinkExpiryDate != null && Object2.HostedLinkExpiryDate != null )
			{
				if (Object1.HostedLinkExpiryDate != Object2.HostedLinkExpiryDate)
					equal = false;
			}
			else if (Object1.HostedLinkExpiryDate == null ^ Object2.HostedLinkExpiryDate == null )
			{
				equal = false;
			}
			if ( Object1.HostedLinkType != null && Object2.HostedLinkType != null )
			{
				if (Object1.HostedLinkType != Object2.HostedLinkType)
					equal = false;
			}
			else if (Object1.HostedLinkType == null ^ Object2.HostedLinkType == null )
			{
				equal = false;
			}
			if ( Object1.HostedLinkUrl != null && Object2.HostedLinkUrl != null )
			{
				if (Object1.HostedLinkUrl != Object2.HostedLinkUrl)
					equal = false;
			}
			else if (Object1.HostedLinkUrl == null ^ Object2.HostedLinkUrl == null )
			{
				equal = false;
			}
			if ( Object1.ExtendRecordingDate != null && Object2.ExtendRecordingDate != null )
			{
				if (Object1.ExtendRecordingDate != Object2.ExtendRecordingDate)
					equal = false;
			}
			else if (Object1.ExtendRecordingDate == null ^ Object2.ExtendRecordingDate == null )
			{
				equal = false;
			}
			if ( Object1.RecordingGuid != null && Object2.RecordingGuid != null )
			{
				if (Object1.RecordingGuid != Object2.RecordingGuid)
					equal = false;
			}
			else if (Object1.RecordingGuid == null ^ Object2.RecordingGuid == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((RecordingBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static RecordingComparer GetComparer()
        {
            return new RecordingComparer();
        }
        */

        // Comparer delegates back to Recording
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Recording rhs, RecordingColumn which)
        {
            switch (which)
            {
            	
            	
            	case RecordingColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case RecordingColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case RecordingColumn.BridgeId:
            		return this.BridgeId.Value.CompareTo(rhs.BridgeId.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.RecordingStartTime:
            		return this.RecordingStartTime.Value.CompareTo(rhs.RecordingStartTime.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.RecordingEndTime:
            		return this.RecordingEndTime.Value.CompareTo(rhs.RecordingEndTime.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.ModeratorCode:
            		return this.ModeratorCode.CompareTo(rhs.ModeratorCode);
            		
            		                 
            	
            	
            	case RecordingColumn.PassCode:
            		return this.PassCode.CompareTo(rhs.PassCode);
            		
            		                 
            	
            	
            	case RecordingColumn.PriCustomerNumber:
            		return this.PriCustomerNumber.CompareTo(rhs.PriCustomerNumber);
            		
            		                 
            	
            	
            	case RecordingColumn.SecCustomerNumber:
            		return this.SecCustomerNumber.CompareTo(rhs.SecCustomerNumber);
            		
            		                 
            	
            	
            	case RecordingColumn.RecordingDirectory:
            		return this.RecordingDirectory.CompareTo(rhs.RecordingDirectory);
            		
            		                 
            	
            	
            	case RecordingColumn.UniqueConferenceId:
            		return this.UniqueConferenceId.CompareTo(rhs.UniqueConferenceId);
            		
            		                 
            	
            	
            	case RecordingColumn.ReplayCode:
            		return this.ReplayCode.CompareTo(rhs.ReplayCode);
            		
            		                 
            	
            	
            	case RecordingColumn.CreatedDate:
            		return this.CreatedDate.Value.CompareTo(rhs.CreatedDate.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.ProcessFlag:
            		return this.ProcessFlag.CompareTo(rhs.ProcessFlag);
            		
            		                 
            	
            	
            	case RecordingColumn.EmailSent:
            		return this.EmailSent.Value.CompareTo(rhs.EmailSent.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.RpFileNumber:
            		return this.RpFileNumber.CompareTo(rhs.RpFileNumber);
            		
            		                 
            	
            	
            	case RecordingColumn.ModeratorId:
            		return this.ModeratorId.Value.CompareTo(rhs.ModeratorId.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.Notes:
            		return this.Notes.CompareTo(rhs.Notes);
            		
            		                 
            	
            	
            	case RecordingColumn.Mp3Flag:
            		return this.Mp3Flag.CompareTo(rhs.Mp3Flag);
            		
            		                 
            	
            	
            	case RecordingColumn.Mp3SizeInKb:
            		return this.Mp3SizeInKb.Value.CompareTo(rhs.Mp3SizeInKb.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.Enabled:
            		return this.Enabled.Value.CompareTo(rhs.Enabled.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.StorageDuration:
            		return this.StorageDuration.Value.CompareTo(rhs.StorageDuration.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.BillingDuration:
            		return this.BillingDuration.Value.CompareTo(rhs.BillingDuration.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.BillingId:
            		return this.BillingId.CompareTo(rhs.BillingId);
            		
            		                 
            	
            	
            	case RecordingColumn.DurationSec:
            		return this.DurationSec.Value.CompareTo(rhs.DurationSec.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.AuxiliaryConferenceId:
            		return this.AuxiliaryConferenceId.CompareTo(rhs.AuxiliaryConferenceId);
            		
            		                 
            	
            	
            	case RecordingColumn.MediaType:
            		return this.MediaType.CompareTo(rhs.MediaType);
            		
            		                 
            	
            	
            	case RecordingColumn.HostedLinkExpiryDate:
            		return this.HostedLinkExpiryDate.Value.CompareTo(rhs.HostedLinkExpiryDate.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.HostedLinkType:
            		return this.HostedLinkType.CompareTo(rhs.HostedLinkType);
            		
            		                 
            	
            	
            	case RecordingColumn.HostedLinkUrl:
            		return this.HostedLinkUrl.CompareTo(rhs.HostedLinkUrl);
            		
            		                 
            	
            	
            	case RecordingColumn.ExtendRecordingDate:
            		return this.ExtendRecordingDate.Value.CompareTo(rhs.ExtendRecordingDate.Value);
            		
            		                 
            	
            	
            	case RecordingColumn.RecordingGuid:
            		return this.RecordingGuid.CompareTo(rhs.RecordingGuid);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<RecordingKey> Members
		
		// member variable for the EntityId property
		private RecordingKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual RecordingKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new RecordingKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Recording")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{33}{32}- Id: {0}{32}- WholesalerId: {1}{32}- BridgeId: {2}{32}- RecordingStartTime: {3}{32}- RecordingEndTime: {4}{32}- ModeratorCode: {5}{32}- PassCode: {6}{32}- PriCustomerNumber: {7}{32}- SecCustomerNumber: {8}{32}- RecordingDirectory: {9}{32}- UniqueConferenceId: {10}{32}- ReplayCode: {11}{32}- CreatedDate: {12}{32}- ProcessFlag: {13}{32}- EmailSent: {14}{32}- RpFileNumber: {15}{32}- ModeratorId: {16}{32}- Notes: {17}{32}- Mp3Flag: {18}{32}- Mp3SizeInKb: {19}{32}- Enabled: {20}{32}- StorageDuration: {21}{32}- BillingDuration: {22}{32}- BillingId: {23}{32}- DurationSec: {24}{32}- AuxiliaryConferenceId: {25}{32}- MediaType: {26}{32}- HostedLinkExpiryDate: {27}{32}- HostedLinkType: {28}{32}- HostedLinkUrl: {29}{32}- ExtendRecordingDate: {30}{32}- RecordingGuid: {31}{32}", 
				this.Id,
				this.WholesalerId,
				(this.BridgeId == null) ? string.Empty : this.BridgeId.ToString(),
				(this.RecordingStartTime == null) ? string.Empty : this.RecordingStartTime.ToString(),
				(this.RecordingEndTime == null) ? string.Empty : this.RecordingEndTime.ToString(),
				(this.ModeratorCode == null) ? string.Empty : this.ModeratorCode.ToString(),
				(this.PassCode == null) ? string.Empty : this.PassCode.ToString(),
				(this.PriCustomerNumber == null) ? string.Empty : this.PriCustomerNumber.ToString(),
				(this.SecCustomerNumber == null) ? string.Empty : this.SecCustomerNumber.ToString(),
				(this.RecordingDirectory == null) ? string.Empty : this.RecordingDirectory.ToString(),
				(this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString(),
				(this.ReplayCode == null) ? string.Empty : this.ReplayCode.ToString(),
				(this.CreatedDate == null) ? string.Empty : this.CreatedDate.ToString(),
				(this.ProcessFlag == null) ? string.Empty : this.ProcessFlag.ToString(),
				(this.EmailSent == null) ? string.Empty : this.EmailSent.ToString(),
				(this.RpFileNumber == null) ? string.Empty : this.RpFileNumber.ToString(),
				(this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString(),
				(this.Notes == null) ? string.Empty : this.Notes.ToString(),
				(this.Mp3Flag == null) ? string.Empty : this.Mp3Flag.ToString(),
				(this.Mp3SizeInKb == null) ? string.Empty : this.Mp3SizeInKb.ToString(),
				(this.Enabled == null) ? string.Empty : this.Enabled.ToString(),
				(this.StorageDuration == null) ? string.Empty : this.StorageDuration.ToString(),
				(this.BillingDuration == null) ? string.Empty : this.BillingDuration.ToString(),
				(this.BillingId == null) ? string.Empty : this.BillingId.ToString(),
				(this.DurationSec == null) ? string.Empty : this.DurationSec.ToString(),
				(this.AuxiliaryConferenceId == null) ? string.Empty : this.AuxiliaryConferenceId.ToString(),
				(this.MediaType == null) ? string.Empty : this.MediaType.ToString(),
				(this.HostedLinkExpiryDate == null) ? string.Empty : this.HostedLinkExpiryDate.ToString(),
				(this.HostedLinkType == null) ? string.Empty : this.HostedLinkType.ToString(),
				(this.HostedLinkUrl == null) ? string.Empty : this.HostedLinkUrl.ToString(),
				(this.ExtendRecordingDate == null) ? string.Empty : this.ExtendRecordingDate.ToString(),
				(this.RecordingGuid == null) ? string.Empty : this.RecordingGuid.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Recording' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class RecordingEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Recording"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// BridgeID : 
		/// </summary>
		public System.Int32?		  BridgeId = null;
		
		/// <summary>
		/// RecordingStartTime : 
		/// </summary>
		public System.DateTime?		  RecordingStartTime = null;
		
		/// <summary>
		/// RecordingEndTime : 
		/// </summary>
		public System.DateTime?		  RecordingEndTime = null;
		
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		public System.String		  ModeratorCode = null;
		
		/// <summary>
		/// PassCode : 
		/// </summary>
		public System.String		  PassCode = null;
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		public System.String		  PriCustomerNumber = null;
		
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		public System.String		  SecCustomerNumber = null;
		
		/// <summary>
		/// RecordingDirectory : 
		/// </summary>
		public System.String		  RecordingDirectory = null;
		
		/// <summary>
		/// UniqueConferenceID : 
		/// </summary>
		public System.String		  UniqueConferenceId = null;
		
		/// <summary>
		/// ReplayCode : 
		/// </summary>
		public System.String		  ReplayCode = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime?		  CreatedDate = null;
		
		/// <summary>
		/// ProcessFlag : 
		/// </summary>
		public System.String		  ProcessFlag = null;
		
		/// <summary>
		/// EmailSent : 
		/// </summary>
		public System.Boolean?		  EmailSent = null;
		
		/// <summary>
		/// RPFileNumber : 
		/// </summary>
		public System.String		  RpFileNumber = null;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32?		  ModeratorId = null;
		
		/// <summary>
		/// Notes : 
		/// </summary>
		public System.String		  Notes = null;
		
		/// <summary>
		/// Mp3Flag : 
		/// </summary>
		public System.String		  Mp3Flag = null;
		
		/// <summary>
		/// Mp3SizeInKB : 
		/// </summary>
		public System.Int32?		  Mp3SizeInKb = null;
		
		/// <summary>
		/// Enabled : 
		/// </summary>
		public System.Boolean?		  Enabled = null;
		
		/// <summary>
		/// StorageDuration : 
		/// </summary>
		public System.Int16?		  StorageDuration = null;
		
		/// <summary>
		/// BillingDuration : 
		/// </summary>
		public System.Int16?		  BillingDuration = null;
		
		/// <summary>
		/// BillingID : 
		/// </summary>
		public System.String		  BillingId = null;
		
		/// <summary>
		/// DurationSec : 
		/// </summary>
		public System.Int32?		  DurationSec = null;
		
		/// <summary>
		/// AuxiliaryConferenceID : 
		/// </summary>
		public System.String		  AuxiliaryConferenceId = null;
		
		/// <summary>
		/// MediaType : 
		/// </summary>
		public System.String		  MediaType = null;
		
		/// <summary>
		/// HostedLinkExpiryDate : 
		/// </summary>
		public System.DateTime?		  HostedLinkExpiryDate = null;
		
		/// <summary>
		/// HostedLinkType : 
		/// </summary>
		public System.String		  HostedLinkType = null;
		
		/// <summary>
		/// HostedLinkURL : 
		/// </summary>
		public System.String		  HostedLinkUrl = null;
		
		/// <summary>
		/// ExtendRecordingDate : 
		/// </summary>
		public System.DateTime?		  ExtendRecordingDate = null;
		
		/// <summary>
		/// RecordingGuid : 
		/// </summary>
		public System.String		  RecordingGuid = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region RecordingParticipantUsageCollection
		
		private TList<RecordingParticipantUsage> _recordingParticipantUsageRecordingId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _recordingParticipantUsageRecordingId
		/// </summary>	
		public TList<RecordingParticipantUsage> RecordingParticipantUsageCollection
		{
			get
			{
				if (_recordingParticipantUsageRecordingId == null)
				{
				_recordingParticipantUsageRecordingId = new TList<RecordingParticipantUsage>();
				}
	
				return _recordingParticipantUsageRecordingId;
			}
			set { _recordingParticipantUsageRecordingId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			RecordingEntityData _tmp = new RecordingEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.BridgeId = this.BridgeId;
			_tmp.RecordingStartTime = this.RecordingStartTime;
			_tmp.RecordingEndTime = this.RecordingEndTime;
			_tmp.ModeratorCode = this.ModeratorCode;
			_tmp.PassCode = this.PassCode;
			_tmp.PriCustomerNumber = this.PriCustomerNumber;
			_tmp.SecCustomerNumber = this.SecCustomerNumber;
			_tmp.RecordingDirectory = this.RecordingDirectory;
			_tmp.UniqueConferenceId = this.UniqueConferenceId;
			_tmp.ReplayCode = this.ReplayCode;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.ProcessFlag = this.ProcessFlag;
			_tmp.EmailSent = this.EmailSent;
			_tmp.RpFileNumber = this.RpFileNumber;
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.Notes = this.Notes;
			_tmp.Mp3Flag = this.Mp3Flag;
			_tmp.Mp3SizeInKb = this.Mp3SizeInKb;
			_tmp.Enabled = this.Enabled;
			_tmp.StorageDuration = this.StorageDuration;
			_tmp.BillingDuration = this.BillingDuration;
			_tmp.BillingId = this.BillingId;
			_tmp.DurationSec = this.DurationSec;
			_tmp.AuxiliaryConferenceId = this.AuxiliaryConferenceId;
			_tmp.MediaType = this.MediaType;
			_tmp.HostedLinkExpiryDate = this.HostedLinkExpiryDate;
			_tmp.HostedLinkType = this.HostedLinkType;
			_tmp.HostedLinkUrl = this.HostedLinkUrl;
			_tmp.ExtendRecordingDate = this.ExtendRecordingDate;
			_tmp.RecordingGuid = this.RecordingGuid;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._recordingParticipantUsageRecordingId != null)
				_tmp.RecordingParticipantUsageCollection = (TList<RecordingParticipantUsage>) MakeCopyOf(this.RecordingParticipantUsageCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RecordingColumn"/> which has raised the event.</param>
		public void OnColumnChanging(RecordingColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RecordingColumn"/> which has raised the event.</param>
		public void OnColumnChanged(RecordingColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RecordingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(RecordingColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				RecordingEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new RecordingEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="RecordingColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(RecordingColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				RecordingEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new RecordingEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region RecordingEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Recording"/> object.
	/// </remarks>
	public class RecordingEventArgs : System.EventArgs
	{
		private RecordingColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the RecordingEventArgs class.
		///</summary>
		public RecordingEventArgs(RecordingColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the RecordingEventArgs class.
		///</summary>
		public RecordingEventArgs(RecordingColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The RecordingColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="RecordingColumn" />
		public RecordingColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Recording related events.
	///</summary>
	public delegate void RecordingEventHandler(object sender, RecordingEventArgs e);
	
	#region RecordingComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class RecordingComparer : System.Collections.Generic.IComparer<Recording>
	{
		RecordingColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:RecordingComparer"/> class.
        /// </summary>
		public RecordingComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:RecordingComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public RecordingComparer(RecordingColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Recording"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Recording"/> to compare.</param>
        /// <param name="b">The second <c>Recording</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Recording a, Recording b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Recording entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Recording a, Recording b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public RecordingColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region RecordingKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Recording"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class RecordingKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the RecordingKey class.
		/// </summary>
		public RecordingKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the RecordingKey class.
		/// </summary>
		public RecordingKey(RecordingBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the RecordingKey class.
		/// </summary>
		public RecordingKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private RecordingBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public RecordingBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region RecordingColumn Enum
	
	/// <summary>
	/// Enumerate the Recording columns.
	/// </summary>
	[Serializable]
	public enum RecordingColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// BridgeId : 
		/// </summary>
		[EnumTextValue("BridgeID")]
		[ColumnEnum("BridgeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		BridgeId = 3,
		/// <summary>
		/// RecordingStartTime : 
		/// </summary>
		[EnumTextValue("RecordingStartTime")]
		[ColumnEnum("RecordingStartTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RecordingStartTime = 4,
		/// <summary>
		/// RecordingEndTime : 
		/// </summary>
		[EnumTextValue("RecordingEndTime")]
		[ColumnEnum("RecordingEndTime", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		RecordingEndTime = 5,
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		[EnumTextValue("ModeratorCode")]
		[ColumnEnum("ModeratorCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 16)]
		ModeratorCode = 6,
		/// <summary>
		/// PassCode : 
		/// </summary>
		[EnumTextValue("PassCode")]
		[ColumnEnum("PassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 16)]
		PassCode = 7,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		PriCustomerNumber = 8,
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		[EnumTextValue("SecCustomerNumber")]
		[ColumnEnum("SecCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 6)]
		SecCustomerNumber = 9,
		/// <summary>
		/// RecordingDirectory : 
		/// </summary>
		[EnumTextValue("RecordingDirectory")]
		[ColumnEnum("RecordingDirectory", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		RecordingDirectory = 10,
		/// <summary>
		/// UniqueConferenceId : 
		/// </summary>
		[EnumTextValue("UniqueConferenceID")]
		[ColumnEnum("UniqueConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		UniqueConferenceId = 11,
		/// <summary>
		/// ReplayCode : 
		/// </summary>
		[EnumTextValue("ReplayCode")]
		[ColumnEnum("ReplayCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		ReplayCode = 12,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		CreatedDate = 13,
		/// <summary>
		/// ProcessFlag : 
		/// </summary>
		[EnumTextValue("ProcessFlag")]
		[ColumnEnum("ProcessFlag", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		ProcessFlag = 14,
		/// <summary>
		/// EmailSent : 
		/// </summary>
		[EnumTextValue("EmailSent")]
		[ColumnEnum("EmailSent", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		EmailSent = 15,
		/// <summary>
		/// RpFileNumber : 
		/// </summary>
		[EnumTextValue("RPFileNumber")]
		[ColumnEnum("RPFileNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		RpFileNumber = 16,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ModeratorId = 17,
		/// <summary>
		/// Notes : 
		/// </summary>
		[EnumTextValue("Notes")]
		[ColumnEnum("Notes", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Notes = 18,
		/// <summary>
		/// Mp3Flag : 
		/// </summary>
		[EnumTextValue("Mp3Flag")]
		[ColumnEnum("Mp3Flag", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		Mp3Flag = 19,
		/// <summary>
		/// Mp3SizeInKb : 
		/// </summary>
		[EnumTextValue("Mp3SizeInKB")]
		[ColumnEnum("Mp3SizeInKB", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Mp3SizeInKb = 20,
		/// <summary>
		/// Enabled : 
		/// </summary>
		[EnumTextValue("Enabled")]
		[ColumnEnum("Enabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Enabled = 21,
		/// <summary>
		/// StorageDuration : 
		/// </summary>
		[EnumTextValue("StorageDuration")]
		[ColumnEnum("StorageDuration", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		StorageDuration = 22,
		/// <summary>
		/// BillingDuration : 
		/// </summary>
		[EnumTextValue("BillingDuration")]
		[ColumnEnum("BillingDuration", typeof(System.Int16), System.Data.DbType.Int16, false, false, true)]
		BillingDuration = 23,
		/// <summary>
		/// BillingId : 
		/// </summary>
		[EnumTextValue("BillingID")]
		[ColumnEnum("BillingID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		BillingId = 24,
		/// <summary>
		/// DurationSec : 
		/// </summary>
		[EnumTextValue("DurationSec")]
		[ColumnEnum("DurationSec", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DurationSec = 25,
		/// <summary>
		/// AuxiliaryConferenceId : 
		/// </summary>
		[EnumTextValue("AuxiliaryConferenceID")]
		[ColumnEnum("AuxiliaryConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		AuxiliaryConferenceId = 26,
		/// <summary>
		/// MediaType : 
		/// </summary>
		[EnumTextValue("MediaType")]
		[ColumnEnum("MediaType", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 20)]
		MediaType = 27,
		/// <summary>
		/// HostedLinkExpiryDate : 
		/// </summary>
		[EnumTextValue("HostedLinkExpiryDate")]
		[ColumnEnum("HostedLinkExpiryDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		HostedLinkExpiryDate = 28,
		/// <summary>
		/// HostedLinkType : 
		/// </summary>
		[EnumTextValue("HostedLinkType")]
		[ColumnEnum("HostedLinkType", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, false, false, true, 1)]
		HostedLinkType = 29,
		/// <summary>
		/// HostedLinkUrl : 
		/// </summary>
		[EnumTextValue("HostedLinkURL")]
		[ColumnEnum("HostedLinkURL", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 500)]
		HostedLinkUrl = 30,
		/// <summary>
		/// ExtendRecordingDate : 
		/// </summary>
		[EnumTextValue("ExtendRecordingDate")]
		[ColumnEnum("ExtendRecordingDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		ExtendRecordingDate = 31,
		/// <summary>
		/// RecordingGuid : 
		/// </summary>
		[EnumTextValue("RecordingGuid")]
		[ColumnEnum("RecordingGuid", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		RecordingGuid = 32
	}//End enum

	#endregion RecordingColumn Enum

} // end namespace
