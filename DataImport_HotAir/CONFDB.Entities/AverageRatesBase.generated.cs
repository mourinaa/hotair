
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file AverageRates.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'AverageRates' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class AverageRatesBase : EntityBase, CONFDB.Entities.IAverageRates, IEntityId<AverageRatesKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private AverageRatesEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private AverageRatesEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private AverageRatesEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<AverageRates> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event AverageRatesEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event AverageRatesEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="AverageRatesBase"/> instance.
		///</summary>
		public AverageRatesBase()
		{
			this.entityData = new AverageRatesEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="AverageRatesBase"/> instance.
		///</summary>
		///<param name="_usageMonth"></param>
		///<param name="_productRateId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_medianRetailRate"></param>
		///<param name="_averageRetailRate"></param>
		///<param name="_weightedAverageRetailRate"></param>
		///<param name="_medianWsRate"></param>
		///<param name="_averageWsRate"></param>
		///<param name="_weightedAverageWsRate"></param>
		///<param name="_usageSeconds"></param>
		///<param name="_usageQuantity"></param>
		public AverageRatesBase(System.DateTime _usageMonth, System.Int32 _productRateId, 
			System.String _wholesalerId, System.Decimal? _medianRetailRate, System.Decimal? _averageRetailRate, 
			System.Decimal? _weightedAverageRetailRate, System.Decimal? _medianWsRate, System.Decimal? _averageWsRate, 
			System.Decimal? _weightedAverageWsRate, System.Int32 _usageSeconds, System.Int32 _usageQuantity)
		{
			this.entityData = new AverageRatesEntityData();
			this.backupData = null;

			this.UsageMonth = _usageMonth;
			this.ProductRateId = _productRateId;
			this.WholesalerId = _wholesalerId;
			this.MedianRetailRate = _medianRetailRate;
			this.AverageRetailRate = _averageRetailRate;
			this.WeightedAverageRetailRate = _weightedAverageRetailRate;
			this.MedianWsRate = _medianWsRate;
			this.AverageWsRate = _averageWsRate;
			this.WeightedAverageWsRate = _weightedAverageWsRate;
			this.UsageSeconds = _usageSeconds;
			this.UsageQuantity = _usageQuantity;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="AverageRates"/> instance.
		///</summary>
		///<param name="_usageMonth"></param>
		///<param name="_productRateId"></param>
		///<param name="_wholesalerId"></param>
		///<param name="_medianRetailRate"></param>
		///<param name="_averageRetailRate"></param>
		///<param name="_weightedAverageRetailRate"></param>
		///<param name="_medianWsRate"></param>
		///<param name="_averageWsRate"></param>
		///<param name="_weightedAverageWsRate"></param>
		///<param name="_usageSeconds"></param>
		///<param name="_usageQuantity"></param>
		public static AverageRates CreateAverageRates(System.DateTime _usageMonth, System.Int32 _productRateId, 
			System.String _wholesalerId, System.Decimal? _medianRetailRate, System.Decimal? _averageRetailRate, 
			System.Decimal? _weightedAverageRetailRate, System.Decimal? _medianWsRate, System.Decimal? _averageWsRate, 
			System.Decimal? _weightedAverageWsRate, System.Int32 _usageSeconds, System.Int32 _usageQuantity)
		{
			AverageRates newAverageRates = new AverageRates();
			newAverageRates.UsageMonth = _usageMonth;
			newAverageRates.ProductRateId = _productRateId;
			newAverageRates.WholesalerId = _wholesalerId;
			newAverageRates.MedianRetailRate = _medianRetailRate;
			newAverageRates.AverageRetailRate = _averageRetailRate;
			newAverageRates.WeightedAverageRetailRate = _weightedAverageRetailRate;
			newAverageRates.MedianWsRate = _medianWsRate;
			newAverageRates.AverageWsRate = _averageWsRate;
			newAverageRates.WeightedAverageWsRate = _weightedAverageWsRate;
			newAverageRates.UsageSeconds = _usageSeconds;
			newAverageRates.UsageQuantity = _usageQuantity;
			return newAverageRates;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the UsageMonth property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.DateTime UsageMonth
		{
			get
			{
				return this.entityData.UsageMonth; 
			}
			
			set
			{
				if (this.entityData.UsageMonth == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.UsageMonth, this.entityData.UsageMonth);
				this.entityData.UsageMonth = value;
				this.EntityId.UsageMonth = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.UsageMonth, this.entityData.UsageMonth);
				OnPropertyChanged("UsageMonth");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the UsageMonth property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the UsageMonth property.</remarks>
		/// <value>This type is datetime</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.DateTime OriginalUsageMonth
		{
			get { return this.entityData.OriginalUsageMonth; }
			set { this.entityData.OriginalUsageMonth = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the ProductRateId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false)]
		public virtual System.Int32 ProductRateId
		{
			get
			{
				return this.entityData.ProductRateId; 
			}
			
			set
			{
				if (this.entityData.ProductRateId == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.ProductRateId, this.entityData.ProductRateId);
				this.entityData.ProductRateId = value;
				this.EntityId.ProductRateId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.ProductRateId, this.entityData.ProductRateId);
				OnPropertyChanged("ProductRateId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the ProductRateID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the ProductRateID property.</remarks>
		/// <value>This type is int</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.Int32 OriginalProductRateId
		{
			get { return this.entityData.OriginalProductRateId; }
			set { this.entityData.OriginalProductRateId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is char.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				this.EntityId.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Get the original value of the WholesalerID property.
		///		
		/// </summary>
		/// <remarks>This is the original value of the WholesalerID property.</remarks>
		/// <value>This type is char</value>
		[BrowsableAttribute(false)/*, XmlIgnoreAttribute()*/]
		public  virtual System.String OriginalWholesalerId
		{
			get { return this.entityData.OriginalWholesalerId; }
			set { this.entityData.OriginalWholesalerId = value; }
		}
		
		/// <summary>
		/// 	Gets or sets the MedianRetailRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMedianRetailRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MedianRetailRate
		{
			get
			{
				return this.entityData.MedianRetailRate; 
			}
			
			set
			{
				if (this.entityData.MedianRetailRate == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.MedianRetailRate, this.entityData.MedianRetailRate);
				this.entityData.MedianRetailRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.MedianRetailRate, this.entityData.MedianRetailRate);
				OnPropertyChanged("MedianRetailRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AverageRetailRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAverageRetailRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AverageRetailRate
		{
			get
			{
				return this.entityData.AverageRetailRate; 
			}
			
			set
			{
				if (this.entityData.AverageRetailRate == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.AverageRetailRate, this.entityData.AverageRetailRate);
				this.entityData.AverageRetailRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.AverageRetailRate, this.entityData.AverageRetailRate);
				OnPropertyChanged("AverageRetailRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WeightedAverageRetailRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWeightedAverageRetailRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WeightedAverageRetailRate
		{
			get
			{
				return this.entityData.WeightedAverageRetailRate; 
			}
			
			set
			{
				if (this.entityData.WeightedAverageRetailRate == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.WeightedAverageRetailRate, this.entityData.WeightedAverageRetailRate);
				this.entityData.WeightedAverageRetailRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.WeightedAverageRetailRate, this.entityData.WeightedAverageRetailRate);
				OnPropertyChanged("WeightedAverageRetailRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MedianWsRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsMedianWsRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? MedianWsRate
		{
			get
			{
				return this.entityData.MedianWsRate; 
			}
			
			set
			{
				if (this.entityData.MedianWsRate == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.MedianWsRate, this.entityData.MedianWsRate);
				this.entityData.MedianWsRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.MedianWsRate, this.entityData.MedianWsRate);
				OnPropertyChanged("MedianWsRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the AverageWsRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsAverageWsRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? AverageWsRate
		{
			get
			{
				return this.entityData.AverageWsRate; 
			}
			
			set
			{
				if (this.entityData.AverageWsRate == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.AverageWsRate, this.entityData.AverageWsRate);
				this.entityData.AverageWsRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.AverageWsRate, this.entityData.AverageWsRate);
				OnPropertyChanged("AverageWsRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WeightedAverageWsRate property. 
		///		
		/// </summary>
		/// <value>This type is decimal.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return 0.0m. It is up to the developer
		/// to check the value of IsWeightedAverageWsRateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Decimal? WeightedAverageWsRate
		{
			get
			{
				return this.entityData.WeightedAverageWsRate; 
			}
			
			set
			{
				if (this.entityData.WeightedAverageWsRate == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.WeightedAverageWsRate, this.entityData.WeightedAverageWsRate);
				this.entityData.WeightedAverageWsRate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.WeightedAverageWsRate, this.entityData.WeightedAverageWsRate);
				OnPropertyChanged("WeightedAverageWsRate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UsageSeconds property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UsageSeconds
		{
			get
			{
				return this.entityData.UsageSeconds; 
			}
			
			set
			{
				if (this.entityData.UsageSeconds == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.UsageSeconds, this.entityData.UsageSeconds);
				this.entityData.UsageSeconds = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.UsageSeconds, this.entityData.UsageSeconds);
				OnPropertyChanged("UsageSeconds");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UsageQuantity property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 UsageQuantity
		{
			get
			{
				return this.entityData.UsageQuantity; 
			}
			
			set
			{
				if (this.entityData.UsageQuantity == value)
					return;
					
				OnColumnChanging(AverageRatesColumn.UsageQuantity, this.entityData.UsageQuantity);
				this.entityData.UsageQuantity = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(AverageRatesColumn.UsageQuantity, this.entityData.UsageQuantity);
				OnPropertyChanged("UsageQuantity");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "AverageRates"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"UsageMonth", "ProductRateID", "WholesalerID", "MedianRetailRate", "AverageRetailRate", "WeightedAverageRetailRate", "MedianWSRate", "AverageWSRate", "WeightedAverageWSRate", "UsageSeconds", "UsageQuantity"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as AverageRatesEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (AverageRates) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<AverageRates>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as AverageRates);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed AverageRates Entity 
		///</summary>
		public virtual AverageRates Copy()
		{
			//shallow copy entity
			AverageRates copy = new AverageRates();
			copy.SuppressEntityEvents = true;
			copy.UsageMonth = this.UsageMonth;
			copy.OriginalUsageMonth = this.OriginalUsageMonth;
			copy.ProductRateId = this.ProductRateId;
			copy.OriginalProductRateId = this.OriginalProductRateId;
			copy.WholesalerId = this.WholesalerId;
			copy.OriginalWholesalerId = this.OriginalWholesalerId;
			copy.MedianRetailRate = this.MedianRetailRate;
			copy.AverageRetailRate = this.AverageRetailRate;
			copy.WeightedAverageRetailRate = this.WeightedAverageRetailRate;
			copy.MedianWsRate = this.MedianWsRate;
			copy.AverageWsRate = this.AverageWsRate;
			copy.WeightedAverageWsRate = this.WeightedAverageWsRate;
			copy.UsageSeconds = this.UsageSeconds;
			copy.UsageQuantity = this.UsageQuantity;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed AverageRates Entity which is a deep copy of the current entity.
		///</summary>
		public virtual AverageRates DeepCopy()
		{
			return EntityHelper.Clone<AverageRates>(this as AverageRates);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as AverageRatesEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as AverageRatesEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(AverageRatesColumn column)
		{
			switch(column)
			{
					case AverageRatesColumn.UsageMonth:
					return entityData.UsageMonth != _originalData.UsageMonth;
					case AverageRatesColumn.ProductRateId:
					return entityData.ProductRateId != _originalData.ProductRateId;
					case AverageRatesColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case AverageRatesColumn.MedianRetailRate:
					return entityData.MedianRetailRate != _originalData.MedianRetailRate;
					case AverageRatesColumn.AverageRetailRate:
					return entityData.AverageRetailRate != _originalData.AverageRetailRate;
					case AverageRatesColumn.WeightedAverageRetailRate:
					return entityData.WeightedAverageRetailRate != _originalData.WeightedAverageRetailRate;
					case AverageRatesColumn.MedianWsRate:
					return entityData.MedianWsRate != _originalData.MedianWsRate;
					case AverageRatesColumn.AverageWsRate:
					return entityData.AverageWsRate != _originalData.AverageWsRate;
					case AverageRatesColumn.WeightedAverageWsRate:
					return entityData.WeightedAverageWsRate != _originalData.WeightedAverageWsRate;
					case AverageRatesColumn.UsageSeconds:
					return entityData.UsageSeconds != _originalData.UsageSeconds;
					case AverageRatesColumn.UsageQuantity:
					return entityData.UsageQuantity != _originalData.UsageQuantity;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.UsageMonth != _originalData.UsageMonth;
			result = result || entityData.ProductRateId != _originalData.ProductRateId;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.MedianRetailRate != _originalData.MedianRetailRate;
			result = result || entityData.AverageRetailRate != _originalData.AverageRetailRate;
			result = result || entityData.WeightedAverageRetailRate != _originalData.WeightedAverageRetailRate;
			result = result || entityData.MedianWsRate != _originalData.MedianWsRate;
			result = result || entityData.AverageWsRate != _originalData.AverageWsRate;
			result = result || entityData.WeightedAverageWsRate != _originalData.WeightedAverageWsRate;
			result = result || entityData.UsageSeconds != _originalData.UsageSeconds;
			result = result || entityData.UsageQuantity != _originalData.UsageQuantity;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="AverageRatesBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is AverageRatesBase)
				return Equals(this, (AverageRatesBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="AverageRatesBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.UsageMonth.GetHashCode() ^ 
					this.ProductRateId.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					((this.MedianRetailRate == null) ? string.Empty : this.MedianRetailRate.ToString()).GetHashCode() ^ 
					((this.AverageRetailRate == null) ? string.Empty : this.AverageRetailRate.ToString()).GetHashCode() ^ 
					((this.WeightedAverageRetailRate == null) ? string.Empty : this.WeightedAverageRetailRate.ToString()).GetHashCode() ^ 
					((this.MedianWsRate == null) ? string.Empty : this.MedianWsRate.ToString()).GetHashCode() ^ 
					((this.AverageWsRate == null) ? string.Empty : this.AverageWsRate.ToString()).GetHashCode() ^ 
					((this.WeightedAverageWsRate == null) ? string.Empty : this.WeightedAverageWsRate.ToString()).GetHashCode() ^ 
					this.UsageSeconds.GetHashCode() ^ 
					this.UsageQuantity.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="AverageRatesBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(AverageRatesBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="AverageRatesBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="AverageRatesBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="AverageRatesBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(AverageRatesBase Object1, AverageRatesBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.UsageMonth != Object2.UsageMonth)
				equal = false;
			if (Object1.ProductRateId != Object2.ProductRateId)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if ( Object1.MedianRetailRate != null && Object2.MedianRetailRate != null )
			{
				if (Object1.MedianRetailRate != Object2.MedianRetailRate)
					equal = false;
			}
			else if (Object1.MedianRetailRate == null ^ Object2.MedianRetailRate == null )
			{
				equal = false;
			}
			if ( Object1.AverageRetailRate != null && Object2.AverageRetailRate != null )
			{
				if (Object1.AverageRetailRate != Object2.AverageRetailRate)
					equal = false;
			}
			else if (Object1.AverageRetailRate == null ^ Object2.AverageRetailRate == null )
			{
				equal = false;
			}
			if ( Object1.WeightedAverageRetailRate != null && Object2.WeightedAverageRetailRate != null )
			{
				if (Object1.WeightedAverageRetailRate != Object2.WeightedAverageRetailRate)
					equal = false;
			}
			else if (Object1.WeightedAverageRetailRate == null ^ Object2.WeightedAverageRetailRate == null )
			{
				equal = false;
			}
			if ( Object1.MedianWsRate != null && Object2.MedianWsRate != null )
			{
				if (Object1.MedianWsRate != Object2.MedianWsRate)
					equal = false;
			}
			else if (Object1.MedianWsRate == null ^ Object2.MedianWsRate == null )
			{
				equal = false;
			}
			if ( Object1.AverageWsRate != null && Object2.AverageWsRate != null )
			{
				if (Object1.AverageWsRate != Object2.AverageWsRate)
					equal = false;
			}
			else if (Object1.AverageWsRate == null ^ Object2.AverageWsRate == null )
			{
				equal = false;
			}
			if ( Object1.WeightedAverageWsRate != null && Object2.WeightedAverageWsRate != null )
			{
				if (Object1.WeightedAverageWsRate != Object2.WeightedAverageWsRate)
					equal = false;
			}
			else if (Object1.WeightedAverageWsRate == null ^ Object2.WeightedAverageWsRate == null )
			{
				equal = false;
			}
			if (Object1.UsageSeconds != Object2.UsageSeconds)
				equal = false;
			if (Object1.UsageQuantity != Object2.UsageQuantity)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((AverageRatesBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static AverageRatesComparer GetComparer()
        {
            return new AverageRatesComparer();
        }
        */

        // Comparer delegates back to AverageRates
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(AverageRates rhs, AverageRatesColumn which)
        {
            switch (which)
            {
            	
            	
            	case AverageRatesColumn.UsageMonth:
            		return this.UsageMonth.CompareTo(rhs.UsageMonth);
            		
            		                 
            	
            	
            	case AverageRatesColumn.ProductRateId:
            		return this.ProductRateId.CompareTo(rhs.ProductRateId);
            		
            		                 
            	
            	
            	case AverageRatesColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case AverageRatesColumn.MedianRetailRate:
            		return this.MedianRetailRate.Value.CompareTo(rhs.MedianRetailRate.Value);
            		
            		                 
            	
            	
            	case AverageRatesColumn.AverageRetailRate:
            		return this.AverageRetailRate.Value.CompareTo(rhs.AverageRetailRate.Value);
            		
            		                 
            	
            	
            	case AverageRatesColumn.WeightedAverageRetailRate:
            		return this.WeightedAverageRetailRate.Value.CompareTo(rhs.WeightedAverageRetailRate.Value);
            		
            		                 
            	
            	
            	case AverageRatesColumn.MedianWsRate:
            		return this.MedianWsRate.Value.CompareTo(rhs.MedianWsRate.Value);
            		
            		                 
            	
            	
            	case AverageRatesColumn.AverageWsRate:
            		return this.AverageWsRate.Value.CompareTo(rhs.AverageWsRate.Value);
            		
            		                 
            	
            	
            	case AverageRatesColumn.WeightedAverageWsRate:
            		return this.WeightedAverageWsRate.Value.CompareTo(rhs.WeightedAverageWsRate.Value);
            		
            		                 
            	
            	
            	case AverageRatesColumn.UsageSeconds:
            		return this.UsageSeconds.CompareTo(rhs.UsageSeconds);
            		
            		                 
            	
            	
            	case AverageRatesColumn.UsageQuantity:
            		return this.UsageQuantity.CompareTo(rhs.UsageQuantity);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<AverageRatesKey> Members
		
		// member variable for the EntityId property
		private AverageRatesKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual AverageRatesKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new AverageRatesKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("AverageRates")
					.Append("|").Append( this.UsageMonth.ToString())
					.Append("|").Append( this.ProductRateId.ToString())
					.Append("|").Append( this.WholesalerId.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{12}{11}- UsageMonth: {0}{11}- ProductRateId: {1}{11}- WholesalerId: {2}{11}- MedianRetailRate: {3}{11}- AverageRetailRate: {4}{11}- WeightedAverageRetailRate: {5}{11}- MedianWsRate: {6}{11}- AverageWsRate: {7}{11}- WeightedAverageWsRate: {8}{11}- UsageSeconds: {9}{11}- UsageQuantity: {10}{11}", 
				this.UsageMonth,
				this.ProductRateId,
				this.WholesalerId,
				(this.MedianRetailRate == null) ? string.Empty : this.MedianRetailRate.ToString(),
				(this.AverageRetailRate == null) ? string.Empty : this.AverageRetailRate.ToString(),
				(this.WeightedAverageRetailRate == null) ? string.Empty : this.WeightedAverageRetailRate.ToString(),
				(this.MedianWsRate == null) ? string.Empty : this.MedianWsRate.ToString(),
				(this.AverageWsRate == null) ? string.Empty : this.AverageWsRate.ToString(),
				(this.WeightedAverageWsRate == null) ? string.Empty : this.WeightedAverageWsRate.ToString(),
				this.UsageSeconds,
				this.UsageQuantity,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'AverageRates' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class AverageRatesEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// UsageMonth : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "AverageRates"</remarks>
			public System.DateTime UsageMonth;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.DateTime OriginalUsageMonth;
			
			/// <summary>			
			/// ProductRateID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "AverageRates"</remarks>
			public System.Int32 ProductRateId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.Int32 OriginalProductRateId;
			
			/// <summary>			
			/// WholesalerID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "AverageRates"</remarks>
			public System.String WholesalerId;
				
			/// <summary>
			/// keep a copy of the original so it can be used for editable primary keys.
			/// </summary>
			public System.String OriginalWholesalerId;
			
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// MedianRetailRate : 
		/// </summary>
		public System.Decimal?		  MedianRetailRate = null;
		
		/// <summary>
		/// AverageRetailRate : 
		/// </summary>
		public System.Decimal?		  AverageRetailRate = null;
		
		/// <summary>
		/// WeightedAverageRetailRate : 
		/// </summary>
		public System.Decimal?		  WeightedAverageRetailRate = null;
		
		/// <summary>
		/// MedianWSRate : 
		/// </summary>
		public System.Decimal?		  MedianWsRate = null;
		
		/// <summary>
		/// AverageWSRate : 
		/// </summary>
		public System.Decimal?		  AverageWsRate = null;
		
		/// <summary>
		/// WeightedAverageWSRate : 
		/// </summary>
		public System.Decimal?		  WeightedAverageWsRate = null;
		
		/// <summary>
		/// UsageSeconds : 
		/// </summary>
		public System.Int32		  UsageSeconds = (int)0;
		
		/// <summary>
		/// UsageQuantity : 
		/// </summary>
		public System.Int32		  UsageQuantity = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			AverageRatesEntityData _tmp = new AverageRatesEntityData();
						
			_tmp.UsageMonth = this.UsageMonth;
			_tmp.OriginalUsageMonth = this.OriginalUsageMonth;
			_tmp.ProductRateId = this.ProductRateId;
			_tmp.OriginalProductRateId = this.OriginalProductRateId;
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.OriginalWholesalerId = this.OriginalWholesalerId;
			
			_tmp.MedianRetailRate = this.MedianRetailRate;
			_tmp.AverageRetailRate = this.AverageRetailRate;
			_tmp.WeightedAverageRetailRate = this.WeightedAverageRetailRate;
			_tmp.MedianWsRate = this.MedianWsRate;
			_tmp.AverageWsRate = this.AverageWsRate;
			_tmp.WeightedAverageWsRate = this.WeightedAverageWsRate;
			_tmp.UsageSeconds = this.UsageSeconds;
			_tmp.UsageQuantity = this.UsageQuantity;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AverageRatesColumn"/> which has raised the event.</param>
		public void OnColumnChanging(AverageRatesColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AverageRatesColumn"/> which has raised the event.</param>
		public void OnColumnChanged(AverageRatesColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AverageRatesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(AverageRatesColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				AverageRatesEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new AverageRatesEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="AverageRatesColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(AverageRatesColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				AverageRatesEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new AverageRatesEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region AverageRatesEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="AverageRates"/> object.
	/// </remarks>
	public class AverageRatesEventArgs : System.EventArgs
	{
		private AverageRatesColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the AverageRatesEventArgs class.
		///</summary>
		public AverageRatesEventArgs(AverageRatesColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the AverageRatesEventArgs class.
		///</summary>
		public AverageRatesEventArgs(AverageRatesColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The AverageRatesColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="AverageRatesColumn" />
		public AverageRatesColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all AverageRates related events.
	///</summary>
	public delegate void AverageRatesEventHandler(object sender, AverageRatesEventArgs e);
	
	#region AverageRatesComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class AverageRatesComparer : System.Collections.Generic.IComparer<AverageRates>
	{
		AverageRatesColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:AverageRatesComparer"/> class.
        /// </summary>
		public AverageRatesComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:AverageRatesComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public AverageRatesComparer(AverageRatesColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="AverageRates"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="AverageRates"/> to compare.</param>
        /// <param name="b">The second <c>AverageRates</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(AverageRates a, AverageRates b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(AverageRates entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(AverageRates a, AverageRates b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public AverageRatesColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region AverageRatesKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="AverageRates"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class AverageRatesKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the AverageRatesKey class.
		/// </summary>
		public AverageRatesKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the AverageRatesKey class.
		/// </summary>
		public AverageRatesKey(AverageRatesBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.UsageMonth = entity.UsageMonth;
				this.ProductRateId = entity.ProductRateId;
				this.WholesalerId = entity.WholesalerId;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the AverageRatesKey class.
		/// </summary>
		public AverageRatesKey(System.DateTime _usageMonth, System.Int32 _productRateId, System.String _wholesalerId)
		{
			#region Init Properties

			this.UsageMonth = _usageMonth;
			this.ProductRateId = _productRateId;
			this.WholesalerId = _wholesalerId;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private AverageRatesBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public AverageRatesBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the UsageMonth property
		private System.DateTime _usageMonth;
		
		/// <summary>
		/// Gets or sets the UsageMonth property.
		/// </summary>
		public System.DateTime UsageMonth
		{
			get { return _usageMonth; }
			set
			{
				if ( this.Entity != null )
					this.Entity.UsageMonth = value;
				
				_usageMonth = value;
			}
		}
		
		// member variable for the ProductRateId property
		private System.Int32 _productRateId;
		
		/// <summary>
		/// Gets or sets the ProductRateId property.
		/// </summary>
		public System.Int32 ProductRateId
		{
			get { return _productRateId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.ProductRateId = value;
				
				_productRateId = value;
			}
		}
		
		// member variable for the WholesalerId property
		private System.String _wholesalerId;
		
		/// <summary>
		/// Gets or sets the WholesalerId property.
		/// </summary>
		public System.String WholesalerId
		{
			get { return _wholesalerId; }
			set
			{
				if ( this.Entity != null )
					this.Entity.WholesalerId = value;
				
				_wholesalerId = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				UsageMonth = ( values["UsageMonth"] != null ) ? (System.DateTime) EntityUtil.ChangeType(values["UsageMonth"], typeof(System.DateTime)) : DateTime.MinValue;
				ProductRateId = ( values["ProductRateId"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["ProductRateId"], typeof(System.Int32)) : (int)0;
				WholesalerId = ( values["WholesalerId"] != null ) ? (System.String) EntityUtil.ChangeType(values["WholesalerId"], typeof(System.String)) : string.Empty;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("UsageMonth", UsageMonth);
			values.Add("ProductRateId", ProductRateId);
			values.Add("WholesalerId", WholesalerId);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("UsageMonth: {0}{3}ProductRateId: {1}{3}WholesalerId: {2}{3}",
								UsageMonth,
								ProductRateId,
								WholesalerId,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region AverageRatesColumn Enum
	
	/// <summary>
	/// Enumerate the AverageRates columns.
	/// </summary>
	[Serializable]
	public enum AverageRatesColumn : int
	{
		/// <summary>
		/// UsageMonth : 
		/// </summary>
		[EnumTextValue("UsageMonth")]
		[ColumnEnum("UsageMonth", typeof(System.DateTime), System.Data.DbType.DateTime, true, false, false)]
		UsageMonth = 1,
		/// <summary>
		/// ProductRateId : 
		/// </summary>
		[EnumTextValue("ProductRateID")]
		[ColumnEnum("ProductRateID", typeof(System.Int32), System.Data.DbType.Int32, true, false, false)]
		ProductRateId = 2,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiStringFixedLength, true, false, false, 10)]
		WholesalerId = 3,
		/// <summary>
		/// MedianRetailRate : 
		/// </summary>
		[EnumTextValue("MedianRetailRate")]
		[ColumnEnum("MedianRetailRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MedianRetailRate = 4,
		/// <summary>
		/// AverageRetailRate : 
		/// </summary>
		[EnumTextValue("AverageRetailRate")]
		[ColumnEnum("AverageRetailRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AverageRetailRate = 5,
		/// <summary>
		/// WeightedAverageRetailRate : 
		/// </summary>
		[EnumTextValue("WeightedAverageRetailRate")]
		[ColumnEnum("WeightedAverageRetailRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WeightedAverageRetailRate = 6,
		/// <summary>
		/// MedianWsRate : 
		/// </summary>
		[EnumTextValue("MedianWSRate")]
		[ColumnEnum("MedianWSRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		MedianWsRate = 7,
		/// <summary>
		/// AverageWsRate : 
		/// </summary>
		[EnumTextValue("AverageWSRate")]
		[ColumnEnum("AverageWSRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		AverageWsRate = 8,
		/// <summary>
		/// WeightedAverageWsRate : 
		/// </summary>
		[EnumTextValue("WeightedAverageWSRate")]
		[ColumnEnum("WeightedAverageWSRate", typeof(System.Decimal), System.Data.DbType.Decimal, false, false, true)]
		WeightedAverageWsRate = 9,
		/// <summary>
		/// UsageSeconds : 
		/// </summary>
		[EnumTextValue("UsageSeconds")]
		[ColumnEnum("UsageSeconds", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UsageSeconds = 10,
		/// <summary>
		/// UsageQuantity : 
		/// </summary>
		[EnumTextValue("UsageQuantity")]
		[ColumnEnum("UsageQuantity", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		UsageQuantity = 11
	}//End enum

	#endregion AverageRatesColumn Enum

} // end namespace
