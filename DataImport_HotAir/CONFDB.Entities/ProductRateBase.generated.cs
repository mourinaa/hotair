
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file ProductRate.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'ProductRate' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class ProductRateBase : EntityBase, CONFDB.Entities.IProductRate, IEntityId<ProductRateKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ProductRateEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ProductRateEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ProductRateEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<ProductRate> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ProductRateEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ProductRateEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ProductRateBase"/> instance.
		///</summary>
		public ProductRateBase()
		{
			this.entityData = new ProductRateEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ProductRateBase"/> instance.
		///</summary>
		///<param name="_productId"></param>
		///<param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
		///<param name="_productRateIntervalId"></param>
		///<param name="_taxableId"></param>
		///<param name="_countryId"></param>
		///<param name="_name"></param>
		///<param name="_displayName"></param>
		///<param name="_description"></param>
		///<param name="_displayOrder"></param>
		///<param name="_minimumTimeBeforeChargedSec"></param>
		///<param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
		public ProductRateBase(System.Int32 _productId, System.Int32 _productRateTypeId, System.Int32 _productRateIntervalId, 
			System.Int32 _taxableId, System.String _countryId, System.String _name, System.String _displayName, 
			System.String _description, System.Int32? _displayOrder, System.Int32? _minimumTimeBeforeChargedSec, 
			System.Int32 _ratingTypeId)
		{
			this.entityData = new ProductRateEntityData();
			this.backupData = null;

			this.ProductId = _productId;
			this.ProductRateTypeId = _productRateTypeId;
			this.ProductRateIntervalId = _productRateIntervalId;
			this.TaxableId = _taxableId;
			this.CountryId = _countryId;
			this.Name = _name;
			this.DisplayName = _displayName;
			this.Description = _description;
			this.DisplayOrder = _displayOrder;
			this.MinimumTimeBeforeChargedSec = _minimumTimeBeforeChargedSec;
			this.RatingTypeId = _ratingTypeId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="ProductRate"/> instance.
		///</summary>
		///<param name="_productId"></param>
		///<param name="_productRateTypeId">The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.</param>
		///<param name="_productRateIntervalId"></param>
		///<param name="_taxableId"></param>
		///<param name="_countryId"></param>
		///<param name="_name"></param>
		///<param name="_displayName"></param>
		///<param name="_description"></param>
		///<param name="_displayOrder"></param>
		///<param name="_minimumTimeBeforeChargedSec"></param>
		///<param name="_ratingTypeId">Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.</param>
		public static ProductRate CreateProductRate(System.Int32 _productId, System.Int32 _productRateTypeId, System.Int32 _productRateIntervalId, 
			System.Int32 _taxableId, System.String _countryId, System.String _name, System.String _displayName, 
			System.String _description, System.Int32? _displayOrder, System.Int32? _minimumTimeBeforeChargedSec, 
			System.Int32 _ratingTypeId)
		{
			ProductRate newProductRate = new ProductRate();
			newProductRate.ProductId = _productId;
			newProductRate.ProductRateTypeId = _productRateTypeId;
			newProductRate.ProductRateIntervalId = _productRateIntervalId;
			newProductRate.TaxableId = _taxableId;
			newProductRate.CountryId = _countryId;
			newProductRate.Name = _name;
			newProductRate.DisplayName = _displayName;
			newProductRate.Description = _description;
			newProductRate.DisplayOrder = _displayOrder;
			newProductRate.MinimumTimeBeforeChargedSec = _minimumTimeBeforeChargedSec;
			newProductRate.RatingTypeId = _ratingTypeId;
			return newProductRate;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(ProductRateColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProductId
		{
			get
			{
				return this.entityData.ProductId; 
			}
			
			set
			{
				if (this.entityData.ProductId == value)
					return;
					
				OnColumnChanging(ProductRateColumn.ProductId, this.entityData.ProductId);
				this.entityData.ProductId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.ProductId, this.entityData.ProductId);
				OnPropertyChanged("ProductId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductRateTypeId property. 
		///		The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute("The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProductRateTypeId
		{
			get
			{
				return this.entityData.ProductRateTypeId; 
			}
			
			set
			{
				if (this.entityData.ProductRateTypeId == value)
					return;
					
				OnColumnChanging(ProductRateColumn.ProductRateTypeId, this.entityData.ProductRateTypeId);
				this.entityData.ProductRateTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.ProductRateTypeId, this.entityData.ProductRateTypeId);
				OnPropertyChanged("ProductRateTypeId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ProductRateIntervalId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 ProductRateIntervalId
		{
			get
			{
				return this.entityData.ProductRateIntervalId; 
			}
			
			set
			{
				if (this.entityData.ProductRateIntervalId == value)
					return;
					
				OnColumnChanging(ProductRateColumn.ProductRateIntervalId, this.entityData.ProductRateIntervalId);
				this.entityData.ProductRateIntervalId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.ProductRateIntervalId, this.entityData.ProductRateIntervalId);
				OnPropertyChanged("ProductRateIntervalId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the TaxableId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 TaxableId
		{
			get
			{
				return this.entityData.TaxableId; 
			}
			
			set
			{
				if (this.entityData.TaxableId == value)
					return;
					
				OnColumnChanging(ProductRateColumn.TaxableId, this.entityData.TaxableId);
				this.entityData.TaxableId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.TaxableId, this.entityData.TaxableId);
				OnPropertyChanged("TaxableId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CountryId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 3)]
		public virtual System.String CountryId
		{
			get
			{
				return this.entityData.CountryId; 
			}
			
			set
			{
				if (this.entityData.CountryId == value)
					return;
					
				OnColumnChanging(ProductRateColumn.CountryId, this.entityData.CountryId);
				this.entityData.CountryId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.CountryId, this.entityData.CountryId);
				OnPropertyChanged("CountryId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Name property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String Name
		{
			get
			{
				return this.entityData.Name; 
			}
			
			set
			{
				if (this.entityData.Name == value)
					return;
					
				OnColumnChanging(ProductRateColumn.Name, this.entityData.Name);
				this.entityData.Name = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.Name, this.entityData.Name);
				OnPropertyChanged("Name");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String DisplayName
		{
			get
			{
				return this.entityData.DisplayName; 
			}
			
			set
			{
				if (this.entityData.DisplayName == value)
					return;
					
				OnColumnChanging(ProductRateColumn.DisplayName, this.entityData.DisplayName);
				this.entityData.DisplayName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.DisplayName, this.entityData.DisplayName);
				OnPropertyChanged("DisplayName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(ProductRateColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DisplayOrder property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsDisplayOrderNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? DisplayOrder
		{
			get
			{
				return this.entityData.DisplayOrder; 
			}
			
			set
			{
				if (this.entityData.DisplayOrder == value)
					return;
					
				OnColumnChanging(ProductRateColumn.DisplayOrder, this.entityData.DisplayOrder);
				this.entityData.DisplayOrder = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.DisplayOrder, this.entityData.DisplayOrder);
				OnPropertyChanged("DisplayOrder");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MinimumTimeBeforeChargedSec property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMinimumTimeBeforeChargedSecNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MinimumTimeBeforeChargedSec
		{
			get
			{
				return this.entityData.MinimumTimeBeforeChargedSec; 
			}
			
			set
			{
				if (this.entityData.MinimumTimeBeforeChargedSec == value)
					return;
					
				OnColumnChanging(ProductRateColumn.MinimumTimeBeforeChargedSec, this.entityData.MinimumTimeBeforeChargedSec);
				this.entityData.MinimumTimeBeforeChargedSec = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.MinimumTimeBeforeChargedSec, this.entityData.MinimumTimeBeforeChargedSec);
				OnPropertyChanged("MinimumTimeBeforeChargedSec");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RatingTypeId property. 
		///		Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute("Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 RatingTypeId
		{
			get
			{
				return this.entityData.RatingTypeId; 
			}
			
			set
			{
				if (this.entityData.RatingTypeId == value)
					return;
					
				OnColumnChanging(ProductRateColumn.RatingTypeId, this.entityData.RatingTypeId);
				this.entityData.RatingTypeId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ProductRateColumn.RatingTypeId, this.entityData.RatingTypeId);
				OnPropertyChanged("RatingTypeId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for CountryId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Country CountryIdSource
      	{
            get { return entityData.CountryIdSource; }
            set { entityData.CountryIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="RatingType"/>.
		/// </summary>
		/// <value>The source RatingType for RatingTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual RatingType RatingTypeIdSource
      	{
            get { return entityData.RatingTypeIdSource; }
            set { entityData.RatingTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Product"/>.
		/// </summary>
		/// <value>The source Product for ProductId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Product ProductIdSource
      	{
            get { return entityData.ProductIdSource; }
            set { entityData.ProductIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProductRateInterval"/>.
		/// </summary>
		/// <value>The source ProductRateInterval for ProductRateIntervalId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProductRateInterval ProductRateIntervalIdSource
      	{
            get { return entityData.ProductRateIntervalIdSource; }
            set { entityData.ProductRateIntervalIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="ProductRateType"/>.
		/// </summary>
		/// <value>The source ProductRateType for ProductRateTypeId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual ProductRateType ProductRateTypeIdSource
      	{
            get { return entityData.ProductRateTypeIdSource; }
            set { entityData.ProductRateTypeIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Taxable"/>.
		/// </summary>
		/// <value>The source Taxable for TaxableId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Taxable TaxableIdSource
      	{
            get { return entityData.TaxableIdSource; }
            set { entityData.TaxableIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of ProductRateValue objects
		///	which are related to this object through the relation ProductRate_ProductRateValue_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<ProductRateValue> ProductRateValueCollection
		{
			get { return entityData.ProductRateValueCollection; }
			set { entityData.ProductRateValueCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of AccessType_ProductRate objects
		///	which are related to this object through the relation ProductRate_AccessType_ProductRate_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<AccessType_ProductRate> AccessType_ProductRateCollection
		{
			get { return entityData.AccessType_ProductRateCollection; }
			set { entityData.AccessType_ProductRateCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of CustomerTransaction objects
		///	which are related to this object through the relation FK_CustomerTransaction_ProductRate
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<CustomerTransaction> CustomerTransactionCollection
		{
			get { return entityData.CustomerTransactionCollection; }
			set { entityData.CustomerTransactionCollection = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CountryId", "Country Id", 3));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Name", "Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("DisplayName", "Display Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Description", "Description", 100));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "ProductRate"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "ProductID", "ProductRateTypeID", "ProductRateIntervalID", "TaxableID", "CountryID", "Name", "DisplayName", "Description", "DisplayOrder", "MinimumTimeBeforeChargedSec", "RatingTypeID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ProductRateEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (ProductRate) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<ProductRate>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as ProductRate);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed ProductRate Entity 
		///</summary>
		public virtual ProductRate Copy()
		{
			//shallow copy entity
			ProductRate copy = new ProductRate();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.ProductId = this.ProductId;
			copy.ProductRateTypeId = this.ProductRateTypeId;
			copy.ProductRateIntervalId = this.ProductRateIntervalId;
			copy.TaxableId = this.TaxableId;
			copy.CountryId = this.CountryId;
			copy.Name = this.Name;
			copy.DisplayName = this.DisplayName;
			copy.Description = this.Description;
			copy.DisplayOrder = this.DisplayOrder;
			copy.MinimumTimeBeforeChargedSec = this.MinimumTimeBeforeChargedSec;
			copy.RatingTypeId = this.RatingTypeId;
			
			copy.CountryIdSource = MakeCopyOf(this.CountryIdSource) as Country;
			copy.RatingTypeIdSource = MakeCopyOf(this.RatingTypeIdSource) as RatingType;
			copy.ProductIdSource = MakeCopyOf(this.ProductIdSource) as Product;
			copy.ProductRateIntervalIdSource = MakeCopyOf(this.ProductRateIntervalIdSource) as ProductRateInterval;
			copy.ProductRateTypeIdSource = MakeCopyOf(this.ProductRateTypeIdSource) as ProductRateType;
			copy.TaxableIdSource = MakeCopyOf(this.TaxableIdSource) as Taxable;
		
			//deep copy nested objects
			copy.ProductRateValueCollection = (TList<ProductRateValue>) MakeCopyOf(this.ProductRateValueCollection); 
			copy.AccessType_ProductRateCollection = (TList<AccessType_ProductRate>) MakeCopyOf(this.AccessType_ProductRateCollection); 
			copy.CustomerTransactionCollection = (TList<CustomerTransaction>) MakeCopyOf(this.CustomerTransactionCollection); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed ProductRate Entity which is a deep copy of the current entity.
		///</summary>
		public virtual ProductRate DeepCopy()
		{
			return EntityHelper.Clone<ProductRate>(this as ProductRate);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ProductRateEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ProductRateEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ProductRateColumn column)
		{
			switch(column)
			{
					case ProductRateColumn.Id:
					return entityData.Id != _originalData.Id;
					case ProductRateColumn.ProductId:
					return entityData.ProductId != _originalData.ProductId;
					case ProductRateColumn.ProductRateTypeId:
					return entityData.ProductRateTypeId != _originalData.ProductRateTypeId;
					case ProductRateColumn.ProductRateIntervalId:
					return entityData.ProductRateIntervalId != _originalData.ProductRateIntervalId;
					case ProductRateColumn.TaxableId:
					return entityData.TaxableId != _originalData.TaxableId;
					case ProductRateColumn.CountryId:
					return entityData.CountryId != _originalData.CountryId;
					case ProductRateColumn.Name:
					return entityData.Name != _originalData.Name;
					case ProductRateColumn.DisplayName:
					return entityData.DisplayName != _originalData.DisplayName;
					case ProductRateColumn.Description:
					return entityData.Description != _originalData.Description;
					case ProductRateColumn.DisplayOrder:
					return entityData.DisplayOrder != _originalData.DisplayOrder;
					case ProductRateColumn.MinimumTimeBeforeChargedSec:
					return entityData.MinimumTimeBeforeChargedSec != _originalData.MinimumTimeBeforeChargedSec;
					case ProductRateColumn.RatingTypeId:
					return entityData.RatingTypeId != _originalData.RatingTypeId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.ProductId != _originalData.ProductId;
			result = result || entityData.ProductRateTypeId != _originalData.ProductRateTypeId;
			result = result || entityData.ProductRateIntervalId != _originalData.ProductRateIntervalId;
			result = result || entityData.TaxableId != _originalData.TaxableId;
			result = result || entityData.CountryId != _originalData.CountryId;
			result = result || entityData.Name != _originalData.Name;
			result = result || entityData.DisplayName != _originalData.DisplayName;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.DisplayOrder != _originalData.DisplayOrder;
			result = result || entityData.MinimumTimeBeforeChargedSec != _originalData.MinimumTimeBeforeChargedSec;
			result = result || entityData.RatingTypeId != _originalData.RatingTypeId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ProductRateBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is ProductRateBase)
				return Equals(this, (ProductRateBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ProductRateBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.ProductId.GetHashCode() ^ 
					this.ProductRateTypeId.GetHashCode() ^ 
					this.ProductRateIntervalId.GetHashCode() ^ 
					this.TaxableId.GetHashCode() ^ 
					((this.CountryId == null) ? string.Empty : this.CountryId.ToString()).GetHashCode() ^ 
					((this.Name == null) ? string.Empty : this.Name.ToString()).GetHashCode() ^ 
					((this.DisplayName == null) ? string.Empty : this.DisplayName.ToString()).GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					((this.DisplayOrder == null) ? string.Empty : this.DisplayOrder.ToString()).GetHashCode() ^ 
					((this.MinimumTimeBeforeChargedSec == null) ? string.Empty : this.MinimumTimeBeforeChargedSec.ToString()).GetHashCode() ^ 
					this.RatingTypeId.GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ProductRateBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ProductRateBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ProductRateBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ProductRateBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ProductRateBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ProductRateBase Object1, ProductRateBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.ProductId != Object2.ProductId)
				equal = false;
			if (Object1.ProductRateTypeId != Object2.ProductRateTypeId)
				equal = false;
			if (Object1.ProductRateIntervalId != Object2.ProductRateIntervalId)
				equal = false;
			if (Object1.TaxableId != Object2.TaxableId)
				equal = false;
			if ( Object1.CountryId != null && Object2.CountryId != null )
			{
				if (Object1.CountryId != Object2.CountryId)
					equal = false;
			}
			else if (Object1.CountryId == null ^ Object2.CountryId == null )
			{
				equal = false;
			}
			if ( Object1.Name != null && Object2.Name != null )
			{
				if (Object1.Name != Object2.Name)
					equal = false;
			}
			else if (Object1.Name == null ^ Object2.Name == null )
			{
				equal = false;
			}
			if ( Object1.DisplayName != null && Object2.DisplayName != null )
			{
				if (Object1.DisplayName != Object2.DisplayName)
					equal = false;
			}
			else if (Object1.DisplayName == null ^ Object2.DisplayName == null )
			{
				equal = false;
			}
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if ( Object1.DisplayOrder != null && Object2.DisplayOrder != null )
			{
				if (Object1.DisplayOrder != Object2.DisplayOrder)
					equal = false;
			}
			else if (Object1.DisplayOrder == null ^ Object2.DisplayOrder == null )
			{
				equal = false;
			}
			if ( Object1.MinimumTimeBeforeChargedSec != null && Object2.MinimumTimeBeforeChargedSec != null )
			{
				if (Object1.MinimumTimeBeforeChargedSec != Object2.MinimumTimeBeforeChargedSec)
					equal = false;
			}
			else if (Object1.MinimumTimeBeforeChargedSec == null ^ Object2.MinimumTimeBeforeChargedSec == null )
			{
				equal = false;
			}
			if (Object1.RatingTypeId != Object2.RatingTypeId)
				equal = false;
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ProductRateBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ProductRateComparer GetComparer()
        {
            return new ProductRateComparer();
        }
        */

        // Comparer delegates back to ProductRate
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(ProductRate rhs, ProductRateColumn which)
        {
            switch (which)
            {
            	
            	
            	case ProductRateColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ProductRateColumn.ProductId:
            		return this.ProductId.CompareTo(rhs.ProductId);
            		
            		                 
            	
            	
            	case ProductRateColumn.ProductRateTypeId:
            		return this.ProductRateTypeId.CompareTo(rhs.ProductRateTypeId);
            		
            		                 
            	
            	
            	case ProductRateColumn.ProductRateIntervalId:
            		return this.ProductRateIntervalId.CompareTo(rhs.ProductRateIntervalId);
            		
            		                 
            	
            	
            	case ProductRateColumn.TaxableId:
            		return this.TaxableId.CompareTo(rhs.TaxableId);
            		
            		                 
            	
            	
            	case ProductRateColumn.CountryId:
            		return this.CountryId.CompareTo(rhs.CountryId);
            		
            		                 
            	
            	
            	case ProductRateColumn.Name:
            		return this.Name.CompareTo(rhs.Name);
            		
            		                 
            	
            	
            	case ProductRateColumn.DisplayName:
            		return this.DisplayName.CompareTo(rhs.DisplayName);
            		
            		                 
            	
            	
            	case ProductRateColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ProductRateColumn.DisplayOrder:
            		return this.DisplayOrder.Value.CompareTo(rhs.DisplayOrder.Value);
            		
            		                 
            	
            	
            	case ProductRateColumn.MinimumTimeBeforeChargedSec:
            		return this.MinimumTimeBeforeChargedSec.Value.CompareTo(rhs.MinimumTimeBeforeChargedSec.Value);
            		
            		                 
            	
            	
            	case ProductRateColumn.RatingTypeId:
            		return this.RatingTypeId.CompareTo(rhs.RatingTypeId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ProductRateKey> Members
		
		// member variable for the EntityId property
		private ProductRateKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ProductRateKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ProductRateKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("ProductRate")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{13}{12}- Id: {0}{12}- ProductId: {1}{12}- ProductRateTypeId: {2}{12}- ProductRateIntervalId: {3}{12}- TaxableId: {4}{12}- CountryId: {5}{12}- Name: {6}{12}- DisplayName: {7}{12}- Description: {8}{12}- DisplayOrder: {9}{12}- MinimumTimeBeforeChargedSec: {10}{12}- RatingTypeId: {11}{12}", 
				this.Id,
				this.ProductId,
				this.ProductRateTypeId,
				this.ProductRateIntervalId,
				this.TaxableId,
				(this.CountryId == null) ? string.Empty : this.CountryId.ToString(),
				(this.Name == null) ? string.Empty : this.Name.ToString(),
				(this.DisplayName == null) ? string.Empty : this.DisplayName.ToString(),
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				(this.DisplayOrder == null) ? string.Empty : this.DisplayOrder.ToString(),
				(this.MinimumTimeBeforeChargedSec == null) ? string.Empty : this.MinimumTimeBeforeChargedSec.ToString(),
				this.RatingTypeId,
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'ProductRate' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ProductRateEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "ProductRate"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// ProductID : 
		/// </summary>
		public System.Int32		  ProductId = (int)0;
		
		/// <summary>
		/// ProductRateTypeID : The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.
		/// </summary>
		public System.Int32		  ProductRateTypeId = (int)0;
		
		/// <summary>
		/// ProductRateIntervalID : 
		/// </summary>
		public System.Int32		  ProductRateIntervalId = (int)0;
		
		/// <summary>
		/// TaxableID : 
		/// </summary>
		public System.Int32		  TaxableId = (int)0;
		
		/// <summary>
		/// CountryID : 
		/// </summary>
		public System.String		  CountryId = null;
		
		/// <summary>
		/// Name : 
		/// </summary>
		public System.String		  Name = null;
		
		/// <summary>
		/// DisplayName : 
		/// </summary>
		public System.String		  DisplayName = null;
		
		/// <summary>
		/// Description : 
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		public System.Int32?		  DisplayOrder = null;
		
		/// <summary>
		/// MinimumTimeBeforeChargedSec : 
		/// </summary>
		public System.Int32?		  MinimumTimeBeforeChargedSec = null;
		
		/// <summary>
		/// RatingTypeID : Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.
		/// </summary>
		public System.Int32		  RatingTypeId = (int)0;
		#endregion
			
		#region Source Foreign Key Property
				
		private Country _countryIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Country"/>.
		/// </summary>
		/// <value>The source Country for CountryId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Country CountryIdSource
      	{
            get { return this._countryIdSource; }
            set { this._countryIdSource = value; }
      	}
		private RatingType _ratingTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="RatingType"/>.
		/// </summary>
		/// <value>The source RatingType for RatingTypeId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual RatingType RatingTypeIdSource
      	{
            get { return this._ratingTypeIdSource; }
            set { this._ratingTypeIdSource = value; }
      	}
		private Product _productIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Product"/>.
		/// </summary>
		/// <value>The source Product for ProductId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Product ProductIdSource
      	{
            get { return this._productIdSource; }
            set { this._productIdSource = value; }
      	}
		private ProductRateInterval _productRateIntervalIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProductRateInterval"/>.
		/// </summary>
		/// <value>The source ProductRateInterval for ProductRateIntervalId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual ProductRateInterval ProductRateIntervalIdSource
      	{
            get { return this._productRateIntervalIdSource; }
            set { this._productRateIntervalIdSource = value; }
      	}
		private ProductRateType _productRateTypeIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="ProductRateType"/>.
		/// </summary>
		/// <value>The source ProductRateType for ProductRateTypeId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual ProductRateType ProductRateTypeIdSource
      	{
            get { return this._productRateTypeIdSource; }
            set { this._productRateTypeIdSource = value; }
      	}
		private Taxable _taxableIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Taxable"/>.
		/// </summary>
		/// <value>The source Taxable for TaxableId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Taxable TaxableIdSource
      	{
            get { return this._taxableIdSource; }
            set { this._taxableIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region ProductRateValueCollection
		
		private TList<ProductRateValue> _productRateValueProductRateId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _productRateValueProductRateId
		/// </summary>	
		public TList<ProductRateValue> ProductRateValueCollection
		{
			get
			{
				if (_productRateValueProductRateId == null)
				{
				_productRateValueProductRateId = new TList<ProductRateValue>();
				}
	
				return _productRateValueProductRateId;
			}
			set { _productRateValueProductRateId = value; }
		}
		
		#endregion

		#region AccessType_ProductRateCollection
		
		private TList<AccessType_ProductRate> _accessType_ProductRateProductRateId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _accessType_ProductRateProductRateId
		/// </summary>	
		public TList<AccessType_ProductRate> AccessType_ProductRateCollection
		{
			get
			{
				if (_accessType_ProductRateProductRateId == null)
				{
				_accessType_ProductRateProductRateId = new TList<AccessType_ProductRate>();
				}
	
				return _accessType_ProductRateProductRateId;
			}
			set { _accessType_ProductRateProductRateId = value; }
		}
		
		#endregion

		#region CustomerTransactionCollection
		
		private TList<CustomerTransaction> _customerTransactionProductRateId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _customerTransactionProductRateId
		/// </summary>	
		public TList<CustomerTransaction> CustomerTransactionCollection
		{
			get
			{
				if (_customerTransactionProductRateId == null)
				{
				_customerTransactionProductRateId = new TList<CustomerTransaction>();
				}
	
				return _customerTransactionProductRateId;
			}
			set { _customerTransactionProductRateId = value; }
		}
		
		#endregion

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ProductRateEntityData _tmp = new ProductRateEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.ProductId = this.ProductId;
			_tmp.ProductRateTypeId = this.ProductRateTypeId;
			_tmp.ProductRateIntervalId = this.ProductRateIntervalId;
			_tmp.TaxableId = this.TaxableId;
			_tmp.CountryId = this.CountryId;
			_tmp.Name = this.Name;
			_tmp.DisplayName = this.DisplayName;
			_tmp.Description = this.Description;
			_tmp.DisplayOrder = this.DisplayOrder;
			_tmp.MinimumTimeBeforeChargedSec = this.MinimumTimeBeforeChargedSec;
			_tmp.RatingTypeId = this.RatingTypeId;
			
			#region Source Parent Composite Entities
			if (this.CountryIdSource != null)
				_tmp.CountryIdSource = MakeCopyOf(this.CountryIdSource) as Country;
			if (this.RatingTypeIdSource != null)
				_tmp.RatingTypeIdSource = MakeCopyOf(this.RatingTypeIdSource) as RatingType;
			if (this.ProductIdSource != null)
				_tmp.ProductIdSource = MakeCopyOf(this.ProductIdSource) as Product;
			if (this.ProductRateIntervalIdSource != null)
				_tmp.ProductRateIntervalIdSource = MakeCopyOf(this.ProductRateIntervalIdSource) as ProductRateInterval;
			if (this.ProductRateTypeIdSource != null)
				_tmp.ProductRateTypeIdSource = MakeCopyOf(this.ProductRateTypeIdSource) as ProductRateType;
			if (this.TaxableIdSource != null)
				_tmp.TaxableIdSource = MakeCopyOf(this.TaxableIdSource) as Taxable;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._productRateValueProductRateId != null)
				_tmp.ProductRateValueCollection = (TList<ProductRateValue>) MakeCopyOf(this.ProductRateValueCollection); 
			if (this._accessType_ProductRateProductRateId != null)
				_tmp.AccessType_ProductRateCollection = (TList<AccessType_ProductRate>) MakeCopyOf(this.AccessType_ProductRateCollection); 
			if (this._customerTransactionProductRateId != null)
				_tmp.CustomerTransactionCollection = (TList<CustomerTransaction>) MakeCopyOf(this.CustomerTransactionCollection); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductRateColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ProductRateColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductRateColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ProductRateColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductRateColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ProductRateColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ProductRateEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ProductRateEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ProductRateColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ProductRateColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ProductRateEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ProductRateEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ProductRateEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="ProductRate"/> object.
	/// </remarks>
	public class ProductRateEventArgs : System.EventArgs
	{
		private ProductRateColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ProductRateEventArgs class.
		///</summary>
		public ProductRateEventArgs(ProductRateColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ProductRateEventArgs class.
		///</summary>
		public ProductRateEventArgs(ProductRateColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ProductRateColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ProductRateColumn" />
		public ProductRateColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all ProductRate related events.
	///</summary>
	public delegate void ProductRateEventHandler(object sender, ProductRateEventArgs e);
	
	#region ProductRateComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ProductRateComparer : System.Collections.Generic.IComparer<ProductRate>
	{
		ProductRateColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ProductRateComparer"/> class.
        /// </summary>
		public ProductRateComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ProductRateComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ProductRateComparer(ProductRateColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="ProductRate"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="ProductRate"/> to compare.</param>
        /// <param name="b">The second <c>ProductRate</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(ProductRate a, ProductRate b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(ProductRate entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(ProductRate a, ProductRate b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ProductRateColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ProductRateKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="ProductRate"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ProductRateKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ProductRateKey class.
		/// </summary>
		public ProductRateKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductRateKey class.
		/// </summary>
		public ProductRateKey(ProductRateBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ProductRateKey class.
		/// </summary>
		public ProductRateKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ProductRateBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ProductRateBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ProductRateColumn Enum
	
	/// <summary>
	/// Enumerate the ProductRate columns.
	/// </summary>
	[Serializable]
	public enum ProductRateColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// ProductId : 
		/// </summary>
		[EnumTextValue("ProductID")]
		[ColumnEnum("ProductID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductId = 2,
		/// <summary>
		/// ProductRateTypeId : The Product Rate Type is used to group together different types of product rates. Example would be Outbound Toll Free and Outbound Mobile rates. The are similar but different rates are required as there are different prices for each.
		/// </summary>
		[EnumTextValue("ProductRateTypeID")]
		[ColumnEnum("ProductRateTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductRateTypeId = 3,
		/// <summary>
		/// ProductRateIntervalId : 
		/// </summary>
		[EnumTextValue("ProductRateIntervalID")]
		[ColumnEnum("ProductRateIntervalID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		ProductRateIntervalId = 4,
		/// <summary>
		/// TaxableId : 
		/// </summary>
		[EnumTextValue("TaxableID")]
		[ColumnEnum("TaxableID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		TaxableId = 5,
		/// <summary>
		/// CountryId : 
		/// </summary>
		[EnumTextValue("CountryID")]
		[ColumnEnum("CountryID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 3)]
		CountryId = 6,
		/// <summary>
		/// Name : 
		/// </summary>
		[EnumTextValue("Name")]
		[ColumnEnum("Name", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		Name = 7,
		/// <summary>
		/// DisplayName : 
		/// </summary>
		[EnumTextValue("DisplayName")]
		[ColumnEnum("DisplayName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		DisplayName = 8,
		/// <summary>
		/// Description : 
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Description = 9,
		/// <summary>
		/// DisplayOrder : 
		/// </summary>
		[EnumTextValue("DisplayOrder")]
		[ColumnEnum("DisplayOrder", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		DisplayOrder = 10,
		/// <summary>
		/// MinimumTimeBeforeChargedSec : 
		/// </summary>
		[EnumTextValue("MinimumTimeBeforeChargedSec")]
		[ColumnEnum("MinimumTimeBeforeChargedSec", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MinimumTimeBeforeChargedSec = 11,
		/// <summary>
		/// RatingTypeId : Used to simplify the rating of rates by provided a grouping mechanism as all CDR based rates are rated with either bridge, LD, Connect(Transport) rates or miscellaneous charges.
		/// </summary>
		[EnumTextValue("RatingTypeID")]
		[ColumnEnum("RatingTypeID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		RatingTypeId = 12
	}//End enum

	#endregion ProductRateColumn Enum

} // end namespace
