
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file OmnoviaHostedArchive.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'OmnoviaHostedArchive' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class OmnoviaHostedArchiveBase : EntityBase, CONFDB.Entities.IOmnoviaHostedArchive, IEntityId<OmnoviaHostedArchiveKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private OmnoviaHostedArchiveEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private OmnoviaHostedArchiveEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private OmnoviaHostedArchiveEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<OmnoviaHostedArchive> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event OmnoviaHostedArchiveEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event OmnoviaHostedArchiveEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="OmnoviaHostedArchiveBase"/> instance.
		///</summary>
		public OmnoviaHostedArchiveBase()
		{
			this.entityData = new OmnoviaHostedArchiveEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="OmnoviaHostedArchiveBase"/> instance.
		///</summary>
		///<param name="_omnoviaCustomerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_movieId"></param>
		///<param name="_roomName"></param>
		///<param name="_movieTitle"></param>
		///<param name="_movieDateAdded"></param>
		///<param name="_movieLength"></param>
		///<param name="_movieRoomId"></param>
		///<param name="_movieDate"></param>
		///<param name="_companyShortLink"></param>
		///<param name="_created"></param>
		///<param name="_hostedLinkExpiryDate"></param>
		///<param name="_hostedLinkShortened"></param>
		///<param name="_hostedLinkAlias"></param>
		///<param name="_recordingDirectory"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_hostingPeriod"></param>
		///<param name="_hostingAutoRenew"></param>
		///<param name="_event_Id"></param>
		public OmnoviaHostedArchiveBase(System.Int32? _omnoviaCustomerId, System.Int32? _moderatorId, 
			System.Int32 _movieId, System.String _roomName, System.String _movieTitle, 
			System.DateTime? _movieDateAdded, System.Int32? _movieLength, System.Int32? _movieRoomId, 
			System.DateTime? _movieDate, System.String _companyShortLink, System.DateTime? _created, 
			System.DateTime _hostedLinkExpiryDate, System.String _hostedLinkShortened, System.String _hostedLinkAlias, 
			System.String _recordingDirectory, System.String _uniqueConferenceId, System.Int32? _hostingPeriod, 
			System.Int32? _hostingAutoRenew, System.Int32? _event_Id)
		{
			this.entityData = new OmnoviaHostedArchiveEntityData();
			this.backupData = null;

			this.OmnoviaCustomerId = _omnoviaCustomerId;
			this.ModeratorId = _moderatorId;
			this.MovieId = _movieId;
			this.RoomName = _roomName;
			this.MovieTitle = _movieTitle;
			this.MovieDateAdded = _movieDateAdded;
			this.MovieLength = _movieLength;
			this.MovieRoomId = _movieRoomId;
			this.MovieDate = _movieDate;
			this.CompanyShortLink = _companyShortLink;
			this.Created = _created;
			this.HostedLinkExpiryDate = _hostedLinkExpiryDate;
			this.HostedLinkShortened = _hostedLinkShortened;
			this.HostedLinkAlias = _hostedLinkAlias;
			this.RecordingDirectory = _recordingDirectory;
			this.UniqueConferenceId = _uniqueConferenceId;
			this.HostingPeriod = _hostingPeriod;
			this.HostingAutoRenew = _hostingAutoRenew;
			this.Event_Id = _event_Id;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="OmnoviaHostedArchive"/> instance.
		///</summary>
		///<param name="_omnoviaCustomerId"></param>
		///<param name="_moderatorId"></param>
		///<param name="_movieId"></param>
		///<param name="_roomName"></param>
		///<param name="_movieTitle"></param>
		///<param name="_movieDateAdded"></param>
		///<param name="_movieLength"></param>
		///<param name="_movieRoomId"></param>
		///<param name="_movieDate"></param>
		///<param name="_companyShortLink"></param>
		///<param name="_created"></param>
		///<param name="_hostedLinkExpiryDate"></param>
		///<param name="_hostedLinkShortened"></param>
		///<param name="_hostedLinkAlias"></param>
		///<param name="_recordingDirectory"></param>
		///<param name="_uniqueConferenceId"></param>
		///<param name="_hostingPeriod"></param>
		///<param name="_hostingAutoRenew"></param>
		///<param name="_event_Id"></param>
		public static OmnoviaHostedArchive CreateOmnoviaHostedArchive(System.Int32? _omnoviaCustomerId, System.Int32? _moderatorId, 
			System.Int32 _movieId, System.String _roomName, System.String _movieTitle, 
			System.DateTime? _movieDateAdded, System.Int32? _movieLength, System.Int32? _movieRoomId, 
			System.DateTime? _movieDate, System.String _companyShortLink, System.DateTime? _created, 
			System.DateTime _hostedLinkExpiryDate, System.String _hostedLinkShortened, System.String _hostedLinkAlias, 
			System.String _recordingDirectory, System.String _uniqueConferenceId, System.Int32? _hostingPeriod, 
			System.Int32? _hostingAutoRenew, System.Int32? _event_Id)
		{
			OmnoviaHostedArchive newOmnoviaHostedArchive = new OmnoviaHostedArchive();
			newOmnoviaHostedArchive.OmnoviaCustomerId = _omnoviaCustomerId;
			newOmnoviaHostedArchive.ModeratorId = _moderatorId;
			newOmnoviaHostedArchive.MovieId = _movieId;
			newOmnoviaHostedArchive.RoomName = _roomName;
			newOmnoviaHostedArchive.MovieTitle = _movieTitle;
			newOmnoviaHostedArchive.MovieDateAdded = _movieDateAdded;
			newOmnoviaHostedArchive.MovieLength = _movieLength;
			newOmnoviaHostedArchive.MovieRoomId = _movieRoomId;
			newOmnoviaHostedArchive.MovieDate = _movieDate;
			newOmnoviaHostedArchive.CompanyShortLink = _companyShortLink;
			newOmnoviaHostedArchive.Created = _created;
			newOmnoviaHostedArchive.HostedLinkExpiryDate = _hostedLinkExpiryDate;
			newOmnoviaHostedArchive.HostedLinkShortened = _hostedLinkShortened;
			newOmnoviaHostedArchive.HostedLinkAlias = _hostedLinkAlias;
			newOmnoviaHostedArchive.RecordingDirectory = _recordingDirectory;
			newOmnoviaHostedArchive.UniqueConferenceId = _uniqueConferenceId;
			newOmnoviaHostedArchive.HostingPeriod = _hostingPeriod;
			newOmnoviaHostedArchive.HostingAutoRenew = _hostingAutoRenew;
			newOmnoviaHostedArchive.Event_Id = _event_Id;
			return newOmnoviaHostedArchive;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the OmnoviaCustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOmnoviaCustomerIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? OmnoviaCustomerId
		{
			get
			{
				return this.entityData.OmnoviaCustomerId; 
			}
			
			set
			{
				if (this.entityData.OmnoviaCustomerId == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.OmnoviaCustomerId, this.entityData.OmnoviaCustomerId);
				this.entityData.OmnoviaCustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.OmnoviaCustomerId, this.entityData.OmnoviaCustomerId);
				OnPropertyChanged("OmnoviaCustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsModeratorIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? ModeratorId
		{
			get
			{
				return this.entityData.ModeratorId; 
			}
			
			set
			{
				if (this.entityData.ModeratorId == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.ModeratorId, this.entityData.ModeratorId);
				this.entityData.ModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.ModeratorId, this.entityData.ModeratorId);
				OnPropertyChanged("ModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MovieId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 MovieId
		{
			get
			{
				return this.entityData.MovieId; 
			}
			
			set
			{
				if (this.entityData.MovieId == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.MovieId, this.entityData.MovieId);
				this.entityData.MovieId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.MovieId, this.entityData.MovieId);
				OnPropertyChanged("MovieId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RoomName property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String RoomName
		{
			get
			{
				return this.entityData.RoomName; 
			}
			
			set
			{
				if (this.entityData.RoomName == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.RoomName, this.entityData.RoomName);
				this.entityData.RoomName = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.RoomName, this.entityData.RoomName);
				OnPropertyChanged("RoomName");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MovieTitle property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String MovieTitle
		{
			get
			{
				return this.entityData.MovieTitle; 
			}
			
			set
			{
				if (this.entityData.MovieTitle == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.MovieTitle, this.entityData.MovieTitle);
				this.entityData.MovieTitle = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.MovieTitle, this.entityData.MovieTitle);
				OnPropertyChanged("MovieTitle");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MovieDateAdded property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMovieDateAddedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MovieDateAdded
		{
			get
			{
				return this.entityData.MovieDateAdded; 
			}
			
			set
			{
				if (this.entityData.MovieDateAdded == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.MovieDateAdded, this.entityData.MovieDateAdded);
				this.entityData.MovieDateAdded = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.MovieDateAdded, this.entityData.MovieDateAdded);
				OnPropertyChanged("MovieDateAdded");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MovieLength property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMovieLengthNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MovieLength
		{
			get
			{
				return this.entityData.MovieLength; 
			}
			
			set
			{
				if (this.entityData.MovieLength == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.MovieLength, this.entityData.MovieLength);
				this.entityData.MovieLength = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.MovieLength, this.entityData.MovieLength);
				OnPropertyChanged("MovieLength");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MovieRoomId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsMovieRoomIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? MovieRoomId
		{
			get
			{
				return this.entityData.MovieRoomId; 
			}
			
			set
			{
				if (this.entityData.MovieRoomId == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.MovieRoomId, this.entityData.MovieRoomId);
				this.entityData.MovieRoomId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.MovieRoomId, this.entityData.MovieRoomId);
				OnPropertyChanged("MovieRoomId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the MovieDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.MinValue. It is up to the developer
		/// to check the value of IsMovieDateNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? MovieDate
		{
			get
			{
				return this.entityData.MovieDate; 
			}
			
			set
			{
				if (this.entityData.MovieDate == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.MovieDate, this.entityData.MovieDate);
				this.entityData.MovieDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.MovieDate, this.entityData.MovieDate);
				OnPropertyChanged("MovieDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CompanyShortLink property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String CompanyShortLink
		{
			get
			{
				return this.entityData.CompanyShortLink; 
			}
			
			set
			{
				if (this.entityData.CompanyShortLink == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.CompanyShortLink, this.entityData.CompanyShortLink);
				this.entityData.CompanyShortLink = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.CompanyShortLink, this.entityData.CompanyShortLink);
				OnPropertyChanged("CompanyShortLink");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Created property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return DateTime.Now. It is up to the developer
		/// to check the value of IsCreatedNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.DateTime? Created
		{
			get
			{
				return this.entityData.Created; 
			}
			
			set
			{
				if (this.entityData.Created == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.Created, this.entityData.Created);
				this.entityData.Created = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.Created, this.entityData.Created);
				OnPropertyChanged("Created");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostedLinkExpiryDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime HostedLinkExpiryDate
		{
			get
			{
				return this.entityData.HostedLinkExpiryDate; 
			}
			
			set
			{
				if (this.entityData.HostedLinkExpiryDate == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.HostedLinkExpiryDate, this.entityData.HostedLinkExpiryDate);
				this.entityData.HostedLinkExpiryDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.HostedLinkExpiryDate, this.entityData.HostedLinkExpiryDate);
				OnPropertyChanged("HostedLinkExpiryDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostedLinkShortened property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String HostedLinkShortened
		{
			get
			{
				return this.entityData.HostedLinkShortened; 
			}
			
			set
			{
				if (this.entityData.HostedLinkShortened == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.HostedLinkShortened, this.entityData.HostedLinkShortened);
				this.entityData.HostedLinkShortened = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.HostedLinkShortened, this.entityData.HostedLinkShortened);
				OnPropertyChanged("HostedLinkShortened");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostedLinkAlias property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String HostedLinkAlias
		{
			get
			{
				return this.entityData.HostedLinkAlias; 
			}
			
			set
			{
				if (this.entityData.HostedLinkAlias == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.HostedLinkAlias, this.entityData.HostedLinkAlias);
				this.entityData.HostedLinkAlias = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.HostedLinkAlias, this.entityData.HostedLinkAlias);
				OnPropertyChanged("HostedLinkAlias");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the RecordingDirectory property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String RecordingDirectory
		{
			get
			{
				return this.entityData.RecordingDirectory; 
			}
			
			set
			{
				if (this.entityData.RecordingDirectory == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.RecordingDirectory, this.entityData.RecordingDirectory);
				this.entityData.RecordingDirectory = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.RecordingDirectory, this.entityData.RecordingDirectory);
				OnPropertyChanged("RecordingDirectory");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueConferenceId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 40)]
		public virtual System.String UniqueConferenceId
		{
			get
			{
				return this.entityData.UniqueConferenceId; 
			}
			
			set
			{
				if (this.entityData.UniqueConferenceId == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				this.entityData.UniqueConferenceId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.UniqueConferenceId, this.entityData.UniqueConferenceId);
				OnPropertyChanged("UniqueConferenceId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostingPeriod property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsHostingPeriodNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? HostingPeriod
		{
			get
			{
				return this.entityData.HostingPeriod; 
			}
			
			set
			{
				if (this.entityData.HostingPeriod == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.HostingPeriod, this.entityData.HostingPeriod);
				this.entityData.HostingPeriod = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.HostingPeriod, this.entityData.HostingPeriod);
				OnPropertyChanged("HostingPeriod");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the HostingAutoRenew property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsHostingAutoRenewNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? HostingAutoRenew
		{
			get
			{
				return this.entityData.HostingAutoRenew; 
			}
			
			set
			{
				if (this.entityData.HostingAutoRenew == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.HostingAutoRenew, this.entityData.HostingAutoRenew);
				this.entityData.HostingAutoRenew = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.HostingAutoRenew, this.entityData.HostingAutoRenew);
				OnPropertyChanged("HostingAutoRenew");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Event_Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsEvent_IdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Event_Id
		{
			get
			{
				return this.entityData.Event_Id; 
			}
			
			set
			{
				if (this.entityData.Event_Id == value)
					return;
					
				OnColumnChanging(OmnoviaHostedArchiveColumn.Event_Id, this.entityData.Event_Id);
				this.entityData.Event_Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(OmnoviaHostedArchiveColumn.Event_Id, this.entityData.Event_Id);
				OnPropertyChanged("Event_Id");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		#endregion
		
		#region Children Collections
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RoomName", "Room Name", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("MovieTitle", "Movie Title", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("CompanyShortLink", "Company Short Link", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("HostedLinkShortened", "Hosted Link Shortened"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("HostedLinkShortened", "Hosted Link Shortened", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("HostedLinkAlias", "Hosted Link Alias", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("RecordingDirectory", "Recording Directory", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("UniqueConferenceId", "Unique Conference Id", 40));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "OmnoviaHostedArchive"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"id", "OmnoviaCustomerID", "ModeratorID", "MovieID", "RoomName", "MovieTitle", "MovieDateAdded", "MovieLength", "MovieRoomID", "MovieDate", "CompanyShortLink", "created", "HostedLinkExpiryDate", "HostedLinkShortened", "HostedLinkAlias", "RecordingDirectory", "UniqueConferenceID", "HostingPeriod", "HostingAutoRenew", "Event_ID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as OmnoviaHostedArchiveEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (OmnoviaHostedArchive) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<OmnoviaHostedArchive>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as OmnoviaHostedArchive);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed OmnoviaHostedArchive Entity 
		///</summary>
		public virtual OmnoviaHostedArchive Copy()
		{
			//shallow copy entity
			OmnoviaHostedArchive copy = new OmnoviaHostedArchive();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.OmnoviaCustomerId = this.OmnoviaCustomerId;
			copy.ModeratorId = this.ModeratorId;
			copy.MovieId = this.MovieId;
			copy.RoomName = this.RoomName;
			copy.MovieTitle = this.MovieTitle;
			copy.MovieDateAdded = this.MovieDateAdded;
			copy.MovieLength = this.MovieLength;
			copy.MovieRoomId = this.MovieRoomId;
			copy.MovieDate = this.MovieDate;
			copy.CompanyShortLink = this.CompanyShortLink;
			copy.Created = this.Created;
			copy.HostedLinkExpiryDate = this.HostedLinkExpiryDate;
			copy.HostedLinkShortened = this.HostedLinkShortened;
			copy.HostedLinkAlias = this.HostedLinkAlias;
			copy.RecordingDirectory = this.RecordingDirectory;
			copy.UniqueConferenceId = this.UniqueConferenceId;
			copy.HostingPeriod = this.HostingPeriod;
			copy.HostingAutoRenew = this.HostingAutoRenew;
			copy.Event_Id = this.Event_Id;
			
		
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed OmnoviaHostedArchive Entity which is a deep copy of the current entity.
		///</summary>
		public virtual OmnoviaHostedArchive DeepCopy()
		{
			return EntityHelper.Clone<OmnoviaHostedArchive>(this as OmnoviaHostedArchive);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as OmnoviaHostedArchiveEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as OmnoviaHostedArchiveEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(OmnoviaHostedArchiveColumn column)
		{
			switch(column)
			{
					case OmnoviaHostedArchiveColumn.Id:
					return entityData.Id != _originalData.Id;
					case OmnoviaHostedArchiveColumn.OmnoviaCustomerId:
					return entityData.OmnoviaCustomerId != _originalData.OmnoviaCustomerId;
					case OmnoviaHostedArchiveColumn.ModeratorId:
					return entityData.ModeratorId != _originalData.ModeratorId;
					case OmnoviaHostedArchiveColumn.MovieId:
					return entityData.MovieId != _originalData.MovieId;
					case OmnoviaHostedArchiveColumn.RoomName:
					return entityData.RoomName != _originalData.RoomName;
					case OmnoviaHostedArchiveColumn.MovieTitle:
					return entityData.MovieTitle != _originalData.MovieTitle;
					case OmnoviaHostedArchiveColumn.MovieDateAdded:
					return entityData.MovieDateAdded != _originalData.MovieDateAdded;
					case OmnoviaHostedArchiveColumn.MovieLength:
					return entityData.MovieLength != _originalData.MovieLength;
					case OmnoviaHostedArchiveColumn.MovieRoomId:
					return entityData.MovieRoomId != _originalData.MovieRoomId;
					case OmnoviaHostedArchiveColumn.MovieDate:
					return entityData.MovieDate != _originalData.MovieDate;
					case OmnoviaHostedArchiveColumn.CompanyShortLink:
					return entityData.CompanyShortLink != _originalData.CompanyShortLink;
					case OmnoviaHostedArchiveColumn.Created:
					return entityData.Created != _originalData.Created;
					case OmnoviaHostedArchiveColumn.HostedLinkExpiryDate:
					return entityData.HostedLinkExpiryDate != _originalData.HostedLinkExpiryDate;
					case OmnoviaHostedArchiveColumn.HostedLinkShortened:
					return entityData.HostedLinkShortened != _originalData.HostedLinkShortened;
					case OmnoviaHostedArchiveColumn.HostedLinkAlias:
					return entityData.HostedLinkAlias != _originalData.HostedLinkAlias;
					case OmnoviaHostedArchiveColumn.RecordingDirectory:
					return entityData.RecordingDirectory != _originalData.RecordingDirectory;
					case OmnoviaHostedArchiveColumn.UniqueConferenceId:
					return entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
					case OmnoviaHostedArchiveColumn.HostingPeriod:
					return entityData.HostingPeriod != _originalData.HostingPeriod;
					case OmnoviaHostedArchiveColumn.HostingAutoRenew:
					return entityData.HostingAutoRenew != _originalData.HostingAutoRenew;
					case OmnoviaHostedArchiveColumn.Event_Id:
					return entityData.Event_Id != _originalData.Event_Id;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.OmnoviaCustomerId != _originalData.OmnoviaCustomerId;
			result = result || entityData.ModeratorId != _originalData.ModeratorId;
			result = result || entityData.MovieId != _originalData.MovieId;
			result = result || entityData.RoomName != _originalData.RoomName;
			result = result || entityData.MovieTitle != _originalData.MovieTitle;
			result = result || entityData.MovieDateAdded != _originalData.MovieDateAdded;
			result = result || entityData.MovieLength != _originalData.MovieLength;
			result = result || entityData.MovieRoomId != _originalData.MovieRoomId;
			result = result || entityData.MovieDate != _originalData.MovieDate;
			result = result || entityData.CompanyShortLink != _originalData.CompanyShortLink;
			result = result || entityData.Created != _originalData.Created;
			result = result || entityData.HostedLinkExpiryDate != _originalData.HostedLinkExpiryDate;
			result = result || entityData.HostedLinkShortened != _originalData.HostedLinkShortened;
			result = result || entityData.HostedLinkAlias != _originalData.HostedLinkAlias;
			result = result || entityData.RecordingDirectory != _originalData.RecordingDirectory;
			result = result || entityData.UniqueConferenceId != _originalData.UniqueConferenceId;
			result = result || entityData.HostingPeriod != _originalData.HostingPeriod;
			result = result || entityData.HostingAutoRenew != _originalData.HostingAutoRenew;
			result = result || entityData.Event_Id != _originalData.Event_Id;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="OmnoviaHostedArchiveBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is OmnoviaHostedArchiveBase)
				return Equals(this, (OmnoviaHostedArchiveBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="OmnoviaHostedArchiveBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					((this.OmnoviaCustomerId == null) ? string.Empty : this.OmnoviaCustomerId.ToString()).GetHashCode() ^ 
					((this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString()).GetHashCode() ^ 
					this.MovieId.GetHashCode() ^ 
					((this.RoomName == null) ? string.Empty : this.RoomName.ToString()).GetHashCode() ^ 
					((this.MovieTitle == null) ? string.Empty : this.MovieTitle.ToString()).GetHashCode() ^ 
					((this.MovieDateAdded == null) ? string.Empty : this.MovieDateAdded.ToString()).GetHashCode() ^ 
					((this.MovieLength == null) ? string.Empty : this.MovieLength.ToString()).GetHashCode() ^ 
					((this.MovieRoomId == null) ? string.Empty : this.MovieRoomId.ToString()).GetHashCode() ^ 
					((this.MovieDate == null) ? string.Empty : this.MovieDate.ToString()).GetHashCode() ^ 
					((this.CompanyShortLink == null) ? string.Empty : this.CompanyShortLink.ToString()).GetHashCode() ^ 
					((this.Created == null) ? string.Empty : this.Created.ToString()).GetHashCode() ^ 
					this.HostedLinkExpiryDate.GetHashCode() ^ 
					this.HostedLinkShortened.GetHashCode() ^ 
					((this.HostedLinkAlias == null) ? string.Empty : this.HostedLinkAlias.ToString()).GetHashCode() ^ 
					((this.RecordingDirectory == null) ? string.Empty : this.RecordingDirectory.ToString()).GetHashCode() ^ 
					((this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString()).GetHashCode() ^ 
					((this.HostingPeriod == null) ? string.Empty : this.HostingPeriod.ToString()).GetHashCode() ^ 
					((this.HostingAutoRenew == null) ? string.Empty : this.HostingAutoRenew.ToString()).GetHashCode() ^ 
					((this.Event_Id == null) ? string.Empty : this.Event_Id.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="OmnoviaHostedArchiveBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(OmnoviaHostedArchiveBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="OmnoviaHostedArchiveBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="OmnoviaHostedArchiveBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="OmnoviaHostedArchiveBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(OmnoviaHostedArchiveBase Object1, OmnoviaHostedArchiveBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if ( Object1.OmnoviaCustomerId != null && Object2.OmnoviaCustomerId != null )
			{
				if (Object1.OmnoviaCustomerId != Object2.OmnoviaCustomerId)
					equal = false;
			}
			else if (Object1.OmnoviaCustomerId == null ^ Object2.OmnoviaCustomerId == null )
			{
				equal = false;
			}
			if ( Object1.ModeratorId != null && Object2.ModeratorId != null )
			{
				if (Object1.ModeratorId != Object2.ModeratorId)
					equal = false;
			}
			else if (Object1.ModeratorId == null ^ Object2.ModeratorId == null )
			{
				equal = false;
			}
			if (Object1.MovieId != Object2.MovieId)
				equal = false;
			if ( Object1.RoomName != null && Object2.RoomName != null )
			{
				if (Object1.RoomName != Object2.RoomName)
					equal = false;
			}
			else if (Object1.RoomName == null ^ Object2.RoomName == null )
			{
				equal = false;
			}
			if ( Object1.MovieTitle != null && Object2.MovieTitle != null )
			{
				if (Object1.MovieTitle != Object2.MovieTitle)
					equal = false;
			}
			else if (Object1.MovieTitle == null ^ Object2.MovieTitle == null )
			{
				equal = false;
			}
			if ( Object1.MovieDateAdded != null && Object2.MovieDateAdded != null )
			{
				if (Object1.MovieDateAdded != Object2.MovieDateAdded)
					equal = false;
			}
			else if (Object1.MovieDateAdded == null ^ Object2.MovieDateAdded == null )
			{
				equal = false;
			}
			if ( Object1.MovieLength != null && Object2.MovieLength != null )
			{
				if (Object1.MovieLength != Object2.MovieLength)
					equal = false;
			}
			else if (Object1.MovieLength == null ^ Object2.MovieLength == null )
			{
				equal = false;
			}
			if ( Object1.MovieRoomId != null && Object2.MovieRoomId != null )
			{
				if (Object1.MovieRoomId != Object2.MovieRoomId)
					equal = false;
			}
			else if (Object1.MovieRoomId == null ^ Object2.MovieRoomId == null )
			{
				equal = false;
			}
			if ( Object1.MovieDate != null && Object2.MovieDate != null )
			{
				if (Object1.MovieDate != Object2.MovieDate)
					equal = false;
			}
			else if (Object1.MovieDate == null ^ Object2.MovieDate == null )
			{
				equal = false;
			}
			if ( Object1.CompanyShortLink != null && Object2.CompanyShortLink != null )
			{
				if (Object1.CompanyShortLink != Object2.CompanyShortLink)
					equal = false;
			}
			else if (Object1.CompanyShortLink == null ^ Object2.CompanyShortLink == null )
			{
				equal = false;
			}
			if ( Object1.Created != null && Object2.Created != null )
			{
				if (Object1.Created != Object2.Created)
					equal = false;
			}
			else if (Object1.Created == null ^ Object2.Created == null )
			{
				equal = false;
			}
			if (Object1.HostedLinkExpiryDate != Object2.HostedLinkExpiryDate)
				equal = false;
			if (Object1.HostedLinkShortened != Object2.HostedLinkShortened)
				equal = false;
			if ( Object1.HostedLinkAlias != null && Object2.HostedLinkAlias != null )
			{
				if (Object1.HostedLinkAlias != Object2.HostedLinkAlias)
					equal = false;
			}
			else if (Object1.HostedLinkAlias == null ^ Object2.HostedLinkAlias == null )
			{
				equal = false;
			}
			if ( Object1.RecordingDirectory != null && Object2.RecordingDirectory != null )
			{
				if (Object1.RecordingDirectory != Object2.RecordingDirectory)
					equal = false;
			}
			else if (Object1.RecordingDirectory == null ^ Object2.RecordingDirectory == null )
			{
				equal = false;
			}
			if ( Object1.UniqueConferenceId != null && Object2.UniqueConferenceId != null )
			{
				if (Object1.UniqueConferenceId != Object2.UniqueConferenceId)
					equal = false;
			}
			else if (Object1.UniqueConferenceId == null ^ Object2.UniqueConferenceId == null )
			{
				equal = false;
			}
			if ( Object1.HostingPeriod != null && Object2.HostingPeriod != null )
			{
				if (Object1.HostingPeriod != Object2.HostingPeriod)
					equal = false;
			}
			else if (Object1.HostingPeriod == null ^ Object2.HostingPeriod == null )
			{
				equal = false;
			}
			if ( Object1.HostingAutoRenew != null && Object2.HostingAutoRenew != null )
			{
				if (Object1.HostingAutoRenew != Object2.HostingAutoRenew)
					equal = false;
			}
			else if (Object1.HostingAutoRenew == null ^ Object2.HostingAutoRenew == null )
			{
				equal = false;
			}
			if ( Object1.Event_Id != null && Object2.Event_Id != null )
			{
				if (Object1.Event_Id != Object2.Event_Id)
					equal = false;
			}
			else if (Object1.Event_Id == null ^ Object2.Event_Id == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((OmnoviaHostedArchiveBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static OmnoviaHostedArchiveComparer GetComparer()
        {
            return new OmnoviaHostedArchiveComparer();
        }
        */

        // Comparer delegates back to OmnoviaHostedArchive
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(OmnoviaHostedArchive rhs, OmnoviaHostedArchiveColumn which)
        {
            switch (which)
            {
            	
            	
            	case OmnoviaHostedArchiveColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.OmnoviaCustomerId:
            		return this.OmnoviaCustomerId.Value.CompareTo(rhs.OmnoviaCustomerId.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.ModeratorId:
            		return this.ModeratorId.Value.CompareTo(rhs.ModeratorId.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.MovieId:
            		return this.MovieId.CompareTo(rhs.MovieId);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.RoomName:
            		return this.RoomName.CompareTo(rhs.RoomName);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.MovieTitle:
            		return this.MovieTitle.CompareTo(rhs.MovieTitle);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.MovieDateAdded:
            		return this.MovieDateAdded.Value.CompareTo(rhs.MovieDateAdded.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.MovieLength:
            		return this.MovieLength.Value.CompareTo(rhs.MovieLength.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.MovieRoomId:
            		return this.MovieRoomId.Value.CompareTo(rhs.MovieRoomId.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.MovieDate:
            		return this.MovieDate.Value.CompareTo(rhs.MovieDate.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.CompanyShortLink:
            		return this.CompanyShortLink.CompareTo(rhs.CompanyShortLink);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.Created:
            		return this.Created.Value.CompareTo(rhs.Created.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.HostedLinkExpiryDate:
            		return this.HostedLinkExpiryDate.CompareTo(rhs.HostedLinkExpiryDate);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.HostedLinkShortened:
            		return this.HostedLinkShortened.CompareTo(rhs.HostedLinkShortened);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.HostedLinkAlias:
            		return this.HostedLinkAlias.CompareTo(rhs.HostedLinkAlias);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.RecordingDirectory:
            		return this.RecordingDirectory.CompareTo(rhs.RecordingDirectory);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.UniqueConferenceId:
            		return this.UniqueConferenceId.CompareTo(rhs.UniqueConferenceId);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.HostingPeriod:
            		return this.HostingPeriod.Value.CompareTo(rhs.HostingPeriod.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.HostingAutoRenew:
            		return this.HostingAutoRenew.Value.CompareTo(rhs.HostingAutoRenew.Value);
            		
            		                 
            	
            	
            	case OmnoviaHostedArchiveColumn.Event_Id:
            		return this.Event_Id.Value.CompareTo(rhs.Event_Id.Value);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<OmnoviaHostedArchiveKey> Members
		
		// member variable for the EntityId property
		private OmnoviaHostedArchiveKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual OmnoviaHostedArchiveKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new OmnoviaHostedArchiveKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("OmnoviaHostedArchive")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- Id: {0}{20}- OmnoviaCustomerId: {1}{20}- ModeratorId: {2}{20}- MovieId: {3}{20}- RoomName: {4}{20}- MovieTitle: {5}{20}- MovieDateAdded: {6}{20}- MovieLength: {7}{20}- MovieRoomId: {8}{20}- MovieDate: {9}{20}- CompanyShortLink: {10}{20}- Created: {11}{20}- HostedLinkExpiryDate: {12}{20}- HostedLinkShortened: {13}{20}- HostedLinkAlias: {14}{20}- RecordingDirectory: {15}{20}- UniqueConferenceId: {16}{20}- HostingPeriod: {17}{20}- HostingAutoRenew: {18}{20}- Event_Id: {19}{20}", 
				this.Id,
				(this.OmnoviaCustomerId == null) ? string.Empty : this.OmnoviaCustomerId.ToString(),
				(this.ModeratorId == null) ? string.Empty : this.ModeratorId.ToString(),
				this.MovieId,
				(this.RoomName == null) ? string.Empty : this.RoomName.ToString(),
				(this.MovieTitle == null) ? string.Empty : this.MovieTitle.ToString(),
				(this.MovieDateAdded == null) ? string.Empty : this.MovieDateAdded.ToString(),
				(this.MovieLength == null) ? string.Empty : this.MovieLength.ToString(),
				(this.MovieRoomId == null) ? string.Empty : this.MovieRoomId.ToString(),
				(this.MovieDate == null) ? string.Empty : this.MovieDate.ToString(),
				(this.CompanyShortLink == null) ? string.Empty : this.CompanyShortLink.ToString(),
				(this.Created == null) ? string.Empty : this.Created.ToString(),
				this.HostedLinkExpiryDate,
				this.HostedLinkShortened,
				(this.HostedLinkAlias == null) ? string.Empty : this.HostedLinkAlias.ToString(),
				(this.RecordingDirectory == null) ? string.Empty : this.RecordingDirectory.ToString(),
				(this.UniqueConferenceId == null) ? string.Empty : this.UniqueConferenceId.ToString(),
				(this.HostingPeriod == null) ? string.Empty : this.HostingPeriod.ToString(),
				(this.HostingAutoRenew == null) ? string.Empty : this.HostingAutoRenew.ToString(),
				(this.Event_Id == null) ? string.Empty : this.Event_Id.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'OmnoviaHostedArchive' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class OmnoviaHostedArchiveEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// id : 
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "OmnoviaHostedArchive"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// OmnoviaCustomerID : 
		/// </summary>
		public System.Int32?		  OmnoviaCustomerId = null;
		
		/// <summary>
		/// ModeratorID : 
		/// </summary>
		public System.Int32?		  ModeratorId = null;
		
		/// <summary>
		/// MovieID : 
		/// </summary>
		public System.Int32		  MovieId = (int)0;
		
		/// <summary>
		/// RoomName : 
		/// </summary>
		public System.String		  RoomName = null;
		
		/// <summary>
		/// MovieTitle : 
		/// </summary>
		public System.String		  MovieTitle = null;
		
		/// <summary>
		/// MovieDateAdded : 
		/// </summary>
		public System.DateTime?		  MovieDateAdded = null;
		
		/// <summary>
		/// MovieLength : 
		/// </summary>
		public System.Int32?		  MovieLength = null;
		
		/// <summary>
		/// MovieRoomID : 
		/// </summary>
		public System.Int32?		  MovieRoomId = null;
		
		/// <summary>
		/// MovieDate : 
		/// </summary>
		public System.DateTime?		  MovieDate = null;
		
		/// <summary>
		/// CompanyShortLink : 
		/// </summary>
		public System.String		  CompanyShortLink = null;
		
		/// <summary>
		/// created : 
		/// </summary>
		public System.DateTime?		  Created = DateTime.Now;
		
		/// <summary>
		/// HostedLinkExpiryDate : 
		/// </summary>
		public System.DateTime		  HostedLinkExpiryDate = DateTime.MinValue;
		
		/// <summary>
		/// HostedLinkShortened : 
		/// </summary>
		public System.String		  HostedLinkShortened = string.Empty;
		
		/// <summary>
		/// HostedLinkAlias : 
		/// </summary>
		public System.String		  HostedLinkAlias = null;
		
		/// <summary>
		/// RecordingDirectory : 
		/// </summary>
		public System.String		  RecordingDirectory = null;
		
		/// <summary>
		/// UniqueConferenceID : 
		/// </summary>
		public System.String		  UniqueConferenceId = null;
		
		/// <summary>
		/// HostingPeriod : 
		/// </summary>
		public System.Int32?		  HostingPeriod = null;
		
		/// <summary>
		/// HostingAutoRenew : 
		/// </summary>
		public System.Int32?		  HostingAutoRenew = null;
		
		/// <summary>
		/// Event_ID : 
		/// </summary>
		public System.Int32?		  Event_Id = null;
		#endregion
			
		#region Source Foreign Key Property
				
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			OmnoviaHostedArchiveEntityData _tmp = new OmnoviaHostedArchiveEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.OmnoviaCustomerId = this.OmnoviaCustomerId;
			_tmp.ModeratorId = this.ModeratorId;
			_tmp.MovieId = this.MovieId;
			_tmp.RoomName = this.RoomName;
			_tmp.MovieTitle = this.MovieTitle;
			_tmp.MovieDateAdded = this.MovieDateAdded;
			_tmp.MovieLength = this.MovieLength;
			_tmp.MovieRoomId = this.MovieRoomId;
			_tmp.MovieDate = this.MovieDate;
			_tmp.CompanyShortLink = this.CompanyShortLink;
			_tmp.Created = this.Created;
			_tmp.HostedLinkExpiryDate = this.HostedLinkExpiryDate;
			_tmp.HostedLinkShortened = this.HostedLinkShortened;
			_tmp.HostedLinkAlias = this.HostedLinkAlias;
			_tmp.RecordingDirectory = this.RecordingDirectory;
			_tmp.UniqueConferenceId = this.UniqueConferenceId;
			_tmp.HostingPeriod = this.HostingPeriod;
			_tmp.HostingAutoRenew = this.HostingAutoRenew;
			_tmp.Event_Id = this.Event_Id;
			
			#region Source Parent Composite Entities
			#endregion
		
			#region Child Collections
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OmnoviaHostedArchiveColumn"/> which has raised the event.</param>
		public void OnColumnChanging(OmnoviaHostedArchiveColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OmnoviaHostedArchiveColumn"/> which has raised the event.</param>
		public void OnColumnChanged(OmnoviaHostedArchiveColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OmnoviaHostedArchiveColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(OmnoviaHostedArchiveColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				OmnoviaHostedArchiveEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new OmnoviaHostedArchiveEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="OmnoviaHostedArchiveColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(OmnoviaHostedArchiveColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				OmnoviaHostedArchiveEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new OmnoviaHostedArchiveEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region OmnoviaHostedArchiveEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="OmnoviaHostedArchive"/> object.
	/// </remarks>
	public class OmnoviaHostedArchiveEventArgs : System.EventArgs
	{
		private OmnoviaHostedArchiveColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the OmnoviaHostedArchiveEventArgs class.
		///</summary>
		public OmnoviaHostedArchiveEventArgs(OmnoviaHostedArchiveColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the OmnoviaHostedArchiveEventArgs class.
		///</summary>
		public OmnoviaHostedArchiveEventArgs(OmnoviaHostedArchiveColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The OmnoviaHostedArchiveColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="OmnoviaHostedArchiveColumn" />
		public OmnoviaHostedArchiveColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all OmnoviaHostedArchive related events.
	///</summary>
	public delegate void OmnoviaHostedArchiveEventHandler(object sender, OmnoviaHostedArchiveEventArgs e);
	
	#region OmnoviaHostedArchiveComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class OmnoviaHostedArchiveComparer : System.Collections.Generic.IComparer<OmnoviaHostedArchive>
	{
		OmnoviaHostedArchiveColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:OmnoviaHostedArchiveComparer"/> class.
        /// </summary>
		public OmnoviaHostedArchiveComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:OmnoviaHostedArchiveComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public OmnoviaHostedArchiveComparer(OmnoviaHostedArchiveColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="OmnoviaHostedArchive"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="OmnoviaHostedArchive"/> to compare.</param>
        /// <param name="b">The second <c>OmnoviaHostedArchive</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(OmnoviaHostedArchive a, OmnoviaHostedArchive b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(OmnoviaHostedArchive entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(OmnoviaHostedArchive a, OmnoviaHostedArchive b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public OmnoviaHostedArchiveColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region OmnoviaHostedArchiveKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="OmnoviaHostedArchive"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class OmnoviaHostedArchiveKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the OmnoviaHostedArchiveKey class.
		/// </summary>
		public OmnoviaHostedArchiveKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the OmnoviaHostedArchiveKey class.
		/// </summary>
		public OmnoviaHostedArchiveKey(OmnoviaHostedArchiveBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the OmnoviaHostedArchiveKey class.
		/// </summary>
		public OmnoviaHostedArchiveKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private OmnoviaHostedArchiveBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public OmnoviaHostedArchiveBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region OmnoviaHostedArchiveColumn Enum
	
	/// <summary>
	/// Enumerate the OmnoviaHostedArchive columns.
	/// </summary>
	[Serializable]
	public enum OmnoviaHostedArchiveColumn : int
	{
		/// <summary>
		/// Id : 
		/// </summary>
		[EnumTextValue("id")]
		[ColumnEnum("id", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// OmnoviaCustomerId : 
		/// </summary>
		[EnumTextValue("OmnoviaCustomerID")]
		[ColumnEnum("OmnoviaCustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		OmnoviaCustomerId = 2,
		/// <summary>
		/// ModeratorId : 
		/// </summary>
		[EnumTextValue("ModeratorID")]
		[ColumnEnum("ModeratorID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		ModeratorId = 3,
		/// <summary>
		/// MovieId : 
		/// </summary>
		[EnumTextValue("MovieID")]
		[ColumnEnum("MovieID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		MovieId = 4,
		/// <summary>
		/// RoomName : 
		/// </summary>
		[EnumTextValue("RoomName")]
		[ColumnEnum("RoomName", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		RoomName = 5,
		/// <summary>
		/// MovieTitle : 
		/// </summary>
		[EnumTextValue("MovieTitle")]
		[ColumnEnum("MovieTitle", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		MovieTitle = 6,
		/// <summary>
		/// MovieDateAdded : 
		/// </summary>
		[EnumTextValue("MovieDateAdded")]
		[ColumnEnum("MovieDateAdded", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MovieDateAdded = 7,
		/// <summary>
		/// MovieLength : 
		/// </summary>
		[EnumTextValue("MovieLength")]
		[ColumnEnum("MovieLength", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MovieLength = 8,
		/// <summary>
		/// MovieRoomId : 
		/// </summary>
		[EnumTextValue("MovieRoomID")]
		[ColumnEnum("MovieRoomID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		MovieRoomId = 9,
		/// <summary>
		/// MovieDate : 
		/// </summary>
		[EnumTextValue("MovieDate")]
		[ColumnEnum("MovieDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		MovieDate = 10,
		/// <summary>
		/// CompanyShortLink : 
		/// </summary>
		[EnumTextValue("CompanyShortLink")]
		[ColumnEnum("CompanyShortLink", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		CompanyShortLink = 11,
		/// <summary>
		/// Created : 
		/// </summary>
		[EnumTextValue("created")]
		[ColumnEnum("created", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, true)]
		Created = 12,
		/// <summary>
		/// HostedLinkExpiryDate : 
		/// </summary>
		[EnumTextValue("HostedLinkExpiryDate")]
		[ColumnEnum("HostedLinkExpiryDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		HostedLinkExpiryDate = 13,
		/// <summary>
		/// HostedLinkShortened : 
		/// </summary>
		[EnumTextValue("HostedLinkShortened")]
		[ColumnEnum("HostedLinkShortened", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		HostedLinkShortened = 14,
		/// <summary>
		/// HostedLinkAlias : 
		/// </summary>
		[EnumTextValue("HostedLinkAlias")]
		[ColumnEnum("HostedLinkAlias", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		HostedLinkAlias = 15,
		/// <summary>
		/// RecordingDirectory : 
		/// </summary>
		[EnumTextValue("RecordingDirectory")]
		[ColumnEnum("RecordingDirectory", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		RecordingDirectory = 16,
		/// <summary>
		/// UniqueConferenceId : 
		/// </summary>
		[EnumTextValue("UniqueConferenceID")]
		[ColumnEnum("UniqueConferenceID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 40)]
		UniqueConferenceId = 17,
		/// <summary>
		/// HostingPeriod : 
		/// </summary>
		[EnumTextValue("HostingPeriod")]
		[ColumnEnum("HostingPeriod", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		HostingPeriod = 18,
		/// <summary>
		/// HostingAutoRenew : 
		/// </summary>
		[EnumTextValue("HostingAutoRenew")]
		[ColumnEnum("HostingAutoRenew", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		HostingAutoRenew = 19,
		/// <summary>
		/// Event_Id : 
		/// </summary>
		[EnumTextValue("Event_ID")]
		[ColumnEnum("Event_ID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Event_Id = 20
	}//End enum

	#endregion OmnoviaHostedArchiveColumn Enum

} // end namespace
