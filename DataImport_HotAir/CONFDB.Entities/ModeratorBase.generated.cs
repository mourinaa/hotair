
/*
	File generated by NetTiers templates [www.nettiers.com]
	Important: Do not modify this file. Edit the file Moderator.cs instead.
*/

#region using directives

using System;
using System.ComponentModel;
using System.Collections;
using System.Xml.Serialization;
using System.Runtime.Serialization;

#endregion

namespace CONFDB.Entities
{
	///<summary>
	/// An object representation of the 'Moderator' table. [No description found the database]	
	///</summary>
	[Serializable, DataObject]
	[CLSCompliant(true)]
	public abstract partial class ModeratorBase : EntityBase, CONFDB.Entities.IModerator, IEntityId<ModeratorKey>, System.IComparable, System.ICloneable, IEditableObject, IComponent, INotifyPropertyChanged
	{		
		#region Variable Declarations
		
		/// <summary>
		///  Hold the inner data of the entity.
		/// </summary>
		private ModeratorEntityData entityData;
		
		/// <summary>
		/// 	Hold the original data of the entity, as loaded from the repository.
		/// </summary>
		private ModeratorEntityData _originalData;
		
		/// <summary>
		/// 	Hold a backup of the inner data of the entity.
		/// </summary>
		private ModeratorEntityData backupData; 
		
		/// <summary>
		/// 	Key used if Tracking is Enabled for the <see cref="EntityLocator" />.
		/// </summary>
		private string entityTrackingKey;
		
		/// <summary>
		/// 	Hold the parent TList&lt;entity&gt; in which this entity maybe contained.
		/// </summary>
		/// <remark>Mostly used for databinding</remark>
		[NonSerialized]
		private TList<Moderator> parentCollection;
		
		private bool inTxn = false;
		
		/// <summary>
		/// Occurs when a value is being changed for the specified column.
		/// </summary>	
		[field:NonSerialized]
		public event ModeratorEventHandler ColumnChanging;		
		
		/// <summary>
		/// Occurs after a value has been changed for the specified column.
		/// </summary>
		[field:NonSerialized]
		public event ModeratorEventHandler ColumnChanged;
		
		#endregion Variable Declarations
		
		#region Constructors
		///<summary>
		/// Creates a new <see cref="ModeratorBase"/> instance.
		///</summary>
		public ModeratorBase()
		{
			this.entityData = new ModeratorEntityData();
			this.backupData = null;
		}		
		
		///<summary>
		/// Creates a new <see cref="ModeratorBase"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_externalModeratorNumber"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_description">The description of the conference, like a title.</param>
		///<param name="_departmentId"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_createdDate"></param>
		///<param name="_lastModified"></param>
		///<param name="_enabled"></param>
		///<param name="_uniqueModeratorId"></param>
		///<param name="_userId"></param>
		///<param name="_webMeetingId">Used to reference a Persony meeting id.</param>
		///<param name="_omnovia_Room_Id"></param>
		///<param name="_seevogh_Meeting_Url"></param>
		///<param name="_seeVoghMeetingId"></param>
		public ModeratorBase(System.String _wholesalerId, System.Int32 _customerId, System.String _priCustomerNumber, 
			System.String _secCustomerNumber, System.String _externalModeratorNumber, System.String _moderatorCode, 
			System.String _passCode, System.String _description, System.Int32 _departmentId, System.String _modifiedBy, 
			System.DateTime _createdDate, System.DateTime _lastModified, System.Boolean? _enabled, System.Guid _uniqueModeratorId, 
			System.Int32? _userId, System.String _webMeetingId, System.Int32? _omnovia_Room_Id, System.String _seevogh_Meeting_Url, 
			System.String _seeVoghMeetingId)
		{
			this.entityData = new ModeratorEntityData();
			this.backupData = null;

			this.WholesalerId = _wholesalerId;
			this.CustomerId = _customerId;
			this.PriCustomerNumber = _priCustomerNumber;
			this.SecCustomerNumber = _secCustomerNumber;
			this.ExternalModeratorNumber = _externalModeratorNumber;
			this.ModeratorCode = _moderatorCode;
			this.PassCode = _passCode;
			this.Description = _description;
			this.DepartmentId = _departmentId;
			this.ModifiedBy = _modifiedBy;
			this.CreatedDate = _createdDate;
			this.LastModified = _lastModified;
			this.Enabled = _enabled;
			this.UniqueModeratorId = _uniqueModeratorId;
			this.UserId = _userId;
			this.WebMeetingId = _webMeetingId;
			this.Omnovia_Room_Id = _omnovia_Room_Id;
			this.Seevogh_Meeting_Url = _seevogh_Meeting_Url;
			this.SeeVoghMeetingId = _seeVoghMeetingId;
		}
		
		///<summary>
		/// A simple factory method to create a new <see cref="Moderator"/> instance.
		///</summary>
		///<param name="_wholesalerId"></param>
		///<param name="_customerId"></param>
		///<param name="_priCustomerNumber"></param>
		///<param name="_secCustomerNumber"></param>
		///<param name="_externalModeratorNumber"></param>
		///<param name="_moderatorCode"></param>
		///<param name="_passCode"></param>
		///<param name="_description">The description of the conference, like a title.</param>
		///<param name="_departmentId"></param>
		///<param name="_modifiedBy"></param>
		///<param name="_createdDate"></param>
		///<param name="_lastModified"></param>
		///<param name="_enabled"></param>
		///<param name="_uniqueModeratorId"></param>
		///<param name="_userId"></param>
		///<param name="_webMeetingId">Used to reference a Persony meeting id.</param>
		///<param name="_omnovia_Room_Id"></param>
		///<param name="_seevogh_Meeting_Url"></param>
		///<param name="_seeVoghMeetingId"></param>
		public static Moderator CreateModerator(System.String _wholesalerId, System.Int32 _customerId, System.String _priCustomerNumber, 
			System.String _secCustomerNumber, System.String _externalModeratorNumber, System.String _moderatorCode, 
			System.String _passCode, System.String _description, System.Int32 _departmentId, System.String _modifiedBy, 
			System.DateTime _createdDate, System.DateTime _lastModified, System.Boolean? _enabled, System.Guid _uniqueModeratorId, 
			System.Int32? _userId, System.String _webMeetingId, System.Int32? _omnovia_Room_Id, System.String _seevogh_Meeting_Url, 
			System.String _seeVoghMeetingId)
		{
			Moderator newModerator = new Moderator();
			newModerator.WholesalerId = _wholesalerId;
			newModerator.CustomerId = _customerId;
			newModerator.PriCustomerNumber = _priCustomerNumber;
			newModerator.SecCustomerNumber = _secCustomerNumber;
			newModerator.ExternalModeratorNumber = _externalModeratorNumber;
			newModerator.ModeratorCode = _moderatorCode;
			newModerator.PassCode = _passCode;
			newModerator.Description = _description;
			newModerator.DepartmentId = _departmentId;
			newModerator.ModifiedBy = _modifiedBy;
			newModerator.CreatedDate = _createdDate;
			newModerator.LastModified = _lastModified;
			newModerator.Enabled = _enabled;
			newModerator.UniqueModeratorId = _uniqueModeratorId;
			newModerator.UserId = _userId;
			newModerator.WebMeetingId = _webMeetingId;
			newModerator.Omnovia_Room_Id = _omnovia_Room_Id;
			newModerator.Seevogh_Meeting_Url = _seevogh_Meeting_Url;
			newModerator.SeeVoghMeetingId = _seeVoghMeetingId;
			return newModerator;
		}
				
		#endregion Constructors
			
		#region Properties	
		
		#region Data Properties		
		/// <summary>
		/// 	Gets or sets the Id property. 
		///		This table is changing to be used to house serveral different sets of codes/conferences per User.
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[ReadOnlyAttribute(false)/*, XmlIgnoreAttribute()*/, DescriptionAttribute("This table is changing to be used to house serveral different sets of codes/conferences per User."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(true, true, false)]
		public virtual System.Int32 Id
		{
			get
			{
				return this.entityData.Id; 
			}
			
			set
			{
				if (this.entityData.Id == value)
					return;
					
				OnColumnChanging(ModeratorColumn.Id, this.entityData.Id);
				this.entityData.Id = value;
				this.EntityId.Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.Id, this.entityData.Id);
				OnPropertyChanged("Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WholesalerId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String WholesalerId
		{
			get
			{
				return this.entityData.WholesalerId; 
			}
			
			set
			{
				if (this.entityData.WholesalerId == value)
					return;
					
				OnColumnChanging(ModeratorColumn.WholesalerId, this.entityData.WholesalerId);
				this.entityData.WholesalerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.WholesalerId, this.entityData.WholesalerId);
				OnPropertyChanged("WholesalerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CustomerId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 CustomerId
		{
			get
			{
				return this.entityData.CustomerId; 
			}
			
			set
			{
				if (this.entityData.CustomerId == value)
					return;
					
				OnColumnChanging(ModeratorColumn.CustomerId, this.entityData.CustomerId);
				this.entityData.CustomerId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.CustomerId, this.entityData.CustomerId);
				OnPropertyChanged("CustomerId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PriCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 10)]
		public virtual System.String PriCustomerNumber
		{
			get
			{
				return this.entityData.PriCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.PriCustomerNumber == value)
					return;
					
				OnColumnChanging(ModeratorColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				this.entityData.PriCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.PriCustomerNumber, this.entityData.PriCustomerNumber);
				OnPropertyChanged("PriCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SecCustomerNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 6)]
		public virtual System.String SecCustomerNumber
		{
			get
			{
				return this.entityData.SecCustomerNumber; 
			}
			
			set
			{
				if (this.entityData.SecCustomerNumber == value)
					return;
					
				OnColumnChanging(ModeratorColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				this.entityData.SecCustomerNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.SecCustomerNumber, this.entityData.SecCustomerNumber);
				OnPropertyChanged("SecCustomerNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ExternalModeratorNumber property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ExternalModeratorNumber
		{
			get
			{
				return this.entityData.ExternalModeratorNumber; 
			}
			
			set
			{
				if (this.entityData.ExternalModeratorNumber == value)
					return;
					
				OnColumnChanging(ModeratorColumn.ExternalModeratorNumber, this.entityData.ExternalModeratorNumber);
				this.entityData.ExternalModeratorNumber = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.ExternalModeratorNumber, this.entityData.ExternalModeratorNumber);
				OnPropertyChanged("ExternalModeratorNumber");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModeratorCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 16)]
		public virtual System.String ModeratorCode
		{
			get
			{
				return this.entityData.ModeratorCode; 
			}
			
			set
			{
				if (this.entityData.ModeratorCode == value)
					return;
					
				OnColumnChanging(ModeratorColumn.ModeratorCode, this.entityData.ModeratorCode);
				this.entityData.ModeratorCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.ModeratorCode, this.entityData.ModeratorCode);
				OnPropertyChanged("ModeratorCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the PassCode property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		/// <exception cref="ArgumentNullException">If you attempt to set to null.</exception>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false, 16)]
		public virtual System.String PassCode
		{
			get
			{
				return this.entityData.PassCode; 
			}
			
			set
			{
				if (this.entityData.PassCode == value)
					return;
					
				OnColumnChanging(ModeratorColumn.PassCode, this.entityData.PassCode);
				this.entityData.PassCode = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.PassCode, this.entityData.PassCode);
				OnPropertyChanged("PassCode");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Description property. 
		///		The description of the conference, like a title.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("The description of the conference, like a title."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String Description
		{
			get
			{
				return this.entityData.Description; 
			}
			
			set
			{
				if (this.entityData.Description == value)
					return;
					
				OnColumnChanging(ModeratorColumn.Description, this.entityData.Description);
				this.entityData.Description = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.Description, this.entityData.Description);
				OnPropertyChanged("Description");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the DepartmentId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Int32 DepartmentId
		{
			get
			{
				return this.entityData.DepartmentId; 
			}
			
			set
			{
				if (this.entityData.DepartmentId == value)
					return;
					
				OnColumnChanging(ModeratorColumn.DepartmentId, this.entityData.DepartmentId);
				this.entityData.DepartmentId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.DepartmentId, this.entityData.DepartmentId);
				OnPropertyChanged("DepartmentId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the ModifiedBy property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 100)]
		public virtual System.String ModifiedBy
		{
			get
			{
				return this.entityData.ModifiedBy; 
			}
			
			set
			{
				if (this.entityData.ModifiedBy == value)
					return;
					
				OnColumnChanging(ModeratorColumn.ModifiedBy, this.entityData.ModifiedBy);
				this.entityData.ModifiedBy = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.ModifiedBy, this.entityData.ModifiedBy);
				OnPropertyChanged("ModifiedBy");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the CreatedDate property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime CreatedDate
		{
			get
			{
				return this.entityData.CreatedDate; 
			}
			
			set
			{
				if (this.entityData.CreatedDate == value)
					return;
					
				OnColumnChanging(ModeratorColumn.CreatedDate, this.entityData.CreatedDate);
				this.entityData.CreatedDate = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.CreatedDate, this.entityData.CreatedDate);
				OnPropertyChanged("CreatedDate");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the LastModified property. 
		///		
		/// </summary>
		/// <value>This type is datetime.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.DateTime LastModified
		{
			get
			{
				return this.entityData.LastModified; 
			}
			
			set
			{
				if (this.entityData.LastModified == value)
					return;
					
				OnColumnChanging(ModeratorColumn.LastModified, this.entityData.LastModified);
				this.entityData.LastModified = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.LastModified, this.entityData.LastModified);
				OnPropertyChanged("LastModified");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Enabled property. 
		///		
		/// </summary>
		/// <value>This type is bit.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return false. It is up to the developer
		/// to check the value of IsEnabledNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Boolean? Enabled
		{
			get
			{
				return this.entityData.Enabled; 
			}
			
			set
			{
				if (this.entityData.Enabled == value)
					return;
					
				OnColumnChanging(ModeratorColumn.Enabled, this.entityData.Enabled);
				this.entityData.Enabled = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.Enabled, this.entityData.Enabled);
				OnPropertyChanged("Enabled");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UniqueModeratorId property. 
		///		
		/// </summary>
		/// <value>This type is uniqueidentifier.</value>
		/// <remarks>
		/// This property can not be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, false)]
		public virtual System.Guid UniqueModeratorId
		{
			get
			{
				return this.entityData.UniqueModeratorId; 
			}
			
			set
			{
				if (this.entityData.UniqueModeratorId == value)
					return;
					
				OnColumnChanging(ModeratorColumn.UniqueModeratorId, this.entityData.UniqueModeratorId);
				this.entityData.UniqueModeratorId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.UniqueModeratorId, this.entityData.UniqueModeratorId);
				OnPropertyChanged("UniqueModeratorId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the UserId property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsUserIdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? UserId
		{
			get
			{
				return this.entityData.UserId; 
			}
			
			set
			{
				if (this.entityData.UserId == value)
					return;
					
				OnColumnChanging(ModeratorColumn.UserId, this.entityData.UserId);
				this.entityData.UserId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.UserId, this.entityData.UserId);
				OnPropertyChanged("UserId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the WebMeetingId property. 
		///		Used to reference a Persony meeting id.
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute("Used to reference a Persony meeting id."), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String WebMeetingId
		{
			get
			{
				return this.entityData.WebMeetingId; 
			}
			
			set
			{
				if (this.entityData.WebMeetingId == value)
					return;
					
				OnColumnChanging(ModeratorColumn.WebMeetingId, this.entityData.WebMeetingId);
				this.entityData.WebMeetingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.WebMeetingId, this.entityData.WebMeetingId);
				OnPropertyChanged("WebMeetingId");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Omnovia_Room_Id property. 
		///		
		/// </summary>
		/// <value>This type is int.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// If this column is null, this property will return (int)0. It is up to the developer
		/// to check the value of IsOmnovia_Room_IdNull() and perform business logic appropriately.
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true)]
		public virtual System.Int32? Omnovia_Room_Id
		{
			get
			{
				return this.entityData.Omnovia_Room_Id; 
			}
			
			set
			{
				if (this.entityData.Omnovia_Room_Id == value)
					return;
					
				OnColumnChanging(ModeratorColumn.Omnovia_Room_Id, this.entityData.Omnovia_Room_Id);
				this.entityData.Omnovia_Room_Id = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.Omnovia_Room_Id, this.entityData.Omnovia_Room_Id);
				OnPropertyChanged("Omnovia_Room_Id");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the Seevogh_Meeting_Url property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 255)]
		public virtual System.String Seevogh_Meeting_Url
		{
			get
			{
				return this.entityData.Seevogh_Meeting_Url; 
			}
			
			set
			{
				if (this.entityData.Seevogh_Meeting_Url == value)
					return;
					
				OnColumnChanging(ModeratorColumn.Seevogh_Meeting_Url, this.entityData.Seevogh_Meeting_Url);
				this.entityData.Seevogh_Meeting_Url = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.Seevogh_Meeting_Url, this.entityData.Seevogh_Meeting_Url);
				OnPropertyChanged("Seevogh_Meeting_Url");
			}
		}
		
		/// <summary>
		/// 	Gets or sets the SeeVoghMeetingId property. 
		///		
		/// </summary>
		/// <value>This type is varchar.</value>
		/// <remarks>
		/// This property can be set to null. 
		/// </remarks>
		[DescriptionAttribute(""), System.ComponentModel.Bindable( System.ComponentModel.BindableSupport.Yes)]
		[DataObjectField(false, false, true, 50)]
		public virtual System.String SeeVoghMeetingId
		{
			get
			{
				return this.entityData.SeeVoghMeetingId; 
			}
			
			set
			{
				if (this.entityData.SeeVoghMeetingId == value)
					return;
					
				OnColumnChanging(ModeratorColumn.SeeVoghMeetingId, this.entityData.SeeVoghMeetingId);
				this.entityData.SeeVoghMeetingId = value;
				if (this.EntityState == EntityState.Unchanged)
					this.EntityState = EntityState.Changed;
				OnColumnChanged(ModeratorColumn.SeeVoghMeetingId, this.entityData.SeeVoghMeetingId);
				OnPropertyChanged("SeeVoghMeetingId");
			}
		}
		
		#endregion Data Properties		

		#region Source Foreign Key Property
				
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for UserId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual User UserIdSource
      	{
            get { return entityData.UserIdSource; }
            set { entityData.UserIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Department"/>.
		/// </summary>
		/// <value>The source Department for DepartmentId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Department DepartmentIdSource
      	{
            get { return entityData.DepartmentIdSource; }
            set { entityData.DepartmentIdSource = value; }
      	}
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false), System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual Customer CustomerIdSource
      	{
            get { return entityData.CustomerIdSource; }
            set { entityData.CustomerIdSource = value; }
      	}
		#endregion
		
		#region Children Collections
	
		/// <summary>
		///	Holds a collection of Moderator_Feature objects
		///	which are related to this object through the relation Moderator_Moderator_Feature_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Moderator_Feature> Moderator_FeatureCollection
		{
			get { return entityData.Moderator_FeatureCollection; }
			set { entityData.Moderator_FeatureCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of WelcomeKitRequest objects
		///	which are related to this object through the relation FK_WelcomeKitRequest_Moderator
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<WelcomeKitRequest> WelcomeKitRequestCollection
		{
			get { return entityData.WelcomeKitRequestCollection; }
			set { entityData.WelcomeKitRequestCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of BridgeRequest objects
		///	which are related to this object through the relation Moderator_BridgeRequest_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<BridgeRequest> BridgeRequestCollection
		{
			get { return entityData.BridgeRequestCollection; }
			set { entityData.BridgeRequestCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Moderator_Dnis objects
		///	which are related to this object through the relation Moderator_Moderator_DNIS_FK1
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Moderator_Dnis> Moderator_DnisCollection
		{
			get { return entityData.Moderator_DnisCollection; }
			set { entityData.Moderator_DnisCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of BridgeQueue objects
		///	which are related to this object through the relation Moderator_BridgeQueue_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<BridgeQueue> BridgeQueueCollection
		{
			get { return entityData.BridgeQueueCollection; }
			set { entityData.BridgeQueueCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of RatedCdr objects
		///	which are related to this object through the relation Moderator_RatedCDR_FK
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<RatedCdr> RatedCdrCollection
		{
			get { return entityData.RatedCdrCollection; }
			set { entityData.RatedCdrCollection = value; }	
		}
	
		/// <summary>
		///	Holds a collection of Ticket objects
		///	which are related to this object through the relation FK_Ticket_Moderator
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Ticket> TicketCollection
		{
			get { return entityData.TicketCollection; }
			set { entityData.TicketCollection = value; }	
		}

		/// <summary>
		///	Holds a collection of DnisFromModerator_Dnis objects
		///	which are related to this object through the junction table Moderator_Dnis
		/// </summary>	
		[System.ComponentModel.Bindable(System.ComponentModel.BindableSupport.Yes)]
		public virtual TList<Dnis> DnisidDnisCollection_From_Moderator_Dnis
		{
			get { return entityData.DnisidDnisCollection_From_Moderator_Dnis; }
			set { entityData.DnisidDnisCollection_From_Moderator_Dnis = value; }	
		}
		#endregion Children Collections
		
		#endregion
		
		#region Validation
		
		/// <summary>
		/// Assigns validation rules to this object based on model definition.
		/// </summary>
		/// <remarks>This method overrides the base class to add schema related validation.</remarks>
		protected override void AddValidationRules()
		{
			//Validation rules based on database schema.
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("WholesalerId", "Wholesaler Id"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WholesalerId", "Wholesaler Id", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PriCustomerNumber", "Pri Customer Number"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PriCustomerNumber", "Pri Customer Number", 10));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("SecCustomerNumber", "Sec Customer Number"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SecCustomerNumber", "Sec Customer Number", 6));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ExternalModeratorNumber", "External Moderator Number", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("ModeratorCode", "Moderator Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModeratorCode", "Moderator Code", 16));
			ValidationRules.AddRule(
				Validation.CommonRules.NotNull,
				new Validation.ValidationRuleArgs("PassCode", "Pass Code"));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("PassCode", "Pass Code", 16));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Description", "Description", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("ModifiedBy", "Modified By", 100));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("WebMeetingId", "Web Meeting Id", 50));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("Seevogh_Meeting_Url", "Seevogh Meeting Url", 255));
			ValidationRules.AddRule(
				Validation.CommonRules.StringMaxLength, 
				new Validation.CommonRules.MaxLengthRuleArgs("SeeVoghMeetingId", "See Vogh Meeting Id", 50));
		}
   		#endregion
		
		#region Table Meta Data
		/// <summary>
		///		The name of the underlying database table.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string TableName
		{
			get { return "Moderator"; }
		}
		
		/// <summary>
		///		The name of the underlying database table's columns.
		/// </summary>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public override string[] TableColumns
		{
			get
			{
				return new string[] {"ID", "WholesalerID", "CustomerID", "PriCustomerNumber", "SecCustomerNumber", "ExternalModeratorNumber", "ModeratorCode", "PassCode", "Description", "DepartmentID", "ModifiedBy", "CreatedDate", "LastModified", "Enabled", "UniqueModeratorID", "UserID", "WebMeetingID", "omnovia_room_id", "seevogh_meeting_url", "SeeVoghMeetingID"};
			}
		}
		#endregion 
		
		#region IEditableObject
		
		#region  CancelAddNew Event
		/// <summary>
        /// The delegate for the CancelAddNew event.
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
		public delegate void CancelAddNewEventHandler(object sender, EventArgs e);
    
    	/// <summary>
		/// The CancelAddNew event.
		/// </summary>
		[field:NonSerialized]
		public event CancelAddNewEventHandler CancelAddNew ;

		/// <summary>
        /// Called when [cancel add new].
        /// </summary>
        public void OnCancelAddNew()
        {    
			if (!SuppressEntityEvents)
			{
	            CancelAddNewEventHandler handler = CancelAddNew ;
            	if (handler != null)
	            {    
    	            handler(this, EventArgs.Empty) ;
        	    }
	        }
        }
		#endregion 
		
		/// <summary>
		/// Begins an edit on an object.
		/// </summary>
		void IEditableObject.BeginEdit() 
	    {
	        //Console.WriteLine("Start BeginEdit");
	        if (!inTxn) 
	        {
	            this.backupData = this.entityData.Clone() as ModeratorEntityData;
	            inTxn = true;
	            //Console.WriteLine("BeginEdit");
	        }
	        //Console.WriteLine("End BeginEdit");
	    }
	
		/// <summary>
		/// Discards changes since the last <c>BeginEdit</c> call.
		/// </summary>
	    void IEditableObject.CancelEdit() 
	    {
	        //Console.WriteLine("Start CancelEdit");
	        if (this.inTxn) 
	        {
	            this.entityData = this.backupData;
	            this.backupData = null;
				this.inTxn = false;

				if (this.bindingIsNew)
	        	//if (this.EntityState == EntityState.Added)
	        	{
					if (this.parentCollection != null)
						this.parentCollection.Remove( (Moderator) this ) ;
				}	            
	        }
	        //Console.WriteLine("End CancelEdit");
	    }
	
		/// <summary>
		/// Pushes changes since the last <c>BeginEdit</c> or <c>IBindingList.AddNew</c> call into the underlying object.
		/// </summary>
	    void IEditableObject.EndEdit() 
	    {
	        //Console.WriteLine("Start EndEdit" + this.custData.id + this.custData.lastName);
	        if (this.inTxn) 
	        {
	            this.backupData = null;
				if (this.IsDirty) 
				{
					if (this.bindingIsNew) {
						this.EntityState = EntityState.Added;
						this.bindingIsNew = false ;
					}
					else
						if (this.EntityState == EntityState.Unchanged) 
							this.EntityState = EntityState.Changed ;
				}

				this.bindingIsNew = false ;
	            this.inTxn = false;	            
	        }
	        //Console.WriteLine("End EndEdit");
	    }
	    
	    /// <summary>
        /// Gets or sets the parent collection of this current entity, if available.
        /// </summary>
        /// <value>The parent collection.</value>
	    [XmlIgnore]
		[Browsable(false)]
	    public override object ParentCollection
	    {
	        get 
	        {
	            return this.parentCollection;
	        }
	        set 
	        {
	            this.parentCollection = value as TList<Moderator>;
	        }
	    }
	    
	    /// <summary>
        /// Called when the entity is changed.
        /// </summary>
	    private void OnEntityChanged() 
	    {
	        if (!SuppressEntityEvents && !inTxn && this.parentCollection != null) 
	        {
	            this.parentCollection.EntityChanged(this as Moderator);
	        }
	    }


		#endregion
		
		#region ICloneable Members
		///<summary>
		///  Returns a Typed Moderator Entity 
		///</summary>
		public virtual Moderator Copy()
		{
			//shallow copy entity
			Moderator copy = new Moderator();
			copy.SuppressEntityEvents = true;
			copy.Id = this.Id;
			copy.WholesalerId = this.WholesalerId;
			copy.CustomerId = this.CustomerId;
			copy.PriCustomerNumber = this.PriCustomerNumber;
			copy.SecCustomerNumber = this.SecCustomerNumber;
			copy.ExternalModeratorNumber = this.ExternalModeratorNumber;
			copy.ModeratorCode = this.ModeratorCode;
			copy.PassCode = this.PassCode;
			copy.Description = this.Description;
			copy.DepartmentId = this.DepartmentId;
			copy.ModifiedBy = this.ModifiedBy;
			copy.CreatedDate = this.CreatedDate;
			copy.LastModified = this.LastModified;
			copy.Enabled = this.Enabled;
			copy.UniqueModeratorId = this.UniqueModeratorId;
			copy.UserId = this.UserId;
			copy.WebMeetingId = this.WebMeetingId;
			copy.Omnovia_Room_Id = this.Omnovia_Room_Id;
			copy.Seevogh_Meeting_Url = this.Seevogh_Meeting_Url;
			copy.SeeVoghMeetingId = this.SeeVoghMeetingId;
			
			copy.UserIdSource = MakeCopyOf(this.UserIdSource) as User;
			copy.DepartmentIdSource = MakeCopyOf(this.DepartmentIdSource) as Department;
			copy.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
		
			//deep copy nested objects
			copy.Moderator_FeatureCollection = (TList<Moderator_Feature>) MakeCopyOf(this.Moderator_FeatureCollection); 
			copy.WelcomeKitRequestCollection = (TList<WelcomeKitRequest>) MakeCopyOf(this.WelcomeKitRequestCollection); 
			copy.BridgeRequestCollection = (TList<BridgeRequest>) MakeCopyOf(this.BridgeRequestCollection); 
			copy.Moderator_DnisCollection = (TList<Moderator_Dnis>) MakeCopyOf(this.Moderator_DnisCollection); 
			copy.BridgeQueueCollection = (TList<BridgeQueue>) MakeCopyOf(this.BridgeQueueCollection); 
			copy.RatedCdrCollection = (TList<RatedCdr>) MakeCopyOf(this.RatedCdrCollection); 
			copy.TicketCollection = (TList<Ticket>) MakeCopyOf(this.TicketCollection); 
			copy.DnisidDnisCollection_From_Moderator_Dnis = (TList<Dnis>) MakeCopyOf(this.DnisidDnisCollection_From_Moderator_Dnis); 
			copy.EntityState = this.EntityState;
			copy.SuppressEntityEvents = false;
			return copy;
		}
		
		///<summary>
		/// ICloneable.Clone() Member, returns the Shallow Copy of this entity.
		///</summary>
		public object Clone()
		{
			return this.Copy();
		}
		
		///<summary>
		/// Returns a deep copy of the child collection object passed in.
		///</summary>
		public static object MakeCopyOf(object x)
		{
			if (x == null)
				return null;
				
			if (x is ICloneable)
			{
				// Return a deep copy of the object
				return ((ICloneable)x).Clone();
			}
			else
				throw new System.NotSupportedException("Object Does Not Implement the ICloneable Interface.");
		}
		
		///<summary>
		///  Returns a Typed Moderator Entity which is a deep copy of the current entity.
		///</summary>
		public virtual Moderator DeepCopy()
		{
			return EntityHelper.Clone<Moderator>(this as Moderator);	
		}
		#endregion
		
		#region Methods	
			
		///<summary>
		/// Revert all changes and restore original values.
		///</summary>
		public override void CancelChanges()
		{
			IEditableObject obj = (IEditableObject) this;
			obj.CancelEdit();

			this.entityData = null;
			if (this._originalData != null)
			{
				this.entityData = this._originalData.Clone() as ModeratorEntityData;
			}
		}	
		
		/// <summary>
		/// Accepts the changes made to this object.
		/// </summary>
		/// <remarks>
		/// After calling this method, properties: IsDirty, IsNew are false. IsDeleted flag remains unchanged as it is handled by the parent List.
		/// </remarks>
		public override void AcceptChanges()
		{
			base.AcceptChanges();

			// we keep of the original version of the data
			this._originalData = null;
			this._originalData = this.entityData.Clone() as ModeratorEntityData;
		}
		
		#region Comparision with original data
		
		/// <summary>
		/// Determines whether the property value has changed from the original data.
		/// </summary>
		/// <param name="column">The column.</param>
		/// <returns>
		/// 	<c>true</c> if the property value has changed; otherwise, <c>false</c>.
		/// </returns>
		public bool IsPropertyChanged(ModeratorColumn column)
		{
			switch(column)
			{
					case ModeratorColumn.Id:
					return entityData.Id != _originalData.Id;
					case ModeratorColumn.WholesalerId:
					return entityData.WholesalerId != _originalData.WholesalerId;
					case ModeratorColumn.CustomerId:
					return entityData.CustomerId != _originalData.CustomerId;
					case ModeratorColumn.PriCustomerNumber:
					return entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
					case ModeratorColumn.SecCustomerNumber:
					return entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
					case ModeratorColumn.ExternalModeratorNumber:
					return entityData.ExternalModeratorNumber != _originalData.ExternalModeratorNumber;
					case ModeratorColumn.ModeratorCode:
					return entityData.ModeratorCode != _originalData.ModeratorCode;
					case ModeratorColumn.PassCode:
					return entityData.PassCode != _originalData.PassCode;
					case ModeratorColumn.Description:
					return entityData.Description != _originalData.Description;
					case ModeratorColumn.DepartmentId:
					return entityData.DepartmentId != _originalData.DepartmentId;
					case ModeratorColumn.ModifiedBy:
					return entityData.ModifiedBy != _originalData.ModifiedBy;
					case ModeratorColumn.CreatedDate:
					return entityData.CreatedDate != _originalData.CreatedDate;
					case ModeratorColumn.LastModified:
					return entityData.LastModified != _originalData.LastModified;
					case ModeratorColumn.Enabled:
					return entityData.Enabled != _originalData.Enabled;
					case ModeratorColumn.UniqueModeratorId:
					return entityData.UniqueModeratorId != _originalData.UniqueModeratorId;
					case ModeratorColumn.UserId:
					return entityData.UserId != _originalData.UserId;
					case ModeratorColumn.WebMeetingId:
					return entityData.WebMeetingId != _originalData.WebMeetingId;
					case ModeratorColumn.Omnovia_Room_Id:
					return entityData.Omnovia_Room_Id != _originalData.Omnovia_Room_Id;
					case ModeratorColumn.Seevogh_Meeting_Url:
					return entityData.Seevogh_Meeting_Url != _originalData.Seevogh_Meeting_Url;
					case ModeratorColumn.SeeVoghMeetingId:
					return entityData.SeeVoghMeetingId != _originalData.SeeVoghMeetingId;
			
				default:
					return false;
			}
		}
		
		/// <summary>
		/// Determines whether the data has changed from original.
		/// </summary>
		/// <returns>
		/// 	<c>true</c> if [has data changed]; otherwise, <c>false</c>.
		/// </returns>
		public bool HasDataChanged()
		{
			bool result = false;
			result = result || entityData.Id != _originalData.Id;
			result = result || entityData.WholesalerId != _originalData.WholesalerId;
			result = result || entityData.CustomerId != _originalData.CustomerId;
			result = result || entityData.PriCustomerNumber != _originalData.PriCustomerNumber;
			result = result || entityData.SecCustomerNumber != _originalData.SecCustomerNumber;
			result = result || entityData.ExternalModeratorNumber != _originalData.ExternalModeratorNumber;
			result = result || entityData.ModeratorCode != _originalData.ModeratorCode;
			result = result || entityData.PassCode != _originalData.PassCode;
			result = result || entityData.Description != _originalData.Description;
			result = result || entityData.DepartmentId != _originalData.DepartmentId;
			result = result || entityData.ModifiedBy != _originalData.ModifiedBy;
			result = result || entityData.CreatedDate != _originalData.CreatedDate;
			result = result || entityData.LastModified != _originalData.LastModified;
			result = result || entityData.Enabled != _originalData.Enabled;
			result = result || entityData.UniqueModeratorId != _originalData.UniqueModeratorId;
			result = result || entityData.UserId != _originalData.UserId;
			result = result || entityData.WebMeetingId != _originalData.WebMeetingId;
			result = result || entityData.Omnovia_Room_Id != _originalData.Omnovia_Room_Id;
			result = result || entityData.Seevogh_Meeting_Url != _originalData.Seevogh_Meeting_Url;
			result = result || entityData.SeeVoghMeetingId != _originalData.SeeVoghMeetingId;
			return result;
}	
		
		#endregion

        ///<summary>
        /// Returns a value indicating whether this instance is equal to a specified object.
        ///</summary>
        ///<param name="Object1">An object to compare to this instance.</param>
        ///<returns>true if Object1 is a <see cref="ModeratorBase"/> and has the same value as this instance; otherwise, false.</returns>
        public override bool Equals(object Object1)
        {
			if (Object1 is ModeratorBase)
				return Equals(this, (ModeratorBase)Object1);
			else
				return false;
        }

        /// <summary>
		/// Serves as a hash function for a particular type, suitable for use in hashing algorithms and data structures like a hash table.
        /// Provides a hash function that is appropriate for <see cref="ModeratorBase"/> class 
        /// and that ensures a better distribution in the hash table
        /// </summary>
        /// <returns>number (hash code) that corresponds to the value of an object</returns>
        public override int GetHashCode()
        {
			return this.Id.GetHashCode() ^ 
					this.WholesalerId.GetHashCode() ^ 
					this.CustomerId.GetHashCode() ^ 
					this.PriCustomerNumber.GetHashCode() ^ 
					this.SecCustomerNumber.GetHashCode() ^ 
					((this.ExternalModeratorNumber == null) ? string.Empty : this.ExternalModeratorNumber.ToString()).GetHashCode() ^ 
					this.ModeratorCode.GetHashCode() ^ 
					this.PassCode.GetHashCode() ^ 
					((this.Description == null) ? string.Empty : this.Description.ToString()).GetHashCode() ^ 
					this.DepartmentId.GetHashCode() ^ 
					((this.ModifiedBy == null) ? string.Empty : this.ModifiedBy.ToString()).GetHashCode() ^ 
					this.CreatedDate.GetHashCode() ^ 
					this.LastModified.GetHashCode() ^ 
					((this.Enabled == null) ? string.Empty : this.Enabled.ToString()).GetHashCode() ^ 
					this.UniqueModeratorId.GetHashCode() ^ 
					((this.UserId == null) ? string.Empty : this.UserId.ToString()).GetHashCode() ^ 
					((this.WebMeetingId == null) ? string.Empty : this.WebMeetingId.ToString()).GetHashCode() ^ 
					((this.Omnovia_Room_Id == null) ? string.Empty : this.Omnovia_Room_Id.ToString()).GetHashCode() ^ 
					((this.Seevogh_Meeting_Url == null) ? string.Empty : this.Seevogh_Meeting_Url.ToString()).GetHashCode() ^ 
					((this.SeeVoghMeetingId == null) ? string.Empty : this.SeeVoghMeetingId.ToString()).GetHashCode();
        }
		
		///<summary>
		/// Returns a value indicating whether this instance is equal to a specified object.
		///</summary>
		///<param name="toObject">An object to compare to this instance.</param>
		///<returns>true if toObject is a <see cref="ModeratorBase"/> and has the same value as this instance; otherwise, false.</returns>
		public virtual bool Equals(ModeratorBase toObject)
		{
			if (toObject == null)
				return false;
			return Equals(this, toObject);
		}
		
		
		///<summary>
		/// Determines whether the specified <see cref="ModeratorBase"/> instances are considered equal.
		///</summary>
		///<param name="Object1">The first <see cref="ModeratorBase"/> to compare.</param>
		///<param name="Object2">The second <see cref="ModeratorBase"/> to compare. </param>
		///<returns>true if Object1 is the same instance as Object2 or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
		public static bool Equals(ModeratorBase Object1, ModeratorBase Object2)
		{
			// both are null
			if (Object1 == null && Object2 == null)
				return true;

			// one or the other is null, but not both
			if (Object1 == null ^ Object2 == null)
				return false;
				
			bool equal = true;
			if (Object1.Id != Object2.Id)
				equal = false;
			if (Object1.WholesalerId != Object2.WholesalerId)
				equal = false;
			if (Object1.CustomerId != Object2.CustomerId)
				equal = false;
			if (Object1.PriCustomerNumber != Object2.PriCustomerNumber)
				equal = false;
			if (Object1.SecCustomerNumber != Object2.SecCustomerNumber)
				equal = false;
			if ( Object1.ExternalModeratorNumber != null && Object2.ExternalModeratorNumber != null )
			{
				if (Object1.ExternalModeratorNumber != Object2.ExternalModeratorNumber)
					equal = false;
			}
			else if (Object1.ExternalModeratorNumber == null ^ Object2.ExternalModeratorNumber == null )
			{
				equal = false;
			}
			if (Object1.ModeratorCode != Object2.ModeratorCode)
				equal = false;
			if (Object1.PassCode != Object2.PassCode)
				equal = false;
			if ( Object1.Description != null && Object2.Description != null )
			{
				if (Object1.Description != Object2.Description)
					equal = false;
			}
			else if (Object1.Description == null ^ Object2.Description == null )
			{
				equal = false;
			}
			if (Object1.DepartmentId != Object2.DepartmentId)
				equal = false;
			if ( Object1.ModifiedBy != null && Object2.ModifiedBy != null )
			{
				if (Object1.ModifiedBy != Object2.ModifiedBy)
					equal = false;
			}
			else if (Object1.ModifiedBy == null ^ Object2.ModifiedBy == null )
			{
				equal = false;
			}
			if (Object1.CreatedDate != Object2.CreatedDate)
				equal = false;
			if (Object1.LastModified != Object2.LastModified)
				equal = false;
			if ( Object1.Enabled != null && Object2.Enabled != null )
			{
				if (Object1.Enabled != Object2.Enabled)
					equal = false;
			}
			else if (Object1.Enabled == null ^ Object2.Enabled == null )
			{
				equal = false;
			}
			if (Object1.UniqueModeratorId != Object2.UniqueModeratorId)
				equal = false;
			if ( Object1.UserId != null && Object2.UserId != null )
			{
				if (Object1.UserId != Object2.UserId)
					equal = false;
			}
			else if (Object1.UserId == null ^ Object2.UserId == null )
			{
				equal = false;
			}
			if ( Object1.WebMeetingId != null && Object2.WebMeetingId != null )
			{
				if (Object1.WebMeetingId != Object2.WebMeetingId)
					equal = false;
			}
			else if (Object1.WebMeetingId == null ^ Object2.WebMeetingId == null )
			{
				equal = false;
			}
			if ( Object1.Omnovia_Room_Id != null && Object2.Omnovia_Room_Id != null )
			{
				if (Object1.Omnovia_Room_Id != Object2.Omnovia_Room_Id)
					equal = false;
			}
			else if (Object1.Omnovia_Room_Id == null ^ Object2.Omnovia_Room_Id == null )
			{
				equal = false;
			}
			if ( Object1.Seevogh_Meeting_Url != null && Object2.Seevogh_Meeting_Url != null )
			{
				if (Object1.Seevogh_Meeting_Url != Object2.Seevogh_Meeting_Url)
					equal = false;
			}
			else if (Object1.Seevogh_Meeting_Url == null ^ Object2.Seevogh_Meeting_Url == null )
			{
				equal = false;
			}
			if ( Object1.SeeVoghMeetingId != null && Object2.SeeVoghMeetingId != null )
			{
				if (Object1.SeeVoghMeetingId != Object2.SeeVoghMeetingId)
					equal = false;
			}
			else if (Object1.SeeVoghMeetingId == null ^ Object2.SeeVoghMeetingId == null )
			{
				equal = false;
			}
					
			return equal;
		}
		
		#endregion
		
		#region IComparable Members
		///<summary>
		/// Compares this instance to a specified object and returns an indication of their relative values.
		///<param name="obj">An object to compare to this instance, or a null reference (Nothing in Visual Basic).</param>
		///</summary>
		///<returns>A signed integer that indicates the relative order of this instance and obj.</returns>
		public virtual int CompareTo(object obj)
		{
			throw new NotImplementedException();
			//return this. GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]) .CompareTo(((ModeratorBase)obj).GetPropertyName(SourceTable.PrimaryKey.MemberColumns[0]));
		}
		
		/*
		// static method to get a Comparer object
        public static ModeratorComparer GetComparer()
        {
            return new ModeratorComparer();
        }
        */

        // Comparer delegates back to Moderator
        // Employee uses the integer's default
        // CompareTo method
        /*
        public int CompareTo(Item rhs)
        {
            return this.Id.CompareTo(rhs.Id);
        }
        */

/*
        // Special implementation to be called by custom comparer
        public int CompareTo(Moderator rhs, ModeratorColumn which)
        {
            switch (which)
            {
            	
            	
            	case ModeratorColumn.Id:
            		return this.Id.CompareTo(rhs.Id);
            		
            		                 
            	
            	
            	case ModeratorColumn.WholesalerId:
            		return this.WholesalerId.CompareTo(rhs.WholesalerId);
            		
            		                 
            	
            	
            	case ModeratorColumn.CustomerId:
            		return this.CustomerId.CompareTo(rhs.CustomerId);
            		
            		                 
            	
            	
            	case ModeratorColumn.PriCustomerNumber:
            		return this.PriCustomerNumber.CompareTo(rhs.PriCustomerNumber);
            		
            		                 
            	
            	
            	case ModeratorColumn.SecCustomerNumber:
            		return this.SecCustomerNumber.CompareTo(rhs.SecCustomerNumber);
            		
            		                 
            	
            	
            	case ModeratorColumn.ExternalModeratorNumber:
            		return this.ExternalModeratorNumber.CompareTo(rhs.ExternalModeratorNumber);
            		
            		                 
            	
            	
            	case ModeratorColumn.ModeratorCode:
            		return this.ModeratorCode.CompareTo(rhs.ModeratorCode);
            		
            		                 
            	
            	
            	case ModeratorColumn.PassCode:
            		return this.PassCode.CompareTo(rhs.PassCode);
            		
            		                 
            	
            	
            	case ModeratorColumn.Description:
            		return this.Description.CompareTo(rhs.Description);
            		
            		                 
            	
            	
            	case ModeratorColumn.DepartmentId:
            		return this.DepartmentId.CompareTo(rhs.DepartmentId);
            		
            		                 
            	
            	
            	case ModeratorColumn.ModifiedBy:
            		return this.ModifiedBy.CompareTo(rhs.ModifiedBy);
            		
            		                 
            	
            	
            	case ModeratorColumn.CreatedDate:
            		return this.CreatedDate.CompareTo(rhs.CreatedDate);
            		
            		                 
            	
            	
            	case ModeratorColumn.LastModified:
            		return this.LastModified.CompareTo(rhs.LastModified);
            		
            		                 
            	
            	
            	case ModeratorColumn.Enabled:
            		return this.Enabled.Value.CompareTo(rhs.Enabled.Value);
            		
            		                 
            	
            	
            	case ModeratorColumn.UniqueModeratorId:
            		return this.UniqueModeratorId.CompareTo(rhs.UniqueModeratorId);
            		
            		                 
            	
            	
            	case ModeratorColumn.UserId:
            		return this.UserId.Value.CompareTo(rhs.UserId.Value);
            		
            		                 
            	
            	
            	case ModeratorColumn.WebMeetingId:
            		return this.WebMeetingId.CompareTo(rhs.WebMeetingId);
            		
            		                 
            	
            	
            	case ModeratorColumn.Omnovia_Room_Id:
            		return this.Omnovia_Room_Id.Value.CompareTo(rhs.Omnovia_Room_Id.Value);
            		
            		                 
            	
            	
            	case ModeratorColumn.Seevogh_Meeting_Url:
            		return this.Seevogh_Meeting_Url.CompareTo(rhs.Seevogh_Meeting_Url);
            		
            		                 
            	
            	
            	case ModeratorColumn.SeeVoghMeetingId:
            		return this.SeeVoghMeetingId.CompareTo(rhs.SeeVoghMeetingId);
            		
            		                 
            }
            return 0;
        }
        */
	
		#endregion
		
		#region IComponent Members
		
		private ISite _site = null;

		/// <summary>
		/// Gets or Sets the site where this data is located.
		/// </summary>
		[XmlIgnore]
		[SoapIgnore]
		[Browsable(false)]
		public ISite Site
		{
			get{ return this._site; }
			set{ this._site = value; }
		}

		#endregion

		#region IDisposable Members
		
		/// <summary>
		/// Notify those that care when we dispose.
		/// </summary>
		[field:NonSerialized]
		public event System.EventHandler Disposed;

		/// <summary>
		/// Clean up. Nothing here though.
		/// </summary>
		public virtual void Dispose()
		{
			this.parentCollection = null;
			this.Dispose(true);
			GC.SuppressFinalize(this);
		}
		
		/// <summary>
		/// Clean up.
		/// </summary>
		protected virtual void Dispose(bool disposing)
		{
			if (disposing)
			{
				EventHandler handler = Disposed;
				if (handler != null)
					handler(this, EventArgs.Empty);
			}
		}
		
		#endregion
				
		#region IEntityKey<ModeratorKey> Members
		
		// member variable for the EntityId property
		private ModeratorKey _entityId;

		/// <summary>
		/// Gets or sets the EntityId property.
		/// </summary>
		[XmlIgnore]
		public virtual ModeratorKey EntityId
		{
			get
			{
				if ( _entityId == null )
				{
					_entityId = new ModeratorKey(this);
				}

				return _entityId;
			}
			set
			{
				if ( value != null )
				{
					value.Entity = this;
				}
				
				_entityId = value;
			}
		}
		
		#endregion
		
		#region EntityState
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false) , XmlIgnoreAttribute()]
		public override EntityState EntityState 
		{ 
			get{ return entityData.EntityState;	 } 
			set{ entityData.EntityState = value; } 
		}
		#endregion 
		
		#region EntityTrackingKey
		///<summary>
		/// Provides the tracking key for the <see cref="EntityLocator"/>
		///</summary>
		[XmlIgnore]
		public override string EntityTrackingKey
		{
			get
			{
				if(entityTrackingKey == null)
					entityTrackingKey = new System.Text.StringBuilder("Moderator")
					.Append("|").Append( this.Id.ToString()).ToString();
				return entityTrackingKey;
			}
			set
		    {
		        if (value != null)
                    entityTrackingKey = value;
		    }
		}
		#endregion 
		
		#region ToString Method
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return string.Format(System.Globalization.CultureInfo.InvariantCulture,
				"{21}{20}- Id: {0}{20}- WholesalerId: {1}{20}- CustomerId: {2}{20}- PriCustomerNumber: {3}{20}- SecCustomerNumber: {4}{20}- ExternalModeratorNumber: {5}{20}- ModeratorCode: {6}{20}- PassCode: {7}{20}- Description: {8}{20}- DepartmentId: {9}{20}- ModifiedBy: {10}{20}- CreatedDate: {11}{20}- LastModified: {12}{20}- Enabled: {13}{20}- UniqueModeratorId: {14}{20}- UserId: {15}{20}- WebMeetingId: {16}{20}- Omnovia_Room_Id: {17}{20}- Seevogh_Meeting_Url: {18}{20}- SeeVoghMeetingId: {19}{20}", 
				this.Id,
				this.WholesalerId,
				this.CustomerId,
				this.PriCustomerNumber,
				this.SecCustomerNumber,
				(this.ExternalModeratorNumber == null) ? string.Empty : this.ExternalModeratorNumber.ToString(),
				this.ModeratorCode,
				this.PassCode,
				(this.Description == null) ? string.Empty : this.Description.ToString(),
				this.DepartmentId,
				(this.ModifiedBy == null) ? string.Empty : this.ModifiedBy.ToString(),
				this.CreatedDate,
				this.LastModified,
				(this.Enabled == null) ? string.Empty : this.Enabled.ToString(),
				this.UniqueModeratorId,
				(this.UserId == null) ? string.Empty : this.UserId.ToString(),
				(this.WebMeetingId == null) ? string.Empty : this.WebMeetingId.ToString(),
				(this.Omnovia_Room_Id == null) ? string.Empty : this.Omnovia_Room_Id.ToString(),
				(this.Seevogh_Meeting_Url == null) ? string.Empty : this.Seevogh_Meeting_Url.ToString(),
				(this.SeeVoghMeetingId == null) ? string.Empty : this.SeeVoghMeetingId.ToString(),
				System.Environment.NewLine, 
				this.GetType());
		}
		
		#endregion ToString Method
		
		#region Inner data class
		
	/// <summary>
	///		The data structure representation of the 'Moderator' table.
	/// </summary>
	/// <remarks>
	/// 	This struct is generated by a tool and should never be modified.
	/// </remarks>
	[EditorBrowsable(EditorBrowsableState.Never)]
	[Serializable]
	internal protected class ModeratorEntityData : ICloneable
	{
		#region Variable Declarations
		private EntityState currentEntityState = EntityState.Added;
		
		#region Primary key(s)
			/// <summary>			
			/// ID : This table is changing to be used to house serveral different sets of codes/conferences per User.
			/// </summary>
			/// <remarks>Member of the primary key of the underlying table "Moderator"</remarks>
			public System.Int32 Id;
				
		#endregion
		
		#region Non Primary key(s)
		
		
		/// <summary>
		/// WholesalerID : 
		/// </summary>
		public System.String		  WholesalerId = string.Empty;
		
		/// <summary>
		/// CustomerID : 
		/// </summary>
		public System.Int32		  CustomerId = (int)0;
		
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		public System.String		  PriCustomerNumber = string.Empty;
		
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		public System.String		  SecCustomerNumber = string.Empty;
		
		/// <summary>
		/// ExternalModeratorNumber : 
		/// </summary>
		public System.String		  ExternalModeratorNumber = null;
		
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		public System.String		  ModeratorCode = string.Empty;
		
		/// <summary>
		/// PassCode : 
		/// </summary>
		public System.String		  PassCode = string.Empty;
		
		/// <summary>
		/// Description : The description of the conference, like a title.
		/// </summary>
		public System.String		  Description = null;
		
		/// <summary>
		/// DepartmentID : 
		/// </summary>
		public System.Int32		  DepartmentId = (int)0;
		
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		public System.String		  ModifiedBy = null;
		
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		public System.DateTime		  CreatedDate = DateTime.Now;
		
		/// <summary>
		/// LastModified : 
		/// </summary>
		public System.DateTime		  LastModified = DateTime.Now;
		
		/// <summary>
		/// Enabled : 
		/// </summary>
		public System.Boolean?		  Enabled = null;
		
		/// <summary>
		/// UniqueModeratorID : 
		/// </summary>
		public System.Guid		  UniqueModeratorId = Guid.NewGuid();
		
		/// <summary>
		/// UserID : 
		/// </summary>
		public System.Int32?		  UserId = null;
		
		/// <summary>
		/// WebMeetingID : Used to reference a Persony meeting id.
		/// </summary>
		public System.String		  WebMeetingId = null;
		
		/// <summary>
		/// omnovia_room_id : 
		/// </summary>
		public System.Int32?		  Omnovia_Room_Id = null;
		
		/// <summary>
		/// seevogh_meeting_url : 
		/// </summary>
		public System.String		  Seevogh_Meeting_Url = null;
		
		/// <summary>
		/// SeeVoghMeetingID : 
		/// </summary>
		public System.String		  SeeVoghMeetingId = null;
		#endregion
			
		#region Source Foreign Key Property
				
		private User _userIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="User"/>.
		/// </summary>
		/// <value>The source User for UserId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual User UserIdSource
      	{
            get { return this._userIdSource; }
            set { this._userIdSource = value; }
      	}
		private Department _departmentIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Department"/>.
		/// </summary>
		/// <value>The source Department for DepartmentId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Department DepartmentIdSource
      	{
            get { return this._departmentIdSource; }
            set { this._departmentIdSource = value; }
      	}
		private Customer _customerIdSource = null;
		
		/// <summary>
		/// Gets or sets the source <see cref="Customer"/>.
		/// </summary>
		/// <value>The source Customer for CustomerId.</value>
        [XmlIgnore()]
		[Browsable(false)]
		public virtual Customer CustomerIdSource
      	{
            get { return this._customerIdSource; }
            set { this._customerIdSource = value; }
      	}
		#endregion
		#endregion Variable Declarations
	
		#region Data Properties

		#region Moderator_FeatureCollection
		
		private TList<Moderator_Feature> _moderator_FeatureModeratorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _moderator_FeatureModeratorId
		/// </summary>	
		public TList<Moderator_Feature> Moderator_FeatureCollection
		{
			get
			{
				if (_moderator_FeatureModeratorId == null)
				{
				_moderator_FeatureModeratorId = new TList<Moderator_Feature>();
				}
	
				return _moderator_FeatureModeratorId;
			}
			set { _moderator_FeatureModeratorId = value; }
		}
		
		#endregion

		#region WelcomeKitRequestCollection
		
		private TList<WelcomeKitRequest> _welcomeKitRequestModeratorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _welcomeKitRequestModeratorId
		/// </summary>	
		public TList<WelcomeKitRequest> WelcomeKitRequestCollection
		{
			get
			{
				if (_welcomeKitRequestModeratorId == null)
				{
				_welcomeKitRequestModeratorId = new TList<WelcomeKitRequest>();
				}
	
				return _welcomeKitRequestModeratorId;
			}
			set { _welcomeKitRequestModeratorId = value; }
		}
		
		#endregion

		#region BridgeRequestCollection
		
		private TList<BridgeRequest> _bridgeRequestModeratorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _bridgeRequestModeratorId
		/// </summary>	
		public TList<BridgeRequest> BridgeRequestCollection
		{
			get
			{
				if (_bridgeRequestModeratorId == null)
				{
				_bridgeRequestModeratorId = new TList<BridgeRequest>();
				}
	
				return _bridgeRequestModeratorId;
			}
			set { _bridgeRequestModeratorId = value; }
		}
		
		#endregion

		#region Moderator_DnisCollection
		
		private TList<Moderator_Dnis> _moderator_DnisModeratorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _moderator_DnisModeratorId
		/// </summary>	
		public TList<Moderator_Dnis> Moderator_DnisCollection
		{
			get
			{
				if (_moderator_DnisModeratorId == null)
				{
				_moderator_DnisModeratorId = new TList<Moderator_Dnis>();
				}
	
				return _moderator_DnisModeratorId;
			}
			set { _moderator_DnisModeratorId = value; }
		}
		
		#endregion

		#region BridgeQueueCollection
		
		private TList<BridgeQueue> _bridgeQueueModeratorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _bridgeQueueModeratorId
		/// </summary>	
		public TList<BridgeQueue> BridgeQueueCollection
		{
			get
			{
				if (_bridgeQueueModeratorId == null)
				{
				_bridgeQueueModeratorId = new TList<BridgeQueue>();
				}
	
				return _bridgeQueueModeratorId;
			}
			set { _bridgeQueueModeratorId = value; }
		}
		
		#endregion

		#region RatedCdrCollection
		
		private TList<RatedCdr> _ratedCdrModeratorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ratedCdrModeratorId
		/// </summary>	
		public TList<RatedCdr> RatedCdrCollection
		{
			get
			{
				if (_ratedCdrModeratorId == null)
				{
				_ratedCdrModeratorId = new TList<RatedCdr>();
				}
	
				return _ratedCdrModeratorId;
			}
			set { _ratedCdrModeratorId = value; }
		}
		
		#endregion

		#region TicketCollection
		
		private TList<Ticket> _ticketModeratorId;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the relation _ticketModeratorId
		/// </summary>	
		public TList<Ticket> TicketCollection
		{
			get
			{
				if (_ticketModeratorId == null)
				{
				_ticketModeratorId = new TList<Ticket>();
				}
	
				return _ticketModeratorId;
			}
			set { _ticketModeratorId = value; }
		}
		
		#endregion

		#region DnisidDnisCollection_From_Moderator_Dnis
		
		private TList<Dnis> dnisidDnisCollection_From_Moderator_Dnis;
		
		/// <summary>
		///	Holds a collection of entity objects
		///	which are related to this object through the junction table dnisidDnisCollection_From_Moderator_Dnis
		/// </summary>	
		public TList<Dnis> DnisidDnisCollection_From_Moderator_Dnis
		{
			get
			{
				if (dnisidDnisCollection_From_Moderator_Dnis == null)
				{
				dnisidDnisCollection_From_Moderator_Dnis = new TList<Dnis>();
				}
	
				return dnisidDnisCollection_From_Moderator_Dnis;
			}
			set { dnisidDnisCollection_From_Moderator_Dnis = value; }
		}
		
		#endregion 

		#endregion Data Properties
		
		#region Clone Method

		/// <summary>
		/// Creates a new object that is a copy of the current instance.
		/// </summary>
		/// <returns>A new object that is a copy of this instance.</returns>
		public Object Clone()
		{
			ModeratorEntityData _tmp = new ModeratorEntityData();
						
			_tmp.Id = this.Id;
			
			_tmp.WholesalerId = this.WholesalerId;
			_tmp.CustomerId = this.CustomerId;
			_tmp.PriCustomerNumber = this.PriCustomerNumber;
			_tmp.SecCustomerNumber = this.SecCustomerNumber;
			_tmp.ExternalModeratorNumber = this.ExternalModeratorNumber;
			_tmp.ModeratorCode = this.ModeratorCode;
			_tmp.PassCode = this.PassCode;
			_tmp.Description = this.Description;
			_tmp.DepartmentId = this.DepartmentId;
			_tmp.ModifiedBy = this.ModifiedBy;
			_tmp.CreatedDate = this.CreatedDate;
			_tmp.LastModified = this.LastModified;
			_tmp.Enabled = this.Enabled;
			_tmp.UniqueModeratorId = this.UniqueModeratorId;
			_tmp.UserId = this.UserId;
			_tmp.WebMeetingId = this.WebMeetingId;
			_tmp.Omnovia_Room_Id = this.Omnovia_Room_Id;
			_tmp.Seevogh_Meeting_Url = this.Seevogh_Meeting_Url;
			_tmp.SeeVoghMeetingId = this.SeeVoghMeetingId;
			
			#region Source Parent Composite Entities
			if (this.UserIdSource != null)
				_tmp.UserIdSource = MakeCopyOf(this.UserIdSource) as User;
			if (this.DepartmentIdSource != null)
				_tmp.DepartmentIdSource = MakeCopyOf(this.DepartmentIdSource) as Department;
			if (this.CustomerIdSource != null)
				_tmp.CustomerIdSource = MakeCopyOf(this.CustomerIdSource) as Customer;
			#endregion
		
			#region Child Collections
			//deep copy nested objects
			if (this._moderator_FeatureModeratorId != null)
				_tmp.Moderator_FeatureCollection = (TList<Moderator_Feature>) MakeCopyOf(this.Moderator_FeatureCollection); 
			if (this._welcomeKitRequestModeratorId != null)
				_tmp.WelcomeKitRequestCollection = (TList<WelcomeKitRequest>) MakeCopyOf(this.WelcomeKitRequestCollection); 
			if (this._bridgeRequestModeratorId != null)
				_tmp.BridgeRequestCollection = (TList<BridgeRequest>) MakeCopyOf(this.BridgeRequestCollection); 
			if (this._moderator_DnisModeratorId != null)
				_tmp.Moderator_DnisCollection = (TList<Moderator_Dnis>) MakeCopyOf(this.Moderator_DnisCollection); 
			if (this._bridgeQueueModeratorId != null)
				_tmp.BridgeQueueCollection = (TList<BridgeQueue>) MakeCopyOf(this.BridgeQueueCollection); 
			if (this._ratedCdrModeratorId != null)
				_tmp.RatedCdrCollection = (TList<RatedCdr>) MakeCopyOf(this.RatedCdrCollection); 
			if (this._ticketModeratorId != null)
				_tmp.TicketCollection = (TList<Ticket>) MakeCopyOf(this.TicketCollection); 
			if (this.dnisidDnisCollection_From_Moderator_Dnis != null)
				_tmp.DnisidDnisCollection_From_Moderator_Dnis = (TList<Dnis>) MakeCopyOf(this.DnisidDnisCollection_From_Moderator_Dnis); 
			#endregion Child Collections
			
			//EntityState
			_tmp.EntityState = this.EntityState;
			
			return _tmp;
		}
		
		#endregion Clone Method
		
		/// <summary>
		///		Indicates state of object
		/// </summary>
		/// <remarks>0=Unchanged, 1=Added, 2=Changed</remarks>
		[BrowsableAttribute(false), XmlIgnoreAttribute()]
		public EntityState	EntityState
		{
			get { return currentEntityState;  }
			set { currentEntityState = value; }
		}
	
	}//End struct



		#endregion
		
				
		
		#region Events trigger
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ModeratorColumn"/> which has raised the event.</param>
		public void OnColumnChanging(ModeratorColumn column)
		{
			OnColumnChanging(column, null);
			return;
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ModeratorColumn"/> which has raised the event.</param>
		public void OnColumnChanged(ModeratorColumn column)
		{
			OnColumnChanged(column, null);
			return;
		} 
		
		
		/// <summary>
		/// Raises the <see cref="ColumnChanging" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ModeratorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanging(ModeratorColumn column, object value)
		{
			if(IsEntityTracked && EntityState != EntityState.Added && !EntityManager.TrackChangedEntities)
				EntityManager.StopTracking(entityTrackingKey);
				
			if (!SuppressEntityEvents)
			{
				ModeratorEventHandler handler = ColumnChanging;
				if(handler != null)
				{
					handler(this, new ModeratorEventArgs(column, value));
				}
			}
		}
		
		/// <summary>
		/// Raises the <see cref="ColumnChanged" /> event.
		/// </summary>
		/// <param name="column">The <see cref="ModeratorColumn"/> which has raised the event.</param>
		/// <param name="value">The changed value.</param>
		public void OnColumnChanged(ModeratorColumn column, object value)
		{
			if (!SuppressEntityEvents)
			{
				ModeratorEventHandler handler = ColumnChanged;
				if(handler != null)
				{
					handler(this, new ModeratorEventArgs(column, value));
				}
			
				// warn the parent list that i have changed
				OnEntityChanged();
			}
		} 
		#endregion
			
	} // End Class
	
	
	#region ModeratorEventArgs class
	/// <summary>
	/// Provides data for the ColumnChanging and ColumnChanged events.
	/// </summary>
	/// <remarks>
	/// The ColumnChanging and ColumnChanged events occur when a change is made to the value 
	/// of a property of a <see cref="Moderator"/> object.
	/// </remarks>
	public class ModeratorEventArgs : System.EventArgs
	{
		private ModeratorColumn column;
		private object value;
		
		///<summary>
		/// Initalizes a new Instance of the ModeratorEventArgs class.
		///</summary>
		public ModeratorEventArgs(ModeratorColumn column)
		{
			this.column = column;
		}
		
		///<summary>
		/// Initalizes a new Instance of the ModeratorEventArgs class.
		///</summary>
		public ModeratorEventArgs(ModeratorColumn column, object value)
		{
			this.column = column;
			this.value = value;
		}
		
		///<summary>
		/// The ModeratorColumn that was modified, which has raised the event.
		///</summary>
		///<value cref="ModeratorColumn" />
		public ModeratorColumn Column { get { return this.column; } }
		
		/// <summary>
        /// Gets the current value of the column.
        /// </summary>
        /// <value>The current value of the column.</value>
		public object Value{ get { return this.value; } }

	}
	#endregion
	
	///<summary>
	/// Define a delegate for all Moderator related events.
	///</summary>
	public delegate void ModeratorEventHandler(object sender, ModeratorEventArgs e);
	
	#region ModeratorComparer
		
	/// <summary>
	///	Strongly Typed IComparer
	/// </summary>
	public class ModeratorComparer : System.Collections.Generic.IComparer<Moderator>
	{
		ModeratorColumn whichComparison;
		
		/// <summary>
        /// Initializes a new instance of the <see cref="T:ModeratorComparer"/> class.
        /// </summary>
		public ModeratorComparer()
        {            
        }               
        
        /// <summary>
        /// Initializes a new instance of the <see cref="T:ModeratorComparer"/> class.
        /// </summary>
        /// <param name="column">The column to sort on.</param>
        public ModeratorComparer(ModeratorColumn column)
        {
            this.whichComparison = column;
        }

		/// <summary>
        /// Determines whether the specified <c cref="Moderator"/> instances are considered equal.
        /// </summary>
        /// <param name="a">The first <c cref="Moderator"/> to compare.</param>
        /// <param name="b">The second <c>Moderator</c> to compare.</param>
        /// <returns>true if objA is the same instance as objB or if both are null references or if objA.Equals(objB) returns true; otherwise, false.</returns>
        public bool Equals(Moderator a, Moderator b)
        {
            return this.Compare(a, b) == 0;
        }

		/// <summary>
        /// Gets the hash code of the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns></returns>
        public int GetHashCode(Moderator entity)
        {
            return entity.GetHashCode();
        }

        /// <summary>
        /// Performs a case-insensitive comparison of two objects of the same type and returns a value indicating whether one is less than, equal to, or greater than the other.
        /// </summary>
        /// <param name="a">The first object to compare.</param>
        /// <param name="b">The second object to compare.</param>
        /// <returns></returns>
        public int Compare(Moderator a, Moderator b)
        {
        	EntityPropertyComparer entityPropertyComparer = new EntityPropertyComparer(this.whichComparison.ToString());
        	return entityPropertyComparer.Compare(a, b);
        }

		/// <summary>
        /// Gets or sets the column that will be used for comparison.
        /// </summary>
        /// <value>The comparison column.</value>
        public ModeratorColumn WhichComparison
        {
            get { return this.whichComparison; }
            set { this.whichComparison = value; }
        }
	}
	
	#endregion
	
	#region ModeratorKey Class

	/// <summary>
	/// Wraps the unique identifier values for the <see cref="Moderator"/> object.
	/// </summary>
	[Serializable]
	[CLSCompliant(true)]
	public class ModeratorKey : EntityKeyBase
	{
		#region Constructors
		
		/// <summary>
		/// Initializes a new instance of the ModeratorKey class.
		/// </summary>
		public ModeratorKey()
		{
		}
		
		/// <summary>
		/// Initializes a new instance of the ModeratorKey class.
		/// </summary>
		public ModeratorKey(ModeratorBase entity)
		{
			this.Entity = entity;

			#region Init Properties

			if ( entity != null )
			{
				this.Id = entity.Id;
			}

			#endregion
		}
		
		/// <summary>
		/// Initializes a new instance of the ModeratorKey class.
		/// </summary>
		public ModeratorKey(System.Int32 _id)
		{
			#region Init Properties

			this.Id = _id;

			#endregion
		}
		
		#endregion Constructors

		#region Properties
		
		// member variable for the Entity property
		private ModeratorBase _entity;
		
		/// <summary>
		/// Gets or sets the Entity property.
		/// </summary>
		public ModeratorBase Entity
		{
			get { return _entity; }
			set { _entity = value; }
		}
		
		// member variable for the Id property
		private System.Int32 _id;
		
		/// <summary>
		/// Gets or sets the Id property.
		/// </summary>
		public System.Int32 Id
		{
			get { return _id; }
			set
			{
				if ( this.Entity != null )
					this.Entity.Id = value;
				
				_id = value;
			}
		}
		
		#endregion

		#region Methods
		
		/// <summary>
		/// Reads values from the supplied <see cref="IDictionary"/> object into
		/// properties of the current object.
		/// </summary>
		/// <param name="values">An <see cref="IDictionary"/> instance that contains
		/// the key/value pairs to be used as property values.</param>
		public override void Load(IDictionary values)
		{
			#region Init Properties

			if ( values != null )
			{
				Id = ( values["Id"] != null ) ? (System.Int32) EntityUtil.ChangeType(values["Id"], typeof(System.Int32)) : (int)0;
			}

			#endregion
		}

		/// <summary>
		/// Creates a new <see cref="IDictionary"/> object and populates it
		/// with the property values of the current object.
		/// </summary>
		/// <returns>A collection of name/value pairs.</returns>
		public override IDictionary ToDictionary()
		{
			IDictionary values = new Hashtable();

			#region Init Dictionary

			values.Add("Id", Id);

			#endregion Init Dictionary

			return values;
		}
		
		///<summary>
		/// Returns a String that represents the current object.
		///</summary>
		public override string ToString()
		{
			return String.Format("Id: {0}{1}",
								Id,
								System.Environment.NewLine);
		}

		#endregion Methods
	}
	
	#endregion	

	#region ModeratorColumn Enum
	
	/// <summary>
	/// Enumerate the Moderator columns.
	/// </summary>
	[Serializable]
	public enum ModeratorColumn : int
	{
		/// <summary>
		/// Id : This table is changing to be used to house serveral different sets of codes/conferences per User.
		/// </summary>
		[EnumTextValue("ID")]
		[ColumnEnum("ID", typeof(System.Int32), System.Data.DbType.Int32, true, true, false)]
		Id = 1,
		/// <summary>
		/// WholesalerId : 
		/// </summary>
		[EnumTextValue("WholesalerID")]
		[ColumnEnum("WholesalerID", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		WholesalerId = 2,
		/// <summary>
		/// CustomerId : 
		/// </summary>
		[EnumTextValue("CustomerID")]
		[ColumnEnum("CustomerID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		CustomerId = 3,
		/// <summary>
		/// PriCustomerNumber : 
		/// </summary>
		[EnumTextValue("PriCustomerNumber")]
		[ColumnEnum("PriCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 10)]
		PriCustomerNumber = 4,
		/// <summary>
		/// SecCustomerNumber : 
		/// </summary>
		[EnumTextValue("SecCustomerNumber")]
		[ColumnEnum("SecCustomerNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 6)]
		SecCustomerNumber = 5,
		/// <summary>
		/// ExternalModeratorNumber : 
		/// </summary>
		[EnumTextValue("ExternalModeratorNumber")]
		[ColumnEnum("ExternalModeratorNumber", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ExternalModeratorNumber = 6,
		/// <summary>
		/// ModeratorCode : 
		/// </summary>
		[EnumTextValue("ModeratorCode")]
		[ColumnEnum("ModeratorCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 16)]
		ModeratorCode = 7,
		/// <summary>
		/// PassCode : 
		/// </summary>
		[EnumTextValue("PassCode")]
		[ColumnEnum("PassCode", typeof(System.String), System.Data.DbType.AnsiString, false, false, false, 16)]
		PassCode = 8,
		/// <summary>
		/// Description : The description of the conference, like a title.
		/// </summary>
		[EnumTextValue("Description")]
		[ColumnEnum("Description", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		Description = 9,
		/// <summary>
		/// DepartmentId : 
		/// </summary>
		[EnumTextValue("DepartmentID")]
		[ColumnEnum("DepartmentID", typeof(System.Int32), System.Data.DbType.Int32, false, false, false)]
		DepartmentId = 10,
		/// <summary>
		/// ModifiedBy : 
		/// </summary>
		[EnumTextValue("ModifiedBy")]
		[ColumnEnum("ModifiedBy", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 100)]
		ModifiedBy = 11,
		/// <summary>
		/// CreatedDate : 
		/// </summary>
		[EnumTextValue("CreatedDate")]
		[ColumnEnum("CreatedDate", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		CreatedDate = 12,
		/// <summary>
		/// LastModified : 
		/// </summary>
		[EnumTextValue("LastModified")]
		[ColumnEnum("LastModified", typeof(System.DateTime), System.Data.DbType.DateTime, false, false, false)]
		LastModified = 13,
		/// <summary>
		/// Enabled : 
		/// </summary>
		[EnumTextValue("Enabled")]
		[ColumnEnum("Enabled", typeof(System.Boolean), System.Data.DbType.Boolean, false, false, true)]
		Enabled = 14,
		/// <summary>
		/// UniqueModeratorId : 
		/// </summary>
		[EnumTextValue("UniqueModeratorID")]
		[ColumnEnum("UniqueModeratorID", typeof(System.Guid), System.Data.DbType.Guid, false, false, false)]
		UniqueModeratorId = 15,
		/// <summary>
		/// UserId : 
		/// </summary>
		[EnumTextValue("UserID")]
		[ColumnEnum("UserID", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		UserId = 16,
		/// <summary>
		/// WebMeetingId : Used to reference a Persony meeting id.
		/// </summary>
		[EnumTextValue("WebMeetingID")]
		[ColumnEnum("WebMeetingID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		WebMeetingId = 17,
		/// <summary>
		/// Omnovia_Room_Id : 
		/// </summary>
		[EnumTextValue("omnovia_room_id")]
		[ColumnEnum("omnovia_room_id", typeof(System.Int32), System.Data.DbType.Int32, false, false, true)]
		Omnovia_Room_Id = 18,
		/// <summary>
		/// Seevogh_Meeting_Url : 
		/// </summary>
		[EnumTextValue("seevogh_meeting_url")]
		[ColumnEnum("seevogh_meeting_url", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 255)]
		Seevogh_Meeting_Url = 19,
		/// <summary>
		/// SeeVoghMeetingId : 
		/// </summary>
		[EnumTextValue("SeeVoghMeetingID")]
		[ColumnEnum("SeeVoghMeetingID", typeof(System.String), System.Data.DbType.AnsiString, false, false, true, 50)]
		SeeVoghMeetingId = 20
	}//End enum

	#endregion ModeratorColumn Enum

} // end namespace
